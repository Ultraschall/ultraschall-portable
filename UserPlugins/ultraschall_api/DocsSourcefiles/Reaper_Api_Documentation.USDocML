<USDocBloc>
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>1.Introduction</slug>
        <title>1 Introduction to ReaScript</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            ## ReaScript API

            REAPER provides an API (advanced programming interface) for users and third parties to create extended functionality. API functions can be called from a compiled C/C++ dynamic library that is loaded by REAPER, or at run-time by user-created ReaScripts that can be written using REAPER's own editor.

            ReaScripts can be written in EEL2, a specialized language that is also used to write JSFX; Lua, a popular scripting language; or Python, another scripting language. EEL and Lua are embedded within REAPER and require no additional downloads or settings. Python must be downloaded and installed separately, and enabled in REAPER preferences.

            A script named "\_\_startup.lua|.eel" will be started automatically by Reaper at startup. You can have both; Reaper will run \_\_startup.eel first, \_\_startup.lua second.
            This \_\_startup-script doesn't need to be registered into the actionlist of Reaper; it's pure existence in the scripts-folder of the resources-folder of Reaper is sufficient for it to be run.

            Learn more about ReaScript: [http://www.cockos.com/reaper/sdk/reascript/reascript.php](http://www.cockos.com/reaper/sdk/reascript/reascript.php).

            This documentation includes the functions provided by SWS: [sws-extension.org](https://www.sws-extension.org) as well as Julian Sader's plugin, that can be installed via ReaPack.

            The IDE in Reaper has some limitations, as every line must not exceed 4095 characters, or they will be split when the script is loaded the next time.
            It also tries to obey the script's chose character for indentation. So if every line begins with a tab, hitting tab will insert 4 spaces, if every line begins with spaces, hitting tab will insert 2 spaces.
            The IDE has known issues with Unicode-characters, especially when inserted via Alt+GR. So sometimes it's easier to use an external IDE/editor instead.

            The base-directory for files created from ReaScript can be read from the reaper.ini -> [REAPER] -> lastcwd=
            That means, if you create a new file without giving it a path, it will be created in the path set in lastcwd.

            Note: a lot of the functions in this document require 3rd-party-extensions. You can find and install them from here:  
                SWS: [https://www.sws-extension.org](https://www.sws-extension.org)  
                JS-extension: [https://forum.cockos.com/showthread.php?t=212174](Official Forum's-thread)  
                ReaPack: [https://reapack.com/](https://reapack.com/)  
                ReaImGui: [https://forum.cockos.com/showthread.php?t=250419](Official Forum's-thread)  
                Osara: [https://osara.reaperaccessibility.com/](https://osara.reaperaccessibility.com/)   
                ReaBlink: [https://github.com/ak5k/reablink/releases/](https://github.com/ak5k/reablink/releases/)  
                ReaLlm: [https://github.com/ak5k/reallm](https://github.com/ak5k/reallm)  
                ReaFab: [https://github.com/ak5k/reafab](https://github.com/ak5k/reafab)  
                ReaMCULive: [https://github.com/ak5k/reamculive/releases/](https://github.com/ak5k/reamculive/releases/)  
                PeloReaper: [https://github.com/pelori/PeloReaper](https://github.com/pelori/PeloReaper)  
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, reascript</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" prog_lang="cpp" spok_lang="en">
        <slug>2.1.cpp_desc</slug>
        <title>2.1 CPP Api-Description</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            ### Usage of the Reaper Api in C++
            Note: the C++ pure virtual interfaces used require the MSVC-compatible C++ ABI on Win32.  Sorry, mingw users.

            Reaper extensions: see [http://www.cockos.com/reaper/sdk/plugin/plugin.php](http://www.cockos.com/reaper/sdk/plugin/plugin.php) and reaper\_plugin.h.
            The API functions in this header can be retrieved using reaper\_plugin\_info\_t.GetFunc() or by using the Action "[developer] Write C++ API functions header" directly in Reaper.

            VST plugins: see [http://www.cockos.com/reaper/sdk/vst/vst\_ext.php](http://www.cockos.com/reaper/sdk/vst/vst_ext.php)
            The API functions in this header can be retrieved using audioMasterCallback.

            Because the API is dynamic, callers should never assume a function exists.
            Check that a non-NULL function pointer was returned before using it (unless
            loaded functions are verified using REAPERAPI\_LoadAPI(), see note below).

            New (4.76+) usage of this file:
           -  1) most source files should just #include "reaper\_plugin\_functions.h" as is.
           -  2) one file should #define REAPERAPI\_IMPLEMENT before including this file.
           -  3) the plug-in should call REAPERAPI\_LoadAPI(rec->GetFunc) from REAPER\_PLUGIN\_ENTRYPOINT
           -     and check the return value for errors (REAPERAPI\_LoadAPI will return 0 on success).

              By default, all functions listed in this file are loaded. This means that an older version
              of REAPER may not succeed in loading, and also it may bloat your plug-in. If you wish to only load
              needed functions, #define REAPERAPI\_MINIMAL and various #define REAPERAPI\_WANT_<functionname> lines
              before including this file. You must put these definitions where REAPERAPI\_IMPLEMENT is defined
              and you can optionally put them elsewhere (to detect needed REAPERAPI\_WANT\_xxx lines at compile-
              time rather than link-time).

        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, eel</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>2.2.eel_desc</slug>
        <title>2.2 EEL Api-Description</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            ### ReaScript/EEL API

            For information on the EEL2 language, please see the [EEL2 User Guide](https://www.cockos.com/EEL2/)

            ReaScript/EEL scripts can call API functions using functionname().

            Parameters that return information are effectively passed by reference, not value. If an API returns a string value, it will usually be as the first parameter.

            Examples:

            // function returning a single (scalar) value:  
            sec = [parse\_timestr("1:12")](#parse_timestr);  

            // function returning information in the first parameter (function returns void):  
            [GetProjectPath(#string)](#GetProjectPath);  

            // lower volume of track 3 by half:  
            tr = [GetTrack(0, 2)](#GetTrack);  
            [GetTrackUIVolPan(tr, vol, pan)](#GetTrackUIVolPan);  
            [SetMediaTrackInfo\_Value(tr, "D_VOL", vol*0.5)](#SetMediaTrackInfo_Value);  

            ReaScript/EEL can import functions from other reascripts using @import filename.eel -- note that only the file's functions will be imported, normal code in that file will not be executed.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, eel</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>2.3.python_desc</slug>
        <title>2.3 Python Api-Description</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            ### ReaScript/Python API

            ReaScript/Python requires a recent version of Python installed on this machine. Python is available from multiple sources [as a free download](http://www.python.org/download). After installing Python, REAPER may detect the Python dynamic library automatically. If not, you can enter the path in the ReaScript preferences page, at Options/Preferences/Plug-Ins/ReaScript.

            ReaScript/Python scripts can call API functions using RPR\_functionname().

            All parameters are passed by value, not reference. API functions that cannot return information in the parameter list will return a single value. API functions that can return any information in the parameter list will return a list of values; The first value in the list will be the function return value (unless the function is declared to return void).

            Examples:

                # function returning a single (scalar) value:  
                sec = RPR_parse_timestr("1:12")  

                # function returning information in the first parameter (function returns void):  
                (str) = RPR_GetProjectPath("", 512)  

                # lower volume of track 3 by half (RPR_GetTrackUIVolPan returns Bool):  
                tr = RPR_GetTrack(0, 2)  
                (ok, tr, vol, pan) = RPR_GetTrackUIVolPan(tr, 0, 0)  
                # this also works, if you only care about one of the returned values:  
                vol = RPR_GetTrackUIVolPan(tr, 0, 0)[2]  
                RPR_SetMediaTrackInfo_Value(tr, "D_VOL", vol*0.5)  

            You can create and save modules of useful functions that you can import into other ReaScripts. For example, if you create a file called reascript\_utility.py that contains the function helpful\_function(), you can import that file into any Python ReaScript with the line:

                import reascript_utility

            and call the function by using:

                reascript_utility.helpful_function()

            Note that ReaScripts must explicitly import the REAPER python module, even if the script is imported into another ReaScript:

                from reaper_python import *

        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, python</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>2.4.lua_desc</slug>
        <title>2.4 Lua Api-Description</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            ### ReaScript/Lua API

            ReaScript/Lua scripts can call API functions using reaper.functionname().

            Some functions return multiple values. In many cases, some function parameters are ignored, especially when similarly named parameters are present in the returned values.

            Examples:

            -- function returning a single (scalar) value:  
            sec = reaper.[parse\_timestr("1:12")](#parse_timestr)  

            -- function with an ignored (dummy) parameter:  
            path = reaper.[GetProjectPath("")](#GetProjectPath)  

            -- lower volume of track 3 by half:  
            tr = reaper.[GetTrack(0, 2)](#GetTrack)  
            ok, vol, pan = reaper.[GetTrackUIVolPan(tr, 0, 0)](#GetTrackUIVolPan)  
            reaper.[SetMediaTrackInfo\_Value(tr, "D_VOL", vol*0.5)](#SetMediaTrackInfo_Value)  

            ReaScript/Lua can import functions from other ReaScripts using require. If the files are not being found, it is probably a path problem (remember that lua paths are wildcard patterns, not just directory listings, see details [here](http://www.lua.org/pil/8.1.html)). 
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, lua</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>3.Datatypes_used_in_this_document</slug>
        <title>3 Datatypes used in this document</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
                ### Datatypes used in this document

                 boolean - accepts only true or false as values  
                 optional boolean - a boolean, that can be given, but is not required  
                 number - can be integer, double or a floating-point-number  
                 optional number - a number, that can be given, but is not required  
                 integer - only integer numbers allowed  
                 reaper.array - a special array, that Reaper provides  
                 string - a string of characters/text  
                 optional string - a string, that can be given, but is not required  

                 AudioAccessor - Audio Accessor object for a track or a media-item  
                 BR\_Envelope \(BR\) - an envelope-object, created from a track or take-envelope  
                 HWND - a window  
                 IReaperControlSurface - a ControlSurface, e.g. OSC-devices  
                 joystick\_device - a joystick-device  
                 KbdSectionInfo - Keyboard Section Info,
                 -        0, Main  
                 -        100, Main (alt recording)  
                 -        32060, MIDI Editor  
                 -        32061, MIDI Event List Editor  
                 -        32062, MIDI Inline Editor  
                 -        32063, Media Explorer  
                 PCM\_source - the audiosource of a MediaItem  
                 ReaProject - a project within Reaper; 0 for current open project\(-tab\); in [EnumProjects](#EnumProjects), it is an object, not a number!  
                 RprMidiTake \(FNG\) - ReaperMidiTake as object  
                 RprMidiNote \(FNG\) - RprMidiNote as object  
                 MediaTrack - a Reaper-Track as object  
                 MediaItem - a Reaper-MediaItem like audio,video, Midi, etc as object  
                 MediaItem\_Take - a take within a MediaItem as object  
                 TrackEnvelope - an envelope of a track as object  
                 WDL\_FastString\(S&M\) - a different kind of a string, made into a Reaper-object  

                 deviceHDC - get it using function [JS\_GDI_GetWindowDC](#JS_GDI_GetWindowDC)
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, eel</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddMediaItemToTrack</slug>
        <title>AddMediaItemToTrack</title>
        <functioncall prog_lang="cpp">MediaItem* item AddMediaItemToTrack(MediaTrack* tr)</functioncall>
        <functioncall prog_lang="eel">MediaItem item AddMediaItemToTrack(MediaTrack tr)</functioncall>
        <functioncall prog_lang="lua">MediaItem item = reaper.AddMediaItemToTrack(MediaTrack tr)</functioncall>
        <functioncall prog_lang="python">MediaItem item = RPR_AddMediaItemToTrack(MediaTrack tr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Creates a new media item. It will be empty and therefore not be shown in the arrange-view, until you associate a mediafile(audio, picture, video, etc) or a length and position to it using SetMediaItemInfo_Value
        </description>
        <retvals>
            MediaItem item - the newly created MediaItem-object
        </retvals>
        <parameters>
            MediaTrack tr - tracknumber(zero based), with 0 for track 1, 1 for track 2, etc.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, mediaitem, item, track, empty</tags>
        <changelog>
        </changelog>
        <linked_to desc="see also:">
            Reaper:SetMediaItemInfo_Value
                   for setting attributes of new item, like length, position
        </linked_to>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddProjectMarker</slug>
        <title>AddProjectMarker</title>
        <functioncall prog_lang="cpp">int AddProjectMarker(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx)</functioncall>
        <functioncall prog_lang="eel">int AddProjectMarker(ReaProject proj, bool isrgn, pos, rgnend, "name", int wantidx)</functioncall>
        <functioncall prog_lang="lua">integer index = reaper.AddProjectMarker(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_AddProjectMarker(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Creates a new Projectmarker/Region.
            Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.
            
            It will not create a marker, when at the same position is a marker with the exact name(a bug maybe?)
        </description>
        <retvals>
            integer index - the shown-number of the newly created marker/region
        </retvals>
        <parameters>
            ReaProject proj - the project, in which to add the new marker; use 0 for the current project
            boolean isrgn - true, if it shall be a region; false, if a normal marker
            number pos - the position of the newly created marker/region in seconds
            number rgnend - if the marker is a region, this is the end of the region in seconds
            string name - the shown name of the marker
            integer wantidx - the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, region, marker, name, shownnumber, pos, project, add</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddProjectMarker2</slug>
        <title>AddProjectMarker2</title>
        <functioncall prog_lang="cpp">int AddProjectMarker2(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx, int color)</functioncall>
        <functioncall prog_lang="eel">int AddProjectMarker2(ReaProject proj, bool isrgn, pos, rgnend, "name", int wantidx, int color)</functioncall>
        <functioncall prog_lang="lua">integer index = reaper.AddProjectMarker2(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx, integer color)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_AddProjectMarker2(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx, Int color)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Returns the shown-number of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000
            
            It will not create a marker, when at the same position is a marker with the exact name(a bug maybe?)
        </description>
        <retvals>
            integer index - the shown-number of the newly created marker/region
        </retvals>
        <linked_to desc="see also:">
            Reaper:ColorToNative
                   to convert color-value to a native(Mac, Win, Linux) colors
        </linked_to>
        <parameters>
            ReaProject proj - the project, in which to add the new marker; use 0 for the current project; 
            boolean isrgn - true, if it shall be a region; false, if a normal marker
            number pos - the position of the newly created marker/region in seconds
            number rgnend - if the marker is a region, this is the end of the region in seconds
            string name - the shown name of the marker
            integer wantidx - the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given.
            integer color - the color of the marker
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, region, marker, name, shownnumber, pos, project, add</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddRemoveReaScript</slug>
        <title>AddRemoveReaScript</title>
        <functioncall prog_lang="cpp">int AddRemoveReaScript(bool add, int sectionID, const char* scriptfn, bool commit)</functioncall>
        <functioncall prog_lang="eel">int AddRemoveReaScript(bool add, int sectionID, "scriptfn", bool commit)</functioncall>
        <functioncall prog_lang="lua">integer command_id = reaper.AddRemoveReaScript(boolean add, integer sectionID, string scriptfn, boolean commit)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_AddRemoveReaScript(Boolean add, Int sectionID, String scriptfn, Boolean commit)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Adds a ReaScript (returns the new command ID, or 0 if failed) or removes a ReaScript
            Returns >0 on success. 
            Use commit==true when adding/removing a single script. 
            Committing means, that Reaper stores the Reascript-information into the reaper-kb.ini for permanent use. 
            It will be committed at Reaper's exit as well, but if Reaper crashes before exiting properly, your added
            script might get lost. When adding many Reascripts to Reaper, setting commit to false might help prevail 
            ressources, as you don't rewrite the reaper-kb.ini file over and over again. However, if you only add a 
            few scripts, this might not be of importance to you.
            So when bulk adding/removing multiple scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.
            
            The commandID returned, might change, when adding this script into another Reaper-installation. 
            To be sure to use the right command-id, use ReverseNamedCommandLookup() to get the ActionCommandID, which will never change, until you remove the script.

            If you want to add a script to several sections, you need to add them individually, by calling the function again with the changed section-number.
        </description>
        <linked_to desc="see also:">
            Reaper:ReverseNamedCommandLookup
                   to get ActionCommandID-string of the script
        </linked_to>
        <retvals>
            integer command_id - the command ID for this script.
        </retvals>
        <parameters>
            boolean add - true, if it shall be added, false if it shall be removed
            integer sectionID - the section, in which this script shall appear(e.g. in the Show Actions-Dialog)
                              -   0, Main
                              -   100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
                              -   32060, MIDI Editor
                              -   32061, MIDI Event List Editor
                              -   32062, MIDI Inline Editor
                              -   32063, Media Explorer
            string scriptfn - the filename of the Reascript to be added
            boolean commit - true, if it shall be committed, false, if you want to add new scripts first. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags>helperfunctions, reascript, lua, python, eel, add, remove, commandid</tags>
        <changelog>
            Reaper 6.54 - fixed bug, were scripts could be added but not removed when using / as separator
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddTakeToMediaItem</slug>
        <title>AddTakeToMediaItem</title>
        <functioncall prog_lang="cpp">MediaItem_Take* AddTakeToMediaItem(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take AddTakeToMediaItem(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take = reaper.AddTakeToMediaItem(MediaItem item)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take take = RPR_AddTakeToMediaItem(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            creates a new take in an item
        </description>
        <retvals>
            MediaItem_Take take - the newly created MediaItem_Take-object
        </retvals>
        <parameters>
            MediaItem item - a MediaItem-object, in which you want to add the new take
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, mediaitem, item, track, empty, take</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddTempoTimeSigMarker</slug>
        <title>AddTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">bool AddTempoTimeSigMarker(ReaProject* proj, double timepos, double bpm, int timesig_num, int timesig_denom, bool lineartempochange)</functioncall>
        <functioncall prog_lang="eel">bool AddTempoTimeSigMarker(ReaProject proj, timepos, bpm, int timesig_num, int timesig_denom, bool lineartempochange)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.AddTempoTimeSigMarker(ReaProject proj, number timepos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempochange)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_AddTempoTimeSigMarker(ReaProject proj, Float timepos, Float bpm, Int timesig_num, Int timesig_denom, Boolean lineartempochange)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.
        </description>
        <deprecated since_when="Reaper 5.62" alternative="SetTempoTimeSigMarker with ptidx=-1(available since at least Reaper 5.62)"/>
        <retvals>
            boolean retval - true, if adding was successful; false, if not
        </retvals>
        <parameters>
            ReaProject proj - the project in which to add the TempoTimesigMarker, 0 for the current project; 
            number timepos - the position in seconds
            number bpm - the speed in bpm
            integer timesig_num - timesignature number : timesig_num/timesig_denom, e.g. 3/4
            integer timesig_denom - timesignature denominator : timesig_num/timesig_denom, e.g. 3/4
            boolean lineartempochange - true, linear tempo change, false not
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountTempoTimeSigMarkers
                   counts the number of tempo/time signature markers
            Reaper:DeleteTempoTimeSigMarker
                   removes a tempo/time signature-marker
            Reaper:GetTempoTimeSigMarker
                   gets the attributes of a tempo/time signature-marker
            Reaper:SetTempoTimeSigMarker
                   adds/sets a tempo/time signature marker
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Time Signature Markers
        </chapter_context>
        <tags>markermanagement, timesignature, tempo, marker, add</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>adjustZoom</slug>
        <title>adjustZoom</title>
        <functioncall prog_lang="cpp">void adjustZoom(double amt, int forceset, bool doupd, int centermode)</functioncall>
        <functioncall prog_lang="eel">adjustZoom(amt, int forceset, bool doupd, int centermode)</functioncall>
        <functioncall prog_lang="lua">reaper.adjustZoom(number amt, integer forceset, boolean doupd, integer centermode)</functioncall>
        <functioncall prog_lang="python">RPR_adjustZoom(Float amt, Int forceset, Boolean doupd, Int centermode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets horizontal zoom in track view.
        </description>
        <parameters>
            number amt - the zoom factor, positive values=zoom in, negative values=zoom out, 0=no zoom
            integer forceset - forces one amt-zoomfactor(non zero) or allows repeatable zoom-in/zoomout(0)
            boolean doupd - true, updates the track-view instantly; false, or only when mouse hovers over trackview
            integer centermode - decides, what shall be in the center of the view. The following are available:
                -  -1, default selection, as set in the reaper-prefs, 
                -   0, edit-cursor or playcursor(if it's in the current zoomfactor of the view during playback/recording) in center,
                -   1, keeps edit-cursor in center of zoom
                -   2, keeps center of view in the center during zoom
                -   3, keeps in center of zoom, what is beneath the mousecursor
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, view, zoom, center</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AnyTrackSolo</slug>
        <title>AnyTrackSolo</title>
        <functioncall prog_lang="cpp">bool AnyTrackSolo(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">bool AnyTrackSolo(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">boolean solostate = reaper.AnyTrackSolo(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_AnyTrackSolo(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns, whether any of the tracks is solo in Project proj
        </description>
        <retvals>
            boolean solostate - true if any track is solo; false if not. Covers all solo-states(solo in place, ignore routing, exclusive solo, solo defeat).
        </retvals>
        <parameters>
            ReaProject proj - the project to be checked for. 0 for current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, states, solo</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>APIExists</slug>
        <title>APIExists</title>
        <functioncall prog_lang="cpp">bool APIExists(const char* function_name)</functioncall>
        <functioncall prog_lang="eel">bool APIExists(function_name")</functioncall>
        <functioncall prog_lang="lua">boolean func_exists = reaper.APIExists(string function_name)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_APIExists(String function_name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns true if function_name exists in the REAPER API
        </description>
        <retvals>
            boolean func_exists - true, if function_name exists, false if not
        </retvals>
        <parameters>
            string function_name - the name of the function you want to check the existence for
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>api, exists, check, helper</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>APITest</slug>
        <title>APITest</title>
        <functioncall prog_lang="cpp">void APITest()</functioncall>
        <functioncall prog_lang="eel">APITest()</functioncall>
        <functioncall prog_lang="lua">reaper.APITest()</functioncall>
        <functioncall prog_lang="python">RPR_APITest()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Displays a message window with "Hello World", if the API was successfully called.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>api, test, check, hello world</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ApplyNudge</slug>
        <title>ApplyNudge</title>
        <functioncall prog_lang="cpp">bool ApplyNudge(ReaProject* project, int nudgeflag, int nudgewhat, int nudgeunits, double value, bool reverse, int copies)</functioncall>
        <functioncall prog_lang="eel">bool ApplyNudge(ReaProject project, int nudgeflag, int nudgewhat, int nudgeunits, value, bool reverse, int copies)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.ApplyNudge(ReaProject project, integer nudgeflag, integer nudgewhat, integer nudgeunits, number value, boolean reverse, integer copies)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_ApplyNudge(ReaProject project, Int nudgeflag, Int nudgewhat, Int nudgeunits, Float value, Boolean reverse, Int copies)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Nudges elements like items, cursor, contents, etc to or by a value you want. Nudges only selected mediaitems.
        </description>
        <retvals>
            boolean retval - true, if it worked; false, if it didn't
        </retvals>
        <parameters>
            ReaProject project - the project, in which to nudge; 0 for the current project
            integer nudgeflag - the way to nudge
                - &1, set to value(otherwise nudge by values)
                - &2, snap
            integer nudgewhat - what to nudge
                - 0, position
                - 1, left trim
                - 2, left edge
                - 3, right edge
                - 4, contents
                - 5, duplicate
                - 6, editcursor
            integer nudgeunits - the unit, in which to nudge
                - 0, ms
                - 1, seconds
                - 2, grid
                - 3, 256th notes
                - ...
                - 15, whole notes
                - 16, measures.beats (1.15 = 1 measure + 1.5 beats)
                - 17, samples
                - 18, frames
                - 19, pixels 
                - 20, item lengths
                - 21, item selections
            number value - amount to nudge by, or value to set to(depending on the settings in nudgeflag and the unit in nudgeunits)
            boolean reverse - in nudge mode: true nudges left; right doesn't nudge to left
            integer copies - in nudge duplicate mode, number of copies (otherwise ignored)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>arrangeviewmanagement, nudge, snap, value, units, trim, position, content, duplicate, editcursor, ms, grid, pixels, frames, samples, measures, beats, length, selection</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Audio_Init</slug>
        <title>Audio_Init</title>
        <functioncall prog_lang="cpp">void Audio_Init()</functioncall>
        <functioncall prog_lang="eel">Audio_Init()</functioncall>
        <functioncall prog_lang="lua">reaper.Audio_Init()</functioncall>
        <functioncall prog_lang="python">RPR_Audio_Init()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            open all audio and MIDI devices, if not open

            So if the audio-device(s) are closed, you can use this to try to (re)-activate them.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags>audio, midi, audiomanagement, open, devices</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Audio_IsPreBuffer</slug>
        <title>Audio_IsPreBuffer</title>
        <functioncall prog_lang="cpp">int Audio_IsPreBuffer()</functioncall>
        <functioncall prog_lang="eel">int Audio_IsPreBuffer()</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.Audio_IsPreBuffer()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_Audio_IsPreBuffer()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            is in pre-buffer? threadsafe
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Audio_IsRunning</slug>
        <title>Audio_IsRunning</title>
        <functioncall prog_lang="cpp">int Audio_IsRunning()</functioncall>
        <functioncall prog_lang="eel">int Audio_IsRunning()</functioncall>
        <functioncall prog_lang="lua">integer audio_running = reaper.Audio_IsRunning()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_Audio_IsRunning()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            is audio running at all? threadsafe

            It is an indicator, if the current audio-device is closed(0) or not(1).
        </description>
        <retvals>
            integer audio_running - 0, audio is not running; 1, audio is running
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags>audio, midi, audiomanagement, running, devices</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Audio_Quit</slug>
        <title>Audio_Quit</title>
        <functioncall prog_lang="cpp">void Audio_Quit()</functioncall>
        <functioncall prog_lang="eel">Audio_Quit()</functioncall>
        <functioncall prog_lang="lua">reaper.Audio_Quit()</functioncall>
        <functioncall prog_lang="python">RPR_Audio_Quit()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            close all audio and MIDI devices, if open

            This sets all audio-devices to closed.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags>audio, midi, audiomanagement, quit, devices</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AudioAccessorStateChanged</slug>
        <title>AudioAccessorStateChanged</title>
        <functioncall prog_lang="cpp">bool AudioAccessorStateChanged(AudioAccessor* accessor)</functioncall>
        <functioncall prog_lang="eel">bool AudioAccessorStateChanged(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="lua">boolean changed_samples = reaper.AudioAccessorStateChanged(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_AudioAccessorStateChanged(AudioAccessor accessor)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description>
            Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. 
        </description>
        <linked_to desc="see also:">
            Reaper:AudioAccessorStateChanged
                   returns, if audioaccessor has changed
            Reaper:AudioAccessorValidateState
                   to get validation-state of an AudioAccessor
            Reaper:CreateTakeAudioAccessor
                   to create an AudioAccessor for take
            Reaper:CreateTrackAudioAccessor
                   to create an AudioAccessor for track
            Reaper:DestroyAudioAccessor
                   to destroy an AudioAccessor
            Reaper:GetAudioAccessorEndTime
                   to get endtime of an AudioAccessor
            Reaper:GetAudioAccessorSamples
                   to get samples of an AudioAccessor
        </linked_to>
        <retvals>
            boolean changed_samples - true, underlying samples changed; false, underlying samples didn't change
        </retvals>
        <parameters>
            AudioAccessor accessor - the AudioAccessor, whose sample-statechange you want to get
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Accessor
        </chapter_context>
        <tags>audio, accessor, get, statechange</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AudioAccessorUpdate</slug>
        <title>AudioAccessorUpdate</title>
        <functioncall prog_lang="cpp">void AudioAccessorUpdate(AudioAccessor* accessor)</functioncall>
        <functioncall prog_lang="eel">AudioAccessorUpdate(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="lua">reaper.AudioAccessorUpdate(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="python">RPR_AudioAccessorUpdate(AudioAccessor accessor)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description>
            Force the accessor to reload its state from the underlying track or media item take. 
        </description>
        <parameters>
            AudioAccessor accessor - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:CreateTakeAudioAccessor
                   for creating a take-audio-accessor
            Reaper:CreateTrackAudioAccessor
                   for creating a track-audio-accessor
            Reaper:DestroyAudioAccessor
                   to destroy an audio-accessor
            Reaper:AudioAccessorStateChanged
                   to get, if an audioaccessor has changed
            Reaper:GetAudioAccessorStartTime
                   to get the audioaccessor-starttime
            Reaper:GetAudioAccessorEndTime
                   to get the audioaccessor-endtime
            Reaper:GetAudioAccessorSamples
                   to get the audioaccessor-samples
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Accessor
        </chapter_context>
        <tags>audio, accessor, update, mediatrack, mediaitemtake</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AudioAccessorValidateState</slug>
        <title>AudioAccessorValidateState</title>
        <functioncall prog_lang="cpp">bool AudioAccessorValidateState(AudioAccessor* accessor)</functioncall>
        <functioncall prog_lang="eel">bool AudioAccessorValidateState(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="lua">boolean statechange = reaper.AudioAccessorValidateState(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_AudioAccessorValidateState(AudioAccessor accessor)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.
        </description>
        <retvals>
            boolean statechange - true, if state has changed; false, if state hasn't changed
        </retvals>
        <parameters>
            AudioAccessor accessor - the AudioAccessor for a MediaTrack or a MediaItem_Take
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Accessor
        </chapter_context>
        <tags>audiomanagement, validate, audio, accessor, item, take</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BypassFxAllTracks</slug>
        <title>BypassFxAllTracks</title>
        <functioncall prog_lang="cpp">void BypassFxAllTracks(int bypass)</functioncall>
        <functioncall prog_lang="eel">BypassFxAllTracks(int bypass)</functioncall>
        <functioncall prog_lang="lua">reaper.BypassFxAllTracks(integer bypass)</functioncall>
        <functioncall prog_lang="python">RPR_BypassFxAllTracks(Int bypass)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Does bypassing of the fx of all tracks.
        </description>
        <parameters>
            integer bypass - -1, bypass all if not all bypassed,otherwise unbypass all
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, track, bypass, fx</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CalcMediaSrcLoudness</slug>
        <title>CalcMediaSrcLoudness</title>
        <functioncall prog_lang="cpp">int retval = CalcMediaSrcLoudness(PCM_source* mediasource)</functioncall>
        <functioncall prog_lang="eel">int retval = CalcMediaSrcLoudness(PCM_source mediasource)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.CalcMediaSrcLoudness(PCM_source mediasource)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CalcMediaSrcLoudness(PCM_source mediasource)</functioncall>
        <requires>
            Reaper=6.64
        </requires>
        <description prog_lang="*">
            Calculates loudness statistics of media via dry run render. Statistics will be displayed to the user; call GetSetProjectInfo_String("RENDER_STATS") to retrieve via API. Returns 1 if loudness was calculated successfully, -1 if user canceled the dry run render.
        </description>
        <retvals>
            integer retval - 1, calculation was successful; -1, calculation was unsuccessful/canceled by the user
        </retvals>
        <parameters>
            PCM_source source - the source to calculate the loudness from
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>audio management, calculated, loudness, source, lufs, rms, peak, true peak</tags>
        <changelog>
          Reaper 6.69 - fixed return value-bug
          Reaper 6.64 - added to the API
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CalculateNormalization</slug>
        <title>CalculateNormalization</title>
        <functioncall prog_lang="cpp">double retval = CalculateNormalization(PCM_source* source, int normalizeTo, double normalizeTarget, double normalizeStart, double normalizeEnd)</functioncall>
        <functioncall prog_lang="eel">double retval = CalculateNormalization(PCM_source source, int normalizeTo, normalizeTarget, normalizeStart, normalizeEnd)</functioncall>
        <functioncall prog_lang="lua">number normalized_value = reaper.CalculateNormalization(PCM_source source, integer normalizeTo, number normalizeTarget, number normalizeStart, number normalizeEnd)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_CalculateNormalization(PCM_source source, Int normalizeTo, Float normalizeTarget, Float normalizeStart, Float normalizeEnd)</functioncall>
        <requires>
            Reaper=6.44
        </requires>
        <description prog_lang="*">
            Calculate normalize adjustment for source media. normalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max. normalizeTarget: dBFS or LUFS value. normalizeStart, normalizeEnd: time bounds within source media for normalization calculation. If normalizationStart=0 and normalizationEnd=0, the full duration of the media will be used for the calculation
        </description>
        <retvals>
            number normalized_value - the normalized value
        </retvals>
        <parameters>
            PCM_source source - the source to be normalized
            integer normalizeTo - the normalizing mode
                                - 0, LUFS-I 
                                - 1, RMS-I 
                                - 2, peak
                                - 3, true peak
                                - 4, LUFS-M max
                                - 5, LUFS-S max
            number normalizeTarget - the target to normalize to, dBFS or LUFS value
            number normalizeStart - the start-position from where to normalize; 0, for start of source
            number normalizeEnd - the endposition to where to normalize; 0, for end of source
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>audio management, calculated, loudness, source, lufs, rms, peak, true peak</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ClearAllRecArmed</slug>
        <title>ClearAllRecArmed</title>
        <functioncall prog_lang="cpp">void ClearAllRecArmed()</functioncall>
        <functioncall prog_lang="eel">ClearAllRecArmed()</functioncall>
        <functioncall prog_lang="lua">reaper.ClearAllRecArmed()</functioncall>
        <functioncall prog_lang="python">RPR_ClearAllRecArmed()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Clears all armed states of all tracks.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, rec, arm, state, clear, off</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ClearConsole</slug>
        <title>ClearConsole</title>
        <functioncall prog_lang="cpp">void ClearConsole()</functioncall>
        <functioncall prog_lang="eel">ClearConsole()</functioncall>
        <functioncall prog_lang="lua">reaper.ClearConsole()</functioncall>
        <functioncall prog_lang="python">RPR_ClearConsole()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Clear the ReaScript console.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <linked_to desc="see also:">
            Reaper:ShowConsoleMsg
                   for printing messages into the ReaScript-console
        </linked_to>
        <chapter_context>
            Api-Helper-Functions
            ReaScript Console
        </chapter_context>
        <tags>helperfunctions, console, clear, reaconsole</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ClearPeakCache</slug>
        <title>ClearPeakCache</title>
        <functioncall prog_lang="cpp">void ClearPeakCache()</functioncall>
        <functioncall prog_lang="eel">ClearPeakCache()</functioncall>
        <functioncall prog_lang="lua">reaper.ClearPeakCache()</functioncall>
        <functioncall prog_lang="python">RPR_ClearPeakCache()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            resets the global peak caches
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Peaks/Waveforms
        </chapter_context>
        <tags>helperfunctions, peak, cache, clear</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ColorFromNative</slug>
        <title>ColorFromNative</title>
        <functioncall prog_lang="cpp">void ColorFromNative(int col, int* rOut, int* gOut, int* bOut)</functioncall>
        <functioncall prog_lang="eel">ColorFromNative(int col, int &r, int &g, int &b)</functioncall>
        <functioncall prog_lang="lua">integer r, integer g, integer b = reaper.ColorFromNative(integer col)</functioncall>
        <functioncall prog_lang="python">(Int col, Int rOut, Int gOut, Int bOut) = RPR_ColorFromNative(col, rOut, gOut, bOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Extract RGB values from an OS dependent color.

            As Reaper treats colors differently on Mac and Windows, you should always use ColorFromNative and ColorToNative.
        </description>
        <retvals>
            integer r - the value for red, from 0 to 255
            integer g - the value for green, from 0 to 255
            integer b - the value for blue, from 0 to 255
        </retvals>
        <parameters>
            integer col - the colorvalue to convert from
        </parameters>
        <linked_to desc="see also:">
            Reaper:ColorToNative
                   for converting r-g-b-values to a native-color value
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags>colormanagement, native, from, conversion</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ColorToNative</slug>
        <title>ColorToNative</title>
        <functioncall prog_lang="cpp">int ColorToNative(int r, int g, int b)</functioncall>
        <functioncall prog_lang="eel">int ColorToNative(int r, int g, int b)</functioncall>
        <functioncall prog_lang="lua">integer col = reaper.ColorToNative(integer r, integer g, integer b)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_ColorToNative(Int r, Int g, Int b)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. 
            As Reaper treats colors differently on Mac and Windows, you should always use ColorFromNative and ColorToNative.

            When using the returned colorvalue, you need to add |0x1000000 at the end of it, like ColorToNative(20,30,40)|0x1000000.
        </description>
        <retvals>
            integer col - the correct colorvalue, fitting to your system.
        </retvals>
        <parameters>
            integer r - the value for red, from 0 to 255
            integer g - the value for green, from 0 to 255
            integer b - the value for blue, from 0 to 255
        </parameters>
        <linked_to desc="see also:">
            Reaper:ColorFromNative
                   for converting a native color-calue into its r-g-b-representation
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags>colormanagement, native, from, conversion</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountActionShortcuts</slug>
        <title>CountActionShortcuts</title>
        <functioncall prog_lang="cpp">int retval = CountActionShortcuts(KbdSectionInfo* section, int cmdID)</functioncall>
        <functioncall prog_lang="eel">int retval = CountActionShortcuts(KbdSectionInfo section, int cmdID)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.CountActionShortcuts(KbdSectionInfo section, integer cmdID)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountActionShortcuts(KbdSectionInfo section, Int cmdID)</functioncall>
        <requires>
            Reaper=6.72
        </requires>
        <description>
            Returns the number of shortcuts that exist for the given command ID.
        </description>
        <retvals>
            integer retval - the number of available shortcuts for this action
        </retvals>
        <parameters>
            KbdSectionInfo section - the section, in which the action is located, use retval of SectionFromUniqueID for this parameter
                    -0, Main
                    -100, Main (alt recording)
                    -32060, MIDI Editor
                    -32061, MIDI Event List Editor
                    -32062, MIDI Inline Editor
                    -32063, Media Explorer
            integer cmdID - the action command-id of the action, whose shortcuts you want to count
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetActionShortcutDesc
                   for getting the description of the shortcut
            Reaper:DeleteActionShortcut
                   for deleting a shortcut
            Reaper:DoActionShortcutDialog
                   for opening the add shortcut-dialog
            Reaper:SectionFromUniqueID
                   get the section, that you want to pass to this function
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Shortcuts
        </chapter_context>
        <tags>shortcuts, count</tags>
        <changelog>
          Reaper 6.71 - exposed to ReaScript-API
          Reaper 6.72 - section allows now the section-numbers as parameter section
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountAutomationItems</slug>
        <title>CountAutomationItems</title>
        <functioncall prog_lang="cpp">int CountAutomationItems(TrackEnvelope* env)</functioncall>
        <functioncall prog_lang="eel">int CountAutomationItems(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="lua">integer ai_count = reaper.CountAutomationItems(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountAutomationItems(TrackEnvelope env)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Returns the number of automation items on this envelope.
        </description>
        <retvals>
            integer ai_count - number of automation items
        </retvals>
        <parameters>
            TrackEnvelope env - the envelope-object for the envelope-lane
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetSetAutomationItemInfo
                   for setting attributes of an automation-item
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Automation Items
        </chapter_context>
        <tags>envelopemanagement, automation items, count, envelopes</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountEnvelopePoints</slug>
        <title>CountEnvelopePoints</title>
        <functioncall prog_lang="cpp">int CountEnvelopePoints(TrackEnvelope* envelope)</functioncall>
        <functioncall prog_lang="eel">int CountEnvelopePoints(TrackEnvelope envelope)</functioncall>
        <functioncall prog_lang="lua">integer count_envpoints = reaper.CountEnvelopePoints(TrackEnvelope envelope)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountEnvelopePoints(TrackEnvelope envelope)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description>
            Returns the number of points in the envelope.
        </description>
        <retvals>
            integer count_envpoints - the number of envelope-points in the envelopeobject envelope
        </retvals>
        <parameters>
            TrackEnvelope envelope - the TrackEnvelope-object, in which to count for the envelope-points
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountEnvelopePointsEx
                   to count envelope-points of envelopes and automation-items
            Reaper:GetEnvelopePoint
                   to get envelope-points in envelopes only
            Reaper:SetEnvelopePoint
                   to set envelope-points in envelopes only
            Reaper:InsertEnvelopePoint
                   to insert an envelope-point into envelopes only
            Reaper:DeleteEnvelopePoint
                   to delete an envelope-point into envelopes only
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags>envelopemanagement, envelopes, count, points</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountEnvelopePointsEx</slug>
        <title>CountEnvelopePointsEx</title>
        <functioncall prog_lang="cpp">int CountEnvelopePointsEx(TrackEnvelope* envelope, int autoitem_idx)</functioncall>
        <functioncall prog_lang="eel">int CountEnvelopePointsEx(TrackEnvelope envelope, int autoitem_idx)</functioncall>
        <functioncall prog_lang="lua">integer count_envpoints = reaper.CountEnvelopePointsEx(TrackEnvelope envelope, integer autoitem_idx)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountEnvelopePointsEx(TrackEnvelope envelope, Int autoitem_idx)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description>
            Returns the number of points in the envelope.
            autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
            For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
            even if the automation item is trimmed so that not all points are visible.
            Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
        </description>
        <retvals>
            integer count_envpoints - the number of envelope-points in the envelopeobject envelope
        </retvals>
        <parameters>
            TrackEnvelope envelope - the TrackEnvelope-object, in which to count for the envelope-points
            integer autoitem_idx - -1, for the underlying envelope, 0, for the first automation item on the envelope, etc.
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountEnvelopePoints
                   to count envelope-points of envelopes only
            Reaper:GetEnvelopePointEx
                   to get envelope-points in envelopes and automation-items
            Reaper:SetEnvelopePointEx
                   to set envelope-points in envelopes and automation-items
            Reaper:InsertEnvelopePointEx
                   to insert an envelope-point into envelopes and automation-items
            Reaper:DeleteEnvelopePointEx
                   to delete an envelope-point into envelopes and automation-items
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags>envelopemanagement, envelopes, count, points, automation items</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountMediaItems</slug>
        <title>CountMediaItems</title>
        <functioncall prog_lang="cpp">int CountMediaItems(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int CountMediaItems(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer count_items = reaper.CountMediaItems(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountMediaItems(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            count the number of items in the project (proj=0 for active project)
        </description>
        <retvals>
            integer count_items - the number of MediaItems in a project
        </retvals>
        <parameters>
            ReaProject proj - the project, in which to count for the number of items; 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, count, mediaitems</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountProjectMarkers</slug>
        <title>CountProjectMarkers</title>
        <functioncall prog_lang="cpp">int CountProjectMarkers(ReaProject* proj, int* num_markersOut, int* num_regionsOut)</functioncall>
        <functioncall prog_lang="eel">int CountProjectMarkers(ReaProject proj, int &num_markers, int &num_regions)</functioncall>
        <functioncall prog_lang="lua">integer retval, integer num_markers, integer num_regions = reaper.CountProjectMarkers(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, Int num_markersOut, Int num_regionsOut) = RPR_CountProjectMarkers(proj, num_markersOut, num_regionsOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns the number of all markers and regions, as well as all markers and all regions in a project.
            num_markersOut and num_regionsOut may be NULL.
        </description>
        <retvals>
            integer retval - all markers and regions in the project
            integer num_markers - the number of markers in the project
            integer num_regions - the number of regions in the project
        </retvals>
        <parameters>
            ReaProject proj - the project, in which to count the markers; 0 for current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, count, all, markers, regions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountSelectedMediaItems</slug>
        <title>CountSelectedMediaItems</title>
        <functioncall prog_lang="cpp">int CountSelectedMediaItems(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int CountSelectedMediaItems(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer count_sel_items = reaper.CountSelectedMediaItems(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountSelectedMediaItems(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            count the number of selected items in the project (proj=0 for active project)
        </description>
        <retvals>
            integer count_sel_items - the number of selected items in the project
        </retvals>
        <parameters>
            ReaProject proj - the project, in which to count for the selected mediaitems; 0 for the current project.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, count, selected, mediaitem</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountSelectedTracks</slug>
        <title>CountSelectedTracks</title>
        <functioncall prog_lang="cpp">int CountSelectedTracks(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int CountSelectedTracks(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer count_sel_tracks = reaper.CountSelectedTracks(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountSelectedTracks(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Count the number of selected tracks in the project. 
            This function ignores the master track, see CountSelectedTracks2 if you need master-track as well.
        </description>
        <retvals>
            integer count_sel_tracks - the number of selected tracks in the project
        </retvals>
        <parameters>
            ReaProject proj - the project in which to count the selected tracks; 0 for current project. 
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountSelectedTracks2
                   to count selected tracks including the master track
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, track, selected, count</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountSelectedTracks2</slug>
        <title>CountSelectedTracks2</title>
        <functioncall prog_lang="cpp">int CountSelectedTracks2(ReaProject* proj, bool wantmaster)</functioncall>
        <functioncall prog_lang="eel">int CountSelectedTracks2(ReaProject proj, bool wantmaster)</functioncall>
        <functioncall prog_lang="lua">integer count_sel_tracks = reaper.CountSelectedTracks2(ReaProject proj, boolean wantmaster)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountSelectedTracks2(ReaProject proj, Boolean wantmaster)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Count the number of selected tracks in the project.
            if you set wantmaster to true, it will include the master track as well.
        </description>
        <retvals>
            integer count_sel_tracks - the number of selected tracks in your project
        </retvals>
        <parameters>
            ReaProject proj - the number of the project in which to count the selected tracks; 0 for current project. 
            boolean wantmaster - true, if you want to count the master-track as well; false, if you don't want to count it
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, selected, track, master, count</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTakeEnvelopes</slug>
        <title>CountTakeEnvelopes</title>
        <functioncall prog_lang="cpp">int CountTakeEnvelopes(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int CountTakeEnvelopes(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer count_take_env = reaper.CountTakeEnvelopes(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountTakeEnvelopes(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Counts take-envelopes.
        </description>
        <retvals>
            integer count_take_env - number of envelopes of this take of a mediaitem
        </retvals>
        <parameters>
            MediaItem_Take take - the mediaitem-object for a certain take
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTakeEnvelope
                   to get take-envelopes
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, take, envelope</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTakes</slug>
        <title>CountTakes</title>
        <functioncall prog_lang="cpp">int CountTakes(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">int CountTakes(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">integer count_takes = reaper.CountTakes(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountTakes(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            count the number of takes in the item
        </description>
        <retvals>
            integer count_takes - the number of takes in a mediaitem
        </retvals>
        <parameters>
            MediaItem item - the mediaitem to count the takes of
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, count, takes, mediaitem</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTCPFXParms</slug>
        <title>CountTCPFXParms</title>
        <functioncall prog_lang="cpp">int CountTCPFXParms(ReaProject* project, MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int CountTCPFXParms(ReaProject project, MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer count_params = reaper.CountTCPFXParms(ReaProject project, MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountTCPFXParms(ReaProject project, MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Count the number of FX parameter knobs displayed on the track control panel.
        </description>
        <retvals>
            integer count_params - the number of FX-parameter-knobs 
        </retvals>
        <parameters>
            ReaProject project - the project, in which to count the knobs
            MediaTrack track - the track of which to count the knobs
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, count, fx, parameter, knobs, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTempoTimeSigMarkers</slug>
        <title>CountTempoTimeSigMarkers</title>
        <functioncall prog_lang="cpp">int CountTempoTimeSigMarkers(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int CountTempoTimeSigMarkers(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer count_tempo_markers = reaper.CountTempoTimeSigMarkers(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountTempoTimeSigMarkers(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Count the number of tempo/time signature markers in the project.
        </description>
        <retvals>
            integer count_tempo_markers - the number of tempo/time-signature markers in the project.
        </retvals>
        <parameters>
            ReaProject proj - project number; 0 for the current project. 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTempoTimeSigMarker
                   to get a tempo/time-signature marker
            Reaper:SetTempoTimeSigMarker
                   sets a tempo/time-signature-marker
            Reaper:DeleteTempoTimeSigMarker
                   deletes a tempo/time-signature-marker
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Time Signature Markers
        </chapter_context>
        <tags>markermanagement, tempo, timesignature, count</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTrackEnvelopes</slug>
        <title>CountTrackEnvelopes</title>
        <functioncall prog_lang="cpp">int CountTrackEnvelopes(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int CountTrackEnvelopes(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer count_track_envs = reaper.CountTrackEnvelopes(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountTrackEnvelopes(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Counts the number of track-envelopes of a certain track.
        </description>
        <retvals>
            integer count_track_envs - the number of track-envelopes in a track
        </retvals>
        <parameters>
            MediaTrack track - the object of the track to count it's envelopes
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackEnvelope
                   to get a track-envelope
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Track Envelopes
        </chapter_context>
        <tags>envelopemanagement, count, track-envelopes, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTrackMediaItems</slug>
        <title>CountTrackMediaItems</title>
        <functioncall prog_lang="cpp">int CountTrackMediaItems(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int CountTrackMediaItems(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer count_trackitems = reaper.CountTrackMediaItems(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountTrackMediaItems(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            count the number of items in the track
        </description>
        <retvals>
            integer count_trackitems - the number of mediaitems in the track
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack to count the items of
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, track, count, mediaitem</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTracks</slug>
        <title>CountTracks</title>
        <functioncall prog_lang="cpp">int CountTracks(ReaProject* projOptional)</functioncall>
        <functioncall prog_lang="eel">int CountTracks(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer count_tracks = reaper.CountTracks(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CountTracks(ReaProject projOptional)</functioncall>
        <requires>
            Reaper=6.20
        </requires>
        <description prog_lang="*">
            count the number of tracks in the project (proj=0 for active project)
        </description>
        <retvals>
            integer count_tracks - the number of tracks in the project, excluding the master-track.
        </retvals>
        <parameters>
            ReaProject proj - the project in which to count the tracks; 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, count, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CreateNewMIDIItemInProj</slug>
        <title>CreateNewMIDIItemInProj</title>
        <functioncall prog_lang="cpp">MediaItem* CreateNewMIDIItemInProj(MediaTrack* track, double starttime, double endtime, const bool* qnInOptional)</functioncall>
        <functioncall prog_lang="eel">MediaItem CreateNewMIDIItemInProj(MediaTrack track, starttime, endtime, optional bool qnIn)</functioncall>
        <functioncall prog_lang="lua">MediaItem item = reaper.CreateNewMIDIItemInProj(MediaTrack track, number starttime, number endtime, optional boolean qnIn)</functioncall>
        <functioncall prog_lang="python">MediaItem item = RPR_CreateNewMIDIItemInProj(MediaTrack track, Float starttime, Float endtime, const bool qnInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.
        </description>
        <retvals>
            MediaItem item - the newly created MIDI-mediaitem.
        </retvals>
        <parameters>
            MediaTrack track - the object of the track, in which to create this mediaitem
            number starttime - starttime of the item in seconds, unless qnIn is set to true
            number endtime - endtime of the item in seconds, unless qnIn is set to true
            boolean qnIn - unknown; can be set to true, or false or be omitted
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, midi, track, mediaitem</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CreateTakeAudioAccessor</slug>
        <title>CreateTakeAudioAccessor</title>
        <functioncall prog_lang="cpp">AudioAccessor* CreateTakeAudioAccessor(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">AudioAccessor CreateTakeAudioAccessor(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">AudioAccessor acc = reaper.CreateTakeAudioAccessor(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">AudioAccessor retval = RPR_CreateTakeAudioAccessor(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description>
            Create an audio accessor object for this take. Must only call from the main thread. 
        </description>
        <retvals>
            AudioAccessor acc - the newly created AudioAccessor
        </retvals>
        <parameters>
            MediaItem_Take take - the take from a MediaItem-object, of which you want to create a new AudioAccessor
        </parameters>
        <linked_to desc="see also:">
            Reaper:CreateTrackAudioAccessor
                   gets a track audioaccessor
            Reaper:DestroyAudioAccessor
                   destroys an audioaccessor
            Reaper:AudioAccessorStateChanged
                   gets the state-change of an audioaccessor
            Reaper:GetAudioAccessorStartTime
                   get audioaccessor-starttime
            Reaper:GetAudioAccessorEndTime
                   get audioaccessor-endtime
            Reaper:GetAudioAccessorSamples
                   get audioaccessor-samples
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Accessor
        </chapter_context>
        <tags>audiomanagement, audio, accessor, create, item, take</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CreateTrackAudioAccessor</slug>
        <title>CreateTrackAudioAccessor</title>
        <functioncall prog_lang="cpp">AudioAccessor* CreateTrackAudioAccessor(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">AudioAccessor CreateTrackAudioAccessor(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">AudioAccessor acc = reaper.CreateTrackAudioAccessor(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">AudioAccessor retval = RPR_CreateTrackAudioAccessor(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description>
            Create an audio accessor object for this track. Must only call from the main thread.
        </description>
        <retvals>
            AudioAccessor acc - the newly created AudioAccessor for this MediaTrack
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, of which you want to create an AudioAccessor
        </parameters>
        <linked_to desc="see also:">
            Reaper:CreateTakeAudioAccessor
                   create a take audioaccessor
            Reaper:DestroyAudioAccessor
                   destroys an audioaccessor
            Reaper:AudioAccessorStateChanged
                   gets the state-change of an audioaccessor
            Reaper:GetAudioAccessorStartTime
                   get audioaccessor-starttime
            Reaper:GetAudioAccessorEndTime
                   get audioaccessor-endtime
            Reaper:GetAudioAccessorSamples
                   get audioaccessor-samples
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Accessor
        </chapter_context>
        <tags>audiomanagement, audio, accessor, create, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CreateTrackSend</slug>
        <title>CreateTrackSend</title>
        <functioncall prog_lang="cpp">int CreateTrackSend(MediaTrack* tr, MediaTrack* desttrInOptional)</functioncall>
        <functioncall prog_lang="eel">int CreateTrackSend(MediaTrack tr, MediaTrack desttrIn)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.CreateTrackSend(MediaTrack tr, MediaTrack desttrIn)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CreateTrackSend(MediaTrack tr, MediaTrack desttrInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index).

            For ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).
        </description>
        <retvals>
            integer retval - the id of the new HWOut or Send created. HWOut and Send have their own individual index-numbering.
        </retvals>
        <parameters>
            MediaTrack tr - the MediaTrack in which to create the send/hwout
            MediaTrack desttrIn - destination track input; 
                                - a MediaTrack-object, creates a new send to tr from MediaTrack-object; 
                                - nil(or no MediaTrack-object), creates a new hardware-output
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackNumSends
                   get number of send of a track
            Reaper:GetSetTrackSendInfo
                   gets and sets attributes for a track-send
            Reaper:GetSetTrackSendInfo_String
                   gets sets additional string-attributes for metadata of track-sends
            Reaper:GetTrackSendInfo_Value
                   gets attributes of a track-send
            Reaper:RemoveTrackSend
                   removes a track-send
            Reaper:SetTrackSendInfo_Value
                   sets attributes of a track-send
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>trackmanagement, create, routing, hwout, hardware out, send, receive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_FlushUndo</slug>
        <title>CSurf_FlushUndo</title>
        <functioncall prog_lang="cpp">void CSurf_FlushUndo(bool force)</functioncall>
        <functioncall prog_lang="eel">CSurf_FlushUndo(bool force)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_FlushUndo(boolean force)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_FlushUndo(Boolean force)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            call this to force flushing of the undo states after using CSurf_On*Change()
        </description>
        <parameters>
            boolean force - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Surfaces
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_GetTouchState</slug>
        <title>CSurf_GetTouchState</title>
        <functioncall prog_lang="cpp">bool CSurf_GetTouchState(MediaTrack* trackid, int isPan)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_GetTouchState(MediaTrack trackid, int isPan)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CSurf_GetTouchState(MediaTrack trackid, integer isPan)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_CSurf_GetTouchState(MediaTrack trackid, Int isPan)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack trackid - 
            integer isPan - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_GoEnd</slug>
        <title>CSurf_GoEnd</title>
        <functioncall prog_lang="cpp">void CSurf_GoEnd()</functioncall>
        <functioncall prog_lang="eel">CSurf_GoEnd()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_GoEnd()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_GoEnd()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Moves the cursor to the end of the last item in the project.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, move, cursor, end, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_GoStart</slug>
        <title>CSurf_GoStart</title>
        <functioncall prog_lang="cpp">void CSurf_GoStart()</functioncall>
        <functioncall prog_lang="eel">CSurf_GoStart()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_GoStart()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_GoStart()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Moves the cursor to the start of the project.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, move, cursor, start, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_NumTracks</slug>
        <title>CSurf_NumTracks</title>
        <functioncall prog_lang="cpp">int CSurf_NumTracks(bool mcpView)</functioncall>
        <functioncall prog_lang="eel">int CSurf_NumTracks(bool mcpView)</functioncall>
        <functioncall prog_lang="lua">integer count_tracks = reaper.CSurf_NumTracks(boolean mcpView)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CSurf_NumTracks(Boolean mcpView)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            counts the number of tracks, or the number of visible tracks, when mcpView is set to true.
        </description>
        <retvals>
            integer count_tracks - number of tracks
        </retvals>
        <parameters>
            boolean mcpView - true, only return the number of tracks visible in MCP; false, count all tracks, incl. invisible
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, count, tracks, visible, invisible</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnArrow</slug>
        <title>CSurf_OnArrow</title>
        <functioncall prog_lang="cpp">void CSurf_OnArrow(int whichdir, bool wantzoom)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnArrow(int whichdir, bool wantzoom)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnArrow(integer whichdir, boolean wantzoom)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnArrow(Int whichdir, Boolean wantzoom)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Zoom or scroll the Arrangeview vertically. 
            The stepsize with scrolling is track by track.
        </description>
        <parameters>
            integer whichdir - into which (zoom-)direction to change
                     -   0, move arrangeview upward(one track each step)/zoom in
                     -   1, move arrangeview downward(one track each step)/zoom out
            boolean wantzoom - true, adjust vertical zoom; false, adjust vertical scrolling
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, zoom, vertical, scroll, arrange, view</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnFwd</slug>
        <title>CSurf_OnFwd</title>
        <functioncall prog_lang="cpp">void CSurf_OnFwd(int seekplay)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnFwd(int seekplay)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnFwd(integer seekplay)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnFwd(Int seekplay)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Moves editcursor forward, and optionally with seekplay.
        </description>
        <parameters>
            integer seekplay - how to move the editcursor forward
                     -   0, move cursor forward in small steps. Stepsize depends on horizontal zoomfactor.
                     -   1, move cursor forward, in half-second steps when stopped; when playing it jumps ahead with playing restarting at editcursor
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, cursor, forward, jump, seekplay</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnFXChange</slug>
        <title>CSurf_OnFXChange</title>
        <functioncall prog_lang="cpp">bool CSurf_OnFXChange(MediaTrack* trackid, int en)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnFXChange(MediaTrack trackid, int en)</functioncall>
        <functioncall prog_lang="lua">boolean active_fxchain = reaper.CSurf_OnFXChange(MediaTrack trackid, integer en)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_CSurf_OnFXChange(MediaTrack trackid, Int en)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/toggles activation of FX-Chain.
        </description>
        <retvals>
            boolean active_fxchain - true, if FX-chain is activated; false, if FX-chain is deactivated
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack, whose FX-chain you want to de-/activate
            integer en - activation state of FX-chain
                -   -1, toggle FX-chain on/off
                -    0, set FX-chain off
                -    1, set FX-chain on
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, fx, set, toggle, chain</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnInputMonitorChange</slug>
        <title>CSurf_OnInputMonitorChange</title>
        <functioncall prog_lang="cpp">int CSurf_OnInputMonitorChange(MediaTrack* trackid, int monitor)</functioncall>
        <functioncall prog_lang="eel">int CSurf_OnInputMonitorChange(MediaTrack trackid, int monitor)</functioncall>
        <functioncall prog_lang="lua">integer inp_mon_state = reaper.CSurf_OnInputMonitorChange(MediaTrack trackid, integer monitor)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CSurf_OnInputMonitorChange(MediaTrack trackid, Int monitor)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            sets rec-monitoring of a specific track.
        </description>
        <retvals>
            integer inp_mon_state - the new input-monitor-state (refer to parameter monitor for description)
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack, of which you want to toggle the monitor-button
            integer monitor - monitor-input-state
                -   -1, monitor input on(tape auto style) (can be set with negative values, and 2 as well)
                -    0, monitor off (can be set with 3 and higher as well)
                -    1, monitor input on
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, rec, toggle, monitoring</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnInputMonitorChangeEx</slug>
        <title>CSurf_OnInputMonitorChangeEx</title>
        <functioncall prog_lang="cpp">int CSurf_OnInputMonitorChangeEx(MediaTrack* trackid, int monitor, bool allowgang)</functioncall>
        <functioncall prog_lang="eel">int CSurf_OnInputMonitorChangeEx(MediaTrack trackid, int monitor, bool allowgang)</functioncall>
        <functioncall prog_lang="lua">integer inp_mon_state = reaper.CSurf_OnInputMonitorChangeEx(MediaTrack trackid, integer monitor, boolean allowgang)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CSurf_OnInputMonitorChangeEx(MediaTrack trackid, Int monitor, Boolean allowgang)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets monitor-input-state. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            integer inp_mon_state - the new input-monitor-state (refer to parameter monitor for description)
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack, whose monitor-input-state you want to set
            integer monitor - monitor-input-state
                -   -1, monitor input on(tape auto style) (can be set with negative values, and 2 as well)
                -    0, monitor off (can be set with 3 and higher as well)
                -    1, monitor input on
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, set, monitor, input, tape auto style, allowgang</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnMuteChange</slug>
        <title>CSurf_OnMuteChange</title>
        <functioncall prog_lang="cpp">bool CSurf_OnMuteChange(MediaTrack* trackid, int mute)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnMuteChange(MediaTrack trackid, int mute)</functioncall>
        <functioncall prog_lang="lua">boolean mute_state = reaper.CSurf_OnMuteChange(MediaTrack trackid, integer mute)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_CSurf_OnMuteChange(MediaTrack trackid, Int mute)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets mute state of a MediaTrack.
        </description>
        <retvals>
            boolean mute_state - the new mute-state; true, mute is on; false, mute is off
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack to be muted
            integer mute - mute state
            -   0, mute off
            -   1 and higher, mute on
            -   negative values toggle mute-state
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, mute, set, toggle</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnMuteChangeEx</slug>
        <title>CSurf_OnMuteChangeEx</title>
        <functioncall prog_lang="cpp">bool CSurf_OnMuteChangeEx(MediaTrack* trackid, int mute, bool allowgang)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnMuteChangeEx(MediaTrack trackid, int mute, bool allowgang)</functioncall>
        <functioncall prog_lang="lua">boolean mute_state = reaper.CSurf_OnMuteChangeEx(MediaTrack trackid, integer mute, boolean allowgang)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_CSurf_OnMuteChangeEx(MediaTrack trackid, Int mute, Boolean allowgang)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/toggles mute-state for a MediaTrack. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            boolean mute_state - the new mute-state; true, mute is on; false, mute is off
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack to be muted
            integer mute - mute state
            -   0, mute off
            -   1, and higher, mute on
            -   negative values toggle mute-state
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, mute, set, toggle</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnPanChange</slug>
        <title>CSurf_OnPanChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnPanChange(MediaTrack* trackid, double pan, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnPanChange(MediaTrack trackid, pan, bool relative)</functioncall>
        <functioncall prog_lang="lua">number pan_value = reaper.CSurf_OnPanChange(MediaTrack trackid, number pan, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_CSurf_OnPanChange(MediaTrack trackid, Float pan, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Changes the pan-value of a track.
        </description>
        <retvals>
            number pan_value - the new pan-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to change the pan
            number pan - -1, full pan left; 1, full pan right; 0, pan centered
            boolean relative - true, add/subtract pan to the currently set pan-value
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, pan, value, center, relative, set, change</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnPanChangeEx</slug>
        <title>CSurf_OnPanChangeEx</title>
        <functioncall prog_lang="cpp">double CSurf_OnPanChangeEx(MediaTrack* trackid, double pan, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnPanChangeEx(MediaTrack trackid, pan, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="lua">number pan_value = reaper.CSurf_OnPanChangeEx(MediaTrack trackid, number pan, boolean relative, boolean allowGang)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_CSurf_OnPanChangeEx(MediaTrack trackid, Float pan, Boolean relative, Boolean allowGang)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Changes the pan-value of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            number pan_value - the new pan-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to change the pan
            number pan - -1, full pan left; 1, full pan right; 0, pan centered
            boolean relative - true, add/subtract pan to the currently set pan-value
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, pan, value, center, relative, set, change, allowgang</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnPause</slug>
        <title>CSurf_OnPause</title>
        <functioncall prog_lang="cpp">void CSurf_OnPause()</functioncall>
        <functioncall prog_lang="eel">CSurf_OnPause()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnPause()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnPause()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Toggles between pause and play or when recording has started between pause and rec. Unlike CSurf_OnPlay it toggles pause first, then plays.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, toggle, play, rec, pause</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnPlay</slug>
        <title>CSurf_OnPlay</title>
        <functioncall prog_lang="cpp">void CSurf_OnPlay()</functioncall>
        <functioncall prog_lang="eel">CSurf_OnPlay()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnPlay()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnPlay()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Toggles between play and pause or, when recording, rec and pause. Unlike CSurf_OnPause it toggles play first, then pauses.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, toggle, play, rec, pause</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnPlayRateChange</slug>
        <title>CSurf_OnPlayRateChange</title>
        <functioncall prog_lang="cpp">void CSurf_OnPlayRateChange(double playrate)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnPlayRateChange(playrate)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnPlayRateChange(number playrate)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnPlayRateChange(Float playrate)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets the playbackrate of the current project. Can be between 0.25x to 4x.
        </description>
        <parameters>
            number playrate - the playbackrate of the current project. 0.25 to 4.00
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, playback, rate, playrate</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRecArmChange</slug>
        <title>CSurf_OnRecArmChange</title>
        <functioncall prog_lang="cpp">bool CSurf_OnRecArmChange(MediaTrack* trackid, int recarm)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnRecArmChange(MediaTrack trackid, int recarm)</functioncall>
        <functioncall prog_lang="lua">boolean arm_state = reaper.CSurf_OnRecArmChange(MediaTrack trackid, integer recarm)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_CSurf_OnRecArmChange(MediaTrack trackid, Int recarm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets a MediaTrack's armed state.
        </description>
        <retvals>
            boolean arm_state - true, if set to armed; false, if not
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to set the armed-state
            integer recarm - the armstate; 
                   -    0, set to unarmed
                   -    1 and higher, set to armed
                   -   -1 and lower, toggle recarm
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, arm, state, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRecArmChangeEx</slug>
        <title>CSurf_OnRecArmChangeEx</title>
        <functioncall prog_lang="cpp">bool CSurf_OnRecArmChangeEx(MediaTrack* trackid, int recarm, bool allowgang)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnRecArmChangeEx(MediaTrack trackid, int recarm, bool allowgang)</functioncall>
        <functioncall prog_lang="lua">boolean arm_state = reaper.CSurf_OnRecArmChangeEx(MediaTrack trackid, integer recarm, boolean allowgang)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_CSurf_OnRecArmChangeEx(MediaTrack trackid, Int recarm, Boolean allowgang)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets a MediaTrack's armed state. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            boolean arm_state - true, if set to armed; false, if not
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to set the armed-state
            integer recarm - the armstate; 
                   -    0, set to unarmed
                   -    1 and higher, set to armed
                   -   -1 and lower, toggle recarm
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, arm, state, set, allowgang</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRecord</slug>
        <title>CSurf_OnRecord</title>
        <functioncall prog_lang="cpp">void CSurf_OnRecord()</functioncall>
        <functioncall prog_lang="eel">CSurf_OnRecord()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnRecord()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnRecord()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Toggles recording on and off. Starts recording from edit-cursor-position.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, recording, toggle, on, off</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRecvPanChange</slug>
        <title>CSurf_OnRecvPanChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnRecvPanChange(MediaTrack* trackid, int recv_index, double pan, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnRecvPanChange(MediaTrack trackid, int recv_index, pan, bool relative)</functioncall>
        <functioncall prog_lang="lua">number new_recv_pan_val = reaper.CSurf_OnRecvPanChange(MediaTrack trackid, integer recv_index, number pan, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_CSurf_OnRecvPanChange(MediaTrack trackid, Int recv_index, Float pan, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/alters a pan-value for a received-track. Will also change pan in the accompanying send-track!
        </description>
        <retvals>
            number new_recv_pan_val - the new receive-pan-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack-object whose receive-pan you want to change
            integer recv_index - the receive to be changed. 0 for the first receive, 1 for the second, etc
            number pan - the new pan value; -1, full left; 1, full right; 0, center
            boolean relative - false, set pan to new value; true, alter pan by new value
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>trackmanagement, routing, receive, pan, set, alter, relative</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRecvVolumeChange</slug>
        <title>CSurf_OnRecvVolumeChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnRecvVolumeChange(MediaTrack* trackid, int recv_index, double volume, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnRecvVolumeChange(MediaTrack trackid, int recv_index, volume, bool relative)</functioncall>
        <functioncall prog_lang="lua">number new_recv_pan_val = reaper.CSurf_OnRecvVolumeChange(MediaTrack trackid, integer recv_index, number volume, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_CSurf_OnRecvVolumeChange(MediaTrack trackid, Int recv_index, Float volume, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Sets/alters the volume-value of a received track. Will also change volume in the accompanying send-track!

            Note: You can't(!) use SLIDER2DB or DB2SLIDER for getting the volume-values, you want to set here! Use mkvolstr instead.
        </description>
        <retvals>
            number new_recv_pan_val - the new receive-volume-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack-object whose receive-pan you want to change
            integer recv_index - the receive to be changed. 0 for the first receive, 1 for the second, etc
            number volume - the volume-level of the receive; 0, -inf; 1, 0dB; 4, ca +12 db; higher values are possible, though fader will not reflect them. but higher values will still be applied.
            boolean relative - false, set volume to new value; true, alter volume by new value
        </parameters>
        <linked_to desc="see also:">
            Reaper:mkvolstr
                   converts the volume-level for this function
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>trackmanagement, routing, receive, volume, set, alter, relative</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRew</slug>
        <title>CSurf_OnRew</title>
        <functioncall prog_lang="cpp">void CSurf_OnRew(int seekplay)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnRew(int seekplay)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnRew(integer seekplay)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnRew(Int seekplay)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Moves editcursor backward, and optionally with seekplay.
        </description>
        <parameters>
            integer seekplay - how to move the editcursor backward
                       -   0, move cursor backward in small steps. Stepsize depends on horizontal zoomfactor.
                       -   1, move cursor backward, in half-second steps when stopped; when playing, playing will restart at playcursor
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, cursor, backward, jump, seekplay</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRewFwd</slug>
        <title>CSurf_OnRewFwd</title>
        <functioncall prog_lang="cpp">void CSurf_OnRewFwd(int seekplay, int dir)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnRewFwd(int seekplay, int dir)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnRewFwd(integer seekplay, integer dir)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnRewFwd(Int seekplay, Int dir)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Will move editcursor for or backward, depending on parameter dir.
            During play and whith seekplay set, the movement of the editcursor depends on the playcursor-position at the time of calling CSurf_OnRewFwd.
        </description>
        <parameters>
            integer seekplay - turns seekplay on or off; has no effect during recording
                     -   0, when stopped, jump for/backwards in small steps(stepsize depending on zoom-factor)
                     -   1, when stopped, jump for/backwards in 0.5 seconds steps. When play/rec
            integer dir - the direction; -1, move backwards; 0, keep the position; 1, move forwards
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, move, editcursor, seekplay, forward, backward</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnScroll</slug>
        <title>CSurf_OnScroll</title>
        <functioncall prog_lang="cpp">void CSurf_OnScroll(int xdir, int ydir)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnScroll(int xdir, int ydir)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnScroll(integer xdir, integer ydir)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnScroll(Int xdir, Int ydir)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Scroll arrangeview relative to it's current view-settings.
        </description>
        <parameters>
            integer xdir - scroll horizontally(timeline) through the project. 
                         - Negative values toward the beginning, positive toward the end. The higher the values, the farther the movement.
            integer ydir - scroll vertically(tracks) through the project. 
                         - Negative values toward the top, positive toward the bottom. The higher the values, the farther the movement.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, scroll, horizontal, vertical, relative</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnSelectedChange</slug>
        <title>CSurf_OnSelectedChange</title>
        <functioncall prog_lang="cpp">bool CSurf_OnSelectedChange(MediaTrack* trackid, int selected)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnSelectedChange(MediaTrack trackid, int selected)</functioncall>
        <functioncall prog_lang="lua">boolean tr_select_state = reaper.CSurf_OnSelectedChange(MediaTrack trackid, integer selected)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_CSurf_OnSelectedChange(MediaTrack trackid, Int selected)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets a track selected or not.
        </description>
        <retvals>
            boolean tr_select_state - true, track is selected; false, track is unselected
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack to be selected/unselected
            integer selected - select-state; 0, track is selected; 1, track is unselected
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, select, deselect, unselect, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnSendPanChange</slug>
        <title>CSurf_OnSendPanChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnSendPanChange(MediaTrack* trackid, int send_index, double pan, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnSendPanChange(MediaTrack trackid, int send_index, pan, bool relative)</functioncall>
        <functioncall prog_lang="lua">number pan_value = reaper.CSurf_OnSendPanChange(MediaTrack trackid, integer send_index, number pan, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_CSurf_OnSendPanChange(MediaTrack trackid, Int send_index, Float pan, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/alters the pan-volume of a send-track. Will also change the volume of the accompanying receive-track!
        </description>
        <retvals>
            number pan_value - the new pan-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrackObject, whose pan-value you want to change
            integer send_index - the index-number of the send-track. 0 for the first, 2 for the second, etc
            number pan - the pan value; -1 for hard left; 1 for hard right; 0 for center
            boolean relative - false, set pan to new value; true, alter pan by new value
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>trackmanagement, receive, pan, routing, set, alter, relative</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnSendVolumeChange</slug>
        <title>CSurf_OnSendVolumeChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnSendVolumeChange(MediaTrack* trackid, int send_index, double volume, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnSendVolumeChange(MediaTrack trackid, int send_index, volume, bool relative)</functioncall>
        <functioncall prog_lang="lua">number volume_value = reaper.CSurf_OnSendVolumeChange(MediaTrack trackid, integer send_index, number volume, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_CSurf_OnSendVolumeChange(MediaTrack trackid, Int send_index, Float volume, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/alters the volume-value of a send-track. Will also alter the volume of the accompanying receive-track.

            Note: You can't(!) use SLIDER2DB or DB2SLIDER for getting the volume-values, you want to set here!
        </description>
        <retvals>
            number volume_value - the new volume-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrackObject, whose volume-value you want to change
            integer send_index - the index-number of the send-track. 0 for the first, 2 for the second, etc
            number volume - the volume-level of the receive; 0, -inf; 1, 0dB; 4, ca +12 db; 
                          - higher values are possible, though fader will not reflect them. but higher values will still be applied.
            boolean relative - false, set volume to new value; true, alter volume by new value
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>trackmanagement, routing, receive, volume, set, alter, relative</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnSoloChange</slug>
        <title>CSurf_OnSoloChange</title>
        <functioncall prog_lang="cpp">bool CSurf_OnSoloChange(MediaTrack* trackid, int solo)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnSoloChange(MediaTrack trackid, int solo)</functioncall>
        <functioncall prog_lang="lua">boolean solo_state = reaper.CSurf_OnSoloChange(MediaTrack trackid, integer solo)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_CSurf_OnSoloChange(MediaTrack trackid, Int solo)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/toggles solo state of a track.
        </description>
        <retvals>
            boolean solo_state - true, solo has been turned on; false, solo has been turned off
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to toggle solo state
            integer solo - solo state. 
                -    0, solo off
                -    1 and higher, solo on
                -   -1 and lower, toggle solo on/off
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, solo, toggle, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnSoloChangeEx</slug>
        <title>CSurf_OnSoloChangeEx</title>
        <functioncall prog_lang="cpp">bool CSurf_OnSoloChangeEx(MediaTrack* trackid, int solo, bool allowgang)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnSoloChangeEx(MediaTrack trackid, int solo, bool allowgang)</functioncall>
        <functioncall prog_lang="lua">boolean solo_state = reaper.CSurf_OnSoloChangeEx(MediaTrack trackid, integer solo, boolean allowgang)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_CSurf_OnSoloChangeEx(MediaTrack trackid, Int solo, Boolean allowgang)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/toggles solo state of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            boolean solo_state - true, solo has been turned on; false, solo has been turned off
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to toggle solo state
            integer solo - solo state. 
                         -   0, solo off
                         -   1 and higher, solo on
                         -  -1 and lower, toggle solo on/off
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, solo, toggle, set, allowgang</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnStop</slug>
        <title>CSurf_OnStop</title>
        <functioncall prog_lang="cpp">void CSurf_OnStop()</functioncall>
        <functioncall prog_lang="eel">CSurf_OnStop()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnStop()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnStop()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Stops playing/recording in current project.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, stop, recording, play, pause</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnTempoChange</slug>
        <title>CSurf_OnTempoChange</title>
        <functioncall prog_lang="cpp">void CSurf_OnTempoChange(double bpm)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnTempoChange(bpm)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnTempoChange(number bpm)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnTempoChange(Float bpm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets the tempo of the project in beats per minute.
        </description>
        <parameters>
            number bpm - the beats per minute value; 1 to 1000
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, tempo, bpm, beats per minute</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnTrackSelection</slug>
        <title>CSurf_OnTrackSelection</title>
        <functioncall prog_lang="cpp">void CSurf_OnTrackSelection(MediaTrack* trackid)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnTrackSelection(MediaTrack trackid)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnTrackSelection(MediaTrack trackid)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnTrackSelection(MediaTrack trackid)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            MediaTrack trackid - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnVolumeChange</slug>
        <title>CSurf_OnVolumeChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnVolumeChange(MediaTrack* trackid, double volume, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnVolumeChange(MediaTrack trackid, volume, bool relative)</functioncall>
        <functioncall prog_lang="lua">number volume_value = reaper.CSurf_OnVolumeChange(MediaTrack trackid, number volume, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_CSurf_OnVolumeChange(MediaTrack trackid, Float volume, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Sets or alters volume of a track to a new value.

            Use DB2SLIDER to convert dB-value to fitting numbers of the volume-parameter.
        </description>
        <retvals>
            number volume_value - the new volume-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack, whose volume you want to change.
            number volume - volume-value; 3.1622776601684e-008(minimum) to 3.981071705535(maximum). Higher values are possible to set but are out of fader-range.
            boolean relative - false, set volume to new value; true, alter volume by new value
        </parameters>
        <linked_to desc="see also:">
            Reaper:DB2SLIDER
                   converts a dB-value into the volume-level for this function
            Reaper:SLIDER2DB
                   converts a volume-level into a dB-value
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, volume, set, alter, relative, value</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnVolumeChangeEx</slug>
        <title>CSurf_OnVolumeChangeEx</title>
        <functioncall prog_lang="cpp">double CSurf_OnVolumeChangeEx(MediaTrack* trackid, double volume, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnVolumeChangeEx(MediaTrack trackid, volume, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="lua">number volume_value = reaper.CSurf_OnVolumeChangeEx(MediaTrack trackid, number volume, boolean relative, boolean allowGang)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_CSurf_OnVolumeChangeEx(MediaTrack trackid, Float volume, Boolean relative, Boolean allowGang)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Sets or alters volume of a track to a new value. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.

            Use DB2SLIDER to convert dB-value to fitting numbers of the volume-parameter.
        </description>
        <retvals>
            number volume_value - the new volume-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack, whose volume you want to change.
            number volume - volume-value; 3.1622776601684e-008(minimum) to 3.981071705535(maximum). Higher values are possible to set but are out of fader-range.
            boolean relative - false, set volume to new value; true, alter volume by new value
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <linked_to desc="see also:">
            Reaper:DB2SLIDER
                   converts a dB-value into the volume-level for this function
            Reaper:SLIDER2DB
                   converts a volume-level into a dB-value
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, volume, set, alter, relative, value, allowgang</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnWidthChange</slug>
        <title>CSurf_OnWidthChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnWidthChange(MediaTrack* trackid, double width, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnWidthChange(MediaTrack trackid, width, bool relative)</functioncall>
        <functioncall prog_lang="lua">number width_value = reaper.CSurf_OnWidthChange(MediaTrack trackid, number width, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_CSurf_OnWidthChange(MediaTrack trackid, Float width, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/alters the width-value of a track.
        </description>
        <retvals>
            number width_value - the new width-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaItem, whose width you want to change
            number width - the width-value; -1 to 1; 0 is no width/mono
            boolean relative - false, set width to the new width-value; true, alter width by the new width-value
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, width, set, alter</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnWidthChangeEx</slug>
        <title>CSurf_OnWidthChangeEx</title>
        <functioncall prog_lang="cpp">double CSurf_OnWidthChangeEx(MediaTrack* trackid, double width, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnWidthChangeEx(MediaTrack trackid, width, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="lua">number width_value = reaper.CSurf_OnWidthChangeEx(MediaTrack trackid, number width, boolean relative, boolean allowGang)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_CSurf_OnWidthChangeEx(MediaTrack trackid, Float width, Boolean relative, Boolean allowGang)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/alters the width-value of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            number width_value - the new width-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaItem, whose width you want to change
            number width - the width-value; -1 to 1; 0 is no width/mono
            boolean relative - false, set width to the new width-value; true, alter width by the new width-value
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, width, set, alter, allowgang</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnZoom</slug>
        <title>CSurf_OnZoom</title>
        <functioncall prog_lang="cpp">void CSurf_OnZoom(int xdir, int ydir)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnZoom(int xdir, int ydir)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnZoom(integer xdir, integer ydir)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnZoom(Int xdir, Int ydir)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Changes horizontal/vertical zoom.
        </description>
        <parameters>
            integer xdir - horizontal zoom; 0, no change; negative values, zoom out; positive values, zoom in; the higher the values, the bigger the zoom-stepsize.
            integer ydir - vertical zoom; 0, no change; negative values, zoom out; positive values, zoom in; the higher the values, the bigger the zoom-stepsize.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, zoom, vertical, horizontal</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_ResetAllCachedVolPanStates</slug>
        <title>CSurf_ResetAllCachedVolPanStates</title>
        <functioncall prog_lang="cpp">void CSurf_ResetAllCachedVolPanStates()</functioncall>
        <functioncall prog_lang="eel">CSurf_ResetAllCachedVolPanStates()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_ResetAllCachedVolPanStates()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_ResetAllCachedVolPanStates()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Resets all cached vol-pan-states.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, reset, vol, pan, state, cache</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_ScrubAmt</slug>
        <title>CSurf_ScrubAmt</title>
        <functioncall prog_lang="cpp">void CSurf_ScrubAmt(double amt)</functioncall>
        <functioncall prog_lang="eel">CSurf_ScrubAmt(amt)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_ScrubAmt(number amt)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_ScrubAmt(Float amt)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Changes position of the editcursor by amt-value in seconds. When playing, the playposition changes to the editcursor-position.
            During recording, it changes only the position of the editcursor.
        </description>
        <parameters>
            number amt - how far to change position of the editcursor in seconds. Positive values toward the end, negative toward the beginning of the project.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, playcursor, editcursor, move</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetAutoMode</slug>
        <title>CSurf_SetAutoMode</title>
        <functioncall prog_lang="cpp">void CSurf_SetAutoMode(int mode, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetAutoMode(int mode, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetAutoMode(integer mode, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetAutoMode(Int mode, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            integer mode - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetPlayState</slug>
        <title>CSurf_SetPlayState</title>
        <functioncall prog_lang="cpp">void CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetPlayState(boolean play, boolean pause, boolean rec, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetPlayState(Boolean play, Boolean pause, Boolean rec, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            boolean play - 
            boolean pause - 
            boolean rec - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetRepeatState</slug>
        <title>CSurf_SetRepeatState</title>
        <functioncall prog_lang="cpp">void CSurf_SetRepeatState(bool rep, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetRepeatState(bool rep, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetRepeatState(boolean rep, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetRepeatState(Boolean rep, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            boolean rep - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfaceMute</slug>
        <title>CSurf_SetSurfaceMute</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfaceMute(MediaTrack* trackid, bool mute, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfaceMute(MediaTrack trackid, bool mute, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceMute(MediaTrack trackid, boolean mute, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfaceMute(MediaTrack trackid, Boolean mute, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            MediaTrack trackid - 
            integer mute - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfacePan</slug>
        <title>CSurf_SetSurfacePan</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfacePan(MediaTrack* trackid, double pan, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfacePan(MediaTrack trackid, pan, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfacePan(MediaTrack trackid, number pan, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfacePan(MediaTrack trackid, Float pan, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            MediaTrack trackid - 
            number pan - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfaceRecArm</slug>
        <title>CSurf_SetSurfaceRecArm</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfaceRecArm(MediaTrack* trackid, bool recarm, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfaceRecArm(MediaTrack trackid, bool recarm, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceRecArm(MediaTrack trackid, boolean recarm, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfaceRecArm(MediaTrack trackid, Boolean recarm, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            MediaTrack trackid - 
            boolean recarm - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfaceSelected</slug>
        <title>CSurf_SetSurfaceSelected</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfaceSelected(MediaTrack* trackid, bool selected, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfaceSelected(MediaTrack trackid, bool selected, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceSelected(MediaTrack trackid, boolean selected, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfaceSelected(MediaTrack trackid, Boolean selected, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            MediaTrack trackid - 
            boolean selected - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfaceSolo</slug>
        <title>CSurf_SetSurfaceSolo</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfaceSolo(MediaTrack* trackid, bool solo, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfaceSolo(MediaTrack trackid, bool solo, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceSolo(MediaTrack trackid, boolean solo, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfaceSolo(MediaTrack trackid, Boolean solo, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            MediaTrack trackid - 
            boolean solo - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfaceVolume</slug>
        <title>CSurf_SetSurfaceVolume</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfaceVolume(MediaTrack* trackid, double volume, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfaceVolume(MediaTrack trackid, volume, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceVolume(MediaTrack trackid, number volume, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfaceVolume(MediaTrack trackid, Float volume, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            MediaTrack trackid - 
            number volume - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetTrackListChange</slug>
        <title>CSurf_SetTrackListChange</title>
        <functioncall prog_lang="cpp">void CSurf_SetTrackListChange()</functioncall>
        <functioncall prog_lang="eel">CSurf_SetTrackListChange()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetTrackListChange()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetTrackListChange()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_TrackFromID</slug>
        <title>CSurf_TrackFromID</title>
        <functioncall prog_lang="cpp">MediaTrack* CSurf_TrackFromID(int idx, bool mcpView)</functioncall>
        <functioncall prog_lang="eel">MediaTrack CSurf_TrackFromID(int idx, bool mcpView)</functioncall>
        <functioncall prog_lang="lua">MediaTrack tr = reaper.CSurf_TrackFromID(integer idx, boolean mcpView)</functioncall>
        <functioncall prog_lang="python">MediaTrack tr = RPR_CSurf_TrackFromID(Int idx, Boolean mcpView)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets a MediaTrack-object by it's number.
        </description>
        <retvals>
            MediaTrack tr - the MediaTrack-object of the track you requested
        </retvals>
        <parameters>
            integer idx - the tracknumber of the track you want to have; 0 for track 1, 1 for track 2, etc.
            boolean mcpView - true, count only tracks, that are visible in MixerControlPanel
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, id, tracknumber, mediatrack, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_TrackToID</slug>
        <title>CSurf_TrackToID</title>
        <functioncall prog_lang="cpp">int CSurf_TrackToID(MediaTrack* track, bool mcpView)</functioncall>
        <functioncall prog_lang="eel">int CSurf_TrackToID(MediaTrack track, bool mcpView)</functioncall>
        <functioncall prog_lang="lua">integer tracknumber = reaper.CSurf_TrackToID(MediaTrack track, boolean mcpView)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_CSurf_TrackToID(MediaTrack track, Boolean mcpView)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the tracknumber of a MediaTrack-object.
        </description>
        <retvals>
            integer tracknumber - the tracknumber of the MediaTrack; when mcpView is true, invisible tracks will return -1 as number
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack-object, whose number you want to know
            boolean mcpView - true, only tracks visible in MixerControlPanel; false, all tracks visible in MixerControlPanel
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, id, tracknumber, mediatrack, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DB2SLIDER</slug>
        <title>DB2SLIDER</title>
        <functioncall prog_lang="cpp">double DB2SLIDER(double x)</functioncall>
        <functioncall prog_lang="eel">double DB2SLIDER(x)</functioncall>
        <functioncall prog_lang="lua">number slider_value = reaper.DB2SLIDER(number x)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_DB2SLIDER(Float x)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Converts dB-value into a slider-value. Good for converting envelope-point-values.
        </description>
        <retvals>
            number slider_value - the slider-value
        </retvals>
        <parameters>
            number x - the dB-value to be converted. Minimum -332db for position 0
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags>helperfunctions, db, slider, converter, value</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteActionShortcut</slug>
        <title>DeleteActionShortcut</title>
        <functioncall prog_lang="cpp">bool retval = DeleteActionShortcut(KbdSectionInfo* section, int cmdID, int shortcutidx)</functioncall>
        <functioncall prog_lang="eel">bool retval = DeleteActionShortcut(KbdSectionInfo section, int cmdID, int shortcutidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.DeleteActionShortcut(KbdSectionInfo section, integer cmdID, integer shortcutidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_DeleteActionShortcut(KbdSectionInfo section, Int cmdID, Int shortcutidx)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            Delete the specific shortcut for the given command ID.
        </description>
        <retvals>
            boolean retval - true, such shortcuts exists; false, no such shortcut
        </retvals>
        <parameters>
            KbdSectionInfo section - the section, in which the action is located
                                    -0, Main
                                    -100, Main (alt recording)
                                    -32060, MIDI Editor
                                    -32061, MIDI Event List Editor
                                    -32062, MIDI Inline Editor
                                    -32063, Media Explorer
            integer cmdID - the action command-id of the action, whose shortcut you want to delete
            integer shortcutidx - the index of the shortcut
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountActionShortcuts
                   for counting the available shortcuts of an action
            Reaper:GetActionShortcutDesc
                   for getting a shortcut's description
            Reaper:DoActionShortcutDialog
                   for opening the add shortcut-dialog
            Reaper:SectionFromUniqueID
                   get the section, that you want to pass to this function
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Shortcuts
        </chapter_context>
        <tags>shortcuts, delete</tags>
        <changelog>
            Reaper 6.71 - exposed to ReaScript-API
            Reaper 6.72 - section allows now the section-numbers as parameter section
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteEnvelopePointEx</slug>
        <title>DeleteEnvelopePointEx</title>
        <functioncall prog_lang="cpp">bool DeleteEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx)</functioncall>
        <functioncall prog_lang="eel">bool DeleteEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.DeleteEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_DeleteEnvelopePointEx(TrackEnvelope envelope, Int autoitem_idx, Int ptidx)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description>
            Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
            autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
            For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
            even if the automation item is trimmed so that not all points are visible.
            Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
        </description>
        <retvals>
            boolean retval - true, deleting was successful; false, deleting was unsuccessful
        </retvals>
        <parameters>
            TrackEnvelope envelope - the envelope, in which the point lies, that you want to delete
            integer autoitem_idx - -1, the underlying envelope; 
                                 - 0 to x, the 1st to x-1th automation-item
                                 - |0x10000000 to base ptidx on the number of points in one full loop iteration,
                                 - even if the automation item is trimmed so that not all points are visible.
                                 - Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
            integer ptidx - the envelope-point to delete
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountEnvelopePointsEx
                   count envelope-points in envelopes and automation-items
            Reaper:GetEnvelopePointEx
                   get envelope-points of envelopes and automation-items
            Reaper:SetEnvelopePointEx
                   sets envelope-points of envelopes and automation-items
            Reaper:InsertEnvelopePointEx
                   inserts an envelope-point into envelopes and automation-items
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags>envelopemanagement, envelopepoints, delete, range</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteEnvelopePointRange</slug>
        <title>DeleteEnvelopePointRange</title>
        <functioncall prog_lang="cpp">bool DeleteEnvelopePointRange(TrackEnvelope* envelope, double time_start, double time_end)</functioncall>
        <functioncall prog_lang="eel">bool DeleteEnvelopePointRange(TrackEnvelope envelope, time_start, time_end)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.DeleteEnvelopePointRange(TrackEnvelope envelope, number time_start, number time_end)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_DeleteEnvelopePointRange(TrackEnvelope envelope, Float time_start, Float time_end)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description>
            Delete a range of envelope points. 
        </description>
        <retvals>
            boolean retval - true, if it succeeded
        </retvals>
        <parameters>
            TrackEnvelope envelope - the envelope-point-object, in which to delete the envelope-points
            number time_start - the starttime of the deletionrange in seconds
            number time_end - the endtime of the deletionrange in seconds
        </parameters>
        <linked_to desc="see also:">
            Reaper:DeleteEnvelopePointRangeEx
                   deletes a range of envelope-points within envelopes and automation items
            Reaper:DeleteEnvelopePointEx
                   deletes an envelope-point within an envelope and automation-items
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags>envelopemanagement, envelopepoints, delete, range</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteEnvelopePointRangeEx</slug>
        <title>DeleteEnvelopePointRangeEx</title>
        <functioncall prog_lang="cpp">bool DeleteEnvelopePointRangeEx(TrackEnvelope* envelope, int autoitem_idx, double time_start, double time_end)</functioncall>
        <functioncall prog_lang="eel">bool DeleteEnvelopePointRangeEx(TrackEnvelope envelope, int autoitem_idx, time_start, time_end)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.DeleteEnvelopePointRangeEx(TrackEnvelope envelope, integer autoitem_idx, number time_start, number time_end)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_DeleteEnvelopePointRangeEx(TrackEnvelope envelope, Int autoitem_idx, Float time_start, Float time_end)</functioncall>
        <requires>
            Reaper=5.975
        </requires>
        <description prog_lang="*">
            Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
        </description>
        <retvals>
            boolean retval - true, if deleting was successful; false, if not
        </retvals>
        <parameters>
            TrackEnvelope envelope - the envelope-point-object, in which to delete the envelope-points
            integer autoitem_idx - the automation item to be affected by deletion; -1, for the underlying envelope itself; 0, for the first automation item on the envelope; 1 for the second, etc
            number time_start - the starttime of the deletionrange in seconds
            number time_end - the endtime of the deletionrange in seconds
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags>envelopemanagement, envelopepoints, delete, range, automation item</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteExtState</slug>
        <title>DeleteExtState</title>
        <functioncall prog_lang="cpp">void DeleteExtState(const char* section, const char* key, bool persist)</functioncall>
        <functioncall prog_lang="eel">DeleteExtState("section", "key", bool persist)</functioncall>
        <functioncall prog_lang="lua">reaper.DeleteExtState(string section, string key, boolean persist)</functioncall>
        <functioncall prog_lang="python">RPR_DeleteExtState(String section, String key, Boolean persist)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. If persistent, the value will be deleted from the file reaper-extstate.ini in the ressources-folder.
        </description>
        <parameters>
            string section - the section, in which the value is stored
            string key - the key, with which the value is stored
            boolean persist - true, the value shall be deleted permanently; false, delete it only temporarily.
        </parameters>
        <linked_to desc="see also:">
            Reaper:SetExtState
                   sets an extstate to store information for your script
            Reaper:GetExtState
                   gets an extstate that stores information for your script
            Reaper:HasExtState
                   checks, if an extstate exists
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Extension States
        </chapter_context>
        <tags>extension state, state, value, delete, section, key</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteProjectMarker</slug>
        <title>DeleteProjectMarker</title>
        <functioncall prog_lang="cpp">bool DeleteProjectMarker(ReaProject* proj, int markrgnindexnumber, bool isrgn)</functioncall>
        <functioncall prog_lang="eel">bool DeleteProjectMarker(ReaProject proj, int markrgnindexnumber, bool isrgn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.DeleteProjectMarker(ReaProject proj, integer markrgnindexnumber, boolean isrgn)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_DeleteProjectMarker(ReaProject proj, Int markrgnindexnumber, Boolean isrgn)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Deletes a marker or a region. proj==NULL for the active project.

            Does not delete tempo/timesignature markers!
        </description>
        <retvals>
            boolean retval - true, deleting was successful; false, deleting was unsuccessful.
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer markrgnindexnumber - the shown number of the marker to be deleted
            boolean isrgn - true, marker is a region; false, marker is a normal marker
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, delete, marker, regions, shown number</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteProjectMarkerByIndex</slug>
        <title>DeleteProjectMarkerByIndex</title>
        <functioncall prog_lang="cpp">bool DeleteProjectMarkerByIndex(ReaProject* proj, int markrgnidx)</functioncall>
        <functioncall prog_lang="eel">bool DeleteProjectMarkerByIndex(ReaProject proj, int markrgnidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.DeleteProjectMarkerByIndex(ReaProject proj, integer markrgnidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_DeleteProjectMarkerByIndex(ReaProject proj, Int markrgnidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region in the project, 1 for the next, etc, rather than representing the displayed marker/region ID number.
        </description>
        <retvals>
            boolean retval - true, deleting was successful; false, deleting was unsuccessful.
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer markrgnidx - the id of the marker within the project, 0 for the first, 1 for the second, etc. Ignores the shown marker-index!
        </parameters>
        <linked_to desc="see also:">
            Reaper:EnumProjectMarkers3
                   gets attributes of a marker/region
            Reaper:SetProjectMarker4
                   sets attributes of a marker/region
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, delete, marker, regions, shown number</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteTakeMarker</slug>
        <title>DeleteTakeMarker</title>
        <functioncall prog_lang="cpp">bool retval = DeleteTakeMarker(MediaItem_Take* take, int idx)</functioncall>
        <functioncall prog_lang="eel">bool retval = DeleteTakeMarker(MediaItem_Take take, int idx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.DeleteTakeMarker(MediaItem_Take take, integer idx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_DeleteTakeMarker(MediaItem_Take take, Int idx)</functioncall>
        <requires>
            Reaper=6.09
        </requires>
        <description>
            Delete a take marker. Note that idx will change for all following take markers. 
        </description>
        <retvals>
            boolean retval - true, deleting was successful; false, deleting was unsuccessful.
        </retvals>
        <parameters>
            MediaItem_Take take - the take, whose take-marker you want to delete
            integer idx - the id of the marker within the take, 0 for the first, 1 for the second, etc.
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetNumTakeMarkers
                   gets the number of take-markers of a take
            Reaper:GetTakeMarker
                   gets attributes of a take-marker of a take
            Reaper:SetTakeMarker
                   sets attributes of a takemarker of a take
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Take Markers
        </chapter_context>
        <tags>markermanagement, delete, takemarker</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteTakeStretchMarkers</slug>
        <title>DeleteTakeStretchMarkers</title>
        <functioncall prog_lang="cpp">int DeleteTakeStretchMarkers(MediaItem_Take* take, int idx, const int* countInOptional)</functioncall>
        <functioncall prog_lang="eel">int DeleteTakeStretchMarkers(MediaItem_Take take, int idx, optional int countIn)</functioncall>
        <functioncall prog_lang="lua">integer count_del_stretchmarkers = reaper.DeleteTakeStretchMarkers(MediaItem_Take take, integer idx, optional integer countIn)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_DeleteTakeStretchMarkers(MediaItem_Take take, Int idx, const int countInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Deletes one or more stretch markers. Returns number of stretch markers deleted.
        </description>
        <retvals>
            integer count_del_stretchmarkers - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer idx - 
            optional integer countIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Stretch Markers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteTempoTimeSigMarker</slug>
        <title>DeleteTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">bool DeleteTempoTimeSigMarker(ReaProject* project, int markerindex)</functioncall>
        <functioncall prog_lang="eel">bool DeleteTempoTimeSigMarker(ReaProject project, int markerindex)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.DeleteTempoTimeSigMarker(ReaProject project, integer markerindex)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_DeleteTempoTimeSigMarker(ReaProject project, Int markerindex)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Delete a tempo/time signature marker. 
        </description>
        <retvals>
            boolean retval - true, deleting was successful; false, deleting wasn't successful
        </retvals>
        <parameters>
            ReaProject project - the project-number. 0 for the current project. 
            integer markerindex - the index of the marker, that you want to delete
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountTempoTimeSigMarkers
                   counte the number of tempo/time signature markers
            Reaper:GetTempoTimeSigMarker
                   gets attributes of a tempo/time-signature-marker
            Reaper:SetTempoTimeSigMarker
                   adds/sets a tempo/time signature marker
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Time Signature Marker
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteTrack</slug>
        <title>DeleteTrack</title>
        <functioncall prog_lang="cpp">void DeleteTrack(MediaTrack* tr)</functioncall>
        <functioncall prog_lang="eel">DeleteTrack(MediaTrack tr)</functioncall>
        <functioncall prog_lang="lua">reaper.DeleteTrack(MediaTrack tr)</functioncall>
        <functioncall prog_lang="python">RPR_DeleteTrack(MediaTrack tr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            deletes a track
        </description>
        <parameters>
            MediaTrack tr - the MediaTrack to be deleted
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, delete, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteTrackMediaItem</slug>
        <title>DeleteTrackMediaItem</title>
        <functioncall prog_lang="cpp">bool DeleteTrackMediaItem(MediaTrack* tr, MediaItem* it)</functioncall>
        <functioncall prog_lang="eel">bool DeleteTrackMediaItem(MediaTrack tr, MediaItem it)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.DeleteTrackMediaItem(MediaTrack tr, MediaItem it)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_DeleteTrackMediaItem(MediaTrack tr, MediaItem it)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Deletes a MediaItem.
        </description>
        <retvals>
            boolean retval - true, deleting was successful; false, deleting was unsuccessful
        </retvals>
        <parameters>
            MediaTrack tr - the MediaTrack, in which the MediaItem lies, that you want to delete
            MediaItem it - the MediaItem-object you want to delete
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, delete</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DestroyAudioAccessor</slug>
        <title>DestroyAudioAccessor</title>
        <functioncall prog_lang="cpp">void DestroyAudioAccessor(AudioAccessor* accessor)</functioncall>
        <functioncall prog_lang="eel">DestroyAudioAccessor(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="lua">reaper.DestroyAudioAccessor(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="python">RPR_DestroyAudioAccessor(AudioAccessor accessor)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description> 
            Destroy an audio accessor. Must only call from the main thread. 
        </description>
        <parameters>
            AudioAccessor accessor - the AudioAccessor to be destroyed
        </parameters>
        <linked_to desc="see also:">
            Reaper:AudioAccessorStateChanged
                   returns, if audioaccessor has changed
            Reaper:AudioAccessorValidateState
                   to get validation-state of an AudioAccessor
            Reaper:CreateTakeAudioAccessor
                   to create an AudioAccessor for take
            Reaper:CreateTrackAudioAccessor
                   to create an AudioAccessor for track
            Reaper:GetAudioAccessorStartTime
                   gets the starttime of an audioaccessor
            Reaper:GetAudioAccessorEndTime
                   to get endtime of an AudioAccessor
            Reaper:GetAudioAccessorSamples
                   to get samples of an AudioAccessor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Accessor
        </chapter_context>
        <tags>audiomanagement, audio, accessor, destroy</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DoActionShortcutDialog</slug>
        <title>DoActionShortcutDialog</title>
        <functioncall prog_lang="cpp">bool retval = DoActionShortcutDialog(HWND hwnd, KbdSectionInfo* section, int cmdID, int shortcutidx)</functioncall>
        <functioncall prog_lang="eel">bool retval = DoActionShortcutDialog(HWND hwnd, KbdSectionInfo section, int cmdID, int shortcutidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.DoActionShortcutDialog(HWND hwnd, KbdSectionInfo section, integer cmdID, integer shortcutidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_DoActionShortcutDialog(HWND hwnd, KbdSectionInfo section, Int cmdID, Int shortcutidx)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            Open the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.
        </description>
        <retvals>
            boolean retval - true, shortcuts has been edited/added; false, not added/edited
        </retvals>
        <parameters>
            HWND hwnd - unknown, which hwnd to pass over here
            KbdSectionInfo section - the section, in which the action is located 
                                    -0, Main
                                    -100, Main (alt recording)
                                    -32060, MIDI Editor
                                    -32061, MIDI Event List Editor
                                    -32062, MIDI Inline Editor
                                    -32063, Media Explorer
            integer cmdID - the action command-id of the action, whose shortcut you want to delete
            integer shortcutidx - the index of the shortcut to add/edit
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountActionShortcuts
                   for counting the available shortcuts of an action
            Reaper:GetActionShortcutDesc
                   for getting a shortcut's description
            Reaper:DeleteActionShortcutDialog
                   for deleting a shortcut
            Reaper:SectionFromUniqueID
                   get the section, that you want to pass to this function
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Shortcuts
        </chapter_context>
        <tags>shortcuts, add, edit</tags>
        <changelog>
            Reaper 6.71 - exposed to ReaScript-API
            Reaper 6.72 - section allows now the section-numbers as parameter section
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Dock_UpdateDockID</slug>
        <title>Dock_UpdateDockID</title>
        <functioncall prog_lang="cpp">void Dock_UpdateDockID(const char* ident_str, int whichDock)</functioncall>
        <functioncall prog_lang="eel">Dock_UpdateDockID("ident_str", int whichDock)</functioncall>
        <functioncall prog_lang="lua">reaper.Dock_UpdateDockID(string ident_str, integer whichDock)</functioncall>
        <functioncall prog_lang="python">RPR_Dock_UpdateDockID(String ident_str, Int whichDock)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            updates preference for docker window ident_str to be in dock whichDock on next open
        </description>
        <parameters>
            string ident_str - 
            integer whichDock - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dockers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockGetPosition</slug>
        <title>DockGetPosition</title>
        <functioncall prog_lang="cpp">int DockGetPosition(int whichDock)</functioncall>
        <functioncall prog_lang="eel">int DockGetPosition(int whichDock)</functioncall>
        <functioncall prog_lang="lua">integer dock_position = reaper.DockGetPosition(integer whichDock)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_DockGetPosition(Int whichDock)</functioncall>
        <requires>
            Reaper=6.02
        </requires>
        <description prog_lang="*">
            returns the position of docker whichDock
        </description>
        <retvals>
            integer dock_position - 
        </retvals>
        <parameters>
            integer whichDock - the docker, whose position you want to get
                              - -1, not found
                              - 0, bottom
                              - 1, left
                              - 2, top
                              - 3, right
                              - 4, floating
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dockers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockIsChildOfDock</slug>
        <title>DockIsChildOfDock</title>
        <functioncall prog_lang="cpp">int DockIsChildOfDock(HWND hwnd, bool* isFloatingDockerOut)</functioncall>
        <functioncall prog_lang="eel">int DockIsChildOfDock(HWND hwnd, bool &isFloatingDocker)</functioncall>
        <functioncall prog_lang="lua">integer retval, boolean isFloatingDocker = reaper.DockIsChildOfDock(HWND hwnd)</functioncall>
        <functioncall prog_lang="python">(Int retval, HWND hwnd, Boolean isFloatingDockerOut) = RPR_DockIsChildOfDock(hwnd, isFloatingDockerOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns dock index that contains hwnd, or -1
        </description>
        <retvals>
            integer retval - 
            boolean isFloatingDocker - 
        </retvals>
        <parameters>
            HWND hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dockers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowActivate</slug>
        <title>DockWindowActivate</title>
        <functioncall prog_lang="cpp">void DockWindowActivate(HWND hwnd)</functioncall>
        <functioncall prog_lang="eel">DockWindowActivate(HWND hwnd)</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowActivate(HWND hwnd)</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowActivate(HWND hwnd)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            HWND hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dockers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowAdd</slug>
        <title>DockWindowAdd</title>
        <functioncall prog_lang="cpp">void DockWindowAdd(HWND hwnd, const char* name, int pos, bool allowShow)</functioncall>
        <functioncall prog_lang="eel">DockWindowAdd(HWND hwnd, "name", int pos, bool allowShow)</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowAdd(HWND hwnd, string name, integer pos, boolean allowShow)</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowAdd(HWND hwnd, String name, Int pos, Boolean allowShow)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            HWND hwnd - 
            string name - 
            integer pos - 
            boolean allowShow - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dockers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowAddEx</slug>
        <title>DockWindowAddEx</title>
        <functioncall prog_lang="cpp">void DockWindowAddEx(HWND hwnd, const char* name, const char* identstr, bool allowShow)</functioncall>
        <functioncall prog_lang="eel">DockWindowAddEx(HWND hwnd, "name", "identstr", bool allowShow)</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowAddEx(HWND hwnd, string name, string identstr, boolean allowShow)</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowAddEx(HWND hwnd, String name, String identstr, Boolean allowShow)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            HWND hwnd - 
            string name - 
            string identstr - 
            boolean allowShow - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dockers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowRefresh</slug>
        <title>DockWindowRefresh</title>
        <functioncall prog_lang="cpp">void DockWindowRefresh()</functioncall>
        <functioncall prog_lang="eel">DockWindowRefresh()</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowRefresh()</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowRefresh()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Refreshes docked windows.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dockers
        </chapter_context>
        <tags>userinterface, window, refresh, docking</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowRefreshForHWND</slug>
        <title>DockWindowRefreshForHWND</title>
        <functioncall prog_lang="cpp">void DockWindowRefreshForHWND(HWND hwnd)</functioncall>
        <functioncall prog_lang="eel">DockWindowRefreshForHWND(HWND hwnd)</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowRefreshForHWND(HWND hwnd)</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowRefreshForHWND(HWND hwnd)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            HWND hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dockers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowRemove</slug>
        <title>DockWindowRemove</title>
        <functioncall prog_lang="cpp">void DockWindowRemove(HWND hwnd)</functioncall>
        <functioncall prog_lang="eel">DockWindowRemove(HWND hwnd)</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowRemove(HWND hwnd)</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowRemove(HWND hwnd)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            HWND hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dockers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EditTempoTimeSigMarker</slug>
        <title>EditTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">bool EditTempoTimeSigMarker(ReaProject* project, int markerindex)</functioncall>
        <functioncall prog_lang="eel">bool EditTempoTimeSigMarker(ReaProject project, int markerindex)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.EditTempoTimeSigMarker(ReaProject project, integer markerindex)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_EditTempoTimeSigMarker(ReaProject project, Int markerindex)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Open the tempo/time signature marker editor dialog.
        </description>
        <retvals>
            boolean retval - true, if user clicked OK button; false if user clicked cancel
        </retvals>
        <parameters>
            ReaProject project - the project-number. 0 for the current project. 
            integer markerindex - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Time Signature Marker
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnsureNotCompletelyOffscreen</slug>
        <title>EnsureNotCompletelyOffscreen</title>
        <functioncall prog_lang="cpp">void EnsureNotCompletelyOffscreen(RECT* rInOut)</functioncall>
        <functioncall prog_lang="eel">EnsureNotCompletelyOffscreen(int &r.left, int &r.top, int &r.right, int &r.bot)</functioncall>
        <functioncall prog_lang="lua">integer r.left, integer r.top, integer r.right, integer r.bot = reaper.EnsureNotCompletelyOffscreen(integer r.left, integer r.top, integer r.right, integer r.bot)</functioncall>
        <functioncall prog_lang="python">RPR_EnsureNotCompletelyOffscreen(RECT rInOut)</functioncall>
        <requires>
            Reaper=5.978
        </requires>
        <description prog_lang="*">
            call with a saved window rect for your window and it'll correct any positioning info.
        </description>
        <parameters>
            integer r.left - 
            integer r.top - 
            integer r.right - 
            integer r.bot - 
        </parameters>
        <retvals>
            integer r.left - 
            integer r.top - 
            integer r.right - 
            integer r.bot - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumerateFiles</slug>
        <title>EnumerateFiles</title>
        <functioncall prog_lang="cpp">const char* EnumerateFiles(const char* path, int fileindex)</functioncall>
        <functioncall prog_lang="eel">bool EnumerateFiles(#retval, "path", int fileindex)</functioncall>
        <functioncall prog_lang="lua">string filename_with_path = reaper.EnumerateFiles(string path, integer fileindex)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_EnumerateFiles(String path, Int fileindex)</functioncall>
        <requires>
            Reaper=6.20
        </requires>
        <description>
            List the files in the "path" directory. Returns NULL/nil when all files have been listed. Use fileindex = -1 to force re-read of directory (invalidate cache). 
        </description>
        <retvals>
            string filename_with_path - the filename in path, with index fileindex
        </retvals>
        <parameters>
            string path - the path, where the filenames will be read from
            integer fileindex - the number of the file, with 0 the first file. Ordered by first letter in ascending order.
        </parameters>
        <linked_to desc="see also:">
            Reaper:EnumerateSubdirectories
                   enumerates the directories in a directory
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>filemanagement, enumerate, files, path, fileindex, folder</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumerateSubdirectories</slug>
        <title>EnumerateSubdirectories</title>
        <functioncall prog_lang="cpp">const char* EnumerateSubdirectories(const char* path, int subdirindex)</functioncall>
        <functioncall prog_lang="eel">bool EnumerateSubdirectories(#retval, "path", int subdirindex)</functioncall>
        <functioncall prog_lang="lua">string filename_with_path = reaper.EnumerateSubdirectories(string path, integer subdirindex)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_EnumerateSubdirectories(String path, Int subdirindex)</functioncall>
        <requires>
            Reaper=6.20
        </requires>
        <description>
            List the subdirectories in the "path" directory. Use subdirindex = -1 to force re-read of directory (invalidate cache). Returns NULL/nil when all subdirectories have been listed. 
        </description>
        <retvals>
            string filename_with_path - the filename in path
        </retvals>
        <parameters>
            string path - the path, where the directorynames will be read from
            integer subdirindex - the number of the directory, with 0 the first directory. Ordered by first letter in ascending order.
        </parameters>
        <linked_to desc="see also:">
            Reaper:EnumerateFiles
                   enumerate files in a directory
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>filemanagement, enumerate, directory, folder, path, directoryindex</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumPitchShiftModes</slug>
        <title>EnumPitchShiftModes</title>
        <functioncall prog_lang="cpp">bool EnumPitchShiftModes(int mode, const char** strOut)</functioncall>
        <functioncall prog_lang="eel">bool EnumPitchShiftModes(int mode, #str)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.EnumPitchShiftModes(integer mode)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_EnumPitchShiftModes(Int mode, String strOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported
        </description>
        <retvals>
            boolean retval - 
            string str - 
        </retvals>
        <parameters>
            integer mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Pitchshifting
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumPitchShiftSubModes</slug>
        <title>EnumPitchShiftSubModes</title>
        <functioncall prog_lang="cpp">const char* EnumPitchShiftSubModes(int mode, int submode)</functioncall>
        <functioncall prog_lang="eel">bool EnumPitchShiftSubModes(#retval, int mode, int submode)</functioncall>
        <functioncall prog_lang="lua">string pitch_shift_submode = reaper.EnumPitchShiftSubModes(integer mode, integer submode)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_EnumPitchShiftSubModes(Int mode, Int submode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns submode name, or NULL
        </description>
        <retvals>
            string pitch_shift_submode - 
        </retvals>
        <parameters>
            integer mode - 
            integer submode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Pitchshifting
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumProjectMarkers</slug>
        <title>EnumProjectMarkers</title>
        <functioncall prog_lang="cpp">int EnumProjectMarkers(int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)</functioncall>
        <functioncall prog_lang="eel">int EnumProjectMarkers(int idx, bool &isrgn, &pos, &rgnend, #name, int &markrgnindexnumber)</functioncall>
        <functioncall prog_lang="lua">integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers(integer idx)</functioncall>
        <functioncall prog_lang="python">(Int retval, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut) = RPR_EnumProjectMarkers(idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the values of a given marker or region idx.
        </description>
        <retvals>
            integer retval - number of marker beginning with 1 for the first marker
                           - ignore the order of first,second,etc creation of markers but counts from position 00:00:00 to end of project. So if you created a marker at position 00:00:00 and move the first created marker to the end of the timeline, 
                           - it will be the last one, NOT the first one in the retval!
            boolean isgrn - is the marker a region?
            number pos - the time-position in seconds with 12 digits precision (1.123456789012)
            number rgnend - if it's a region, the position of the end of the region in seconds with 12 digits precision(123.123456789012); 
                          - if it's just a marker it's 0.0
            string name - name of the marker
            integer markrgnindexnumber - marker/region index number. 
                                       - Note: the numbering of markers and regions is independent. If you have one region and one marker, 
                                       - both share the number 1, even though you have 2 in your project(one marker and one region).
        </retvals>
        <parameters>
            integer idx - the number of the marker, beginning with 0 for the first marker
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, enum, project, markers, region</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumProjectMarkers2</slug>
        <title>EnumProjectMarkers2</title>
        <functioncall prog_lang="cpp">int EnumProjectMarkers2(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)</functioncall>
        <functioncall prog_lang="eel">int EnumProjectMarkers2(ReaProject proj, int idx, bool &isrgn, &pos, &rgnend, #name, int &markrgnindexnumber)</functioncall>
        <functioncall prog_lang="lua">integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers2(ReaProject proj, integer idx)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut) = RPR_EnumProjectMarkers2(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the values of a given marker or region idx from a given project proj.
        </description>
        <retvals>
            integer retval - number of marker beginning with 1 for the first marker
                           - ignore the order of first,second,etc creation of markers but counts from position 00:00:00 to end of project. 
                           - So if you created a marker at position 00:00:00 and move the first created marker to the end of the timeline, it will be the last one, NOT the first one in the retval!
            boolean isgrn - is the marker a region?
            number pos - the time-position in seconds with 12 digits precision (1.123456789012)
            number rgnend - if it's a region, the end of the region in seconds with 12 digits precision(123.123456789012); if just marker it's 0.0
            string name - name of the marker
            integer markrgnindexnumber - marker/region index number. 
                                       - Note: the numbering of markers and regions is independent. If you have one region and one marker, 
                                       - both share the number 1, even though you have 2 in your project(one marker and one region).
        </retvals>
        <parameters>
            ReaProject proj - Projectnumber. 0, current project; 
                            - 1 to x the first(1) to the last project(x) (in tabs for example); 
            integer idx - the number of the marker, beginning with 0 for the first marker
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, enum, project, markers, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumProjectMarkers3</slug>
        <title>EnumProjectMarkers3</title>
        <functioncall prog_lang="cpp">int EnumProjectMarkers3(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut, int* colorOut)</functioncall>
        <functioncall prog_lang="eel">int EnumProjectMarkers3(ReaProject proj, int idx, bool &isrgn, &pos, &rgnend, #name, int &markrgnindexnumber, int &color)</functioncall>
        <functioncall prog_lang="lua">integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber, integer color = reaper.EnumProjectMarkers3(ReaProject proj, integer idx)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut, Int colorOut) = RPR_EnumProjectMarkers3(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut, colorOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the values of a given marker or region idx from a given project proj.
        </description>
        <retvals>
            integer retval - number of marker beginning with 1 for the first marker; 
                           - ignore the order of first,second,etc creation of markers but counts from 
                           - position 00:00:00 to end of project. 
                           - So if you created a marker at position 00:00:00 and move the first created marker 
                           - to the end of the timeline, it will be the last one, NOT the first one in the retval!
            boolean isgrn - is the marker a region?
            number pos - the time-position in seconds with 12 digits precision (1.123456789012)
            number rgnend - if it's a region, the end of the region in seconds with 12 digits precision(123.123456789012); if just marker it's 0.0
            string name - name of the marker
            integer markrgnindexnumber - marker/region index number. 
                                       - Note: the numbering of markers and regions is independent. If you have one region and one marker, 
                                       - both share the number 1, even though you have 2 in your project(one marker and one region).
            integer color - number of color of the marker/region
        </retvals>
        <parameters>
            ReaProject proj - Projectnumber. 0, current project; 1 to x the first(1) to the last project(x) (in tabs for example)
            integer idx - the number of the marker, beginning with 0 for the first marker
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, enum, project, markers, project, color</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumProjects</slug>
        <title>EnumProjects</title>
        <functioncall prog_lang="cpp">ReaProject* EnumProjects(int idx, char* projfnOutOptional, int projfnOutOptional_sz)</functioncall>
        <functioncall prog_lang="eel">ReaProject EnumProjects(int idx, optional #projfn)</functioncall>
        <functioncall prog_lang="lua">ReaProject retval, optional string projfn = reaper.EnumProjects(integer idx)</functioncall>
        <functioncall prog_lang="python">(ReaProject retval, Int idx, String projfnOutOptional, Int projfnOutOptional_sz) = RPR_EnumProjects(idx, projfnOutOptional, projfnOutOptional_sz)</functioncall>
        <requires>
            Reaper=5.982
        </requires>
        <description>
            Get ReaProject-object and filename of a project.
            idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.
        </description>
        <retvals>
            ReaProject retval - a ReaProject-object of the project you requested
            optional string projfn - the path+filename.rpp of the project. returns nil if no filename exists
        </retvals>
        <parameters>
            integer idx - -1 for current project; 0 and higher for the projects; 0x40000000 for currently rendering project, if any.
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetProjectPath
                   get recording path of a current project
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Misc
        </chapter_context>
        <tags>projectmanagement, enumerate, projects, filename</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumProjExtState</slug>
        <title>EnumProjExtState</title>
        <functioncall prog_lang="cpp">bool EnumProjExtState(ReaProject* proj, const char* extname, int idx, char* keyOutOptional, int keyOutOptional_sz, char* valOutOptional, int valOutOptional_sz)</functioncall>
        <functioncall prog_lang="eel">bool EnumProjExtState(ReaProject proj, "extname", int idx, optional #key, optional #val)</functioncall>
        <functioncall prog_lang="lua">boolean retval, optional string key, optional string val = reaper.EnumProjExtState(ReaProject proj, string extname, integer idx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, ReaProject proj, String extname, Int idx, String keyOutOptional, Int keyOutOptional_sz, String valOutOptional, Int valOutOptional_sz) = RPR_EnumProjExtState(proj, extname, idx, keyOutOptional, keyOutOptional_sz, valOutOptional, valOutOptional_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Enumerate the data stored with the project for a specific extname. Returns false when there is no more data.
        </description>
        <retvals>
            boolean retval - true, key and value to this section exist; false, no such key and value exists
            string key - the idx'th key in the section
            string val - the accompanying value to key
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            string extname - the section of the extended-states
            integer idx - the id of the entry within "extname"-section to be returned; 0 for the first, 1 for the second, etc.
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetProjExtState
                   gets an ext-state that stored data for your project
            Reaper:SetProjExtState
                   sets an ext-state to store data for your project
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project Extension States
        </chapter_context>
        <tags>projectmanagement, extended, state, section, extname, value, key, enumerate, enum</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumRegionRenderMatrix</slug>
        <title>EnumRegionRenderMatrix</title>
        <functioncall prog_lang="cpp">MediaTrack* EnumRegionRenderMatrix(ReaProject* proj, int regionindex, int rendertrack)</functioncall>
        <functioncall prog_lang="eel">MediaTrack EnumRegionRenderMatrix(ReaProject proj, int regionindex, int rendertrack)</functioncall>
        <functioncall prog_lang="lua">MediaTrack tr = reaper.EnumRegionRenderMatrix(ReaProject proj, integer regionindex, integer rendertrack)</functioncall>
        <functioncall prog_lang="python">MediaTrack tr = RPR_EnumRegionRenderMatrix(ReaProject proj, Int regionindex, Int rendertrack)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.
        </description>
        <retvals>
            MediaTrack tr - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer regionindex - 
            integer rendertrack - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumTrackMIDIProgramNames</slug>
        <title>EnumTrackMIDIProgramNames</title>
        <functioncall prog_lang="cpp">bool EnumTrackMIDIProgramNames(int track, int programNumber, char* programName, int programName_sz)</functioncall>
        <functioncall prog_lang="eel">bool EnumTrackMIDIProgramNames(int track, int programNumber, #programName)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string programName = reaper.EnumTrackMIDIProgramNames(integer track, integer programNumber, string programName)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int track, Int programNumber, String programName, Int programName_sz) = RPR_EnumTrackMIDIProgramNames(track, programNumber, programName, programName_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
        </description>
        <retvals>
            boolean retval - 
            string programName - 
        </retvals>
        <parameters>
            integer track - 
            string programNumber - 
            string programName - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumTrackMIDIProgramNamesEx</slug>
        <title>EnumTrackMIDIProgramNamesEx</title>
        <functioncall prog_lang="cpp">bool EnumTrackMIDIProgramNamesEx(ReaProject* proj, MediaTrack* track, int programNumber, char* programName, int programName_sz)</functioncall>
        <functioncall prog_lang="eel">bool EnumTrackMIDIProgramNamesEx(ReaProject proj, MediaTrack track, int programNumber, #programName)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string programName = reaper.EnumTrackMIDIProgramNamesEx(ReaProject proj, MediaTrack track, integer programNumber, string programName)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, ReaProject proj, MediaTrack track, Int programNumber, String programName, Int programName_sz) = RPR_EnumTrackMIDIProgramNamesEx(proj, track, programNumber, programName, programName_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
        </description>
        <retvals>
            boolean retval - 
            string programName - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            MediaTrack track - 
            integer programNumber - 
            string programName - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_Evaluate</slug>
        <title>Envelope_Evaluate</title>
        <functioncall prog_lang="cpp">int Envelope_Evaluate(TrackEnvelope* envelope, double time, double samplerate, int samplesRequested, double* valueOut, double* dVdSOut, double* ddVdSOut, double* dddVdSOut)</functioncall>
        <functioncall prog_lang="eel">int Envelope_Evaluate(TrackEnvelope envelope, time, samplerate, int samplesRequested, &value, &dVdS, &ddVdS, &dddVdS)</functioncall>
        <functioncall prog_lang="lua">integer retval, number value, number dVdS, number ddVdS, number dddVdS = reaper.Envelope_Evaluate(TrackEnvelope envelope, number time, number samplerate, integer samplesRequested)</functioncall>
        <functioncall prog_lang="python">(Int retval, TrackEnvelope envelope, Float time, Float samplerate, Int samplesRequested, Float valueOut, Float dVdSOut, Float ddVdSOut, Float dddVdSOut) = RPR_Envelope_Evaluate(envelope, time, samplerate, samplesRequested, valueOut, dVdSOut, ddVdSOut, dddVdSOut)</functioncall>
        <requires>
            Reaper=6.43
        </requires>
        <description>
            Get the effective envelope value at a given time position. 

            samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). 

            The return value is how many samples beyond that time position that the returned values are valid. 

            dVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. 
        </description>
        <retvals>
            integer retval - 
            number value - 
            number dVdS - the change in value per sample (first derivative)
            number ddVdS - the second derivative
            number dddVdS - is the third derivative
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            number time - 
            number samplerate - 
            integer samplesRequested - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetEnvelopeScalingMode
                   get the scaling more of an envelope
            Reaper:Envelope_Evaluate
                   get effective envelope value at a time position 
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - the following retvals and parameters aren't optional anymore: 
                        - CPP: valueOut, dVdSOut, ddVdSOut, dddVdSOut
                        - EEL2: value, dVdS, ddVdS, dddVdS
                        - Lua: value, dVdS, ddVdS, dddVdS
                        - Python: valueOut, dVdSOut, ddVdSOut, dddVdSOut
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_FormatValue</slug>
        <title>Envelope_FormatValue</title>
        <functioncall prog_lang="cpp">void Envelope_FormatValue(TrackEnvelope* env, double value, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">Envelope_FormatValue(TrackEnvelope env, value, #buf)</functioncall>
        <functioncall prog_lang="lua">string formatted_value = reaper.Envelope_FormatValue(TrackEnvelope env, number value)</functioncall>
        <functioncall prog_lang="python">(TrackEnvelope env, Float value, String bufOut, Int bufOut_sz) = RPR_Envelope_FormatValue(env, value, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Formats the value of an envelope to a user-readable form
        </description>
        <retvals>
            string formatted_value - 
        </retvals>
        <parameters>
            TrackEnvelope env - 
            number value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_GetParentTake</slug>
        <title>Envelope_GetParentTake</title>
        <functioncall prog_lang="cpp">MediaItem_Take* Envelope_GetParentTake(TrackEnvelope* env, int* indexOut, int* index2Out)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take Envelope_GetParentTake(TrackEnvelope env, int &index, int &index2)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take retval, integer index, integer index2 = reaper.Envelope_GetParentTake(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="python">(MediaItem_Take retval, TrackEnvelope env, Int indexOut, Int index2Out) = RPR_Envelope_GetParentTake(env, indexOut, index2Out)</functioncall>
        <requires>
            Reaper=6.43
        </requires>
        <description prog_lang="*">
            If take envelope, gets the take from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.
        </description>
        <retvals>
            MediaItem_Take retval - 
            integer index - 
            integer index2 - 
        </retvals>
        <parameters>
            TrackEnvelope env - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Take Envelopes
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - the following retvals and parameters aren't optional anymore:
                        - CPP: indexOut, index2Out
                        - EEL2: index, index2
                        - Lua: index, index2
                        - Python: indexOut, index2Out
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_GetParentTrack</slug>
        <title>Envelope_GetParentTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* Envelope_GetParentTrack(TrackEnvelope* env, int* indexOut, int* index2Out)</functioncall>
        <functioncall prog_lang="eel">MediaTrack Envelope_GetParentTrack(TrackEnvelope env, int &index, int &index2)</functioncall>
        <functioncall prog_lang="lua">MediaTrack retval, integer index, integer index2 = reaper.Envelope_GetParentTrack(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="python">(MediaTrack retval, TrackEnvelope env, Int indexOut, Int index2Out) = RPR_Envelope_GetParentTrack(env, indexOut, index2Out)</functioncall>
        <requires>
            Reaper=6.43
        </requires>
        <description prog_lang="*">
            If track envelope, gets the track from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.
        </description>
        <retvals>
            MediaTrack retval - 
            integer index - 
            integer index2 - 
        </retvals>
        <parameters>
            TrackEnvelope env - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Track Envelopes
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - the following retvals and parameters aren't optional anymore:
                        - CPP: indexOut, index2Out
                        - EEL2: index, index2
                        - Lua: index, index2
                        - Python: indexOut, index2Out
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_SortPoints</slug>
        <title>Envelope_SortPoints</title>
        <functioncall prog_lang="cpp">bool Envelope_SortPoints(TrackEnvelope* envelope)</functioncall>
        <functioncall prog_lang="eel">bool Envelope_SortPoints(TrackEnvelope envelope)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.Envelope_SortPoints(TrackEnvelope envelope)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_Envelope_SortPoints(TrackEnvelope envelope)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Sort envelope points by time.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:InsertEnvelopePoint
                   inserts an envelope-point into envelopes
            Reaper:InsertEnvelopePointEx
                   inserts an envelope-point into envelopes and automation-items
            Reaper:SetEnvelopePoint
                   sets envelope-points in envelopes
            Reaper:SetEnvelopePointEx
                   sets envelope-points in envelopes and automation-items
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_SortPointsEx</slug>
        <title>Envelope_SortPointsEx</title>
        <functioncall prog_lang="cpp">bool Envelope_SortPointsEx(TrackEnvelope* envelope, int autoitem_idx)</functioncall>
        <functioncall prog_lang="eel">bool Envelope_SortPointsEx(TrackEnvelope envelope, int autoitem_idx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.Envelope_SortPointsEx(TrackEnvelope envelope, integer autoitem_idx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_Envelope_SortPointsEx(TrackEnvelope envelope, Int autoitem_idx)</functioncall>
        <requires>
            Reaper=5.975
        </requires>
        <description>
            Sort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. 
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            integer autoitem_idx - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:InsertEnvelopePoint
                   inserts an envelope-point into envelopes
            Reaper:InsertEnvelopePointEx
                   inserts an envelope-point into envelopes and automation-items
            Reaper:SetEnvelopePoint
                   sets envelope-points in envelopes
            Reaper:SetEnvelopePointEx
                   sets envelope-points in envelopes and automation-items
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ExecProcess</slug>
        <title>ExecProcess</title>
        <functioncall prog_lang="cpp">const char* ExecProcess(const char* cmdline, int timeoutmsec)</functioncall>
        <functioncall prog_lang="eel">bool ExecProcess(#retval, "cmdline", int timeoutmsec)</functioncall>
        <functioncall prog_lang="lua">string command_output = reaper.ExecProcess(string cmdline, integer timeoutmsec)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_ExecProcess(String cmdline, Int timeoutmsec)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command.

            Commands executed with ExecProcess() don't benefit from PATH-system-variables. That said, you must give the full path to a command, even if you can usually just type the command into a shell. You also may need to set a codepage manually to get the correct character-encoding. So in some cases, writing a batch-script and executing it with ExecProcess() might be a good idea.

            Note: when using this in Lua, you need to take care of the right file-separators: / on Mac and Linux or \ on Windows. Unlike other Lua/Lua-used-ReaScript-functions, this will not convert the file-separators to the current system's equivalent.
            Keep that in mind, when doing multi-platform-scripts!

            The base-directory is Reaper's appdirectory.

            On Windows, you can not use command-line-internal commands, like dir or cd, directly. To use them, you need to use cmd.exe. 
            You can do it like:

            -    "$Path_to_Command_Exe\\cmd.exe /Q /C command"

            where "/Q" executes cmd.exe silently(otherwise a command-line-window pops up; but output of commands will show anyway) and "/C command" executes command.

            To get a full directory-listing of c:\\ in a file c:\\directorylisting.txt, you can use:
            -   "c:\\windows\\system32\\cmd.exe /Q /C dir c:\\ >c:\\directorylisting.txt"
        </description>
        <retvals>
            string command_output - return value, newline and output of the command; otherwise nil
        </retvals>
        <parameters>
            string cmdline - the command to execute 
            integer timeoutmsec - how long to wait, until termination of execution
                -positive value, the time to wait for execution in milliseconds
                -    0, command will be allowed to run indefinitely (recommended for large amounts of returned output).
                -   -1, for no wait/terminate
                -   -2, for no wait and minimize
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>helperfunctions, shell, exec, process, command, terminate</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>file_exists</slug>
        <title>file_exists</title>
        <functioncall prog_lang="cpp">bool file_exists(const char* path)</functioncall>
        <functioncall prog_lang="eel">bool file_exists("path")</functioncall>
        <functioncall prog_lang="lua">boolean file_exists  = reaper.file_exists(string path)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_file_exists(String path)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Checks, if a specified file exists and is readable.

            returns true if path points to a valid, readable file
        </description>
        <retvals>
            boolean file_exists - true, if file exists; false, if it doesn't
        </retvals>
        <parameters>
            string path - filename with path
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>filemanagement, check, file, existing, existence</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FindTempoTimeSigMarker</slug>
        <title>FindTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">int FindTempoTimeSigMarker(ReaProject* project, double time)</functioncall>
        <functioncall prog_lang="eel">int FindTempoTimeSigMarker(ReaProject project, time)</functioncall>
        <functioncall prog_lang="lua">integer time_sig_marker_index = reaper.FindTempoTimeSigMarker(ReaProject project, number time)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_FindTempoTimeSigMarker(ReaProject project, Float time)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).
        </description>
        <retvals>
            integer time_sig_marker_index - 
        </retvals>
        <parameters>
            ReaProject project - the project-number. 0 for the current project. 
            number time - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Time Signature Marker
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>format_timestr</slug>
        <title>format_timestr</title>
        <functioncall prog_lang="cpp">void format_timestr(double tpos, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">format_timestr(tpos, #buf)</functioncall>
        <functioncall prog_lang="lua">string formatted_time = reaper.format_timestr(number tpos, string buf)</functioncall>
        <functioncall prog_lang="python">(Float tpos, String buf, Int buf_sz) = RPR_format_timestr(tpos, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Creates a timestring and formats it as hh:mm:ss.sss. 
        </description>
        <retvals>
            string formatted_time - the formatted timestring
        </retvals>
        <parameters>
            number tpos - the position in seconds, that you want to have formatted
            string buf - needed by Reaper, just set it to ""
        </parameters>
        <linked_to desc="see also:">
            Reaper:format_timestr_pos
                   creates a timestring and formats with overrides
            Reaper:format_timestr_len
                   creates a timestring and formats with overrides and offset for length
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags>helperfunctions, format, timestring</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>format_timestr_len</slug>
        <title>format_timestr_len</title>
        <functioncall prog_lang="cpp">void format_timestr_len(double tpos, char* buf, int buf_sz, double offset, int modeoverride)</functioncall>
        <functioncall prog_lang="eel">format_timestr_len(tpos, #buf, offset, int modeoverride)</functioncall>
        <functioncall prog_lang="lua">string formatted_time = reaper.format_timestr_len(number tpos, string buf, number offset, integer modeoverride)</functioncall>
        <functioncall prog_lang="python">(Float tpos, String buf, Int buf_sz, Float offset, Int modeoverride) = RPR_format_timestr_len(tpos, buf, buf_sz, offset, modeoverride)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            creates a timestring and formats with overrides and offset for a time-length
            
            time formatting mode overrides: -1=proj default.
            0=time
            1=measures.beats + time
            2=measures.beats
            3=seconds
            4=samples
            5=h:m:s:f
            offset is start of where the length will be calculated from
        </description>
        <retvals>
            string formatted_time - 
        </retvals>
        <parameters>
            number tpos - 
            string buf - 
            number offset - 
            integer modeoverride - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>format_timestr_pos</slug>
        <title>format_timestr_pos</title>
        <functioncall prog_lang="cpp">void format_timestr_pos(double tpos, char* buf, int buf_sz, int modeoverride)</functioncall>
        <functioncall prog_lang="eel">format_timestr_pos(tpos, #buf, int modeoverride)</functioncall>
        <functioncall prog_lang="lua">string formatted_time = reaper.format_timestr_pos(number tpos, string buf, integer modeoverride)</functioncall>
        <functioncall prog_lang="python">(Float tpos, String buf, Int buf_sz, Int modeoverride) = RPR_format_timestr_pos(tpos, buf, buf_sz, modeoverride)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            time formatting mode overrides: -1=proj default.
                0=time
                1=measures.beats + time
                2=measures.beats
                3=seconds
                4=samples
                5=h:m:s:f
        </description>
        <retvals>
            string formatted_time - 
        </retvals>
        <parameters>
            number tpos - 
            string buf - 
            integer modeoverride - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>genGuid</slug>
        <title>genGuid</title>
        <functioncall prog_lang="cpp">void genGuid(GUID* g)</functioncall>
        <functioncall prog_lang="eel">genGuid(#gGUID)</functioncall>
        <functioncall prog_lang="lua">string gGUID = reaper.genGuid(string gGUID)</functioncall>
        <functioncall prog_lang="python">RPR_genGuid(GUID g)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Generates a GUID.
        </description>
        <retvals>
            string gGUID - the generated GUID
        </retvals>
        <parameters>
            string gGUID - set it to ""
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>helperfunctions, guid, generate, create</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>get_config_var_string</slug>
        <title>get_config_var_string</title>
        <functioncall prog_lang="cpp">bool get_config_var_string(const char* name, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool get_config_var_string("name", #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.get_config_var_string(string name)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String name, String bufOut, Int bufOut_sz) = RPR_get_config_var_string(name, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=5.972
        </requires>
        <description>
            gets ini configuration variable value as string

            see the <a href="Reaper_Config_Variables.html">configuration-variable documentation</a> for more details
        </description>
        <retvals>
            boolean retval - true, the configuration-variable is a valid string variable
            string buf - the current value of the configuration-variable
        </retvals>
        <parameters>
            string name - the config-var, whose value you want
        </parameters>
        <linked_to desc="see also:">
            SWS:SNM_GetIntConfigVar
                   gets value of integer-config variables
            SWS:SNM_SetIntConfigVar
                   sets value of integer-config variables
            SWS:SNM_GetDoubleConfigVar
                   gets value of double-float-config variables
            SWS:SNM_SetDoubleConfigVar
                   sets value of double-float-config variables
            SWS:SNM_SetStringConfigVar
                   sets value of string-config variables
            www:Reaper_Config_Variables.html
                a list of config-variables as used in Reaper
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Config Variables
        </chapter_context>
        <tags>helperfunctions, configuration variable, configvar, string, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>get_ini_file</slug>
        <title>get_ini_file</title>
        <functioncall prog_lang="cpp">const char* get_ini_file()</functioncall>
        <functioncall prog_lang="eel">bool get_ini_file(#retval)</functioncall>
        <functioncall prog_lang="lua">string filename_with_path = reaper.get_ini_file()</functioncall>
        <functioncall prog_lang="python">String retval = RPR_get_ini_file()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get reaper.ini full filename+path.
        </description>
        <retvals>
            string filename_with_path - the reaper.ini with path
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>helperfunctions, reaper.ini, get, path</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetActionShortcutDesc</slug>
        <title>GetActionShortcutDesc</title>
        <functioncall prog_lang="cpp">bool GetActionShortcutDesc(KbdSectionInfo* section, int cmdID, int shortcutidx, char* descOut, int descOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetActionShortcutDesc(KbdSectionInfo section, int cmdID, int shortcutidx, #desc)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string desc = reaper.GetActionShortcutDesc(KbdSectionInfo section, integer cmdID, integer shortcutidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, KbdSectionInfo section, Int cmdID, Int shortcutidx, String descOut, Int descOut_sz) = RPR_GetActionShortcutDesc(section, cmdID, shortcutidx, descOut, descOut_sz)</functioncall>
        <requires>
            Reaper=6.72
        </requires>
        <description>
            Get the text description of a specific shortcut for the given command ID.
        </description>
        <retvals>
            boolean retval - true, such shortcuts exists; false, no such shortcut
            string desc - the description of the shortcut
        </retvals>
        <parameters>
            KbdSectionInfo section - the section, in which the action is located
                                    -0, Main
                                    -100, Main (alt recording)
                                    -32060, MIDI Editor
                                    -32061, MIDI Event List Editor
                                    -32062, MIDI Inline Editor
                                    -32063, Media Explorer
            integer cmdID - the action command-id of the action, whose shortcut's description you want
            integer shortcutidx - the index of the shortcut
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountActionShortcuts
                   for counting the available shortcuts of an action
            Reaper:DeleteActionShortcut
                   for deleting a shortcut
            Reaper:DoActionShortcutDialog
                   for opening the add shortcut-dialog
            Reaper:SectionFromUniqueID
                   get the section, that you want to pass to this function
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Shortcuts
        </chapter_context>
        <tags>shortcuts, get, description</tags>
        <changelog>
            Reaper 6.71 - exposed to ReaScript-API
            Reaper 6.72 - section allows now the section-numbers as parameter section; removed Lua-parameters desc, desclen
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetActiveTake</slug>
        <title>GetActiveTake</title>
        <functioncall prog_lang="cpp">MediaItem_Take* GetActiveTake(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take GetActiveTake(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take = reaper.GetActiveTake(MediaItem item)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take take = RPR_GetActiveTake(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            get the active take in this item
        </description>
        <retvals>
            MediaItem_Take take - the active take of the MediaItem
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose active take you want to have returned
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, get, active, take, item</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAllProjectPlayStates</slug>
        <title>GetAllProjectPlayStates</title>
        <functioncall prog_lang="cpp">int GetAllProjectPlayStates(ReaProject* ignoreProject)</functioncall>
        <functioncall prog_lang="eel">int GetAllProjectPlayStates(ReaProject ignoreProject)</functioncall>
        <functioncall prog_lang="lua">integer proj_playstates = reaper.GetAllProjectPlayStates(ReaProject ignoreProject)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetAllProjectPlayStates(ReaProject ignoreProject)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns the bitwise OR of all project play states, eg. and project is playing/pausing/recording (1=playing, 2=pause, 4=recording)
        </description>
        <retvals>
            integer proj_playstates - the bitwise play-state of alle projects
                    -&1, at least one project is playing
                    -&2, at least one project is paused
                    -&4, at least one project is recording
        </retvals>
        <parameters>
            ReaProject ignoreProject - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, get, play, pause, recording, state</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAppVersion</slug>
        <title>GetAppVersion</title>
        <functioncall prog_lang="cpp">const char* GetAppVersion()</functioncall>
        <functioncall prog_lang="eel">bool GetAppVersion(#retval)</functioncall>
        <functioncall prog_lang="lua">string reaper_app_version = reaper.GetAppVersion()</functioncall>
        <functioncall prog_lang="python">String retval = RPR_GetAppVersion()</functioncall>
        <requires>
            Reaper=6.18
        </requires>
        <description prog_lang="*">
            Returns app version which may include an OS/arch signifier, such as: "6.17" (windows 32-bit), "6.17/x64" (windows 64-bit), "6.17/OSX64" (macOS 64-bit Intel), "6.17/OSX" (macOS 32-bit), "6.17/macOS-arm64", "6.17/linux-x86_64", "6.17/linux-i686", "6.17/linux-aarch64", "6.17/linux-armv7l", etc
        </description>
        <retvals>
            string reaper_app_version - the returned version-number of Reaper
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>helperfunctions, reaper, app, version</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAudioAccessorEndTime</slug>
        <title>GetAudioAccessorEndTime</title>
        <functioncall prog_lang="cpp">double GetAudioAccessorEndTime(AudioAccessor* accessor)</functioncall>
        <functioncall prog_lang="eel">double GetAudioAccessorEndTime(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="lua">number length = reaper.GetAudioAccessorEndTime(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetAudioAccessorEndTime(AudioAccessor accessor)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description>
            Get the end time of the audio that can be returned from this accessor.
        </description>
        <retvals>
            number length - the length of the AudioAccessor
        </retvals>
        <parameters>
            AudioAccessor accessor - the AudioAccessor, whose end-time you want to have
        </parameters>
        <linked_to desc="see also:">
            Reaper:AudioAccessorStateChanged
                   returns, if audioaccessor has changed
            Reaper:AudioAccessorValidateState
                   to get validation-state of an AudioAccessor
            Reaper:CreateTakeAudioAccessor
                   to create an AudioAccessor for take
            Reaper:CreateTrackAudioAccessor
                   to create an AudioAccessor for track
            Reaper:DestroyAudioAccessor
                   to destroy an AudioAccessor
            Reaper:GetAudioAccessorStartTime
                   gets the starttime of an audioaccessor
            Reaper:GetAudioAccessorSamples
                   to get samples of an AudioAccessor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Accessor
        </chapter_context>
        <tags>audiomanagement, accessor, end, length</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAudioAccessorHash</slug>
        <title>GetAudioAccessorHash</title>
        <functioncall prog_lang="cpp">void GetAudioAccessorHash(AudioAccessor* accessor, char* hashNeed128)</functioncall>
        <functioncall prog_lang="eel">GetAudioAccessorHash(AudioAccessor accessor, #hashNeed128)</functioncall>
        <functioncall prog_lang="lua">string hashNeed128 = reaper.GetAudioAccessorHash(AudioAccessor accessor, string hashNeed128)</functioncall>
        <functioncall prog_lang="python">(AudioAccessor accessor, String hashNeed128) = RPR_GetAudioAccessorHash(accessor, hashNeed128)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description>
            Get a short hash string (128 chars or less) that will change only if the underlying samples change.

            Deprecated.
        </description>
        <deprecated since_when="Reaper 5.97" alternative="AudioAccessorStateChanged(available since at least Reaper 5.97)"/>
        <retvals>
            string hashNeed128 - 
        </retvals>
        <parameters>
            AudioAccessor accessor - 
            string hashNeed128 - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:AudioAccessorStateChanged
                   returns, if audioaccessor has changed
            Reaper:AudioAccessorValidateState
                   to get validation-state of an AudioAccessor
            Reaper:CreateTakeAudioAccessor
                   to create an AudioAccessor for take
            Reaper:CreateTrackAudioAccessor
                   to create an AudioAccessor for track
            Reaper:DestroyAudioAccessor
                   to destroy an AudioAccessor
            Reaper:GetAudioAccessorStartTime
                   gets the starttime of an audioaccessor
            Reaper:GetAudioAccessorEndTime
                   to get endtime of an AudioAccessor
            Reaper:GetAudioAccessorSamples
                   to get samples of an AudioAccessor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Accessor
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAudioAccessorSamples</slug>
        <title>GetAudioAccessorSamples</title>
        <functioncall prog_lang="cpp">int GetAudioAccessorSamples(AudioAccessor* accessor, int samplerate, int numchannels, double starttime_sec, int numsamplesperchannel, double* samplebuffer)</functioncall>
        <functioncall prog_lang="eel">int GetAudioAccessorSamples(AudioAccessor accessor, int samplerate, int numchannels, starttime_sec, int numsamplesperchannel, buffer_ptr samplebuffer)</functioncall>
        <functioncall prog_lang="lua">integer samples = reaper.GetAudioAccessorSamples(AudioAccessor accessor, integer samplerate, integer numchannels, number starttime_sec, integer numsamplesperchannel, reaper.array samplebuffer)</functioncall>
        <functioncall prog_lang="python">(Int retval, AudioAccessor accessor, Int samplerate, Int numchannels, Float starttime_sec, Int numsamplesperchannel, Float samplebuffer) = RPR_GetAudioAccessorSamples(accessor, samplerate, numchannels, starttime_sec, numsamplesperchannel, samplebuffer)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description>
            Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error.

            This function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. 
            
            Example usage:
                <pre><code>
                        tr = RPR_GetTrack(0, 0)
                        aa = RPR_CreateTrackAudioAccessor(tr)
                        buf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero
                        pos = 0.0
                        (ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)
                        # buf now holds the first 2*1024 audio samples from the track.
                        # typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.
                </code></pre>
        </description>
        <retvals>
            integer samples - 
        </retvals>
        <parameters>
            AudioAccessor accessor - 
            integer samplerate - 
            integer numchannels - 
            number starttime_sec - 
            integer numsamplesperchannel - 
            reaper.array samplebuffer - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:AudioAccessorStateChanged
                   returns, if audioaccessor has changed
            Reaper:AudioAccessorValidateState
                   to get validation-state of an AudioAccessor
            Reaper:CreateTakeAudioAccessor
                   to create an AudioAccessor for take
            Reaper:CreateTrackAudioAccessor
                   to create an AudioAccessor for track
            Reaper:DestroyAudioAccessor
                   to destroy an AudioAccessor
            Reaper:GetAudioAccessorStartTime
                   gets the starttime of an audioaccessor
            Reaper:GetAudioAccessorEndTime
                   to get endtime of an AudioAccessor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Accessor
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAudioAccessorStartTime</slug>
        <title>GetAudioAccessorStartTime</title>
        <functioncall prog_lang="cpp">double GetAudioAccessorStartTime(AudioAccessor* accessor)</functioncall>
        <functioncall prog_lang="eel">double GetAudioAccessorStartTime(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="lua">number audio_start_time = reaper.GetAudioAccessorStartTime(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetAudioAccessorStartTime(AudioAccessor accessor)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description>
            Get the start time of the audio that can be returned from this accessor.
        </description>
        <retvals>
            number audio_start_time - 
        </retvals>
        <parameters>
            AudioAccessor accessor - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:AudioAccessorStateChanged
                   returns, if audioaccessor has changed
            Reaper:AudioAccessorValidateState
                   to get validation-state of an AudioAccessor
            Reaper:CreateTakeAudioAccessor
                   to create an AudioAccessor for take
            Reaper:CreateTrackAudioAccessor
                   to create an AudioAccessor for track
            Reaper:DestroyAudioAccessor
                   to destroy an AudioAccessor
            Reaper:GetAudioAccessorEndTime
                   to get endtime of an AudioAccessor
            Reaper:GetAudioAccessorSamples
                   to get samples of an AudioAccessor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Accessor
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAudioDeviceInfo</slug>
        <title>GetAudioDeviceInfo</title>
        <functioncall prog_lang="cpp">bool GetAudioDeviceInfo(const char* attribute, char* descOut, int descOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetAudioDeviceInfo("attribute", #desc)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string desc = reaper.GetAudioDeviceInfo(string attribute)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String attribute, String descOut, Int descOut_sz) = RPR_GetAudioDeviceInfo(attribute, descOut, descOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            get information about the currently open audio device. 
            Attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. 

            returns false if unknown attribute or device not open.
        </description>
        <retvals>
            boolean retval - true, if returning a value is possible; false, if not(unknown attribute or device not open)
            string desc - the returned value; will not return a value, if Preferences are opened
        </retvals>
        <parameters>
            string attribute - the attribute to get, as set in Preferences -> Device
                             - MODE - the Audio system selected 
                             - IDENT_IN - the selected Input device
                             - IDENT_OUT - the selected Output device 
                             - BSIZE - the Buffer-sample-size (not the multiplier!)
                             - SRATE - the samplerate in Hz
                             - BPS - the sample-format (e.g 16, 24, 32 bit)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetConfigWantsDock</slug>
        <title>GetConfigWantsDock</title>
        <functioncall prog_lang="cpp">int GetConfigWantsDock(const char* ident_str)</functioncall>
        <functioncall prog_lang="eel">int GetConfigWantsDock("ident_str")</functioncall>
        <functioncall prog_lang="lua">integer dock_id = reaper.GetConfigWantsDock(string ident_str)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetConfigWantsDock(String ident_str)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            gets the dock ID desired by ident_str, if any
        </description>
        <retvals>
            integer dock_id - 
        </retvals>
        <parameters>
            string ident_str - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dockers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetCurrentProjectInLoadSave</slug>
        <title>GetCurrentProjectInLoadSave</title>
        <functioncall prog_lang="cpp">ReaProject* GetCurrentProjectInLoadSave()</functioncall>
        <functioncall prog_lang="eel">ReaProject GetCurrentProjectInLoadSave()</functioncall>
        <functioncall prog_lang="lua">ReaProject proj = reaper.GetCurrentProjectInLoadSave()</functioncall>
        <functioncall prog_lang="python">ReaProject proj = RPR_GetCurrentProjectInLoadSave()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns current project if in load/save (usually only used from project_config_extension_t)
        </description>
        <retvals>
            ReaProject proj - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetCursorContext</slug>
        <title>GetCursorContext</title>
        <functioncall prog_lang="cpp">int GetCursorContext()</functioncall>
        <functioncall prog_lang="eel">int GetCursorContext()</functioncall>
        <functioncall prog_lang="lua">integer context = reaper.GetCursorContext()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetCursorContext()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            return the current cursor context.
        </description>
        <retvals>
            integer context - the cursor context
                -   -1, unknown
                -    0, track panels
                -    1, items
                -    2, envelopes
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>arrangeviewmanagement, cursor, context, track, item, envelope, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetCursorContext2</slug>
        <title>GetCursorContext2</title>
        <functioncall prog_lang="cpp">int GetCursorContext2(bool want_last_valid)</functioncall>
        <functioncall prog_lang="eel">int GetCursorContext2(bool want_last_valid)</functioncall>
        <functioncall prog_lang="lua">integer context = reaper.GetCursorContext2(boolean want_last_valid)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetCursorContext2(Boolean want_last_valid)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)
        </description>
        <retvals>
            integer context - the cursor context
                -   -1, unknown
                -    0, track panels
                -    1, items
                -    2, envelopes
        </retvals>
        <parameters>
            boolean want_last_valid - true, get the last valid context; false, get the current context
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>arrangeviewmanagement, cursor, context, track, item, envelope, get, valid</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetCursorPosition</slug>
        <title>GetCursorPosition</title>
        <functioncall prog_lang="cpp">double GetCursorPosition()</functioncall>
        <functioncall prog_lang="eel">double GetCursorPosition()</functioncall>
        <functioncall prog_lang="lua">number position = reaper.GetCursorPosition()</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetCursorPosition()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            edit cursor position
        </description>
        <retvals>
            number position - the editcursor-position in seconds
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, edit, cursor, get, last, position</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetCursorPositionEx</slug>
        <title>GetCursorPositionEx</title>
        <functioncall prog_lang="cpp">double GetCursorPositionEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">double GetCursorPositionEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">number position = reaper.GetCursorPositionEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetCursorPositionEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the edit cursor position in a given project
        </description>
        <retvals>
            number position - the position in seconds
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, edit, cursor, position, get, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetDisplayedMediaItemColor</slug>
        <title>GetDisplayedMediaItemColor</title>
        <functioncall prog_lang="cpp">int GetDisplayedMediaItemColor(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">int GetDisplayedMediaItemColor(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">integer color = reaper.GetDisplayedMediaItemColor(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetDisplayedMediaItemColor(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
           gets the color of a MediaItem
        </description>
        <retvals>
            integer color - the native color-value of the MediaItem
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose color you want to get
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetDisplayedMediaItemColor2
                   to get the color of a MediaTrack, MediaItem and/or Take
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetDisplayedMediaItemColor2</slug>
        <title>GetDisplayedMediaItemColor2</title>
        <functioncall prog_lang="cpp">int GetDisplayedMediaItemColor2(MediaItem* item, MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer color = reaper.GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means "no color", not black.
        </description>
        <retvals>
            integer color - 
        </retvals>
        <parameters>
            MediaItem item - 
            MediaItem_Take take - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetDisplayedMediaItemColor
                   to get the color of a MediaItem
            Reaper:ColorToNative
                   for converting r-g-b-values to a native-color value
            Reaper:ColorFromNative
                   for converting a native color-calue into its r-g-b-representation
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopeInfo_Value</slug>
        <title>GetEnvelopeInfo_Value</title>
        <functioncall prog_lang="cpp">double GetEnvelopeInfo_Value(TrackEnvelope* env, const char* parmname)</functioncall>
        <functioncall prog_lang="eel">double GetEnvelopeInfo_Value(TrackEnvelope env, "parmname")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.GetEnvelopeInfo_Value(TrackEnvelope env, string parmname)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetEnvelopeInfo_Value(TrackEnvelope env, String parmname)</functioncall>
        <requires>
            Reaper=6.30
        </requires>
        <description prog_lang="*">
            Gets an envelope numerical-value attribute:
                I_TCPY : int : Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)
                I_TCPH : int : visible height of envelope
                I_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of padding
                I_TCPH_USED : int : visible height of envelope, exclusive of padding
                P_TRACK : MediaTrack * : parent track pointer (if any)
                P_DESTTRACK : MediaTrack * : destination track pointer, if on a send
                P_ITEM : MediaItem * : parent item pointer (if any)
                P_TAKE : MediaItem_Take * : parent take pointer (if any)
                I_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send
                I_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a hardware output
                I_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a send/receive
        </description>
        <retvals>
            number retval - the returned value of the attribute
        </retvals>
        <parameters>
            TrackEnvelope env - the TrackEnvelope, of which you want to retrieve the attribute-value
            string parmname - the attribute, whose value you want; 
                            - see description for the attributes you can use for more details
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>envelope management, get, attribute, value, height, offset, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopeName</slug>
        <title>GetEnvelopeName</title>
        <functioncall prog_lang="cpp">bool GetEnvelopeName(TrackEnvelope* env, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetEnvelopeName(TrackEnvelope env, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.GetEnvelopeName(TrackEnvelope env, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String bufOut, Int bufOut_sz) = RPR_GetEnvelopeName(env, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=5.974
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            TrackEnvelope env - 
            string buf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopePoint</slug>
        <title>GetEnvelopePoint</title>
        <functioncall prog_lang="cpp">bool GetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeOut, double* valueOut, int* shapeOut, double* tensionOut, bool* selectedOut)</functioncall>
        <functioncall prog_lang="eel">bool GetEnvelopePoint(TrackEnvelope envelope, int ptidx, &time, &value, int &shape, &tension, bool &selected)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number time, number value, integer shape, number tension, boolean selected = reaper.GetEnvelopePoint(TrackEnvelope envelope, integer ptidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int ptidx, Float timeOut, Float valueOut, Int shapeOut, Float tensionOut, Boolean selectedOut) = RPR_GetEnvelopePoint(envelope, ptidx, timeOut, valueOut, shapeOut, tensionOut, selectedOut)</functioncall>
        <requires>
            Reaper=6.43
        </requires>
        <description>
            Get the attributes of an envelope point.
        </description>
        <retvals>
            boolean retval - 
            number time - 
            number value - 
            integer shape - 
            number tension - 
            boolean selected - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            integer ptidx - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetEnvelopePointEx
                   gets an envelopepoint from envelopes or automation-items
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - the following retvals and parameters aren't optional anymore
                        - CPP: timeOut, valueOut, shapeOut, tensionOut, selectedOut
                        - EEL2: time, value, shape, tension, selected
                        - Lua: time, value, shape, tension, selected
                        - Python: timeOut, valueOut, shapeOut, tensionOut, selectedOut
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopePointByTime</slug>
        <title>GetEnvelopePointByTime</title>
        <functioncall prog_lang="cpp">int GetEnvelopePointByTime(TrackEnvelope* envelope, double time)</functioncall>
        <functioncall prog_lang="eel">int GetEnvelopePointByTime(TrackEnvelope envelope, time)</functioncall>
        <functioncall prog_lang="lua">integer envelope_index = reaper.GetEnvelopePointByTime(TrackEnvelope envelope, number time)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetEnvelopePointByTime(TrackEnvelope envelope, Float time)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description>
            Returns the envelope point at or immediately prior to the given time position. 
        </description>
        <retvals>
            integer envelope_index - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            number time - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetEnvelopePointByTimeEx
                   gets an envelope-point by time in envelopes or automation-items
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopePointByTimeEx</slug>
        <title>GetEnvelopePointByTimeEx</title>
        <functioncall prog_lang="cpp">int GetEnvelopePointByTimeEx(TrackEnvelope* envelope, int autoitem_idx, double time)</functioncall>
        <functioncall prog_lang="eel">int GetEnvelopePointByTimeEx(TrackEnvelope envelope, int autoitem_idx, time)</functioncall>
        <functioncall prog_lang="lua">integer envelope_index = reaper.GetEnvelopePointByTimeEx(TrackEnvelope envelope, integer autoitem_idx, number time)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetEnvelopePointByTimeEx(TrackEnvelope envelope, Int autoitem_idx, Float time)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description>
            Returns the envelope point at or immediately prior to the given time position.
            autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
            For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
            even if the automation item is trimmed so that not all points are visible.
            Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
        </description>
        <retvals>
            integer envelope_index - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            integer autoitem_idx - 
            number time - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetEnvelopePointEx
                   gets an envelope-point from envelopes or automation-items
            Reaper:SetEnvelopePointEx
                   sets an envelope-point in envelopes or automation-items
            Reaper:InsertEnvelopePointEx
                   inserts envelope-points in envelopes or automation-items
            Reaper:DeleteEnvelopePointEx
                   deletes envelope-points in envelopes or automation-items
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopePointEx</slug>
        <title>GetEnvelopePointEx</title>
        <functioncall prog_lang="cpp">bool GetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeOut, double* valueOut, int* shapeOut, double* tensionOut, bool* selectedOut)</functioncall>
        <functioncall prog_lang="eel">bool GetEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx, &time, &value, int &shape, &tension, bool &selected)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number time, number value, integer shape, number tension, boolean selected = reaper.GetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Int ptidx, Float timeOut, Float valueOut, Int shapeOut, Float tensionOut, Boolean selectedOut) = RPR_GetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeOut, valueOut, shapeOut, tensionOut, selectedOut)</functioncall>
        <requires>
            Reaper=6.43
        </requires>
        <description>
            Get the attributes of an envelope point.
            autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
            For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
            even if the automation item is trimmed so that not all points are visible.
            Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
        </description>
        <retvals>
            boolean retval - 
            number time - 
            number value - 
            integer shape - 
            number tension - 
            boolean selected - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            integer autoitem_idx - 
            integer ptidx - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountEnvelopePointsEx
                   counts envelope-points in envelopes or automation-items
            Reaper:SetEnvelopePointEx
                   sets an envelope-point in envelopes or automation-items
            Reaper:InsertEnvelopePointEx
                   inserts envelope-points in envelopes or automation-items
            Reaper:DeleteEnvelopePointEx
                   deletes envelope-points in envelopes or automation-items
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - the following retvals and parameters aren't optional anymore
                        - CPP: timeOut, valueOut, shapeOut, tensionOut, selectedOut
                        - EEL2: time, value, shape, tension, selected
                        - Lua: time, value, shape, tension, selected
                        - Python: timeOut, valueOut, shapeOut, tensionOut, selectedOut
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopeScalingMode</slug>
        <title>GetEnvelopeScalingMode</title>
        <functioncall prog_lang="cpp">int GetEnvelopeScalingMode(TrackEnvelope* env)</functioncall>
        <functioncall prog_lang="eel">int GetEnvelopeScalingMode(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="lua">integer scaling_mode = reaper.GetEnvelopeScalingMode(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetEnvelopeScalingMode(TrackEnvelope env)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. 
            
            Note: All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.
        </description>
        <retvals>
            integer scaling_mode - the sscaling mode of the envelope
                                 - 0, no scaling
                                 - 1, fader scaling
        </retvals>
        <parameters>
            TrackEnvelope env - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:ScaleFromEnvelopeMode
                   scales a value from an envelope-mode
            Reaper:ScaleToEnvelopeMode
                   scales a value to an envelope-mode
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopeStateChunk</slug>
        <title>GetEnvelopeStateChunk</title>
        <functioncall prog_lang="cpp">bool GetEnvelopeStateChunk(TrackEnvelope* env, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool GetEnvelopeStateChunk(TrackEnvelope env, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetEnvelopeStateChunk(env, strNeedBig, strNeedBig_sz, isundoOptional)</functioncall>
        <requires>
            Reaper=5.982
        </requires>
        <description>
            Gets the RPPXML state of an envelope.
        </description>
        <retvals>
            boolean retval - true, if it's successful; false, if unsuccessful
            string str - the state-chunk
        </retvals>
        <parameters>
            TrackEnvelope env - the Track-Envelope-object, whose trackstate you want to have
            string str - just pass "" to it
            boolean isundo - Undo flag is a performance/caching hint.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>envelopemanagement, get, statechunk</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopeUIState</slug>
        <title>GetEnvelopeUIState</title>
        <functioncall prog_lang="cpp">int retval = GetEnvelopeUIState(TrackEnvelope* env)</functioncall>
        <functioncall prog_lang="eel">int retval = GetEnvelopeUIState(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.GetEnvelopeUIState(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetEnvelopeUIState(TrackEnvelope env)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            gets information on the UI state of an envelope: returns &1 if automation/modulation is playing back, &2 if automation is being actively written, &4 if the envelope recently had an effective automation mode change
        </description>
        <retvals>
            integer retval - the ui-state as flag-value
        </retvals>
        <parameters>
            TrackEnvelope env - the envelope, whose ui-state you want
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Get
        </chapter_context>
        <tags>envelopemanagement, ui, state, get</tags>
        <changelog>
            Reaper 6.71 - added
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetExePath</slug>
        <title>GetExePath</title>
        <functioncall prog_lang="cpp">const char* GetExePath()</functioncall>
        <functioncall prog_lang="eel">bool GetExePath(#retval)</functioncall>
        <functioncall prog_lang="lua">string path = reaper.GetExePath()</functioncall>
        <functioncall prog_lang="python">String retval = RPR_GetExePath()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER
        </description>
        <retvals>
            string path - the path to the reaper.exe or reaper.app
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>helperfunctions, reaper, get, exe, path</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetExtState</slug>
        <title>GetExtState</title>
        <functioncall prog_lang="cpp">const char* GetExtState(const char* section, const char* key)</functioncall>
        <functioncall prog_lang="eel">bool GetExtState(#retval, "section", "key")</functioncall>
        <functioncall prog_lang="lua">string extstate_value= reaper.GetExtState(string section, string key)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_GetExtState(String section, String key)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Get the extended state value for a specific section and key.
            
            Note: section and key are not case-sensitive
        </description>
        <retvals>
            string extstate_value - the value of the extstate
        </retvals>
        <parameters>
            string section - the section, in which the key and value is stored 
            string key - the key, that contains the value
        </parameters>
        <linked_to desc="see also:">
            Reaper:SetExtState
                   sets an extstate to store information for your script
            Reaper:DeleteExtState
                   deleted an extstate that stores information for your script
            Reaper:HasExtState
                   checks, if an extstate exists
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Extension States
        </chapter_context>
        <tags>extension state, state, value, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetFocusedFX</slug>
        <title>GetFocusedFX</title>
        <functioncall prog_lang="cpp">int GetFocusedFX(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)</functioncall>
        <functioncall prog_lang="eel">int GetFocusedFX(int &tracknumber, int &itemnumber, int &fxnumber)</functioncall>
        <functioncall prog_lang="lua">integer retval, integer tracknumber, integer itemnumber, integer fxnumber = reaper.GetFocusedFX()</functioncall>
        <functioncall prog_lang="python">(Int retval, Int tracknumberOut, Int itemnumberOut, Int fxnumberOut) = RPR_GetFocusedFX(tracknumberOut, itemnumberOut, fxnumberOut)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description>
            Get focused FX. 

            !!Deprecated, use GetFocusedFX2 instead

            See GetLastTouchedFX
        </description>
        <deprecated since_when="Reaper 5.979" alternative="GetFocusedFX2(available since at least Reaper 6.16)"/>
        <retvals>
            integer retval - 0, if no FX window has focus
                           - 1, if a track FX window has focus or was the last focused and still open
                           - 2, if an item FX window has focus or was the last focused and still open
            integer tracknumber - tracknumber; 0, master track; 1, track 1; etc. 
            integer itemnumber - -1, if it's a track-fx; 0 and higher, the mediaitem-number
            integer fxnumber - If item FX, fxnumber will have the high word be the take index, the low word the FX index
        </retvals>
        <linked_to desc="see also:">
            Reaper:GetFocusedFX2
                   gets the focused/opened fx and if it's item/track fx
            Reaper:GetLastTouchedFX
                   gets the last fx that was touched by the user
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Misc
        </chapter_context>
        <tags>fxmanagement, get, focused, fx</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetFocusedFX2</slug>
        <title>GetFocusedFX2</title>
        <functioncall prog_lang="cpp">int GetFocusedFX2(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)</functioncall>
        <functioncall prog_lang="eel">int GetFocusedFX2(int &tracknumber, int &itemnumber, int &fxnumber)</functioncall>
        <functioncall prog_lang="lua">integer retval, number tracknumber, number itemnumber, number fxnumber = reaper.GetFocusedFX2()</functioncall>
        <functioncall prog_lang="python">(Int retval, Int tracknumberOut, Int itemnumberOut, Int fxnumberOut) = RPR_GetFocusedFX2(tracknumberOut, itemnumberOut, fxnumberOut)</functioncall>
        <requires>
            Reaper=6.16
        </requires>
        <description>
            Return value has 1 set if track FX, 2 if take/item FX, &4 is set if FX is no longer focused but still open. 

            tracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). 
        </description>
        <retvals>
            integer retval - 0, if no FX window has focus
                           - 1, if a track FX window has focus or was the last focused and still open
                           - 2, if an item FX window has focus or was the last focused and still open
                           - &4, if FX is no longer focused but still open
            integer tracknumber - tracknumber; 0, master track; 1, track 1; etc. 
            integer itemnumber - -1, if it's a track-fx; 0 and higher, the mediaitem-number
            integer fxnumber - If item FX, fxnumber will have the high word be the take index, the low word the FX index
        </retvals>
        <linked_to desc="see also:">
            Reaper:GetLastTouchedFX
                   gets the last fx that was touched by the user
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Misc
        </chapter_context>
        <tags>fxmanagement, get, focused, fx</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetFreeDiskSpaceForRecordPath</slug>
        <title>GetFreeDiskSpaceForRecordPath</title>
        <functioncall prog_lang="cpp">int GetFreeDiskSpaceForRecordPath(ReaProject* proj, int pathidx)</functioncall>
        <functioncall prog_lang="eel">int GetFreeDiskSpaceForRecordPath(ReaProject proj, int pathidx)</functioncall>
        <functioncall prog_lang="lua">integer diskspace_in_mb = reaper.GetFreeDiskSpaceForRecordPath(ReaProject proj, integer pathidx)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetFreeDiskSpaceForRecordPath(ReaProject proj, Int pathidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.
        </description>
        <retvals>
            integer diskspace_in_mb - the freedisk-size in megabytes
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer pathidx - recording path; 0, primary recording path; 1, secondary recording path
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Misc
        </chapter_context>
        <tags>projectmanagement, free disk space, get, primary recording path, secondary recording path</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetFXEnvelope</slug>
        <title>GetFXEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetFXEnvelope(MediaTrack* track, int fxindex, int parameterindex, bool create)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetFXEnvelope(MediaTrack track, int fxindex, int parameterindex, bool create)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope env = reaper.GetFXEnvelope(MediaTrack track, integer fxindex, integer parameterindex, boolean create)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope env = RPR_GetFXEnvelope(MediaTrack track, Int fxindex, Int parameterindex, Boolean create)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
        </description>
        <retvals>
            TrackEnvelope env - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fxindex - 
            integer parameterindex - 
            boolean create - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>envelope management, get, create, fx envelope</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetGlobalAutomationOverride</slug>
        <title>GetGlobalAutomationOverride</title>
        <functioncall prog_lang="cpp">int GetGlobalAutomationOverride()</functioncall>
        <functioncall prog_lang="eel">int GetGlobalAutomationOverride()</functioncall>
        <functioncall prog_lang="lua">integer automation_override = reaper.GetGlobalAutomationOverride()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetGlobalAutomationOverride()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass
        </description>
        <retvals>
            integer automation_override - global automation override-mode
                                        -   -1, no override
                                        -   0, trim/read
                                        -   1, read
                                        -   2, touch
                                        -   3, write
                                        -   4, latch
                                        -   5, bypass
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetHZoomLevel</slug>
        <title>GetHZoomLevel</title>
        <functioncall prog_lang="cpp">double GetHZoomLevel()</functioncall>
        <functioncall prog_lang="eel">double GetHZoomLevel()</functioncall>
        <functioncall prog_lang="lua">number pixels_per_second = reaper.GetHZoomLevel()</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetHZoomLevel()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns pixels/second
        </description>
        <retvals>
            number pixels_per_second - pixels/shown per second visible in arrange-view
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, zoom, horizontal, get, factor</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetInputActivityLevel</slug>
        <title>GetInputActivityLevel</title>
        <functioncall prog_lang="cpp">double GetInputActivityLevel(int input_id)</functioncall>
        <functioncall prog_lang="eel">double GetInputActivityLevel(int input_id)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.GetInputActivityLevel(integer input_id)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetInputActivityLevel(Int input_id)</functioncall>
        <requires>
            Reaper=6.75
        </requires>
        <description prog_lang="*">
            returns approximate input level if available, 0-511 mono inputs, |1024 for stereo pairs, 4096+devidx*32 for MIDI devices
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            integer input_id - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags>audio, audiomanagement, input, activity level, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetInputChannelName</slug>
        <title>GetInputChannelName</title>
        <functioncall prog_lang="cpp">const char* GetInputChannelName(int channelIndex)</functioncall>
        <functioncall prog_lang="eel">bool GetInputChannelName(#retval, int channelIndex)</functioncall>
        <functioncall prog_lang="lua">string chan_name = reaper.GetInputChannelName(integer channelIndex)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_GetInputChannelName(Int channelIndex)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the name of a input-channel.
        </description>
        <retvals>
            string chan_name - the name of the input-channel.
        </retvals>
        <parameters>
            integer channelIndex - the index of the input-channels, with 0 for the first, 1 for the second, etc.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags>audio, audiomanagement, input, channels, name, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetInputOutputLatency</slug>
        <title>GetInputOutputLatency</title>
        <functioncall prog_lang="cpp">void GetInputOutputLatency(int* inputlatencyOut, int* outputLatencyOut)</functioncall>
        <functioncall prog_lang="eel">GetInputOutputLatency(int &inputlatency, int &outputLatency)</functioncall>
        <functioncall prog_lang="lua">number inputlatency, number outputLatency = reaper.GetInputOutputLatency()</functioncall>
        <functioncall prog_lang="python">(Int inputlatencyOut, Int outputLatencyOut) = RPR_GetInputOutputLatency(inputlatencyOut, outputLatencyOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets the audio device input/output latency in samples
        </description>
        <retvals>
            integer inputlatency - the input-latency
            integer outputLatency - the output-latency
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags>audio, device, management, input, output, latency</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetItemEditingTime2</slug>
        <title>GetItemEditingTime2</title>
        <functioncall prog_lang="cpp">double GetItemEditingTime2(PCM_source** which_itemOut, int* flagsOut)</functioncall>
        <functioncall prog_lang="eel">double GetItemEditingTime2(PCM_source &which_item, int &flags)</functioncall>
        <functioncall prog_lang="lua">number position, PCM_source which_item, integer flags = reaper.GetItemEditingTime2()</functioncall>
        <functioncall prog_lang="python">(Float retval, PCM_source* which_itemOut, Int flagsOut) = RPR_GetItemEditingTime2(which_itemOut, flagsOut)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description prog_lang="*">
            returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)
        </description>
        <retvals>
            number position - 
            PCM_source which_item - 
            integer flags - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetItemFromPoint</slug>
        <title>GetItemFromPoint</title>
        <functioncall prog_lang="cpp">MediaItem* GetItemFromPoint(int screen_x, int screen_y, bool allow_locked, MediaItem_Take** takeOutOptional)</functioncall>
        <functioncall prog_lang="eel">MediaItem GetItemFromPoint(int screen_x, int screen_y, bool allow_locked, MediaItem_Take &take)</functioncall>
        <functioncall prog_lang="lua">MediaItem item, MediaItem_Take take = reaper.GetItemFromPoint(integer screen_x, integer screen_y, boolean allow_locked)</functioncall>
        <functioncall prog_lang="python">MediaItem item = RPR_GetItemFromPoint(Int screen_x, Int screen_y, Boolean allow_locked, MediaItem_Take* takeOutOptional)</functioncall>
        <requires>
            Reaper=5.975
        </requires>
        <description>
            Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit(in Lua, this function simply returns the take as additional return-value).

            Note: You can not get the item at screen-coordinates, where it is hidden by other windows.
        </description>
        <retvals>
            MediaItem item - the MediaItem at the position
            MediaItem_Take take - the MediaItem_Take at the position
        </retvals>
        <parameters>
            integer screen_x - the x-position in pixels
            integer screen_y - the y-position in pixels
            boolean allow_locked - true, allow getting locked items as well; false, don't get locked items
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetThingFromPoint
                   returns, various elements at specific coordinates(arrange, mcp, fxchain, etc)
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, get, item, mediaitem, mediaitem take, take, at position</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetItemProjectContext</slug>
        <title>GetItemProjectContext</title>
        <functioncall prog_lang="cpp">ReaProject* GetItemProjectContext(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">ReaProject GetItemProjectContext(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">ReaProject proj = reaper.GetItemProjectContext(MediaItem item)</functioncall>
        <functioncall prog_lang="python">ReaProject proj = RPR_GetItemProjectContext(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the project, in which a MediaItem is located.
        </description>
        <retvals>
            ReaProject proj - the project, in which the MediaItem is located; returned as a reaper-object
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose project-location you want to know
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>mediaitemmanagement, get, project, context, item</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetItemStateChunk</slug>
        <title>GetItemStateChunk</title>
        <functioncall prog_lang="cpp">bool GetItemStateChunk(MediaItem* item, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool GetItemStateChunk(MediaItem item, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetItemStateChunk(MediaItem item, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetItemStateChunk(item, strNeedBig, strNeedBig_sz, isundoOptional)</functioncall>
        <requires>
            Reaper=5.982
        </requires>
        <description>
            Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
        </description>
        <retvals>
            boolean retval - true, getting statechunk was successful
            string str - the statechunk of the MediaItem
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose statechunk you want
            string str - just pass "" to it
            boolean isundo - Undo flag is a performance/caching hint.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>mediaitemmanagement, statechunk, item, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetLastColorThemeFile</slug>
        <title>GetLastColorThemeFile</title>
        <functioncall prog_lang="cpp">const char* GetLastColorThemeFile()</functioncall>
        <functioncall prog_lang="eel">bool GetLastColorThemeFile(#retval)</functioncall>
        <functioncall prog_lang="lua">string theme_filename_with_path = reaper.GetLastColorThemeFile()</functioncall>
        <functioncall prog_lang="python">String retval = RPR_GetLastColorThemeFile()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the last used color-theme-file.
        </description>
        <retvals>
            string theme_filename_with_path - the path and filename of the last used theme
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags>userinterface, get, color, theme, file, path</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetLastMarkerAndCurRegion</slug>
        <title>GetLastMarkerAndCurRegion</title>
        <functioncall prog_lang="cpp">void GetLastMarkerAndCurRegion(ReaProject* proj, double time, int* markeridxOut, int* regionidxOut)</functioncall>
        <functioncall prog_lang="eel">GetLastMarkerAndCurRegion(ReaProject proj, time, int &markeridx, int &regionidx)</functioncall>
        <functioncall prog_lang="lua">integer markeridx, integer regionidx = reaper.GetLastMarkerAndCurRegion(ReaProject proj, number time)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Float time, Int markeridxOut, Int regionidxOut) = RPR_GetLastMarkerAndCurRegion(proj, time, markeridxOut, regionidxOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Get the last project marker before time, and/or the project region that includes time. 
            markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. 
        </description>
        <retvals>
            integer markeridx - the last marker-number(not shown number!) before parameter time
            integer regionidx - the region, in which parameter time lies
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number time - the position to check in seconds
        </parameters>
        <linked_to desc="see also:">
            Reaper:EnumProjectMarkers
                   returns, the attributes of a project marker
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, get, last, current, region, marker</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetLastTouchedFX</slug>
        <title>GetLastTouchedFX</title>
        <functioncall prog_lang="cpp">bool GetLastTouchedFX(int* tracknumberOut, int* fxnumberOut, int* paramnumberOut)</functioncall>
        <functioncall prog_lang="eel">bool GetLastTouchedFX(int &tracknumber, int &fxnumber, int &paramnumber)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer tracknumber, integer fxnumber, integer paramnumber = reaper.GetLastTouchedFX()</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int tracknumberOut, Int fxnumberOut, Int paramnumberOut) = RPR_GetLastTouchedFX(tracknumberOut, fxnumberOut, paramnumberOut)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description>
            Returns the last touched track, it's last touched parameter and tracknumber.

            The low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. 
        </description>
        <retvals>
            boolean retval - true, if last touched FX parameter is valid; false, if otherwise
            integer tracknumber - the tracknumber; 0 means the master track, 1 means track 1, etc.
                                - If the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc).
            integer fxnumber - the id of the FX in the track tracknumber, zero-based
                             - For track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. 
                             - For item FX, the low word defines the FX index in the chain, and the high word defines the take number. 
            integer paramnumber - the id of the last parameter touched, zero-based
        </retvals>
        <linked_to desc="see also:">
            Reaper:GetFocusedFX2
                   gets the focused/open fx
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Misc
        </chapter_context>
        <tags>fxmanagement, last, touched, get, parameter, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetLastTouchedTrack</slug>
        <title>GetLastTouchedTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetLastTouchedTrack()</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetLastTouchedTrack()</functioncall>
        <functioncall prog_lang="lua">MediaTrack tr = reaper.GetLastTouchedTrack()</functioncall>
        <functioncall prog_lang="python">MediaTrack tr = RPR_GetLastTouchedTrack()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets the MediaTrack, that has been last touched.
        </description>
        <retvals>
            MediaTrack tr - the last touched MediaTrack as an object
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, get, last, touched, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMainHwnd</slug>
        <title>GetMainHwnd</title>
        <functioncall prog_lang="cpp">HWND GetMainHwnd()</functioncall>
        <functioncall prog_lang="eel">HWND GetMainHwnd()</functioncall>
        <functioncall prog_lang="lua">HWND hwnd = reaper.GetMainHwnd()</functioncall>
        <functioncall prog_lang="python">HWND hwnd = RPR_GetMainHwnd()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the Reaper-window as an HWND-object
        </description>
        <retvals>
            HWND hwnd - the Reaper-Window
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>userinterface, get, reaper, window</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMasterMuteSoloFlags</slug>
        <title>GetMasterMuteSoloFlags</title>
        <functioncall prog_lang="cpp">int GetMasterMuteSoloFlags()</functioncall>
        <functioncall prog_lang="eel">int GetMasterMuteSoloFlags()</functioncall>
        <functioncall prog_lang="lua">integer mastermutesolo = reaper.GetMasterMuteSoloFlags()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetMasterMuteSoloFlags()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Deprecated: Get the mute/solo-state of the master-track. This is deprecated as you can just query the master track as well.
        </description>
        <deprecated since_when="Reaper 5.62" alternative="GetTrackState(available since at least Reaper 5.62) with GetMasterTrack"/>
        <retvals>
            integer mastermutesolo - state of mute/solo of the master-track; &1=master mute,&2=master solo.
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, get, master, track, mute, solo, flag</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMasterTrack</slug>
        <title>GetMasterTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetMasterTrack(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetMasterTrack(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">MediaTrack track = reaper.GetMasterTrack(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">MediaTrack track = RPR_GetMasterTrack(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get a MediaTrack-object of the MasterTrack.
        </description>
        <retvals>
            MediaTrack track - the MediaTrack-object of the MasterTrack
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, get, master, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMasterTrackVisibility</slug>
        <title>GetMasterTrackVisibility</title>
        <functioncall prog_lang="cpp">int GetMasterTrackVisibility()</functioncall>
        <functioncall prog_lang="eel">int GetMasterTrackVisibility()</functioncall>
        <functioncall prog_lang="lua">integer master_visibility = reaper.GetMasterTrackVisibility()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetMasterTrackVisibility()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Get the visibility of the master-track in mixer and track-control-panel.
        </description>
        <retvals>
            integer master_visibility - state of visibility of the master-track
                                      - &1 - 1, master track visible in tcp; 0, master track invisible in mixer
                                      - &2 - 2, master track invisible in mixer; 0, master track visible in mixer
        </retvals>
        <linked_to desc="see also:">
            Reaper:SetMasterTrackVisibility
                   sets the visibility of the master track in mcp/tcp
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, get, master, visibility, tcp, mcp</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMaxMidiInputs</slug>
        <title>GetMaxMidiInputs</title>
        <functioncall prog_lang="cpp">int GetMaxMidiInputs()</functioncall>
        <functioncall prog_lang="eel">int GetMaxMidiInputs()</functioncall>
        <functioncall prog_lang="lua">integer max_midi_inputs = reaper.GetMaxMidiInputs()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetMaxMidiInputs()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns max dev for midi inputs
        </description>
        <retvals>
            integer max_midi_inputs - the number of max midi inputs
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Midi
        </chapter_context>
        <tags>midimanagement, device, input, get, maximum</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMaxMidiOutputs</slug>
        <title>GetMaxMidiOutputs</title>
        <functioncall prog_lang="cpp">int GetMaxMidiOutputs()</functioncall>
        <functioncall prog_lang="eel">int GetMaxMidiOutputs()</functioncall>
        <functioncall prog_lang="lua">integer max_midi_outputs = reaper.GetMaxMidiOutputs()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetMaxMidiOutputs()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns max dev for midi outputs
        </description>
        <retvals>
            integer max_midi_outputs - the number of max midi outputs
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Midi
        </chapter_context>
        <tags>midimanagement, device, output, get, maximum</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaFileMetadata</slug>
        <title>GetMediaFileMetadata</title>
        <functioncall prog_lang="cpp">int GetMediaFileMetadata(PCM_source* mediaSource, const char* identifier, char* bufOutNeedBig, int bufOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int GetMediaFileMetadata(PCM_source mediaSource, "identifier", #buf)</functioncall>
        <functioncall prog_lang="lua">integer retval, string buf = reaper.GetMediaFileMetadata(PCM_source mediaSource, string identifier)</functioncall>
        <functioncall prog_lang="python">(Int retval, PCM_source mediaSource, String identifier, String bufOutNeedBig, Int bufOutNeedBig_sz) = RPR_GetMediaFileMetadata(mediaSource, identifier, bufOutNeedBig, bufOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=6.59
        </requires>
        <description prog_lang="*">
            Get text-based metadata from a media file for a given identifier. Call with identifier="" to list all identifiers contained in the file, separated by newlines. May return "[Binary data]" for metadata that REAPER doesn't handle.
        </description>
        <parameters>
            PCM_source mediaSource - the PCM-source of a file, whose metadata you want to get
            string identifier - the identifier; use "" to get all availbale identifier from the sourcefile
        </parameters>
        <retvals>
            integer retval - 0, identifier not available; 1, identifier available
            string buf - the returned metadata-value of the identifier
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>filemanagement, get, metadata</tags>
        <changelog>
            Reaper 6.59 - supports now getting any BPM-metadata, with identifier being "Generic:BPM"
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItem</slug>
        <title>GetMediaItem</title>
        <functioncall prog_lang="cpp">MediaItem* GetMediaItem(ReaProject* proj, int itemidx)</functioncall>
        <functioncall prog_lang="eel">MediaItem GetMediaItem(ReaProject proj, int itemidx)</functioncall>
        <functioncall prog_lang="lua">MediaItem item = reaper.GetMediaItem(ReaProject proj, integer itemidx)</functioncall>
        <functioncall prog_lang="python">MediaItem item = RPR_GetMediaItem(ReaProject proj, Int itemidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            get an item from a project by item count (zero-based)
        </description>
        <retvals>
            MediaItem item - the requested MediaItem as a MediaItem-object
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project.
            integer itemidx - the number of the item within the whole project; 0 for the first, 1 for the second, etc; numberingorder depending on, when was a MediaItem added to the project(recording, import, etc)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, get, item, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItem_Track</slug>
        <title>GetMediaItem_Track</title>
        <functioncall prog_lang="cpp">MediaTrack* GetMediaItem_Track(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetMediaItem_Track(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">MediaTrack track = reaper.GetMediaItem_Track(MediaItem item)</functioncall>
        <functioncall prog_lang="python">MediaTrack track = RPR_GetMediaItem_Track(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get parent track of media item
        </description>
        <retvals>
            MediaTrack track - the returned MediaTrack, in which the MediaItem lies
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose track you want to know
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>trackmanagement, mediaitemmanagement, get, track, mediaitem</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetArmedCommand</slug>
        <title>GetArmedCommand</title>
        <functioncall prog_lang="cpp">int GetArmedCommand(char* secOut, int secOut_sz)</functioncall>
        <functioncall prog_lang="eel">int GetArmedCommand(#sec)</functioncall>
        <functioncall prog_lang="lua">integer retval, string sec = reaper.GetArmedCommand()</functioncall>
        <functioncall prog_lang="python">(Int retval, String secOut, Int secOut_sz) = RPR_GetArmedCommand(secOut, secOut_sz)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description prog_lang="*">
            gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.
        </description>
        <retvals>
            integer retval - 
            string sec - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags>miscellaneous, get, armed, command</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ArmCommand</slug>
        <title>ArmCommand</title>
        <functioncall prog_lang="cpp">void ArmCommand(int cmd, const char* sectionname)</functioncall>
        <functioncall prog_lang="eel">ArmCommand(int cmd, "sectionname")</functioncall>
        <functioncall prog_lang="lua">reaper.ArmCommand(integer cmd, string sectionname)</functioncall>
        <functioncall prog_lang="python">RPR_ArmCommand(Int cmd, String sectionname)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description prog_lang="*">
            arms a command (or disarms if 0 passed) in section sectionname (empty string for main)
        </description>
        <parameters>
            integer cmd - 
            string sectionname - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags>miscellaneous, get, armed, command</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemInfo_Value</slug>
        <title>GetMediaItemInfo_Value</title>
        <functioncall prog_lang="cpp">double GetMediaItemInfo_Value(MediaItem* item, const char* parmname)</functioncall>
        <functioncall prog_lang="eel">double GetMediaItemInfo_Value(MediaItem item, "parmname")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.GetMediaItemInfo_Value(MediaItem item, string parmname)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetMediaItemInfo_Value(MediaItem item, String parmname)</functioncall>
        <requires>
            Reaper=6.34
        </requires>
        <description prog_lang="*">
            Get media item numerical-value attributes.
                B_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.
                B_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.
                C_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.
                B_LOOPSRC : bool * : loop source
                B_ALLTAKESPLAY : bool * : all takes play
                B_UISEL : bool * : selected in arrange view
                C_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
                C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
                C_LOCK : char * : locked, &1=locked, &2=lock to active take
                D_VOL : double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
                D_POSITION : double * : item position in seconds
                D_LENGTH : double * : item length in seconds
                D_SNAPOFFSET : double * : item snap offset in seconds
                D_FADEINLEN : double * : item manual fadein length in seconds
                D_FADEOUTLEN : double * : item manual fadeout length in seconds
                D_FADEINDIR : double * : item fadein curvature, -1..1
                D_FADEOUTDIR : double * : item fadeout curvature, -1..1
                D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
                D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
                C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
                C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
                I_GROUPID : int * : group ID, 0=no group
                I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
                I_LASTH : int * : height in pixels (read-only)
                I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
                I_CURTAKE : int * : active take number
                IP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)
                F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
                F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
                P_TRACK : MediaTrack * : (read-only)
        </description>
        <retvals>
            number retval - the value you requested
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose value you want to have
            string parmname - the parametername, whose value you want to have; refer description for more details
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>mediaitemmanagement, get, parameter, numerical values</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemNumTakes</slug>
        <title>GetMediaItemNumTakes</title>
        <functioncall prog_lang="cpp">int GetMediaItemNumTakes(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">int GetMediaItemNumTakes(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">integer itemnumtakes = reaper.GetMediaItemNumTakes(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetMediaItemNumTakes(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the number of takes in a MediaItem-object.
        </description>
        <retvals>
            integer itemnumtakes - the number of takes within the MediaItem-object
        </retvals>
        <parameters>
            MediaItem item - the MediaItem-object, whose number of takes you want to know.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, take, count, number</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTake</slug>
        <title>GetMediaItemTake</title>
        <functioncall prog_lang="cpp">MediaItem_Take* GetMediaItemTake(MediaItem* item, int tk)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take GetMediaItemTake(MediaItem item, int tk)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take = reaper.GetMediaItemTake(MediaItem item, integer tk)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take take = RPR_GetMediaItemTake(MediaItem item, Int tk)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get a take from a MediaItem as a MediaItem_Take-object.
        </description>
        <retvals>
            MediaItem_Take take - the returned take as a MediaItem_Take-object
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose take you want to request
            integer tk - the id of the take, that you want to request
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, item, take, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTake_Item</slug>
        <title>GetMediaItemTake_Item</title>
        <functioncall prog_lang="cpp">MediaItem* GetMediaItemTake_Item(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">MediaItem GetMediaItemTake_Item(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">MediaItem item = reaper.GetMediaItemTake_Item(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">MediaItem item = RPR_GetMediaItemTake_Item(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get parent item of media item take.
        </description>
        <retvals>
            MediaItem item - the MediaItem, in which the MediaItem_Take takes place.
        </retvals>
        <parameters>
            MediaItem_Take take - the MediaItem_Take-object, whose accompanying MediaItem you want to request.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, take, get, item</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTake_Peaks</slug>
        <title>GetMediaItemTake_Peaks</title>
        <functioncall prog_lang="cpp">int GetMediaItemTake_Peaks(MediaItem_Take* take, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)</functioncall>
        <functioncall prog_lang="eel">int GetMediaItemTake_Peaks(MediaItem_Take take, peakrate, starttime, int numchannels, int numsamplesperchannel, int want_extra_type, buffer_ptr buf)</functioncall>
        <functioncall prog_lang="lua">integer peaks = reaper.GetMediaItemTake_Peaks(MediaItem_Take take, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Float peakrate, Float starttime, Int numchannels, Int numsamplesperchannel, Int want_extra_type, Float buf) = RPR_GetMediaItemTake_Peaks(take, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.
            peakrate is number of pixels in seconds.
        </description>
        <retvals>
            integer peaks - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            number peakrate - 
            number starttime - 
            integer numchannels - 
            integer numsamplesperchannel - 
            integer want_extra_type - 
            reaper.array buf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTake_Source</slug>
        <title>GetMediaItemTake_Source</title>
        <functioncall prog_lang="cpp">PCM_source* GetMediaItemTake_Source(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">PCM_source GetMediaItemTake_Source(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">PCM_source source = reaper.GetMediaItemTake_Source(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">PCM_source source = RPR_GetMediaItemTake_Source(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get media source of media item take
        </description>
        <retvals>
            PCM_source source - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTake_Track</slug>
        <title>GetMediaItemTake_Track</title>
        <functioncall prog_lang="cpp">MediaTrack* GetMediaItemTake_Track(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetMediaItemTake_Track(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">MediaTrack track = reaper.GetMediaItemTake_Track(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">MediaTrack track = RPR_GetMediaItemTake_Track(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get parent track of media item take
        </description>
        <retvals>
            MediaTrack track - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTakeByGUID</slug>
        <title>GetMediaItemTakeByGUID</title>
        <functioncall prog_lang="cpp">MediaItem_Take* GetMediaItemTakeByGUID(ReaProject* project, const GUID* guid)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take GetMediaItemTakeByGUID(ReaProject project, "guidGUID")</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take = reaper.GetMediaItemTakeByGUID(ReaProject project, string guidGUID)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take take = RPR_GetMediaItemTakeByGUID(ReaProject project, const GUID guid)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            MediaItem_Take take - 
        </retvals>
        <parameters>
            ReaProject project - the project-number. 0 for the current project. 
            string guidGUID - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTakeInfo_Value</slug>
        <title>GetMediaItemTakeInfo_Value</title>
        <functioncall prog_lang="cpp">double GetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname)</functioncall>
        <functioncall prog_lang="eel">double GetMediaItemTakeInfo_Value(MediaItem_Take take, "parmname")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.GetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetMediaItemTakeInfo_Value(MediaItem_Take take, String parmname)</functioncall>
        <requires>
            Reaper=6.34
        </requires>
        <description prog_lang="*">
            Get media item take numerical-value attributes.
            D_STARTOFFS : double * : start offset in source media, in seconds
            D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
            D_PAN : double * : take pan, -1..1
            D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
            D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
            D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
            B_PPITCH : bool * : preserve pitch when changing playback rate
            I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
            I_LASTH : int * : height in pixels (read-only)
            I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
            I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
            I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color.
            IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
            P_TRACK : pointer to MediaTrack (read-only)
            P_ITEM : pointer to MediaItem (read-only)
            P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            string parmname - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTrack</slug>
        <title>GetMediaItemTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetMediaItemTrack(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetMediaItemTrack(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">MediaTrack tr = reaper.GetMediaItemTrack(MediaItem item)</functioncall>
        <functioncall prog_lang="python">MediaTrack tr = RPR_GetMediaItemTrack(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the associated MediaTrack of a MediaItem.
        </description>
        <retvals>
            MediaTrack tr - the MediaTrack, where the MediaItem is located in 
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose associated MediaTrack you want to have
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>trackmanagement, get, item, track, associated</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceFileName</slug>
        <title>GetMediaSourceFileName</title>
        <functioncall prog_lang="cpp">void GetMediaSourceFileName(PCM_source* source, char* filenamebufOut, int filenamebufOut_sz)</functioncall>
        <functioncall prog_lang="eel">GetMediaSourceFileName(PCM_source source, #filenamebuf)</functioncall>
        <functioncall prog_lang="lua">string filenamebuf = reaper.GetMediaSourceFileName(PCM_source source)</functioncall>
        <functioncall prog_lang="python">(PCM_source source, String filenamebufOut, Int filenamebufOut_sz) = RPR_GetMediaSourceFileName(source, filenamebufOut, filenamebufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            Copies the media source filename to filenamebuf. Note that in-project MIDI media sources have no associated filename. 
        </description>
        <retvals>
            string filenamebuf - the filename of the source-file
        </retvals>
        <parameters>
            PCM_source source - the source, whose source-filename you want to retrieve
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetMediaSourceParent
                   returns, the parent-source of a source
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceLength</slug>
        <title>GetMediaSourceLength</title>
        <functioncall prog_lang="cpp">double GetMediaSourceLength(PCM_source* source, bool* lengthIsQNOut)</functioncall>
        <functioncall prog_lang="eel">double GetMediaSourceLength(PCM_source source, bool &lengthIsQN)</functioncall>
        <functioncall prog_lang="lua">number retval, boolean lengthIsQN = reaper.GetMediaSourceLength(PCM_source source)</functioncall>
        <functioncall prog_lang="python">(Float retval, PCM_source source, Boolean lengthIsQNOut) = RPR_GetMediaSourceLength(source, lengthIsQNOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.
        </description>
        <retvals>
            number retval - 
            boolean lengthIsQN - 
        </retvals>
        <parameters>
            PCM_source source - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceNumChannels</slug>
        <title>GetMediaSourceNumChannels</title>
        <functioncall prog_lang="cpp">int GetMediaSourceNumChannels(PCM_source* source)</functioncall>
        <functioncall prog_lang="eel">int GetMediaSourceNumChannels(PCM_source source)</functioncall>
        <functioncall prog_lang="lua">integer mediasourcenumchans = reaper.GetMediaSourceNumChannels(PCM_source source)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetMediaSourceNumChannels(PCM_source source)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the number of channels in the source media.
        </description>
        <retvals>
            integer mediasourcenumchans - 
        </retvals>
        <parameters>
            PCM_source source - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceParent</slug>
        <title>GetMediaSourceParent</title>
        <functioncall prog_lang="cpp">PCM_source* GetMediaSourceParent(PCM_source* src)</functioncall>
        <functioncall prog_lang="eel">PCM_source GetMediaSourceParent(PCM_source src)</functioncall>
        <functioncall prog_lang="lua">PCM_source parent_src = reaper.GetMediaSourceParent(PCM_source src)</functioncall>
        <functioncall prog_lang="python">PCM_source parent_src = RPR_GetMediaSourceParent(PCM_source src)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.
        </description>
        <retvals>
            PCM_source parent_src - 
        </retvals>
        <parameters>
            PCM_source src - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceSampleRate</slug>
        <title>GetMediaSourceSampleRate</title>
        <functioncall prog_lang="cpp">int GetMediaSourceSampleRate(PCM_source* source)</functioncall>
        <functioncall prog_lang="eel">int GetMediaSourceSampleRate(PCM_source source)</functioncall>
        <functioncall prog_lang="lua">integer mediasourcesamplerate = reaper.GetMediaSourceSampleRate(PCM_source source)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetMediaSourceSampleRate(PCM_source source)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the sample rate. MIDI source media will return zero.
        </description>
        <retvals>
            integer mediasourcesamplerate - 
        </retvals>
        <parameters>
            PCM_source source - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceType</slug>
        <title>GetMediaSourceType</title>
        <functioncall prog_lang="cpp">void GetMediaSourceType(PCM_source* source, char* typebufOut, int typebufOut_sz)</functioncall>
        <functioncall prog_lang="eel">GetMediaSourceType(PCM_source source, #typebuf)</functioncall>
        <functioncall prog_lang="lua">string typebuf = reaper.GetMediaSourceType(PCM_source source)</functioncall>
        <functioncall prog_lang="python">(PCM_source source, String typebufOut, Int typebufOut_sz) = RPR_GetMediaSourceType(source, typebufOut, typebufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            copies the media source type ("WAV", "MIDI", etc) to typebuf
        </description>
        <retvals>
            string typebuf - the source-type
        </retvals>
        <parameters>
            PCM_source source - the source, whose source-type you want to get
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaTrackInfo_Value</slug>
        <title>GetMediaTrackInfo_Value</title>
        <functioncall prog_lang="cpp">double GetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname)</functioncall>
        <functioncall prog_lang="eel">double GetMediaTrackInfo_Value(MediaTrack tr, "parmname")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.GetMediaTrackInfo_Value(MediaTrack tr, string parmname)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetMediaTrackInfo_Value(MediaTrack tr, String parmname)</functioncall>
        <requires>
            Reaper=6.65
        </requires>
        <description prog_lang="*">
            Get track numerical-value attributes.
            B_MUTE : bool * : muted
            B_PHASE : bool * : track phase inverted
            B_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)
            IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
            I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
            B_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed
            I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
            I_RECARM : int * : record armed, 0=not record armed, 1=record armed
            I_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.
            I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace
            I_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)
            I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
            I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
            B_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)
            I_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only            
            I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
            I_NCHAN : int * : number of track channels, 2-64, even numbers only
            I_SELECTED : int * : track selected, 0=unselected, 1=selected
            I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
            I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
            I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
            I_MCPX : int * : current MCP X-position in pixels relative to mixer container(read only)
            I_MCPY : int * : current MCP Y-position in pixels relative to mixer container(read only)
            I_MCPW : int * : current MCP width in pixels(read only)
            I_MCPH : int * : current MCP height in pixels(read only)
            I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc
            I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
            I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)
            I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
            I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000), 0, default color. If you do not |0x1000000, then it will not be used, but will store the color.
            I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
            B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
            D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
            D_PAN : double * : trim pan of track, -1..1
            D_WIDTH : double * : width of track, -1..1
            D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
            D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
            I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
            D_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc
            I_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper
            P_ENV:&envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be &VOLENV, &PANENV, etc; GUID is the stringified envelope GUID
            B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
            B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
            B_MAINSEND : bool * : track sends audio to parent
            C_MAINSEND_OFFS : char * : channel offset of track send to parent
            C_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)
            I_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)
            C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)
            F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
            F_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)
            F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)
            F_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)
            I_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)
            D_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG
            P_PARTRACK : MediaTrack * : parent track (read-only)
            P_PROJECT : ReaProject * : parent project (read-only)
        </description>
        <retvals>
            number retval - the value of the requested attribute
        </retvals>
        <parameters>
            MediaTrack tr - the MediaTrack-object, whose attribute you want to request
            string parmname - the attribute, that you want to request, like D_VOL or B_SHOWINMIXER etc
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <linked_to desc="see also:">
            Reaper:GetSetMediaTrackInfo_String
                   gets/sets a string value of a MediaTrack-attribute
            Reaper:SetMediaTrackInfo_Value
                   sets a numerical value of a MediaTrack-attribute
        </linked_to>
        <tags></tags>
        <changelog>
            Reaper 6.65 - attribute "I_PANLAW_FLAGS" added
            Reaper 6.60 - attribute "I_RECMODE_FLAGS" added
            Reaper 6.54 - attribute "I_FREEMODE" includes new value 2=track fixed lanes enabled
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMIDIInputName</slug>
        <title>GetMIDIInputName</title>
        <functioncall prog_lang="cpp">bool GetMIDIInputName(int dev, char* nameout, int nameout_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetMIDIInputName(int dev, #nameout)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string nameout = reaper.GetMIDIInputName(integer dev, string nameout)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int dev, String nameout, Int nameout_sz) = RPR_GetMIDIInputName(dev, nameout, nameout_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns true if device present
        </description>
        <retvals>
            boolean retval - 
            string nameout - 
        </retvals>
        <parameters>
            integer dev - 
            string nameout - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Midi
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMIDIOutputName</slug>
        <title>GetMIDIOutputName</title>
        <functioncall prog_lang="cpp">bool GetMIDIOutputName(int dev, char* nameout, int nameout_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetMIDIOutputName(int dev, #nameout)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string nameout = reaper.GetMIDIOutputName(integer dev, string nameout)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int dev, String nameout, Int nameout_sz) = RPR_GetMIDIOutputName(dev, nameout, nameout_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns true if device present
        </description>
        <retvals>
            boolean retval - 
            string nameout - 
        </retvals>
        <parameters>
            integer dev - 
            string nameout - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Midi
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMixerScroll</slug>
        <title>GetMixerScroll</title>
        <functioncall prog_lang="cpp">MediaTrack* GetMixerScroll()</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetMixerScroll()</functioncall>
        <functioncall prog_lang="lua">MediaTrack leftmosttrack = reaper.GetMixerScroll()</functioncall>
        <functioncall prog_lang="python">MediaTrack leftmosttrack = RPR_GetMixerScroll()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the leftmost track visible in the mixer
        </description>
        <retvals>
            MediaTrack leftmosttrack - the leftmost track in the MCP
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>userinterface, get, visible, leftmost, mcp, mixer, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMouseModifier</slug>
        <title>GetMouseModifier</title>
        <functioncall prog_lang="cpp">void GetMouseModifier(const char* context, int modifier_flag, char* actionOut, int actionOut_sz)</functioncall>
        <functioncall prog_lang="eel">GetMouseModifier("context", int modifier_flag, #action)</functioncall>
        <functioncall prog_lang="lua">string action = reaper.GetMouseModifier(string context, integer modifier_flag)</functioncall>
        <functioncall prog_lang="python">(String context, Int modifier_flag, String actionOut, Int actionOut_sz) = RPR_GetMouseModifier(context, modifier_flag, actionOut, actionOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.
            action will be filled in with the command ID number for a built-in mouse modifier
            or built-in REAPER command ID, or the custom action ID string.
        </description>
        <retvals>
            string action - the associated action with the mouse-modifier within the specific context
        </retvals>
        <parameters>
            string context - the context of the mouse-modifier
            integer modifier_flag - the modifier-flag, whose action you want to retrieve
        </parameters>
        <linked_to desc="see also:">
            Reaper:SetMouseModifier
                   sets a mouse-modifier
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Mouse
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMousePosition</slug>
        <title>GetMousePosition</title>
        <functioncall prog_lang="cpp">void GetMousePosition(int* xOut, int* yOut)</functioncall>
        <functioncall prog_lang="eel">GetMousePosition(int &x, int &y)</functioncall>
        <functioncall prog_lang="lua">integer x, integer y = reaper.GetMousePosition()</functioncall>
        <functioncall prog_lang="python">(Int xOut, Int yOut) = RPR_GetMousePosition(xOut, yOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            get mouse position in screen coordinates
        </description>
        <retvals>
            integer x - horizontal position of the mouse in pixels
            integer y - vertical position of the mouse in pixels
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Mouse
        </chapter_context>
        <tags>userinterface, mouse, position, vertical, horizontal, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetNumAudioInputs</slug>
        <title>GetNumAudioInputs</title>
        <functioncall prog_lang="cpp">int GetNumAudioInputs()</functioncall>
        <functioncall prog_lang="eel">int GetNumAudioInputs()</functioncall>
        <functioncall prog_lang="lua">integer numAudioIns = reaper.GetNumAudioInputs()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetNumAudioInputs()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Return number of normal audio hardware inputs available
        </description>
        <retvals>
            integer numAudioIns - the number of audio hardware outputs available
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags>audio, count, input, hardware</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetNumAudioOutputs</slug>
        <title>GetNumAudioOutputs</title>
        <functioncall prog_lang="cpp">int GetNumAudioOutputs()</functioncall>
        <functioncall prog_lang="eel">int GetNumAudioOutputs()</functioncall>
        <functioncall prog_lang="lua">integer numAudioOuts = reaper.GetNumAudioOutputs()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetNumAudioOutputs()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Return number of normal audio hardware outputs available
        </description>
        <retvals>
            integer numAudioOuts - the number of audio hardware outputs available
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags>audio, count, output, hardware</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetNumMIDIInputs</slug>
        <title>GetNumMIDIInputs</title>
        <functioncall prog_lang="cpp">int GetNumMIDIInputs()</functioncall>
        <functioncall prog_lang="eel">int GetNumMIDIInputs()</functioncall>
        <functioncall prog_lang="lua">integer numMidiIns = reaper.GetNumMIDIInputs()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetNumMIDIInputs()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns max number of real midi hardware inputs
        </description>
        <retvals>
            integer numMidiIns - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Midi
        </chapter_context>
        <tags>audio, midi, count, input, hardware</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetNumMIDIOutputs</slug>
        <title>GetNumMIDIOutputs</title>
        <functioncall prog_lang="cpp">int GetNumMIDIOutputs()</functioncall>
        <functioncall prog_lang="eel">int GetNumMIDIOutputs()</functioncall>
        <functioncall prog_lang="lua">integer numMidiOuts = reaper.GetNumMIDIOutputs()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetNumMIDIOutputs()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns max number of real midi hardware outputs
        </description>
        <retvals>
            integer numMidiOuts - the number of real midi hardware outputs
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Midi
        </chapter_context>
        <tags>audio, midi, count, output, hardware</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetNumTakeMarkers</slug>
        <title>GetNumTakeMarkers</title>
        <functioncall prog_lang="cpp">int GetNumTakeMarkers(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int GetNumTakeMarkers(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.GetNumTakeMarkers(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetNumTakeMarkers(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=6.09
        </requires>
        <description>
            Returns number of take markers.
        </description>
        <retvals>
            integer retval - the number of found take-markers
        </retvals>
        <parameters>
            MediaItem_Take take - the take, whose take-markers you want to count
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTakeMarker
                   gets attributes of a take-marker of a take
            Reaper:SetTakeMarker
                   sets attributes of a takemarker of a take
            Reaper:DeleteTakeMarker
                   deletes a take marker
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Take Markers
        </chapter_context>
        <tags>markermanagement, count, takemarker</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetNumTracks</slug>
        <title>GetNumTracks</title>
        <functioncall prog_lang="cpp">int GetNumTracks()</functioncall>
        <functioncall prog_lang="eel">int GetNumTracks()</functioncall>
        <functioncall prog_lang="lua">integer numtracks = reaper.GetNumTracks()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetNumTracks()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the number of tracks. Excluding the master-track.
        </description>
        <retvals>
            integer numtracks - the number of tracks in the current project.
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, count, tracks</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetOS</slug>
        <title>GetOS</title>
        <functioncall prog_lang="cpp">const char* GetOS()</functioncall>
        <functioncall prog_lang="eel">bool GetOS(#retval)</functioncall>
        <functioncall prog_lang="lua">string operating_system = reaper.GetOS()</functioncall>
        <functioncall prog_lang="python">String retval = RPR_GetOS()</functioncall>
        <requires>
            Reaper=6.18
        </requires>
        <description prog_lang="*">
            Returns the current operating-system. Good for determining, e.g. the correct filesystem-separators.
        </description>
        <retvals>
            string operating_system - "Win32", "Win64", "OSX32", "OSX64", "macOS-arm64" or "Other"
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>helperfunctions, get, operating system, os, osx, windows</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetOutputChannelName</slug>
        <title>GetOutputChannelName</title>
        <functioncall prog_lang="cpp">const char* GetOutputChannelName(int channelIndex)</functioncall>
        <functioncall prog_lang="eel">bool GetOutputChannelName(#retval, int channelIndex)</functioncall>
        <functioncall prog_lang="lua">string outputchanname= reaper.GetOutputChannelName(integer channelIndex)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_GetOutputChannelName(Int channelIndex)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the name of a specific output-channel.
        </description>
        <retvals>
            string outputchanname - the name of the output-channel.
        </retvals>
        <parameters>
            integer channelIndex - the index of the output-channel
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags>audio, audiomanagement, output, channels, name, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetOutputLatency</slug>
        <title>GetOutputLatency</title>
        <functioncall prog_lang="cpp">double GetOutputLatency()</functioncall>
        <functioncall prog_lang="eel">double GetOutputLatency()</functioncall>
        <functioncall prog_lang="lua">number outputlatency = reaper.GetOutputLatency()</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetOutputLatency()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns output latency in seconds
        </description>
        <retvals>
            number outputlatency - output-latency in seconds
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags>audiomanagement, get, output, latency, seconds</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetParentTrack</slug>
        <title>GetParentTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetParentTrack(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetParentTrack(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">MediaTrack parenttrack = reaper.GetParentTrack(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">MediaTrack parenttrack = RPR_GetParentTrack(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the parent MediaTrack, if a MediaTrack is a track of a foldered track.
        </description>
        <retvals>
            MediaTrack parenttrack - the returned parent MediaTrack of a foldered MediaTrack
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack in a folder, whose parent MediaTrack you want
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, get, parent, track, folder</tags>
        <changelog>
        </changelog>
    </US_DocBloc>



    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPeakFileName</slug>
        <title>GetPeakFileName</title>
        <functioncall prog_lang="cpp">void GetPeakFileName(const char* fn, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">GetPeakFileName("fn", #buf)</functioncall>
        <functioncall prog_lang="lua">string peakfilename_with_path = reaper.GetPeakFileName(string fn)</functioncall>
        <functioncall prog_lang="python">(String fn, String buf, Int buf_sz) = RPR_GetPeakFileName(fn, buf, buf_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
        </description>
        <retvals>
            string peakfilename_with_path - the peakfilename with path
        </retvals>
        <parameters>
            string fn - the filename of the mediafile
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Peaks/Waveforms
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPeakFileNameEx</slug>
        <title>GetPeakFileNameEx</title>
        <functioncall prog_lang="cpp">void GetPeakFileNameEx(const char* fn, char* buf, int buf_sz, bool forWrite)</functioncall>
        <functioncall prog_lang="eel">GetPeakFileNameEx("fn", #buf, bool forWrite)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.GetPeakFileNameEx(string fn, string buf, boolean forWrite)</functioncall>
        <functioncall prog_lang="python">(String fn, String buf, Int buf_sz, Boolean forWrite) = RPR_GetPeakFileNameEx(fn, buf, buf_sz, forWrite)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
        </description>
        <retvals>
            string buf - the peak-filename
        </retvals>
        <parameters>
            string fn - 
            string buf - a string-buffer needed by the function, just give "" in Lua
            boolean forWrite - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Peaks/Waveforms
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPeakFileNameEx2</slug>
        <title>GetPeakFileNameEx2</title>
        <functioncall prog_lang="cpp">void GetPeakFileNameEx2(const char* fn, char* buf, int buf_sz, bool forWrite, const char* peaksfileextension)</functioncall>
        <functioncall prog_lang="eel">GetPeakFileNameEx2("fn", #buf, bool forWrite, "peaksfileextension")</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.GetPeakFileNameEx2(string fn, string buf, boolean forWrite, string peaksfileextension)</functioncall>
        <functioncall prog_lang="python">(String fn, String buf, Int buf_sz, Boolean forWrite, String peaksfileextension) = RPR_GetPeakFileNameEx2(fn, buf, buf_sz, forWrite, peaksfileextension)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Like GetPeakFileNameEx, but you can specify peaksfileextension such as ".reapeaks"
        </description>
        <retvals>
           string buf - the peak-filename
        </retvals>
        <parameters>
           string fn - 
           string buf - a string-buffer needed by the function, just give "" in Lua
           boolean forWrite - 
           string peaksfileextension - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Peaks/Waveforms
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayPosition</slug>
        <title>GetPlayPosition</title>
        <functioncall prog_lang="cpp">double GetPlayPosition()</functioncall>
        <functioncall prog_lang="eel">double GetPlayPosition()</functioncall>
        <functioncall prog_lang="lua">number playposition = reaper.GetPlayPosition()</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetPlayPosition()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns latency-compensated actual-what-you-hear position
        </description>
        <retvals>
            number playposition - the playposition in seconds
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, get, play, position, latency compensated</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayPosition2</slug>
        <title>GetPlayPosition2</title>
        <functioncall prog_lang="cpp">double GetPlayPosition2()</functioncall>
        <functioncall prog_lang="eel">double GetPlayPosition2()</functioncall>
        <functioncall prog_lang="lua">number playposition = reaper.GetPlayPosition2()</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetPlayPosition2()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns position of next audio block being processed
        </description>
        <retvals>
            number playposition - the playposition in seconds
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, get, play, position, next audio block</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayPosition2Ex</slug>
        <title>GetPlayPosition2Ex</title>
        <functioncall prog_lang="cpp">double GetPlayPosition2Ex(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">double GetPlayPosition2Ex(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">number playposition = reaper.GetPlayPosition2Ex(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetPlayPosition2Ex(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns position of next audio block being processed from a specific project
        </description>
        <retvals>
            number playposition - the playposition in seconds
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, get, play, position, next audio block</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayPositionEx</slug>
        <title>GetPlayPositionEx</title>
        <functioncall prog_lang="cpp">double GetPlayPositionEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">double GetPlayPositionEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">number playposition = reaper.GetPlayPositionEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetPlayPositionEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns latency-compensated actual-what-you-hear position from a specific project
        </description>
        <retvals>
            number playposition - the playposition in seconds
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, get, play, position, latency compensated</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayState</slug>
        <title>GetPlayState</title>
        <functioncall prog_lang="cpp">int GetPlayState()</functioncall>
        <functioncall prog_lang="eel">int GetPlayState()</functioncall>
        <functioncall prog_lang="lua">integer playstate = reaper.GetPlayState()</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetPlayState()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns, in which play-state the current project is
        </description>
        <retvals>
            integer playstate - Either bitwise: &1=playing,&2=pause,&4=is recording, or
            -0, stop
            -1, play
            -2, paused play
            -5, recording
            -6, paused recording
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, play, state, rec, pause, stop</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayStateEx</slug>
        <title>GetPlayStateEx</title>
        <functioncall prog_lang="cpp">int GetPlayStateEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int GetPlayStateEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer playstate = reaper.GetPlayStateEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetPlayStateEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns, in which play-state a certain project is
        </description>
        <retvals>
            integer playstate - Either bitwise: &1=playing,&2=pause,&4=is recording, or
            -0, stop
            -1, play
            -2, paused play
            -5, recording
            -6, paused recording
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, stop, play, state, rec, pause, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectLength</slug>
        <title>GetProjectLength</title>
        <functioncall prog_lang="cpp">double GetProjectLength(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">double GetProjectLength(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">number length = reaper.GetProjectLength(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetProjectLength(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns length of project (maximum of end of media item, markers, end of regions, tempo map)
        </description>
        <retvals>
            number length - the length of the project in seconds
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, length, get, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectName</slug>
        <title>GetProjectName</title>
        <functioncall prog_lang="cpp">void GetProjectName(ReaProject* proj, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">GetProjectName(ReaProject proj, #buf)</functioncall>
        <functioncall prog_lang="lua">string projectname = reaper.GetProjectName(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, String bufOut, Int bufOut_sz) = RPR_GetProjectName(proj, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            Get the name of the projectfile.
        </description>
        <retvals>
            string projectname - the name of the project
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, get, project, name</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectPath</slug>
        <title>GetProjectPath</title>
        <functioncall prog_lang="cpp">void GetProjectPath(char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">GetProjectPath(#buf)</functioncall>
        <functioncall prog_lang="lua">string project_path = reaper.GetProjectPath()</functioncall>
        <functioncall prog_lang="python">(String bufOut, Int bufOut_sz) = RPR_GetProjectPath(bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            Get the path of the project. Will return the defaults project-path's recording-folder, when the project hasn't been saved yet; when the project has been saved, it will return the path to the recording-folder.

            If you need the filename of the path+projectfile itself, use EnumProjects instead.
        </description>
        <retvals>
            string project_path - the returned path
        </retvals>
        <linked_to desc="see also:">
            Reaper:EnumProjects
                   enumerates the project(tabs) and their projectfiles with path; returns currently rendering project
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, get, path, projectpath</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectPathEx</slug>
        <title>GetProjectPathEx</title>
        <functioncall prog_lang="cpp">void GetProjectPathEx(ReaProject* proj, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">GetProjectPathEx(ReaProject proj, #buf)</functioncall>
        <functioncall prog_lang="lua">string project_path = reaper.GetProjectPathEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, String bufOut, Int bufOut_sz) = RPR_GetProjectPathEx(proj, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            Get the path of a specific project, usually the recordings-folder.
        </description>
        <retvals>
            string project_path - the path to the project
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, get, path, projectpath, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectStateChangeCount</slug>
        <title>GetProjectStateChangeCount</title>
        <functioncall prog_lang="cpp">int GetProjectStateChangeCount(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int GetProjectStateChangeCount(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer count_statechange = reaper.GetProjectStateChangeCount(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetProjectStateChangeCount(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns an integer that changes when the project state changes, e.g. undoable-actions have been made.
        </description>
        <retvals>
            integer count_statechange - the number of changes, since (re-)opening of the project.
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, get, state, changes, undo</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectTimeOffset</slug>
        <title>GetProjectTimeOffset</title>
        <functioncall prog_lang="cpp">double GetProjectTimeOffset(ReaProject* proj, bool rndframe)</functioncall>
        <functioncall prog_lang="eel">double GetProjectTimeOffset(ReaProject proj, bool rndframe)</functioncall>
        <functioncall prog_lang="lua">number time_offset = reaper.GetProjectTimeOffset(ReaProject proj, boolean rndframe)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetProjectTimeOffset(ReaProject proj, Boolean rndframe)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets project time offset in seconds (project settings -> project start time). 
        </description>
        <retvals>
            number time_offset - the project-time-offset
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            boolean rndframe - true, the offset is rounded to a multiple of the project frame size; false, no rounding happening
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, get, project, time, offset</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectTimeSignature</slug>
        <title>GetProjectTimeSignature</title>
        <functioncall prog_lang="cpp">void GetProjectTimeSignature(double* bpmOut, double* bpiOut)</functioncall>
        <functioncall prog_lang="eel">GetProjectTimeSignature(&bpm, &bpi)</functioncall>
        <functioncall prog_lang="lua">number bpm, number bpi = reaper.GetProjectTimeSignature()</functioncall>
        <functioncall prog_lang="python">(Float bpmOut, Float bpiOut) = RPR_GetProjectTimeSignature(bpmOut, bpiOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            deprecated
        </description>
        <deprecated since_when="Reaper 5.62" alternative="GetProjectTimeSignature2(available since at least Reaper 5.62)"/>
        <retvals>
            number bpm - the bpm of the project's time-signature
            number bpi - the bpi of the project's time-signature
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Time Signature Markers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectTimeSignature2</slug>
        <title>GetProjectTimeSignature2</title>
        <functioncall prog_lang="cpp">void GetProjectTimeSignature2(ReaProject* proj, double* bpmOut, double* bpiOut)</functioncall>
        <functioncall prog_lang="eel">GetProjectTimeSignature2(ReaProject proj, &bpm, &bpi)</functioncall>
        <functioncall prog_lang="lua">number bpm, number bpi = reaper.GetProjectTimeSignature2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Float bpmOut, Float bpiOut) = RPR_GetProjectTimeSignature2(proj, bpmOut, bpiOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets basic time signature (beats per minute, numerator of time signature in bpi)
            this does not reflect tempo envelopes but is purely what is set in the project settings.
        </description>
        <retvals>
            number bpm - beats per minute
            number bpi -  numerator of time signature in bpi
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Time Signature Markers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjExtState</slug>
        <title>GetProjExtState</title>
        <functioncall prog_lang="cpp">int GetProjExtState(ReaProject* proj, const char* extname, const char* key, char* valOutNeedBig, int valOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int GetProjExtState(ReaProject proj, "extname", "key", #val)</functioncall>
        <functioncall prog_lang="lua">integer retval, string val = reaper.GetProjExtState(ReaProject proj, string extname, string key)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, String extname, String key, String valOutNeedBig, Int valOutNeedBig_sz) = RPR_GetProjExtState(proj, extname, key, valOutNeedBig, valOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Get the value previously associated with this extname and key, the last time the project was saved or the value was changed.
        </description>
        <retvals>
            integer retval - 0, no such extstate; 1, extstate exists and is returned
            string val - the value, as stored in extname->key
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            string extname - the section, in which the key requested is stored
            string key - the key, in which the requested value is stored
        </parameters>
        <linked_to desc="see also:">
            Reaper:SetProjExtState
                   sets an ext-state to store data for your project
            Reaper:EnumProjExtState
                   enumerates an ext-state that stores data for your project
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project Extension States
        </chapter_context>
        <tags>projectmanagement, extended, state, value, section, key, extname, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetResourcePath</slug>
        <title>GetResourcePath</title>
        <functioncall prog_lang="cpp">const char* GetResourcePath()</functioncall>
        <functioncall prog_lang="eel">bool GetResourcePath(#retval)</functioncall>
        <functioncall prog_lang="lua">string resource_path = reaper.GetResourcePath()</functioncall>
        <functioncall prog_lang="python">String retval = RPR_GetResourcePath()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            returns path where ini files are stored, other things are in subdirectories.

            When resourcepath is equal to app-path(see GetExePath), it is an indicator that Reaper is installed as portable installation.
        </description>
        <retvals>
            string resource_path - the path to the resource-folder
        </retvals>
        <linked_to desc="see also:">
            Reaper:GetExePath
                   returns the path of the reaper.exe/reaper.app
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>helperfunctions, get, resource, path</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSelectedEnvelope</slug>
        <title>GetSelectedEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetSelectedEnvelope(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetSelectedEnvelope(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope env = reaper.GetSelectedEnvelope(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope env = RPR_GetSelectedEnvelope(ReaProject proj)</functioncall>
        <requires>
            Reaper=6.14
        </requires>
        <description prog_lang="*">
            get the currently selected envelope, returns NULL/nil if no envelope is selected
        </description>
        <retvals>
            TrackEnvelope env - the TrackEnvelope-object of the selected envelope-lane requested; 0, if no envelope is selected
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>envelopemanagement, get, selected, envelope</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSelectedMediaItem</slug>
        <title>GetSelectedMediaItem</title>
        <functioncall prog_lang="cpp">MediaItem* GetSelectedMediaItem(ReaProject* proj, int selitem)</functioncall>
        <functioncall prog_lang="eel">MediaItem GetSelectedMediaItem(ReaProject proj, int selitem)</functioncall>
        <functioncall prog_lang="lua">MediaItem sel_item = reaper.GetSelectedMediaItem(ReaProject proj, integer selitem)</functioncall>
        <functioncall prog_lang="python">MediaItem sel_item = RPR_GetSelectedMediaItem(ReaProject proj, Int selitem)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            get a selected item by selected item count (zero-based)
        </description>
        <retvals>
            MediaItem sel_item - the requested MediaItem as a MediaItem-object
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer selitem - the id of the selected MediaItem, as multiple items can be selected.
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountSelectedMediaItems
                   returns the count of selected media items in a project
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, get, selected, item, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSelectedTrack</slug>
        <title>GetSelectedTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetSelectedTrack(ReaProject* proj, int seltrackidx)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetSelectedTrack(ReaProject proj, int seltrackidx)</functioncall>
        <functioncall prog_lang="lua">MediaTrack sel_tr = reaper.GetSelectedTrack(ReaProject proj, integer seltrackidx)</functioncall>
        <functioncall prog_lang="python">MediaTrack sel_tr = RPR_GetSelectedTrack(ReaProject proj, Int seltrackidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Get a selected track from a project by selected track count (zero-based). 
            This function ignores the master track, see GetSelectedTrack2 and CountSelectedTracks.
        </description>
        <retvals>
            MediaTrack sel_tr - the requested, selected MediaTrack
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer seltrackidx - the idx of within the selected tracks, zero based, as multiple tracks can be selected by the user. 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetSelectedTrack
                   gets the selected tracks, including master track
            Reaper:GetSelectedTrack2
                   gets the selected tracks, including master track
            Reaper:CountSelectedTracks
                   returns the number of selected tracks
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, get, selected, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSelectedTrack2</slug>
        <title>GetSelectedTrack2</title>
        <functioncall prog_lang="cpp">MediaTrack* GetSelectedTrack2(ReaProject* proj, int seltrackidx, bool wantmaster)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetSelectedTrack2(ReaProject proj, int seltrackidx, bool wantmaster)</functioncall>
        <functioncall prog_lang="lua">MediaTrack sel_tr = reaper.GetSelectedTrack2(ReaProject proj, integer seltrackidx, boolean wantmaster)</functioncall>
        <functioncall prog_lang="python">MediaTrack sel_tr = RPR_GetSelectedTrack2(ReaProject proj, Int seltrackidx, Boolean wantmaster)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).
        </description>
        <retvals>
            MediaTrack sel_tr - the requested, selected MediaTrack
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer seltrackidx - the idx of within the selected tracks, zero based, as multiple tracks can be selected by the user. 
            boolean wantmaster - true, seltrackidx=0 is the master track, if selected; false, seltrackidx=0 is the first selected normal track
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, master, track, get, selected</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSelectedTrackEnvelope</slug>
        <title>GetSelectedTrackEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetSelectedTrackEnvelope(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetSelectedTrackEnvelope(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope sel_env = reaper.GetSelectedTrackEnvelope(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope sel_env = RPR_GetSelectedTrackEnvelope(ReaProject proj)</functioncall>
        <requires>
            Reaper=6.14
        </requires>
        <description prog_lang="*">
            get the currently selected track envelope, returns NULL/nil if no envelope is selected
        </description>
        <retvals>
            TrackEnvelope sel_env - the selected TrackEnvelope as an object; nil if no TrackEnvelope is selected
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>envelopemanagement, get, selected, envelope</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSet_ArrangeView2</slug>
        <title>GetSet_ArrangeView2</title>
        <functioncall prog_lang="cpp">void GetSet_ArrangeView2(ReaProject* proj, bool isSet, int screen_x_start, int screen_x_end, double* start_timeOut, double* end_timeOut)</functioncall>
        <functioncall prog_lang="eel">GetSet_ArrangeView2(ReaProject proj, bool isSet, int screen_x_start, int screen_x_end, &start_time, &end_time)</functioncall>
        <functioncall prog_lang="lua">number start_time, number end_time = reaper.GetSet_ArrangeView2(ReaProject proj, boolean isSet, integer screen_x_start, integer screen_x_end, number start_time, number end_time)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Boolean isSet, Int screen_x_start, Int screen_x_end, Float start_timeOut, Float end_timeOut) = RPR_GetSet_ArrangeView2(proj, isSet, screen_x_start, screen_x_end, start_timeOut, end_timeOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time

            If you want to get the arrangeviewposition by pixels, set isSet=false and pass the pixel-position of the start and endposition to screen_x_start and screen_x_end.

            screen_x_start and screen_x_end will be ignored, when isSet=true
        </description>
        <retvals>
            number start_time - the startposition of the arrangeview(left side) in seconds
            number end_time - the startposition of the arrangeview(right side) in seconds
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            boolean isSet - true, set a new arrangeview-time position; false, only get the current arrangeview-time position
            integer screen_x_start - if isSet=false, this parameter returns the start-time-position at screen-pixel-x position. set this and screen_x_end to 0 for the whole shown arrangeview start/endtime
            integer screen_x_end - if isSet=false, this parameter returns the end-time-position at screen-pixel-x position. set this and screen_x_end to 0 for the whole shown arrangeview start/endtime
            number start_time - if isSet=true, this is the startposition of the arrangeview(the left side) in seconds
            number end_time - if isSet=true, this is the startposition of the arrangeview(the right side) in seconds
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Arrangeview Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSet_LoopTimeRange</slug>
        <title>GetSet_LoopTimeRange</title>
        <functioncall prog_lang="cpp">void GetSet_LoopTimeRange(bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)</functioncall>
        <functioncall prog_lang="eel">GetSet_LoopTimeRange(bool isSet, bool isLoop, &start, &end, bool allowautoseek)</functioncall>
        <functioncall prog_lang="lua">number start_sel, number end_sel = reaper.GetSet_LoopTimeRange(boolean isSet, boolean isLoop, number start_sel, number end_sel, boolean allowautoseek)</functioncall>
        <functioncall prog_lang="python">(Boolean isSet, Boolean isLoop, Float startOut, Float endOut, Boolean allowautoseek) = RPR_GetSet_LoopTimeRange(isSet, isLoop, startOut, endOut, allowautoseek)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets/sets a time-selection/loop.

            Loops and time-selections can be unlinked in preferences -> Editing Behavior -> Link loops to time selection.
            So you can control them individually, when you've unlinked them with this function.

        </description>
        <retvals>
            number start_sel - the starting position of the time-selection/loop in seconds
            number end_sel - the end position of the time-selection/loop in seconds
        </retvals>
        <parameters>
            boolean isSet - false, get the current time-selection/loop-range; true, set a new time-selection/loop-range
            boolean isLoop - true, selection is a loop; false, selection is a regular time-selection
            number start_sel - the new startposition of the time-selection/loop-range
            number end_sel - the new endposition of the time-selection/loop-range
            boolean allowautoseek - true, when setting a new loop while playback, the playcursor jumps to the loop; false, playcursor stays unaffecte by the change
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSet_LoopTimeRange2</slug>
        <title>GetSet_LoopTimeRange2</title>
        <functioncall prog_lang="cpp">void GetSet_LoopTimeRange2(ReaProject* proj, bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)</functioncall>
        <functioncall prog_lang="eel">GetSet_LoopTimeRange2(ReaProject proj, bool isSet, bool isLoop, &start, &end, bool allowautoseek)</functioncall>
        <functioncall prog_lang="lua">number start_sel, number end_sel = reaper.GetSet_LoopTimeRange2(ReaProject proj, boolean isSet, boolean isLoop, number start_sel, number end_sel, boolean allowautoseek)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Boolean isSet, Boolean isLoop, Float startOut, Float endOut, Boolean allowautoseek) = RPR_GetSet_LoopTimeRange2(proj, isSet, isLoop, startOut, endOut, allowautoseek)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets/sets a time-selection/loop.

            Loops and time-selections can be unlinked in preferences -> Editing Behavior -> Link loops to time selection.
            So you can control them individually, when you've unlinked them with this function.

        </description>
        <retvals>
            number start_sel - the starting position of the time-selection/loop in seconds
            number end_sel - the end position of the time-selection/loop in seconds
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            boolean isSet - false, get the current time-selection/loop-range; true, set a new time-selection/loop-range
            boolean isLoop - true, selection is a loop; false, selection is a regular time-selection
            number start_sel - the new startposition of the time-selection/loop-range
            number end_sel - the new endposition of the time-selection/loop-range
            boolean allowautoseek - true, when setting a new loop while playback, the playcursor jumps to the loop; false, playcursor stays unaffecte by the change
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetAutomationItemInfo</slug>
        <title>GetSetAutomationItemInfo</title>
        <functioncall prog_lang="cpp">double GetSetAutomationItemInfo(TrackEnvelope* env, int autoitem_idx, const char* desc, double value, bool is_set)</functioncall>
        <functioncall prog_lang="eel">double GetSetAutomationItemInfo(TrackEnvelope env, int autoitem_idx, "desc", value, bool is_set)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.GetSetAutomationItemInfo(TrackEnvelope env, integer autoitem_idx, string desc, number value, boolean is_set)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetSetAutomationItemInfo(TrackEnvelope env, Int autoitem_idx, String desc, Float value, Boolean is_set)</functioncall>
        <requires>
            Reaper=6.01
        </requires>
        <description prog_lang="*">
            Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:
            D_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID
            D_POSITION : double * : automation item timeline position in seconds
            D_LENGTH : double * : automation item length in seconds
            D_STARTOFFS : double * : automation item start offset in seconds
            D_PLAYRATE : double * : automation item playback rate
            D_BASELINE : double * : automation item baseline value in the range [0,1]
            D_AMPLITUDE : double * : automation item amplitude in the range [-1,1]
            D_LOOPSRC : double * : nonzero if the automation item contents are looped
            D_UISEL : double * : nonzero if the automation item is selected in the arrange view
            D_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            TrackEnvelope env - the envelope, that contains the automation-item
            integer autoitem_idx - the index of the automation-item, whose information-attribute you want to get/set
            string desc - the attribute to get/set
            number value - the new value to be set; write any value, when is_set=false
            boolean is_set - true, set a new value; false, get the current value
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Automation Items
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetAutomationItemInfo_String</slug>
        <title>GetSetAutomationItemInfo_String</title>
        <functioncall prog_lang="cpp">bool GetSetAutomationItemInfo_String(TrackEnvelope* env, int autoitem_idx, const char* desc, char* valuestrNeedBig, bool is_set)</functioncall>
        <functioncall prog_lang="eel">bool GetSetAutomationItemInfo_String(TrackEnvelope env, int autoitem_idx, "desc", #valuestrNeedBig, bool is_set)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string valuestrNeedBig = reaper.GetSetAutomationItemInfo_String(TrackEnvelope env, integer autoitem_idx, string desc, string valuestrNeedBig, boolean is_set)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, Int autoitem_idx, String desc, String valuestrNeedBig, Boolean is_set) = RPR_GetSetAutomationItemInfo_String(env, autoitem_idx, desc, valuestrNeedBig, is_set)</functioncall>
        <requires>
            Reaper=6.30
        </requires>
        <description prog_lang="*">
            Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:

            P_POOL_NAME : char * : name of the underlying automation item pool
            P_POOL_EXT:xyz : char * : extension-specific persistent data
        </description>
        <retvals>
            boolean retval - true, getting/setting the value was successful; falsem getting/setting the value was unsuccessful
            string valuestrNeedBig - the current value set
        </retvals>
        <parameters>
            TrackEnvelope env - the envelope, that contains the automation-item
            integer autoitem_idx - the index of the automation-item, whose information-attribute you want to get/set
            string desc - the attribute to get/set
            string valuestrNeedBig - the new value to set; set it to "" when is_set=false
            boolean is_set - true, set a new value; false, get the current value
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Automation Items
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetEnvelopeInfo_String</slug>
        <title>GetSetEnvelopeInfo_String</title>
        <functioncall prog_lang="cpp">bool GetSetEnvelopeInfo_String(TrackEnvelope* env, const char* parmname, char* stringNeedBig, bool setNewValue)</functioncall>
        <functioncall prog_lang="eel">bool GetSetEnvelopeInfo_String(TrackEnvelope env, "parmname", #stringNeedBig, bool setNewValue)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetEnvelopeInfo_String(TrackEnvelope env, string parmname_attribute, string valueStringNeedBig, boolean setNewValue)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetEnvelopeInfo_String(env, parmname, stringNeedBig, setNewValue)</functioncall>
        <requires>
            Reaper=6.24
        </requires>
        <description prog_lang="*">
            Gets/sets an attribute string:
            P_EXT:xyz : char * : extension-specific persistent data
            GUID : GUID * : 16-byte GUID, can query only, not set. If using a _String() function, GUID is a string {xyz-...}.

            This is basically a key-value-store for envelopes.
        </description>
        <retvals>
            boolean retval - true, getting/setting the value was successful; falsem getting/setting the value was unsuccessful
            string valuestrNeedBig - the current value set
        </retvals>
        <parameters>
            TrackEnvelope env - the envelope, whose ext-attributes you want to get/set
            string parmname_attribute - the name of the parameter and attribute. For instance, "P_EXT:FooBar" will put the value into the envelope-ext-store named "FooBar"; you can have multiple ones with different names
            string valueStringNeedBig - the new value to set; set it to "", when setNewValue=false
            boolean setNewValue - true, set a new value; false, just return the current value
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetEnvelopeState</slug>
        <title>GetSetEnvelopeState</title>
        <functioncall prog_lang="cpp">bool GetSetEnvelopeState(TrackEnvelope* env, char* str, int str_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetSetEnvelopeState(TrackEnvelope env, #str)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetEnvelopeState(TrackEnvelope env, string str)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String str, Int str_sz) = RPR_GetSetEnvelopeState(env, str, str_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk
        </description>
        <deprecated since_when="Reaper 5.62" alternative="SetEnvelopeStateChunk and GetEnvelopeStateChunk(available since at leaste Reaper 5.40)"/>
        <retvals>
            boolean retval - true, getting/setting was successful; false, getting/setting was unsuccessful
            string str - the value currently set
        </retvals>
        <parameters>
            TrackEnvelope env - the envelope, of which you want to get/set the value
            string str - the new value to set
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetEnvelopeStateChunk
                   returns, an EnvelopeStateChunk, which holds all attributes-information of an envelope
            Reaper:SetEnvelopeStateChunk
                   sets an EnvelopeStateChunk, to replace all attributes-information of an envelope
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetEnvelopeState2</slug>
        <title>GetSetEnvelopeState2</title>
        <functioncall prog_lang="cpp">bool GetSetEnvelopeState2(TrackEnvelope* env, char* str, int str_sz, bool isundo)</functioncall>
        <functioncall prog_lang="eel">bool GetSetEnvelopeState2(TrackEnvelope env, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetEnvelopeState2(TrackEnvelope env, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String str, Int str_sz, Boolean isundo) = RPR_GetSetEnvelopeState2(env, str, str_sz, isundo)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk
        </description>
        <deprecated since_when="Reaper 5.62" alternative="SetEnvelopeStateChunk and GetEnvelopeStateChunk(available since at least Reaper 5.40)"/>
        <retvals>
            boolean retval - true, getting/setting was successful; false, getting/setting was unsuccessful
            string str - the value currently set
        </retvals>
        <parameters>
            TrackEnvelope env - the envelope to get/set the state of
            string str - the new value to set
            boolean isundo - true, undo; false, don't undo
        </parameters>
         <linked_to desc="see also:">
            Reaper:GetEnvelopeStateChunk
                   returns, an EnvelopeStateChunk, which holds all attributes-information of an envelope
            Reaper:SetEnvelopeStateChunk
                   sets an EnvelopeStateChunk, to replace all attributes-information of an envelope
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetItemState</slug>
        <title>GetSetItemState</title>
        <functioncall prog_lang="cpp">bool GetSetItemState(MediaItem* item, char* str, int str_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetSetItemState(MediaItem item, #str)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetItemState(MediaItem item, string str)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, String str, Int str_sz) = RPR_GetSetItemState(item, str, str_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            deprecated -- see SetItemStateChunk, GetItemStateChunk
        </description>
        <deprecated since_when="Reaper 5.62" alternative="SetItemStateChunk and GetItemStateChunk(available since at least Reaper 5.40)"/>
        <retvals>
            boolean retval - true, getting/setting was successful; false, getting/setting was unsuccessful
            string str - the value currently set
        </retvals>
        <parameters>
            MediaItem item - 
            string str - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetItemStateChunk
                   returns, an ItemStateChunk, which holds all attributes-information of a MediaItem
            Reaper:SetItemStateChunk
                   sets an ItemStateChunk, to replace all attributes-information of a MediaItem
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetItemState2</slug>
        <title>GetSetItemState2</title>
        <functioncall prog_lang="cpp">bool GetSetItemState2(MediaItem* item, char* str, int str_sz, bool isundo)</functioncall>
        <functioncall prog_lang="eel">bool GetSetItemState2(MediaItem item, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetItemState2(MediaItem item, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, String str, Int str_sz, Boolean isundo) = RPR_GetSetItemState2(item, str, str_sz, isundo)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            deprecated -- see SetItemStateChunk, GetItemStateChunk
        </description>
        <deprecated since_when="Reaper 5.62" alternative="SetItemStateChunk and GetItemStateChunk(available since at least Reaper 5.40)"/>
        <retvals>
            boolean retval - true, getting/setting was successful; false, getting/setting was unsuccessful
            string str - the value currently set
        </retvals>
        <parameters>
            MediaItem item - the new item to set
            string str - the new value to set
            boolean isundo - true, undo; false, don't undo
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetItemStateChunk
                   returns, an ItemStateChunk, which holds all attributes-information of a MediaItem
            Reaper:SetItemStateChunk
                   sets an ItemStateChunk, to replace all attributes-information of a MediaItem
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetMediaItemInfo_String</slug>
        <title>GetSetMediaItemInfo_String</title>
        <functioncall prog_lang="cpp">bool GetSetMediaItemInfo_String(MediaItem* item, const char* parmname, char* stringNeedBig, bool setNewValue)</functioncall>
        <functioncall prog_lang="eel">bool GetSetMediaItemInfo_String(MediaItem item, "parmname", #stringNeedBig, bool setNewValue)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetMediaItemInfo_String(MediaItem item, string parmname, string stringNeedBig, boolean setNewValue)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetMediaItemInfo_String(item, parmname, stringNeedBig, setNewValue)</functioncall>
        <requires>
            Reaper=5.975
        </requires>
        <description prog_lang="*">
            Gets/sets an item attribute string:
                P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)
                P_EXT:xyz : char * : extension-specific persistent data
                GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
        </description>
        <retvals>
            boolean retval - 
            string stringNeedBig - 
        </retvals>
        <parameters>
            MediaItem item - 
            string parmname - 
            string stringNeedBig - 
            boolean setNewValue - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetMediaItemTakeInfo_String</slug>
        <title>GetSetMediaItemTakeInfo_String</title>
        <functioncall prog_lang="cpp">bool GetSetMediaItemTakeInfo_String(MediaItem_Take* tk, const char* parmname, char* stringNeedBig, bool setnewvalue)</functioncall>
        <functioncall prog_lang="eel">bool GetSetMediaItemTakeInfo_String(MediaItem_Take tk, "parmname", #stringNeedBig, bool setnewvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetMediaItemTakeInfo_String(MediaItem_Take tk, string parmname, string stringNeedBig, boolean setnewvalue)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take tk, String parmname, String stringNeedBig, Boolean setnewvalue) = RPR_GetSetMediaItemTakeInfo_String(tk, parmname, stringNeedBig, setnewvalue)</functioncall>
        <requires>
            Reaper=5.975
        </requires>
        <description prog_lang="*">
            Gets/sets a take attribute string:
                P_NAME : char * : take name
                P_EXT:xyz : char * : extension-specific persistent data
                GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
        </description>
        <retvals>
            boolean retval - 
            string stringNeedBig - 
        </retvals>
        <parameters>
            MediaItem_Take tk - 
            string parmname - 
            string stringNeedBig - 
            boolean setnewvalue - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetMediaTrackInfo_String</slug>
        <title>GetSetMediaTrackInfo_String</title>
        <functioncall prog_lang="cpp">bool GetSetMediaTrackInfo_String(MediaTrack* tr, const char* parmname, char* stringNeedBig, bool setnewvalue)</functioncall>
        <functioncall prog_lang="eel">bool GetSetMediaTrackInfo_String(MediaTrack tr, "parmname", #stringNeedBig, bool setnewvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetMediaTrackInfo_String(MediaTrack tr, string parmname, string stringNeedBig, boolean setnewvalue)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack tr, String parmname, String stringNeedBig, Boolean setnewvalue) = RPR_GetSetMediaTrackInfo_String(tr, parmname, stringNeedBig, setnewvalue)</functioncall>
        <requires>
            Reaper=6.54
        </requires>
        <description prog_lang="*">
            Get or set track string attributes.
            P_NAME : char * : track name (on master returns NULL)
            P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)
            P_MCP_LAYOUT : const char * : layout name
            P_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.
                Passing the guid sets selection within the envelope; not passing the guid sets the selection within the track itself.
                Example: "0.00 1.00 \"\" 0.00 1.00 "{xyz-...}"
                Set stringNeedBig="" and setnewvalue=false to query the currently set razor-edits on this track.
            P_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional envelope GUID string, optional fixed/fipm top y-position, optional fixed/fipm bottom y-position(fipm means fixed item positioning).
                Example: "0.0 1.0,0.0 1.0 "{xyz-...}",1.0 2.0 "" 0.25 0.5"
                see P_RAZOREDITS above for more details
            P_TCP_LAYOUT : const char * : layout name
            P_EXT:xyz : char * : extension-specific persistent data
            P_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).
            GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
        </description>
        <retvals>
            boolean retval - true, getting/setting the value was successful; false, it was unsuccessful
            string stringNeedBig - the resulting/returned value
        </retvals>
        <parameters>
            MediaTrack tr - the track, whose string-attributes you want to get/set
            string parmname - the attribute that you want to get/set(see description for details)
            string stringNeedBig - the new value; make "" when getting
            boolean setnewvalue - true, set a new value; false, get a value
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <linked_to desc="see also:">
            Reaper:GetMediaTrackInfo_Value
                   get a numerical value of a MediaTrack-attribute
            Reaper:SetMediaTrackInfo_Value
                   sets a numerical value of a MediaTrack-attribute
        </linked_to>
        <tags></tags>
        <changelog>
            Reaper 6.57 - higher precision for the razor-edit start and end-positions
            Reaper 6.54 - added attribute "P_RAZOREDITS_EXT", which has extended support for razor-edits with track-lanes/free item positioning
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetProjectAuthor</slug>
        <title>GetSetProjectAuthor</title>
        <functioncall prog_lang="cpp">void GetSetProjectAuthor(ReaProject* proj, bool set, char* author, int author_sz)</functioncall>
        <functioncall prog_lang="eel">GetSetProjectAuthor(ReaProject proj, bool set, #author)</functioncall>
        <functioncall prog_lang="lua">string author = reaper.GetSetProjectAuthor(ReaProject proj, boolean set, string author)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Boolean set, String author, Int author_sz) = RPR_GetSetProjectAuthor(proj, set, author, author_sz)</functioncall>
        <requires>
            Reaper=6.38
        </requires>
        <description prog_lang="*">
            deprecated, see GetSetProjectInfo_String with desc="PROJECT_AUTHOR"
        </description>
        <deprecated since_when="Reaper 6.38" alternative="GetSetProjectInfo_String with desc=\'PROJECT_AUTHOR\'(available since Reaper 6.39)"/>
        <retvals>
            string author - the (new) project's author
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            boolean set - true, set new author; false, get current project's author
            string author - the new project author, when set is true. When set is false, author will be ignored.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, project, author, get, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetProjectGrid</slug>
        <title>GetSetProjectGrid</title>
        <functioncall prog_lang="cpp">int GetSetProjectGrid(ReaProject* project, bool set, double* divisionInOutOptional, int* swingmodeInOutOptional, double* swingamtInOutOptional)</functioncall>
        <functioncall prog_lang="eel">int GetSetProjectGrid(ReaProject project, bool set, optional &division, optional int &swingmode, optional &swingamt)</functioncall>
        <functioncall prog_lang="lua">integer retval, optional number division, optional integer swingmode, optional number swingamt = reaper.GetSetProjectGrid(ReaProject project, boolean set, optional number division, optional integer swingmode, optional number swingamt)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject project, Boolean set, Float divisionInOutOptional, Int swingmodeInOutOptional, Float swingamtInOutOptional) = RPR_GetSetProjectGrid(project, set, divisionInOutOptional, swingmodeInOutOptional, swingamtInOutOptional)</functioncall>
        <requires>
            Reaper=5.965
        </requires>
        <description prog_lang="*">
            Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags
        </description>
        <retvals>
            integer retval - 
            optional number division - 
            optional integer swingmode - 
            optional number swingamt - 
        </retvals>
        <parameters>
            ReaProject project - the project-number. 0 for the current project. 
            boolean set - 
            optional number division - 
            optional integer swingmode - 
            optional number swingamt - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetProjectInfo</slug>
        <title>GetSetProjectInfo</title>
        <functioncall prog_lang="cpp">double GetSetProjectInfo(ReaProject* project, const char* desc, double value, bool is_set)</functioncall>
        <functioncall prog_lang="eel">double GetSetProjectInfo(ReaProject project, "desc", value, bool is_set)</functioncall>
        <functioncall prog_lang="lua">number value = reaper.GetSetProjectInfo(ReaProject project, string desc, number value, boolean is_set)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetSetProjectInfo(ReaProject project, String desc, Float value, Boolean is_set)</functioncall>
        <requires>
            Reaper=6.64
        </requires>
        <description>
            Get or set project information.
 
            RENDER_SETTINGS : 
                &(1|2)=0:master mix, 
                &1=stems+master mix, 
                &2=stems only, 
                &4=multichannel tracks to multichannel files, 
                &8=use render matrix, 
                &16=tracks with only mono media to mono files, 
                &32=selected media items, 
                &64=selected media items via master, 
                &128=Selected tracks via master, 
                &256=Stretch markers/transient guide-checkbox(Only with WAV/AIFF and Source=Selected media items/Selected media items via master), 
                &512=Embed Metadata, if format supports is, 
                &1024=Take markers-checkbox(Only with WAV and Source=Selected media items/Selected media items via master); 
                &2048=2nd pass render  
            OGG, OPUS and FLAC support embedding of tempoinformation via metadata, settable using GetSetProjectInfo_String.  
            RENDER_BOUNDSFLAG : 
              0=custom time bounds, 
              1=entire project, 
              2=time selection, 
              3=all project regions, 
              4=selected media items, 
              5=selected project regions, 
              6=all project markers, 
              7=selected project markers
            RENDER_CHANNELS : number of channels in rendered file  
            RENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)  
            RENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0  
            RENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0  
            RENDER_TAILFLAG : apply render tail setting when rendering: 
              &1=custom time bounds, 
              &2=entire project, 
              &4=time selection, 
              &8=all project markers/regions, 
              &16=selected media items, 
              &32=selected project markers/regions
            RENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)  
            RENDER_ADDTOPROJ : 
              &1=add rendered files to project, 
              &2=Do not render files that are likely silent  
            RENDER_DITHER : 
              &1=dither, 
              &2=noise shaping, 
              &4=dither stems, 
              &8=noise shaping on stems  
            RENDER_NORMALIZE: 
              &1=enable, (&14==0)=LUFS-I, (&14==2)=RMS, (&14==4)=peak, (&14==6)=true peak, (&14==8)=LUFS-M max, (&14==10)=LUFS-S max, 
              &32=normalize stems to common gain based on master, 
              &64=enable brickwall limit, 
              &128=brickwall limit true peak, 
              &256=only normalize files that are too loud, 
              &512=apply fade-in, 
              &1024=apply fade-out
            RENDER_NORMALIZE_TARGET: render normalization target as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc  
            RENDER_BRICKWALL: render brickwall limit as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc
            RENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&512)
            RENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires RENDER_NORMALIZE&1024)
            RENDER_FADEINSHAPE: render fade-in shape
            RENDER_FADEOUTSHAPE: render fade-out shape
            PROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)  
            PROJECT_SRATE_USE : set to 1 if project samplerate is used  
        </description>
        <retvals>
            number value - the new/current value set with this attribute
        </retvals>
        <parameters>
            ReaProject project -the project, whos project settings you want to get/set; 0, for the current project
            string desc - the attribute you want to get/set, like RENDER_CHANNELS, PROJECT_SRATE, RENDER_SETTINGS, etc
            number value - if is_set==true, this is the new value to set; if is_set==false, set this to 0
            boolean is_set - true, set a new value; false, get the current value
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetSetProjectInfo_String
                   sets additional attributes for the project as string instead of numbers
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.64 - FadeIn/FadeOut now supported in RENDER_NORMALIZE, RENDER_FADEIN, RENDER_FADEINSHAPE, RENDER_FADEOUT, RENDER_FADEOUTSHAPE
            Reaper 6.62 - RENDER_BOUNDSFLAG and RENDER_TAILFLAG support now markers as well
            Reaper 6.47 - added new normalization-modes &128=brickwall limit true peak, &256=only normalize files that are too loud
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetProjectInfo_String</slug>
        <title>GetSetProjectInfo_String</title>
        <functioncall prog_lang="cpp">bool GetSetProjectInfo_String(ReaProject* project, const char* desc, char* valuestrNeedBig, bool is_set)</functioncall>
        <functioncall prog_lang="eel">bool GetSetProjectInfo_String(ReaProject project, "desc", #valuestrNeedBig, bool is_set)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string valuestrNeedBig = reaper.GetSetProjectInfo_String(ReaProject project, string desc, string valuestrNeedBig, boolean is_set)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, ReaProject project, String desc, String valuestrNeedBig, Boolean is_set) = RPR_GetSetProjectInfo_String(project, desc, valuestrNeedBig, is_set)</functioncall>
        <requires>
            Reaper=6.76
        </requires>
        <description>
            Get or set project information.  

            PROJECT_NAME: project file name (read-only, is_set will be ignored)  
            PROJECT_TITLE: title field from Project Settings/Notes dialog  
            PROJECT_AUTHOR: author field from Project Settings/Notes dialog  
            TRACK_GROUP_NAME:X: track group name, X should be 1..64  
            MARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number (read-only)
            MARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with GUID {GUID} (read-only)
            OPENCOPY_CFGIDX : integer for the configuration of format to use when creating copies/applying FX. 0=wave (auto-depth), 1=APPLYFX_FORMAT, 2=RECORD_FORMAT
            RECORD_PATH: recording directory -- may be blank or a relative path, to get the effective path see [GetProjectPathEx](#GetProjectPathEx)  
            RECORD_PATH_SECONDARY: secondary recording directory  
            RECORD_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type.
            APPLYFX_FORMAT : base64-encoded sink configuration (see project files, etc). Used only if RECFMT_OPENCOPY is set to 1. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type.
            RENDER_FILE: render directory  
            RENDER_PATTERN: render file name (may contain wildcards)  
            RENDER_METADATA : get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: valuestr="ID3:TALB" to get, valuestr="ID3:TALB|my album name" to set. Call with valuestr="" and is_set=false to get a semicolon-separated list of defined project metadata identifiers.  
            RENDER_TARGETS: semicolon separated list of filenames that would be written if the project is rendered using the most recent render settings  
            RENDER_TARGETS_EX: double-NULL (\0\0) separated list of filenames that would be written if the project is rendered using the most recent render settings  
            RENDER_STATS: (read-only) semicolon separated list of statistics for the most recently rendered files. call with valuestr="XXX" to run an action (for example, "42437"=dry run render selected items) before returning statistics.  
                          returns nothing, when user aborted rendering.
            RENDER_FORMAT: base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), to use default settings for that sink type.  
            RENDER_FORMAT2: base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type, or "" to disable secondary render.  
            see <a href="misc_docs/RENDER_How_RenderCFG-Base64-strings_are_encoded.txt">RENDER_How_RenderCFG-Base64-strings_are_encoded.txt</a> for how the unencoded RENDER_FORMAT-string is structured.  

            To just use the 4-byte-string, you can use: 
            "wave" for wave, "aiff" for aiff, "caff" for caf, "iso " for audio-cd, "ddp " for ddp, "flac" for flac, "mp3l" for mp3, "oggv" for ogg, "OggS" for Opus, "FFMP" for FFMpeg-video, "FVAX" for MP4Video/Audio on Mac, "GIF " for Gif, "LCF " for LCF, "WMF" for Windows Media Foundation(mp4, m4a), "wvpk" for wavepack

            RENDER_METADATA: get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: Uses common ID3-tagcodes like TALB(album), TPE1(Artist), etc.
            To get album tag, use "ID3:TALB", to set album tag, use "ID3:TALB|my album name".  

            Examples in Lua:  
            getting the album name from the metadata of the current project:  

                    retval, albumname    = reaper.GetSetProjectInfo_String(0, "RENDER_METADATA", "ID3:TALB", false)

            setting the album name in the metadata of the current project:

                    retval, albumame_new = reaper.GetSetProjectInfo_String(0, "RENDER_METADATA", "ID3:TALB|New album name", true)

            Supported tags-codes are: TIT2(Title), TPE1(Artist), TPE2(Albumartist), TALB(Album), TRCK(Track), TCON(Genre), TYER(Year), TDRC(Recording time: YYYY-MM-DD), TKEY(Key), TBPM(Tempo), TSRC(International Standard Recording Code), COMM(Comment), COMM_LANG(Comment language), APIC_TYPE(Image type), APIC_DESC(Image description), APIC_FILE(Image file)  

            APIC_TYPE can have be of the following:  

            0: Other  
            1: 32x32 pixel file icon (PNG only)  
            2: Other file icon  
            3: Cover (front)  
            4: Cover (back)  
            5: Leaflet page  
            6: Media  
            7: Lead artist/Lead Performer/Solo  
            8: Artist/Performer  
            9: Conductor  
            10: Band/Orchestra  
            11: Composer  
            12: Lyricist/Text writer  
            13: Recording location  
            14: During recording  
            15: During performance  
            16: Movie/video screen capture  
            17: A bright colored fish  
            18: Illustration  
            19: Band/Artist logotype  
            20: Publisher/Studiotype  
        </description>
        <retvals>
            boolean retval - true, value can be set/get; false, value can't be set/get
            string valuestrNeedBig - the current value for this project-setting
        </retvals>
        <parameters>
             ReaProject project - the project, whose setting you want to get or set
             string desc - the setting, that you want to get/set; refer description for available ones
             string valuestrNeedBig - if is_set==true, this is the new value to set
             boolean is_set - true, set a new value; false, just get the current one
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetSetProjectInfo
                   sets additional attributes for the project as number instead of string
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.76 - "OPENCOPY_CFGIDX", "RECORD_FORMAT" and "APPLYFX_FORMAT" - added as new attributes
            Reaper 6.71 - "MARKER_INDEX_FROM_GUID:{GUID}" - added, which allows getting marker-index by marker-guid
            Reaper 6.70 - "RENDER_TARGETS_EX" - fixed bug with NULL-separation
            Reaper 6.69 - "RENDER_TARGETS_EX" - added, but buggy; NULL-separation doesn't work
            Reaper 6.68 - "RENDER_STATS" returns now nothing, when user cancelled rendering
            Reaper 6.48 - "wmf" added as new render-output-format
            Reaper 6.47 - RENDER_METADATA supports now strings longer than 1024 bytes
            Reaper 6.43 - "caff" as render-outputformat for the CAF-format now supported
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetProjectNotes</slug>
        <title>GetSetProjectNotes</title>
        <functioncall prog_lang="cpp">void GetSetProjectNotes(ReaProject* proj, bool set, char* notesNeedBig, int notesNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">GetSetProjectNotes(ReaProject proj, bool set, #notes)</functioncall>
        <functioncall prog_lang="lua">string notes = reaper.GetSetProjectNotes(ReaProject proj, boolean set, string notes)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Boolean set, String notesNeedBig, Int notesNeedBig_sz) = RPR_GetSetProjectNotes(proj, set, notesNeedBig, notesNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            gets or sets project notes, notesNeedBig_sz is ignored when setting
        </description>
        <retvals>
            string notes - the notes stored in the project's notes.
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            boolean set - true, set the project's notes; false, get the project's notes
            string notes - the new project's notes, when set is set to true
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, get, set, project, notes</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetRepeat</slug>
        <title>GetSetRepeat</title>
        <functioncall prog_lang="cpp">int GetSetRepeat(int val)</functioncall>
        <functioncall prog_lang="eel">int GetSetRepeat(int val)</functioncall>
        <functioncall prog_lang="lua">integer repeat_state = reaper.GetSetRepeat(integer val)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetSetRepeat(Int val)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets or gets repeat-state of the current project.
        </description>
        <retvals>
            integer repeat_state - new/current repeat state; 0, repeat is off; 1, repeat is on
        </retvals>
        <parameters>
            integer val - -1, query repeat-state
                        - 0, clear repeat state
                        - 1, set repeat to repeat
                        - 2 and higher, toggle repeat state
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, get, set, repeat</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetRepeatEx</slug>
        <title>GetSetRepeatEx</title>
        <functioncall prog_lang="cpp">int GetSetRepeatEx(ReaProject* proj, int val)</functioncall>
        <functioncall prog_lang="eel">int GetSetRepeatEx(ReaProject proj, int val)</functioncall>
        <functioncall prog_lang="lua">integer repeat_state = reaper.GetSetRepeatEx(ReaProject proj, integer val)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetSetRepeatEx(ReaProject proj, Int val)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets or gets repeat-state in a specific project.
        </description>
        <retvals>
            integer repeat_state - new/current repeat state; 0, repeat is off; 1, repeat is on
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer val - -1, query repeat-state
                        - 0, clear repeat state
                        - 1, set repeat to repeat
                        - 2 and higher, toggle repeat state
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, get, set, repeat</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetTrackGroupMembership</slug>
        <title>GetSetTrackGroupMembership</title>
        <functioncall prog_lang="cpp">unsigned int GetSetTrackGroupMembership(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)</functioncall>
        <functioncall prog_lang="eel">uint GetSetTrackGroupMembership(MediaTrack tr, "groupname", uint setmask, uint setvalue)</functioncall>
        <functioncall prog_lang="lua">integer group_membership = reaper.GetSetTrackGroupMembership(MediaTrack tr, string groupname, integer setmask, integer setvalue)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetSetTrackGroupMembership(MediaTrack tr, String groupname, Int setmask, Int setvalue)</functioncall>
        <requires>
            Reaper=6.12
        </requires>
        <description prog_lang="*">
            Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:
            VOLUME_LEAD
            VOLUME_FOLLOW
            VOLUME_VCA_LEAD
            VOLUME_VCA_FOLLOW
            PAN_LEAD
            PAN_FOLLOW
            WIDTH_LEAD
            WIDTH_FOLLOW
            MUTE_LEAD
            MUTE_FOLLOW
            SOLO_LEAD
            SOLO_FOLLOW
            RECARM_LEAD
            RECARM_FOLLOW
            POLARITY_LEAD
            POLARITY_FOLLOW
            AUTOMODE_LEAD
            AUTOMODE_FOLLOW
            VOLUME_REVERSE
            PAN_REVERSE
            WIDTH_REVERSE
            NO_LEAD_WHEN_FOLLOW
            VOLUME_VCA_FOLLOW_ISPREFX

            Note: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).
        </description>
        <retvals>
            integer group_membership - 
        </retvals>
        <parameters>
            MediaTrack tr - 
            string groupname - 
            integer setmask - 
            integer setvalue - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetTrackState</slug>
        <title>GetSetTrackState</title>
        <functioncall prog_lang="cpp">bool GetSetTrackState(MediaTrack* track, char* str, int str_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetSetTrackState(MediaTrack track, #str)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetTrackState(MediaTrack track, string str)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String str, Int str_sz) = RPR_GetSetTrackState(track, str, str_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            deprecated -- see SetTrackStateChunk, GetTrackStateChunk
        </description>
        <deprecated since_when="Reaper 5.62" alternative="GetTrackStateChunk and SetTrackStateChunk(available since at least Reaper 5.40)"/>
        <retvals>
            boolean retval - 
            string str - 
        </retvals>
        <parameters>
            MediaTrack track - 
            string str - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackStateChunk
                   returns, an TrackStateChunk, which holds all attributes-information of a MediaTrack
            Reaper:SetTrackStateChunk
                   sets an TrackStateChunk, to replace all attributes-information of a MediaTrack
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetTrackState2</slug>
        <title>GetSetTrackState2</title>
        <functioncall prog_lang="cpp">bool GetSetTrackState2(MediaTrack* track, char* str, int str_sz, bool isundo)</functioncall>
        <functioncall prog_lang="eel">bool GetSetTrackState2(MediaTrack track, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetTrackState2(MediaTrack track, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String str, Int str_sz, Boolean isundo) = RPR_GetSetTrackState2(track, str, str_sz, isundo)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            deprecated -- see SetTrackStateChunk, GetTrackStateChunk
        </description>
        <deprecated since_when="5.62" alternative="GetTrackStateChunk and SetTrackStateChunk(available since at least Reaper 5.40)"/>
        <retvals>
            boolean retval - 
            string str - 
        </retvals>
        <parameters>
            MediaTrack track - 
            string str - 
            boolean isundo - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackStateChunk
                   returns, an TrackStateChunk, which holds all attributes-information of a MediaTrack
            Reaper:SetTrackStateChunk
                   sets an TrackStateChunk, to replace all attributes-information of a MediaTrack
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSubProjectFromSource</slug>
        <title>GetSubProjectFromSource</title>
        <functioncall prog_lang="cpp">ReaProject* GetSubProjectFromSource(PCM_source* src)</functioncall>
        <functioncall prog_lang="eel">ReaProject GetSubProjectFromSource(PCM_source src)</functioncall>
        <functioncall prog_lang="lua">ReaProject sub_proj = reaper.GetSubProjectFromSource(PCM_source src)</functioncall>
        <functioncall prog_lang="python">ReaProject sub_proj = RPR_GetSubProjectFromSource(PCM_source src)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            ReaProject sub_proj - the project-number. 0 for the current project. 
        </retvals>
        <parameters>
            PCM_source src - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTake</slug>
        <title>GetTake</title>
        <functioncall prog_lang="cpp">MediaItem_Take* GetTake(MediaItem* item, int takeidx)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take GetTake(MediaItem item, int takeidx)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take = reaper.GetTake(MediaItem item, integer takeidx)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take take = RPR_GetTake(MediaItem item, Int takeidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            get a take from an item by take count (zero-based)
        </description>
        <retvals>
            MediaItem_Take take - the requested MediaItem_Take
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose take you want to request
            integer takeidx - the index of the takes in a MediaItem
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, get, take, idx, item</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeEnvelope</slug>
        <title>GetTakeEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetTakeEnvelope(MediaItem_Take* take, int envidx)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetTakeEnvelope(MediaItem_Take take, int envidx)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope env = reaper.GetTakeEnvelope(MediaItem_Take take, integer envidx)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope env = RPR_GetTakeEnvelope(MediaItem_Take take, Int envidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            TrackEnvelope env - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer envidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Take Envelopes
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeEnvelopeByName</slug>
        <title>GetTakeEnvelopeByName</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetTakeEnvelopeByName(MediaItem_Take* take, const char* envname)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetTakeEnvelopeByName(MediaItem_Take take, "envname")</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope env = reaper.GetTakeEnvelopeByName(MediaItem_Take take, string envname)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope env = RPR_GetTakeEnvelopeByName(MediaItem_Take take, String envname)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            TrackEnvelope env - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            string envname - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Take Envelopes
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeMarker</slug>
        <title>GetTakeMarker</title>
        <functioncall prog_lang="cpp">double position = GetTakeMarker(MediaItem_Take* take, int idx, char* nameOut, int nameOut_sz, int* colorOutOptional)</functioncall>
        <functioncall prog_lang="eel">double position = GetTakeMarker(MediaItem_Take take, int idx, #name, optional int &color)</functioncall>
        <functioncall prog_lang="lua">number position, string name, optional integer color = reaper.GetTakeMarker(MediaItem_Take take, integer idx)</functioncall>
        <functioncall prog_lang="python">(Float position, MediaItem_Take take, Int idx, String nameOut, Int nameOut_sz, Int colorOutOptional) = RPR_GetTakeMarker(take, idx, nameOut, nameOut_sz, colorOutOptional))</functioncall>
        <requires>
            Reaper=6.09
        </requires>
        <description>
            Get information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist.
        </description>
        <retvals>
            number position - the position of the takemarker within the take in seconds
            string name - the name of the takemarker
            optional integer color - the color of the takemarker
        </retvals>
        <parameters>
            MediaItem_Take take - the take, whose take-marker you want to get
            integer idx - the id of the marker within the take, 0 for the first, 1 for the second, etc.
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetNumTakeMarkers
                   gets the number of take-markers of a take
            Reaper:SetTakeMarker
                   sets attributes of a takemarker of a take
            Reaper:DeleteTakeMarker
                   deletes a take marker
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Take Markers
        </chapter_context>
        <tags>markermanagement, get, takemarker</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeName</slug>
        <title>GetTakeName</title>
        <functioncall prog_lang="cpp">const char* GetTakeName(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">bool GetTakeName(#retval, MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">string takename = reaper.GetTakeName(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_GetTakeName(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Retruns the filename of the mediafile in a take. returns NULL if the take is not valid
        </description>
        <retvals>
            string takename - the filename of the mediafile in the take
        </retvals>
        <parameters>
            MediaItem_Take take - the MediaItem_Take, whose mediafilename you want to have
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags>mediaitemmanagement, get, filename, media, take, item</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeNumStretchMarkers</slug>
        <title>GetTakeNumStretchMarkers</title>
        <functioncall prog_lang="cpp">int GetTakeNumStretchMarkers(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int GetTakeNumStretchMarkers(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer count_stretch_marker = reaper.GetTakeNumStretchMarkers(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetTakeNumStretchMarkers(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns number of stretch markers in take
        </description>
        <retvals>
            integer count_stretch_marker - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Stretch Markers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeStretchMarker</slug>
        <title>GetTakeStretchMarker</title>
        <functioncall prog_lang="cpp">int GetTakeStretchMarker(MediaItem_Take* take, int idx, double* posOut, double* srcposOutOptional)</functioncall>
        <functioncall prog_lang="eel">int GetTakeStretchMarker(MediaItem_Take take, int idx, &pos, optional &srcpos)</functioncall>
        <functioncall prog_lang="lua">integer retval, number pos, optional number srcpos = reaper.GetTakeStretchMarker(MediaItem_Take take, integer idx)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int idx, Float posOut, Float srcposOutOptional) = RPR_GetTakeStretchMarker(take, idx, posOut, srcposOutOptional)</functioncall>
        <requires>
            Reaper=6.39
        </requires>
        <description prog_lang="*">
            Gets information on a stretch marker, idx is 0..n. 
            Returns -1 if stretch marker not valid. 
            
            posOut will be set to position in item
            srcposOutOptional will be set to source media position. 
            
            Returns index. if input index is -1, the following  marker is found using position (or source position if position is -1). 
            If position/source position are used to find marker position, their values are not updated.
        </description>
        <retvals>
            integer retval - 
            number pos - 
            optional number srcpos - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer idx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Stretch Markers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeStretchMarkerSlope</slug>
        <title>GetTakeStretchMarkerSlope</title>
        <functioncall prog_lang="cpp">double GetTakeStretchMarkerSlope(MediaItem_Take* take, int idx)</functioncall>
        <functioncall prog_lang="eel">double GetTakeStretchMarkerSlope(MediaItem_Take take, int idx)</functioncall>
        <functioncall prog_lang="lua">number take_marker_slope = reaper.GetTakeStretchMarkerSlope(MediaItem_Take take, integer idx)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetTakeStretchMarkerSlope(MediaItem_Take take, Int idx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            See SetTakeStretchMarkerSlope
        </description>
        <retvals>
            number take_marker_slope - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer idx - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:SetTakeStretchMarkerSlope
                   sets a take/stretch-marker slope
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Stretch Markers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTCPFXParm</slug>
        <title>GetTCPFXParm</title>
        <functioncall prog_lang="cpp">bool GetTCPFXParm(ReaProject* project, MediaTrack* track, int index, int* fxindexOut, int* parmidxOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTCPFXParm(ReaProject project, MediaTrack track, int index, int &fxindex, int &parmidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer fxindex, integer parmidx = reaper.GetTCPFXParm(ReaProject project, MediaTrack track, integer index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, ReaProject project, MediaTrack track, Int index, Int fxindexOut, Int parmidxOut) = RPR_GetTCPFXParm(project, track, index, fxindexOut, parmidxOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Get information about a specific FX parameter knob (see CountTCPFXParms).
        </description>
        <retvals>
            boolean retval - 
            integer fxindex - 
            integer parmidx - 
        </retvals>
        <parameters>
            ReaProject project - the project-number. 0 for the current project. 
            MediaTrack track - 
            integer index - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountTCPFXParms
                   returns the number of tcp-fx parameters
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTempoMatchPlayRate</slug>
        <title>GetTempoMatchPlayRate</title>
        <functioncall prog_lang="cpp">bool GetTempoMatchPlayRate(PCM_source* source, double srcscale, double position, double mult, double* rateOut, double* targetlenOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTempoMatchPlayRate(PCM_source source, srcscale, position, mult, &rate, &targetlen)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number rate, number targetlen = reaper.GetTempoMatchPlayRate(PCM_source source, number srcscale, number position, number mult)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, PCM_source source, Float srcscale, Float position, Float mult, Float rateOut, Float targetlenOut) = RPR_GetTempoMatchPlayRate(source, srcscale, position, mult, rateOut, targetlenOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256
        </description>
        <retvals>
            boolean retval - 
            number rate - 
            number targetlen - 
        </retvals>
        <parameters>
            PCM_source source - 
            number srcscale - 
            number position - 
            number mult - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTempoTimeSigMarker</slug>
        <title>GetTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">bool GetTempoTimeSigMarker(ReaProject* proj, int ptidx, double* timeposOut, int* measureposOut, double* beatposOut, double* bpmOut, int* timesig_numOut, int* timesig_denomOut, bool* lineartempoOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTempoTimeSigMarker(ReaProject proj, int ptidx, &timepos, int &measurepos, &beatpos, &bpm, int &timesig_num, int &timesig_denom, bool &lineartempo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number timepos, integer measurepos, number beatpos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempo = reaper.GetTempoTimeSigMarker(ReaProject proj, integer ptidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, ReaProject proj, Int ptidx, Float timeposOut, Int measureposOut, Float beatposOut, Float bpmOut, Int timesig_numOut, Int timesig_denomOut, Boolean lineartempoOut) = RPR_GetTempoTimeSigMarker(proj, ptidx, timeposOut, measureposOut, beatposOut, bpmOut, timesig_numOut, timesig_denomOut, lineartempoOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Get information about a tempo/time signature marker. 
        </description>
        <retvals>
            boolean retval - 
            number timepos - 
            integer measurepos - 
            number beatpos - 
            number bpm - 
            integer timesig_num - 
            integer timesig_denom - 
            boolean lineartempo - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer ptidx - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountTempoTimeSigMarkers
                   counts the number of tempo/time signature markers
            Reaper:DeleteTempoTimeSigMarker
                   removes a tempo/time signature-marker
            Reaper:SetTempoTimeSigMarker
                   adds/sets a tempo/time signature marker
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Time Signature Markers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetThemeColor</slug>
        <title>GetThemeColor</title>
        <functioncall prog_lang="cpp">int GetThemeColor(const char* ini_key, int flagsOptional)</functioncall>
        <functioncall prog_lang="eel">int GetThemeColor("ini_key", int flags)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.GetThemeColor(string ini_key, integer flags)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetThemeColor(String ini_key, Int flagsOptional)</functioncall>
        <requires>
            Reaper=6.14
        </requires>
        <description>
            Returns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. 
            
            See SetThemeColor for a list of valid ini_key.
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            string ini_key - 
            integer flags - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:SetThemeColor
                   sets a theme-color to a new color-value
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags>theme, get, theme, color</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetThingFromPoint</slug>
        <title>GetThingFromPoint</title>
        <functioncall prog_lang="cpp">MediaTrack* GetThingFromPoint(int screen_x, int screen_y, char* infoOut, int infoOut_sz)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetThingFromPoint(int screen_x, int screen_y, #info)</functioncall>
        <functioncall prog_lang="lua">optional MediaTrack tr, string info = reaper.GetThingFromPoint(integer screen_x, integer screen_y)</functioncall>
        <functioncall prog_lang="python">(MediaTrack tr, Int screen_x, Int screen_y, String infoOut, Int infoOut_sz) = RPR_GetThingFromPoint(screen_x, screen_y, infoOut, infoOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            Hit tests a point in screen coordinates. Updates infoOut with information such as "arrange", "fx_chain", "fx_0" (first FX in chain, floating) or Walter-elements. 
            When hovering above a track, info is "arrange", while over envelopes, it is "envelope x" where x is the number of the active(!) envelope.
            If a track panel is hit, string will begin with "tcp" or "mcp" or "tcp.mute" etc (future versions may append additional information). 
            
            May return NULL with valid info string to indicate non-track thing.
        </description>
        <retvals>
            optional MediaTrack tr - a track-object, if existing at this point
            string info - info like Walter-elements, arrange, fx_chain, etc
        </retvals>
        <parameters>
            integer screen_x - the x-position to query element
            integer screen_y - the y-position to query element
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>miscellaneous, get, thing, from point</tags>
        <changelog>
            Reaper 6.54 - hidden envelopes can now be found correctly
                        
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetToggleCommandState</slug>
        <title>GetToggleCommandState</title>
        <functioncall prog_lang="cpp">int GetToggleCommandState(int command_id)</functioncall>
        <functioncall prog_lang="eel">int GetToggleCommandState(int command_id)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.GetToggleCommandState(integer command_id)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetToggleCommandState(Int command_id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Return toggle-state of an action. See GetToggleCommandStateEx.
            See NamedCommandLookup() for the correct command_id.
        </description>
        <retvals>
            integer retval - toggle-state 
                    -0, off
                    -&1, on/checked in menus
                    -&2, on/grayed out in menus
                    -&16, on/bullet in front of the entry in menus
                    --1, NA because the action does not have on/off states.
        </retvals>
        <parameters>
            integer command_id - the command_id, whose toggle-state you want to know.
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetToggleCommandStateEx
                   get the toggle state of commands, including those in other sections
            Reaper:NamedCommandLookup
                   get the named action-command-id by command-id-number
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags>helperfunctions, toggle, get, command, state</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetToggleCommandStateEx</slug>
        <title>GetToggleCommandStateEx</title>
        <functioncall prog_lang="cpp">int GetToggleCommandStateEx(int section_id, int command_id)</functioncall>
        <functioncall prog_lang="eel">int GetToggleCommandStateEx(int section_id, int command_id)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.GetToggleCommandStateEx(integer section_id, integer command_id)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetToggleCommandStateEx(Int section_id, Int command_id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Return toggle-state of an action.
            
            For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. For the MIDI editor, the action state for the most recently focused window will be returned.
            See NamedCommandLookup() for the correct command_id.
        </description>
        <retvals>
            integer retval - toggle-state 
                    -0, off
                    -&1, on/checked in menus
                    -&2, on/grayed out in menus
                    -&16, on/bullet in front of the entry in menus
                    --1, NA because the action does not have on/off states.
        </retvals>
        <parameters>
            integer section_id - the section, in which the action lies
                        -0, Main
                        -100, Main (alt recording)
                        -32060, MIDI Editor
                        -32061, MIDI Event List Editor
                        -32062, MIDI Inline Editor
                        -32063, Media Explorer
            integer command_id - the command_id, whose toggle-state you want to know.
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetToggleCommandState
                   get the toggle state of commands in the main-section only
            Reaper:NamedCommandLookup
                   get the named action-command-id by command-id-number
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags>helperfunctions, toggle, get, command, state, section</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTooltipWindow</slug>
        <title>GetTooltipWindow</title>
        <functioncall prog_lang="cpp">HWND GetTooltipWindow()</functioncall>
        <functioncall prog_lang="eel">HWND GetTooltipWindow()</functioncall>
        <functioncall prog_lang="lua">HWND hwnd = reaper.GetTooltipWindow()</functioncall>
        <functioncall prog_lang="python">HWND hwnd = RPR_GetTooltipWindow()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            gets a tooltip window,in case you want to ask it for font information. Can return NULL.
        </description>
        <retvals>
            HWND hwnd - the tooltip-window
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>userinterface, hwnd, tooltip, window, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrack</slug>
        <title>GetTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetTrack(ReaProject* proj, int trackidx)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetTrack(ReaProject proj, int trackidx)</functioncall>
        <functioncall prog_lang="lua">MediaTrack tr = reaper.GetTrack(ReaProject proj, integer trackidx)</functioncall>
        <functioncall prog_lang="python">MediaTrack tr = RPR_GetTrack(ReaProject proj, Int trackidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            get a track from a project by track count (zero-based) (proj=0 for active project)
        </description>
        <retvals>
            MediaTrack tr - the requested MediaTrack as an object
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer trackidx - the tracknumber; 0 for the first track, 1 for the second track, etc.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <example name="Get a track" description="gets the first track and shows its current trackname and volume" author="Mespotine" url="Examples/Mespotine_GetTrack_ShowTracknameAndVolume.lua"/>
        <example name="Toggle track-selection" description="gets each individual track and toggles its selection-state" author="Mespotine" url="Examples/Mespotine_GetTrack_ToggleTrackSelection.lua"/>
        <linked_to desc="see also:">
            Reaper:GetTrackFromPoint
                   gets the track located at a specific screen-coordinate
            Reaper:GetMasterTrack
                   gets the master track
            Reaper:GetSelectedTrack
                   gets a selected track
        </linked_to>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, get, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackAutomationMode</slug>
        <title>GetTrackAutomationMode</title>
        <functioncall prog_lang="cpp">int GetTrackAutomationMode(MediaTrack* tr)</functioncall>
        <functioncall prog_lang="eel">int GetTrackAutomationMode(MediaTrack tr)</functioncall>
        <functioncall prog_lang="lua">integer automation_mode = reaper.GetTrackAutomationMode(MediaTrack tr)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetTrackAutomationMode(MediaTrack tr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            return the track mode, regardless of global override
        </description>
        <retvals>
            integer automation_mode - 
        </retvals>
        <parameters>
            MediaTrack tr - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackColor</slug>
        <title>GetTrackColor</title>
        <functioncall prog_lang="cpp">int GetTrackColor(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int GetTrackColor(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer color = reaper.GetTrackColor(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetTrackColor(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the track custom color as OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). Black is returned as 0x01000000, no color setting is returned as 0.
        </description>
        <retvals>
            integer color - the os-dependent color
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, whose color you want to request
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, get, color, track, dependent</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackDepth</slug>
        <title>GetTrackDepth</title>
        <functioncall prog_lang="cpp">int GetTrackDepth(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int GetTrackDepth(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer tr_depth = reaper.GetTrackDepth(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetTrackDepth(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the depth of a track within a folder structure
        </description>
        <retvals>
            integer tr_depth - the position in the track-folder-structure; 0 for the highest level or unfoldered tracks
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack whose position in the track-folder-structure you want to request
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, get, track, depth, folder, depth</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackEnvelope</slug>
        <title>GetTrackEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetTrackEnvelope(MediaTrack* track, int envidx)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetTrackEnvelope(MediaTrack track, int envidx)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope env = reaper.GetTrackEnvelope(MediaTrack track, integer envidx)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope env = RPR_GetTrackEnvelope(MediaTrack track, Int envidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets an envelope of a track.
            
            Note: to create an FX-envelope, use GetFXEnvelope with parameter create=true
        </description>
        <retvals>
            TrackEnvelope env - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer envidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Track Envelopes
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackEnvelopeByChunkName</slug>
        <title>GetTrackEnvelopeByChunkName</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetTrackEnvelopeByChunkName(MediaTrack* tr, const char* cfgchunkname_or_guid)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetTrackEnvelopeByChunkName(MediaTrack tr, "cfgchunkname_or_guid")</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope env = reaper.GetTrackEnvelopeByChunkName(MediaTrack tr, string cfgchunkname_or_guid)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope env = RPR_GetTrackEnvelopeByChunkName(MediaTrack tr, String cfgchunkname_or_guid)</functioncall>
        <requires>
            Reaper=6.24
        </requires>
        <description prog_lang="*">
            Gets a built-in track envelope by configuration chunk name, e.g. "<VOLENV" or GUID string, like "{B577250D-146F-B544-9B34-F24FBE488F1F}".

            Note: to create an FX-envelope, use GetFXEnvelope with parameter create=true
        </description>
        <retvals>
            TrackEnvelope env - 
        </retvals>
        <parameters>
            MediaTrack tr - 
            string cfgchunkname_or_guid - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Track Envelopes
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackEnvelopeByName</slug>
        <title>GetTrackEnvelopeByName</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetTrackEnvelopeByName(MediaTrack* track, const char* envname)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetTrackEnvelopeByName(MediaTrack track, "envname")</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope = reaper.GetTrackEnvelopeByName(MediaTrack track, string envname)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope env = RPR_GetTrackEnvelopeByName(MediaTrack track, String envname)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets a TrackEnvelope by its name.
            
            Note: to create an FX-envelope, use GetFXEnvelope with parameter create=true
        </description>
        <retvals>
            TrackEnvelope env - 
        </retvals>
        <parameters>
            MediaTrack track - 
            string envname - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Track Envelopes
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackFromPoint</slug>
        <title>GetTrackFromPoint</title>
        <functioncall prog_lang="cpp">MediaTrack* GetTrackFromPoint(int screen_x, int screen_y, int* infoOutOptional)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetTrackFromPoint(int screen_x, int screen_y, optional int &info)</functioncall>
        <functioncall prog_lang="lua">MediaTrack retval, optional integer info = reaper.GetTrackFromPoint(integer screen_x, integer screen_y)</functioncall>
        <functioncall prog_lang="python">(MediaTrack retval, Int screen_x, Int screen_y, Int infoOutOptional) = RPR_GetTrackFromPoint(screen_x, screen_y, infoOutOptional)</functioncall>
        <requires>
            Reaper=5.975
        </requires>
        <description>
            Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX.

            Note: You can not get the track at screen-coordinates, where it is hidden by other windows.
            
            See GetThingFromPoint
        </description>
        <retvals>
            MediaTrack retval - the MediaTrack at position; if the position is above a window associated with the track, this holds the track, where retval info will hold additional information
            optional integer info - additional information, if the position is above a windows associated with a track
                                 - 1, if it is likely an envelope
                                 - 2, if it is likely a track FX
        </retvals>
        <parameters>
            integer screen_x - the x-position in pixels, from which you want to get the underlying track
            integer screen_y - the y-position in pixels, from which you want to get the underlying track
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetThingFromPoint
                   returns, which element can be found at a certain coordinate
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackGUID</slug>
        <title>GetTrackGUID</title>
        <functioncall prog_lang="cpp">GUID* GetTrackGUID(MediaTrack* tr)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackGUID(#retguid, MediaTrack tr)</functioncall>
        <functioncall prog_lang="lua">string GUID = reaper.GetTrackGUID(MediaTrack tr)</functioncall>
        <functioncall prog_lang="python">String GUID = RPR_GetTrackGUID(MediaTrack tr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the guid of a MediaTrack
        </description>
        <retvals>
            string GUID - 
        </retvals>
        <parameters>
            MediaTrack tr - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackMediaItem</slug>
        <title>GetTrackMediaItem</title>
        <functioncall prog_lang="cpp">MediaItem* GetTrackMediaItem(MediaTrack* tr, int itemidx)</functioncall>
        <functioncall prog_lang="eel">MediaItem GetTrackMediaItem(MediaTrack tr, int itemidx)</functioncall>
        <functioncall prog_lang="lua">MediaItem item = reaper.GetTrackMediaItem(MediaTrack tr, integer itemidx)</functioncall>
        <functioncall prog_lang="python">MediaItem item = RPR_GetTrackMediaItem(MediaTrack tr, Int itemidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            MediaItem item - 
        </retvals>
        <parameters>
            MediaTrack tr - 
            integer itemidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackMIDILyrics</slug>
        <title>GetTrackMIDILyrics</title>
        <functioncall prog_lang="cpp">bool GetTrackMIDILyrics(MediaTrack* track, int flag, char* bufOutWantNeedBig, int* bufOutWantNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackMIDILyrics(MediaTrack track, int flag, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.GetTrackMIDILyrics(MediaTrack track, integer flag)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int flag, String bufOutWantNeedBig, Int bufOutWantNeedBig_sz) = RPR_GetTrackMIDILyrics(track, flag, bufOutWantNeedBig, bufOutWantNeedBig_sz)</functioncall>
        <requires>
            Reaper=6.58
        </requires>
        <description>
            Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. 
            
            flag&1: double tabs at the end of each measure and triple tabs when skipping measures, 
            flag&2: each lyric is preceded by its beat position in the project 
            
            example with flag=2: "1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1 ").
            
            See SetTrackMIDILyrics
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer flag - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:SetTrackMIDILyrics
                   sets MIDI-lyrics of a MediaTrack, pushed into all MediaItems on the track
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackMIDINoteName</slug>
        <title>GetTrackMIDINoteName</title>
        <functioncall prog_lang="cpp">const char* GetTrackMIDINoteName(int track, int pitch, int chan)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackMIDINoteName(#retval, int track, int pitch, int chan)</functioncall>
        <functioncall prog_lang="lua">string notename = reaper.GetTrackMIDINoteName(integer track, integer pitch, integer chan)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_GetTrackMIDINoteName(Int track, Int pitch, Int chan)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            see GetTrackMIDINoteNameEx
        </description>
        <retvals>
            string notename - 
        </retvals>
        <parameters>
            integer track - 
            integer pitch - 
            integer chan - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackMIDINoteNameEx
                   gets the name of a midi-note from a track in a ReaProject
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackMIDINoteNameEx</slug>
        <title>GetTrackMIDINoteNameEx</title>
        <functioncall prog_lang="cpp">const char* GetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackMIDINoteNameEx(#retval, ReaProject proj, MediaTrack track, int pitch, int chan)</functioncall>
        <functioncall prog_lang="lua">string midi_notename = reaper.GetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_GetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, Int pitch, Int chan)</functioncall>
        <requires>
            Reaper=5.92
        </requires>
        <description>
            Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx
        </description>
        <retvals>
            string midi_notename - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            MediaTrack track - 
            integer pitch - 
            integer chan - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:SetTrackMIDINoteNameEx
                   sets track-midi-note attributes by project
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackMIDINoteRange</slug>
        <title>GetTrackMIDINoteRange</title>
        <functioncall prog_lang="cpp">void GetTrackMIDINoteRange(ReaProject* proj, MediaTrack* track, int* note_loOut, int* note_hiOut)</functioncall>
        <functioncall prog_lang="eel">GetTrackMIDINoteRange(ReaProject proj, MediaTrack track, int &note_lo, int &note_hi)</functioncall>
        <functioncall prog_lang="lua">integer note_lo_retval, integer note_hi = reaper.GetTrackMIDINoteRange(ReaProject proj, MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, MediaTrack track, Int note_loOut, Int note_hiOut) = RPR_GetTrackMIDINoteRange(proj, track, note_loOut, note_hiOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            integer note_lo_retval - 
            integer note_hi - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackName</slug>
        <title>GetTrackName</title>
        <functioncall prog_lang="cpp">bool GetTrackName(MediaTrack* track, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackName(MediaTrack track, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.GetTrackName(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String bufOut, Int bufOut_sz) = RPR_GetTrackName(track, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=5.974
        </requires>
        <description prog_lang="*">
            Returns "MASTER" for master track, "Track N" if track has no name.
        </description>
        <retvals>
            boolean retval - true, if successful
            string buf - the name of the track; "MASTER" for master-track; "Track N" if the track has no given name yet(N=tracknumber)
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, whose name you want to know
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, get, name</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackNumMediaItems</slug>
        <title>GetTrackNumMediaItems</title>
        <functioncall prog_lang="cpp">int GetTrackNumMediaItems(MediaTrack* tr)</functioncall>
        <functioncall prog_lang="eel">int GetTrackNumMediaItems(MediaTrack tr)</functioncall>
        <functioncall prog_lang="lua">integer num_media_items = reaper.GetTrackNumMediaItems(MediaTrack tr)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetTrackNumMediaItems(MediaTrack tr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the number of MediaItems of a MediaTrack
        </description>
        <retvals>
            integer num_media_items - the number of MediaItems in the MediaTrack
        </retvals>
        <parameters>
            MediaTrack tr - the MediaTrack, whose number of MediaItems you want to count
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, get, count, item, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackNumSends</slug>
        <title>GetTrackNumSends</title>
        <functioncall prog_lang="cpp">int GetTrackNumSends(MediaTrack* tr, int category)</functioncall>
        <functioncall prog_lang="eel">int GetTrackNumSends(MediaTrack tr, int category)</functioncall>
        <functioncall prog_lang="lua">integer count_sends = reaper.GetTrackNumSends(MediaTrack tr, integer category)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetTrackNumSends(MediaTrack tr, Int category)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns number of sends/receives/hardware outputs

            For ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).
        </description>
        <retvals>
            integer count_sends - the number of sends/receives/hardware outputs
        </retvals>
        <parameters>
            MediaTrack tr - the MediaTrack, whose number of sends/receives/hardware outputs you want to know
            integer category - <0 for receives; 0=sends; >0 for hardware outputs
        </parameters>
        <linked_to desc="see also:">
            Reaper:CreateTrackSend
                   creates a track-send
            Reaper:GetTrackNumSends
                   get number of send of a track
            Reaper:GetSetTrackSendInfo
                   gets and sets attributes for a track-send
            Reaper:GetSetTrackSendInfo_String
                   gets sets additional string-attributes for metadata of track-sends
            Reaper:GetTrackSendInfo_Value
                   gets attributes of a track-send
            Reaper:RemoveTrackSend
                   removes a track-send
            Reaper:SetTrackSendInfo_Value
                   sets attributes of a track-send
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>trackmanagement, get, count, send, receive, hardware output, hwout</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackReceiveName</slug>
        <title>GetTrackReceiveName</title>
        <functioncall prog_lang="cpp">bool GetTrackReceiveName(MediaTrack* track, int recv_index, char* bufOut, int receive_trackname_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackReceiveName(MediaTrack track, int recv_index, #receive_trackname)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string receive_trackname = reaper.GetTrackReceiveName(MediaTrack track, integer recv_index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int recv_index, String receive_trackname, Int receive_trackname_sz) = RPR_GetTrackReceiveName(track, recv_index, receive_trackname, receive_trackname_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            Gets the name of a track, that MediaTrack is receiving.
            
            If the track has no name, the name will be something like "Track 2".
            
            See GetTrackSendName.
        </description>
        <retvals>
            boolean retval - true, receive is existing; false, receive is not existing
            string receive_trackname - the name of the track, MediaTrack is receiving
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, whose receive-trackname you want to get
            integer recv_index - the index of the received track; 0-based
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackSendName
                   returns the name of a track, that MediaTrack is sending to
            Reaper:GetSetMediaTrackInfo_String
                   sets various track-attributes, including trackname
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackReceiveUIMute</slug>
        <title>GetTrackReceiveUIMute</title>
        <functioncall prog_lang="cpp">bool GetTrackReceiveUIMute(MediaTrack* track, int recv_index, bool* muteOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackReceiveUIMute(MediaTrack track, int recv_index, bool &mute)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean mute = reaper.GetTrackReceiveUIMute(MediaTrack track, integer recv_index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int recv_index, Boolean muteOut) = RPR_GetTrackReceiveUIMute(track, recv_index, muteOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Returns the mute-state of a track, that MediaTrack is receiving.
            
            See GetTrackSendUIMute.
        </description>
        <retvals>
            boolean retval - true, receive exists; false, receive doesn't exist
            boolean mute - true, receive is muted; false, receive is not muted
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, whose receive-mutestate you want to get
            integer recv_index - the index of the received track; 0-based
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackSendUIMute
                   returns the mute-state of a send-track
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackReceiveUIVolPan</slug>
        <title>GetTrackReceiveUIVolPan</title>
        <functioncall prog_lang="cpp">bool GetTrackReceiveUIVolPan(MediaTrack* track, int recv_index, double* volumeOut, double* panOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackReceiveUIVolPan(MediaTrack track, int recv_index, &volume, &pan)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number volume, number pan = reaper.GetTrackReceiveUIVolPan(MediaTrack track, integer recv_index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int recv_index, Float volumeOut, Float panOut) = RPR_GetTrackReceiveUIVolPan(track, recv_index, volumeOut, panOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Returns the pan and volume-values of a track that MediaTrack is receiving.
            
            Note: convert the volumevalue to dB using in Lua: dB_volume = math.log(volume)*8.68588963806
            
            See GetTrackSendUIVolPan
        </description>
        <retvals>
            MediaTrack track - the MediaTrack, whose receive-mutestate you want to get
            number volume - the volume as mkvol-value(see description for how to convert it to dB)
            number pan - the pan-value; -1(L), 0(center), 1(R)
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, whose receive-vol-pan-value you want to get
            integer recv_index - the index of the received track; 0-based
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackSendUIVolPan
                   returns the volume and pan-values of a send-track
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackSendInfo_Value</slug>
        <title>GetTrackSendInfo_Value</title>
        <functioncall prog_lang="cpp">double GetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname)</functioncall>
        <functioncall prog_lang="eel">double GetTrackSendInfo_Value(MediaTrack tr, int category, int sendidx, "parmname")</functioncall>
        <functioncall prog_lang="lua">number value = reaper.GetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_GetTrackSendInfo_Value(MediaTrack tr, Int category, Int sendidx, String parmname)</functioncall>
        <requires>
            Reaper=6.30
        </requires>
        <description>
            Get send/receive/hardware output numerical-value attributes.
            category is <0 for receives, 0=sends, >0 for hardware outputs
            parameter names:

              B_MUTE : bool *
              B_PHASE : bool * : true to flip phase
              B_MONO : bool *
              D_VOL : double * : 1.0 = +0dB etc
              D_PAN : double * : -1..+1
              D_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
              I_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
              I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
              I_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.
              I_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.
              I_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanP_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs
              P_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)
              P_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)
              P_ENV:&envchunkname : TrackEnvelope * : call with :&VOLENV, :&PANENV, etc appended (read-only)

            For ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).
            
            Note: convert the D_VOL-volume to dB using in Lua: dB_volume = math.log(volume)*8.68588963806
        </description>
        <retvals>
            number value - the value of the parmname-attribute; see description for value-ranges
        </retvals>
        <parameters>
            MediaTrack tr - the MediaTrack, whose atributes of a send/receives/hwouts you want to get
            integer category - <0 to index receives, 0, to index sends; >0, to index hardware-outs
            integer sendidx - the index of the receive/send/hwout; 0-based
            string parmname - the parameter-name(see description for more details)
        </parameters>
        <linked_to desc="see also:">
            Reaper:CreateTrackSend
                   creates a track-send
            Reaper:GetTrackNumSends
                   get number of send of a track
            Reaper:GetSetTrackSendInfo
                   gets and sets attributes for a track-send
            Reaper:GetSetTrackSendInfo_String
                   gets sets additional string-attributes for metadata of track-sends
            Reaper:RemoveTrackSend
                   removes a track-send
            Reaper:SetTrackSendInfo_Value
                   sets attributes of a track-send
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.79 - improved docs for I_SRCCHAN and I_DSTCHAN
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackSendName</slug>
        <title>GetTrackSendName</title>
        <functioncall prog_lang="cpp">bool GetTrackSendName(MediaTrack* track, int send_index, char* send_name, int send_name_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackSendName(MediaTrack track, int send_index, #send_name)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string send_name = reaper.GetTrackSendName(MediaTrack track, integer send_index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int send_index, String send_name, Int send_name_sz) = RPR_GetTrackSendName(track, send_index, send_name, send_name_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            gets the name of a track, that MediaTrack is sending to
            send_idx>=0 for hw outputs, >=nb_of_hw_outputs for sends. 
            
            If the send-track has no name, send_name can be something like "Track 2"
            
            See GetTrackReceiveName
        </description>
        <retvals>
            boolean retval - 
            string send_name - the name of the track to which you send
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, whose track-send-name you want to get
            integer send_index - the index of the track-send
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackReceiveName
                   returns, if audioaccessor has changed
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackSendUIMute</slug>
        <title>GetTrackSendUIMute</title>
        <functioncall prog_lang="cpp">bool GetTrackSendUIMute(MediaTrack* track, int send_index, bool* muteOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackSendUIMute(MediaTrack track, int send_index, bool &mute)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean mute = reaper.GetTrackSendUIMute(MediaTrack track, integer send_index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int send_index, Boolean muteOut) = RPR_GetTrackSendUIMute(track, send_index, muteOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            send_idx>=0 for hw outputs, >=nb_of_hw_outputs for sends. 
            
            See GetTrackReceiveUIMute.
        </description>
        <retvals>
            boolean retval - 
            boolean mute - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer send_index - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackReceiveUIMute
                   returns the mute-state of a track-receive
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackSendUIVolPan</slug>
        <title>GetTrackSendUIVolPan</title>
        <functioncall prog_lang="cpp">bool GetTrackSendUIVolPan(MediaTrack* track, int send_index, double* volumeOut, double* panOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackSendUIVolPan(MediaTrack track, int send_index, &volume, &pan)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number volume, number pan = reaper.GetTrackSendUIVolPan(MediaTrack track, integer send_index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int send_index, Float volumeOut, Float panOut) = RPR_GetTrackSendUIVolPan(track, send_index, volumeOut, panOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            send_idx>=0 for hw outputs, >=nb_of_hw_outputs for sends. 
            
            See GetTrackReceiveUIVolPan
            
            Note: convert the volumevalue to dB using in Lua: dB_volume = math.log(volume)*8.68588963806
        </description>
        <retvals>
            boolean retval - 
            number volume - 
            number pan - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer send_index - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackReceiveUIVolPan
                   get the vol-pan-states of a track receive
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackState</slug>
        <title>GetTrackState</title>
        <functioncall prog_lang="cpp">const char* GetTrackState(MediaTrack* track, int* flagsOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackState(#retval, MediaTrack track, int &flags)</functioncall>
        <functioncall prog_lang="lua">string retval, integer flags = reaper.GetTrackState(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(String retval, MediaTrack track, Int flagsOut) = RPR_GetTrackState(track, flagsOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets track state, returns track name.
            flags will be set to:
            &1=folder
            &2=selected
            &4=has fx enabled
            &8=muted
            &16=soloed
            &32=SIP'd (with &16)
            &64=rec armed
            &128=rec monitoring on
            &256=rec monitoring auto
            &512=hide from TCP
            &1024=hide from MCP
        </description>
        <retvals>
            string retval - 
            integer flags - 
        </retvals>
        <parameters>
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackStateChunk</slug>
        <title>GetTrackStateChunk</title>
        <functioncall prog_lang="cpp">bool GetTrackStateChunk(MediaTrack* track, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackStateChunk(MediaTrack track, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetTrackStateChunk(MediaTrack track, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetTrackStateChunk(track, strNeedBig, strNeedBig_sz, isundoOptional)</functioncall>
        <requires>
            Reaper=5.982
        </requires>
        <description>
            Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
        </description>
        <retvals>
            boolean retval - 
            string str - 
        </retvals>
        <parameters>
            MediaTrack track - 
            string str - 
            boolean isundo - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackUIMute</slug>
        <title>GetTrackUIMute</title>
        <functioncall prog_lang="cpp">bool GetTrackUIMute(MediaTrack* track, bool* muteOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackUIMute(MediaTrack track, bool &mute)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean mute = reaper.GetTrackUIMute(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Boolean muteOut) = RPR_GetTrackUIMute(track, muteOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
            boolean mute - 
        </retvals>
        <parameters>
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackUIPan</slug>
        <title>GetTrackUIPan</title>
        <functioncall prog_lang="cpp">bool GetTrackUIPan(MediaTrack* track, double* pan1Out, double* pan2Out, int* panmodeOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackUIPan(MediaTrack track, &pan1, &pan2, int &panmode)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number pan1, number pan2, integer panmode = reaper.GetTrackUIPan(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Float pan1Out, Float pan2Out, Int panmodeOut) = RPR_GetTrackUIPan(track, pan1Out, pan2Out, panmodeOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
            number pan1 - 
            number pan2 - 
            integer panmode - 
        </retvals>
        <parameters>
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackUIVolPan</slug>
        <title>GetTrackUIVolPan</title>
        <functioncall prog_lang="cpp">bool GetTrackUIVolPan(MediaTrack* track, double* volumeOut, double* panOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackUIVolPan(MediaTrack track, &volume, &pan)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number volume, number pan = reaper.GetTrackUIVolPan(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Float volumeOut, Float panOut) = RPR_GetTrackUIVolPan(track, volumeOut, panOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
            number volume - 
            number pan - 
        </retvals>
        <parameters>
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetUnderrunTime</slug>
        <title>GetUnderrunTime</title>
        <functioncall prog_lang="cpp">void GetUnderrunTime(unsigned int* audio_xrunOut, unsigned int* media_xrunOut, unsigned int* curtimeOut)</functioncall>
        <functioncall prog_lang="eel">GetUnderrunTime(unsigned int &audio_xrun, unsigned int &media_xrun, unsigned int &curtime)</functioncall>
        <functioncall prog_lang="lua">integer audio_xrun, integer media_xrun, integer curtime = reaper.GetUnderrunTime()</functioncall>
        <functioncall prog_lang="python">RPR_GetUnderrunTime(unsigned int audio_xrunOut, unsigned int media_xrunOut, unsigned int curtimeOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)
        </description>
        <retvals>
            integer audio_xrun - 
            integer media_xrun - 
            integer curtime - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Audio
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - the following retvals and parameters aren't optional anymore:
                        - CPP: audio_xrunOut, media_xrunOut, curtimeOut
                        - EEL2: audio_xrun, media_xrun, curtime
                        - LUA: audio_xrun, media_xrun, curtime
                        - Python: audio_xrunOut, media_xrunOut, curtimeOut
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetUserFileNameForRead</slug>
        <title>GetUserFileNameForRead</title>
        <functioncall prog_lang="cpp">bool GetUserFileNameForRead(char* filenameNeed4096, const char* title, const char* defext)</functioncall>
        <functioncall prog_lang="eel">bool GetUserFileNameForRead(#filenameNeed4096, "title", "defext")</functioncall>
        <functioncall prog_lang="lua">boolean retval, string filenameNeed4096 = reaper.GetUserFileNameForRead(string filenameNeed4096, string title, string defext)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String filenameNeed4096, String title, String defext) = RPR_GetUserFileNameForRead(filenameNeed4096, title, defext)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Opens a filerequester, where a user can select a file.
            The requester only returns the file, but doesn't open or write to it. That said, this function can be used for both use-cases, BUT: keep in mind, that it shows an "open"-button, even if you want to use it in code for saving a file. You also can't use it for "create new file"-usecases, as you can't choose nonexisting files.
        </description>
        <retvals>
            boolean retval - true, if the user selected a file; false if the user canceled the dialog
            string filenameNeed4096 - the filename including the full absolute path of the file the user selected
        </retvals>
        <parameters>
            string filenameNeed4096 - default-filename the requester uses, until the user selects another file.
            string title - title of the file-requester-window
            string defext - the filter for the fileextensions. Only files with an extension defined in defext are shown.
                          - examples:
                          -"", all files
                          -"*", all files
                          -"ini", only .ini-files
                          -"*.ini", only .ini-files
                          -"*.txt; *.ini; *.exe", shows .txt; .ini; .exe-files
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags>user, interface, file, requester, dialog, open</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetUserInputs</slug>
        <title>GetUserInputs</title>
        <functioncall prog_lang="cpp">bool GetUserInputs(const char* title, int num_inputs, const char* captions_csv, char* retvals_csv, int retvals_csv_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetUserInputs("title", int num_inputs, "captions_csv", #retvals_csv)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string retvals_csv = reaper.GetUserInputs(string title, integer num_inputs, string captions_csv, string retvals_csv)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String title, Int num_inputs, String captions_csv, String retvals_csv, Int retvals_csv_sz) = RPR_GetUserInputs(title, num_inputs, captions_csv, retvals_csv, retvals_csv_sz)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description>
            Opens a window with input-fields to get values from the user.
            If a caption begins with *, for example "*password", the edit field will not display the input text.
            Maximum fields is 16. Values are returned as a comma/custom separator-separated string. 
            Returns false if the user canceled the dialog. 

            You can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields(separator=\n is recommended).

            Example:

            <pre><code>
                retval, retvals_csv = reaper.GetUserInputs("Title", 2, "Hello,World, separator=\n", "defaultvalue1\ndefaultvalue2")
            </code></pre>
            
            will return the values input by the user, separated by a newline.

            \n is recommended, as this allows the user entering everything, a one-lined-inputbox can handle.

            Important: the separator-field in the captions has no effect on how captions in parameter captions_csv are separated from each other. They still need to be separated by commas!

            Note: the parameter retvals_csv follows undisclosed csv rules. This is important when you want to set the default-captions for multiple input-field.
            For instance every entry for each input-field: 

            - must contain an even number of quotes/single quotes
            - every ( or must be closed by with )

            otherwise the separator will be ignored and the default-retvals will show in the wrong fields.

            Example:
            <pre><code>
            a retval_csv of I'm enlightened,I am too
            </code></pre>
            with one singlequote in it (the one in I'm) will NOT be shown in two fields
            
            <pre><code>
            I'm enlightened
            I am too
            </code></pre>
            
            but rather in one field as 
            
            <pre><code>
            I'm enlightened,I am too
            </code></pre>
            
            These can't be escaped due Reaper's API-limitation. Keep this in mind!
            
            Another note when only having one entry:
            You may run into the situation of wanting to have a caption, that has a , in it.
            This could be interpreted as separator, so an caption entry like:
            "this, is, my, entry"
            will be shown like
            "this"
            
            To avoid this, use separator=\b in the caption_csv, so
            "this, is, my, entry, separator=\b"
            will be shown as
            "this, is, my, entry".
            
        </description>
        <retvals>
            boolean retval - did the user click OK in the dialog(true) or close/cancel the dialog(false)
            string retvals_csv - the data from each of the input-fields, separated by a comma , or a separator you chose.
        </retvals>
        <parameters>
            string title - title of the window
            integer num_inputs - number of input-fields, 1-16.
            string captions_csv - a string with the captions for each input-field, each separated by a comma. Can be fewer than num_inputs. If a caption begins with *, the inputfield will display * instead of characters(for i.e. passwords).
            string retvals_csv - default-values for each input-field, separated by a comma or a separator you chose.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags>user, interface, input, values, csv, dialog</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GoToMarker</slug>
        <title>GoToMarker</title>
        <functioncall prog_lang="cpp">void GoToMarker(ReaProject* proj, int marker_index, bool use_timeline_order)</functioncall>
        <functioncall prog_lang="eel">GoToMarker(ReaProject proj, int marker_index, bool use_timeline_order)</functioncall>
        <functioncall prog_lang="lua">reaper.GoToMarker(ReaProject proj, integer marker_index, boolean use_timeline_order)</functioncall>
        <functioncall prog_lang="python">RPR_GoToMarker(ReaProject proj, Int marker_index, Boolean use_timeline_order)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Go to marker. 
            Move Editcursor to a given marker. When playing, the playcursor moves to the marker as well.

            For Regions, use GoToRegion.
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer marker_index - the markerindex, where you want to go to.
            boolean use_timeline_order - false, use the shown-markernumber as marker_index; true, use markers in timelineorder, ignoring the shown-markernumber
        </parameters>
        <linked_to desc="see also:">
            Reaper:GoToRegion
                   goes to a region, instead of a marker
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, goto, marker, play, cursor, editcursor, playcursor</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GoToRegion</slug>
        <title>GoToRegion</title>
        <functioncall prog_lang="cpp">void GoToRegion(ReaProject* proj, int region_index, bool use_timeline_order)</functioncall>
        <functioncall prog_lang="eel">GoToRegion(ReaProject proj, int region_index, bool use_timeline_order)</functioncall>
        <functioncall prog_lang="lua">reaper.GoToRegion(ReaProject proj, integer region_index, boolean use_timeline_order)</functioncall>
        <functioncall prog_lang="python">RPR_GoToRegion(ReaProject proj, Int region_index, Boolean use_timeline_order)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Go to beginning of a region.
            Seek to region after current region finishes playing (smooth seek). 
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer region_index - the regionindex, where you want to got to.
            boolean use_timeline_order - false, use the shown-regionnumber as region_index; true, use regions in timelineorder, ignoring the shown-regionnumber
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, goto, region, play, cursor, editcursor, playcursor</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GR_SelectColor</slug>
        <title>GR_SelectColor</title>
        <functioncall prog_lang="cpp">int GR_SelectColor(HWND hwnd, int* colorOut)</functioncall>
        <functioncall prog_lang="eel">int GR_SelectColor(HWND hwnd, int &color)</functioncall>
        <functioncall prog_lang="lua">integer retval, integer color = reaper.GR_SelectColor(HWND hwnd)</functioncall>
        <functioncall prog_lang="python">(Int retval, HWND hwnd, Int colorOut) = RPR_GR_SelectColor(hwnd, colorOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Runs the system color chooser dialog. Returns 0 if the user cancels the dialog.
        </description>
        <retvals>
            integer retval - 1, user chose a color; 0, user canceled dialog
            integer color - the returned color as a native-color-value.
        </retvals>
        <parameters>
            HWND hwnd - the window, in which to open the dialog. Nil is allowed in Lua.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags>userinterface, color, dialog, chooser, native, hwnd</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GSC_mainwnd</slug>
        <title>GSC_mainwnd</title>
        <functioncall prog_lang="cpp">int GSC_mainwnd(int t)</functioncall>
        <functioncall prog_lang="eel">int GSC_mainwnd(int t)</functioncall>
        <functioncall prog_lang="lua">integer color = reaper.GSC_mainwnd(integer t)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GSC_mainwnd(Int t)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            this is just like win32 GetSysColor() but can have overrides.
        </description>
        <retvals>
            integer color - 
        </retvals>
        <parameters>
            integer t - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>guidToString</slug>
        <title>guidToString</title>
        <functioncall prog_lang="cpp">void guidToString(const GUID* g, char* destNeed64)</functioncall>
        <functioncall prog_lang="eel">guidToString("gGUID", #destNeed64)</functioncall>
        <functioncall prog_lang="lua">string destNeed64 = reaper.guidToString(string gGUID, string destNeed64)</functioncall>
        <functioncall prog_lang="python">(const GUID g, String destNeed64) = RPR_guidToString(g, destNeed64)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            dest should be at least 64 chars long to be safe
        </description>
        <retvals>
            string destNeed64 - 
        </retvals>
        <parameters>
            string gGUID - 
            string destNeed64 - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>HasExtState</slug>
        <title>HasExtState</title>
        <functioncall prog_lang="cpp">bool HasExtState(const char* section, const char* key)</functioncall>
        <functioncall prog_lang="eel">bool HasExtState("section", "key")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.HasExtState(string section, string key)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_HasExtState(String section, String key)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Returns true if there exists an extended state value for a specific section and key.
        </description>
        <retvals>
            boolean retval - true, extstate exists; false, extstate does not exist
        </retvals>
        <parameters>
            string section - the section of the extstate
            string key - the key of the extstate
        </parameters>
        <linked_to desc="see also:">
            Reaper:SetExtState
                   sets an extstate to store information for your script
            Reaper:GetExtState
                   gets an extstate that stores information for your script
            Reaper:DeleteExtState
                   deleted an extstate that stores information for your script
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Extension States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>HasTrackMIDIPrograms</slug>
        <title>HasTrackMIDIPrograms</title>
        <functioncall prog_lang="cpp">const char* HasTrackMIDIPrograms(int track)</functioncall>
        <functioncall prog_lang="eel">bool HasTrackMIDIPrograms(#retval, int track)</functioncall>
        <functioncall prog_lang="lua">string plugin_name = reaper.HasTrackMIDIPrograms(integer track)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_HasTrackMIDIPrograms(Int track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns name of track plugin that is supplying MIDI programs,or NULL if there is none
        </description>
        <retvals>
            string plugin_name - 
        </retvals>
        <parameters>
            integer track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>HasTrackMIDIProgramsEx</slug>
        <title>HasTrackMIDIProgramsEx</title>
        <functioncall prog_lang="cpp">const char* HasTrackMIDIProgramsEx(ReaProject* proj, MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">bool HasTrackMIDIProgramsEx(#retval, ReaProject proj, MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">string plugin_name = reaper.HasTrackMIDIProgramsEx(ReaProject proj, MediaTrack track)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_HasTrackMIDIProgramsEx(ReaProject proj, MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns name of track plugin that is supplying MIDI programs,or NULL if there is none
        </description>
        <retvals>
            string plugin_name - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Help_Set</slug>
        <title>Help_Set</title>
        <functioncall prog_lang="cpp">void Help_Set(const char* helpstring, bool is_temporary_help)</functioncall>
        <functioncall prog_lang="eel">Help_Set("helpstring", bool is_temporary_help)</functioncall>
        <functioncall prog_lang="lua">reaper.Help_Set(string helpstring, boolean is_temporary_help)</functioncall>
        <functioncall prog_lang="python">RPR_Help_Set(String helpstring, Boolean is_temporary_help)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Displays an information in the help and information-display, underneath the TCP(might be missing, in certain themes).
        </description>
        <parameters>
            string helpstring - the string to display
            boolean is_temporary_help - true, show until another message is displayed; false, show permanently, every time no other message is displayed.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>reaper, api, helper, display, help, information, message</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>image_resolve_fn</slug>
        <title>image_resolve_fn</title>
        <functioncall prog_lang="cpp">void image_resolve_fn(const char* in, char* out, int out_sz)</functioncall>
        <functioncall prog_lang="eel">image_resolve_fn("in", #out)</functioncall>
        <functioncall prog_lang="lua">string out = reaper.image_resolve_fn(string in, string out)</functioncall>
        <functioncall prog_lang="python">(String in, String out, Int out_sz) = RPR_image_resolve_fn(in, out, out_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            string out - 
        </retvals>
        <parameters>
            string in - 
            string out - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertAutomationItem</slug>
        <title>InsertAutomationItem</title>
        <functioncall prog_lang="cpp">int InsertAutomationItem(TrackEnvelope* env, int pool_id, double position, double length)</functioncall>
        <functioncall prog_lang="eel">int InsertAutomationItem(TrackEnvelope env, int pool_id, position, length)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.InsertAutomationItem(TrackEnvelope env, integer pool_id, number position, number length)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_InsertAutomationItem(TrackEnvelope env, Int pool_id, Float position, Float length)</functioncall>
        <requires>
            Reaper=5.96
        </requires>
        <description>
            Insert a new automation item. 
            
            pool_id < 0 collects existing envelope points into the automation item
            if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). 
            
            Returns the index of the item, suitable for passing to other automation item API functions. 
            
            See GetSetAutomationItemInfo.
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            TrackEnvelope env - 
            integer pool_id - 
            number position - 
            number length - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetSetAutomationItemInfo
                   gets/sets additional attributes of an automation item
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Automation Items
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertEnvelopePoint</slug>
        <title>InsertEnvelopePoint</title>
        <functioncall prog_lang="cpp">bool InsertEnvelopePoint(TrackEnvelope* envelope, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool InsertEnvelopePoint(TrackEnvelope envelope, time, value, int shape, tension, bool selected, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.InsertEnvelopePoint(TrackEnvelope envelope, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Float time, Float value, Int shape, Float tension, Boolean selected, Boolean noSortInOptional) = RPR_InsertEnvelopePoint(envelope, time, value, shape, tension, selected, noSortInOptional)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description>
            Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. 
            
            See InsertEnvelopePointEx.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            number time - 
            number value - 
            integer shape - 
            number tension - 
            boolean selected - 
            optional boolean noSortIn - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:Envelope_SortPoints
                   sorts the envelope-points, after you are finished with modifying them
            Reaper:InsertEnvelopePointEx
                   allows inserting envelope-points to envelopes as well as automation-items
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertEnvelopePointEx</slug>
        <title>InsertEnvelopePointEx</title>
        <functioncall prog_lang="cpp">bool InsertEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool InsertEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, time, value, int shape, tension, bool selected, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.InsertEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Float time, Float value, Int shape, Float tension, Boolean selected, Boolean noSortInOptional) = RPR_InsertEnvelopePointEx(envelope, autoitem_idx, time, value, shape, tension, selected, noSortInOptional)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description>
            Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
            autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
            For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
            even if the automation item is trimmed so that not all points are visible.
            Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.

            See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            integer autoitem_idx - 
            number time - 
            number value - 
            integer shape - 
            number tension - 
            boolean selected - 
            optional boolean noSortIn - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:Envelope_SortPoints
                   sorts the envelope-points, after you are finished with modifying them
            Reaper:CountEnvelopePointsEx
                   counts envelope-points in envelopes as well as automation-items
            Reaper:GetEnvelopePointEx
                   gets envelope-points from envelopes as well as automation-items
            Reaper:SetEnvelopePointEx
                   sets envelope-points in envelopes as well as automation-items
            Reaper:DeleteEnvelopePointEx
                   deletes envelope-points from envelopes as well as automation-items
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertMedia</slug>
        <title>InsertMedia</title>
        <functioncall prog_lang="cpp">int InsertMedia(const char* file, int mode)</functioncall>
        <functioncall prog_lang="eel">int InsertMedia("file", int mode)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.InsertMedia(string file, integer mode)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_InsertMedia(String file, Int mode)</functioncall>
        <requires>
            Reaper=6.23
        </requires>
        <description prog_lang="*">
            mode: 
            0=add to current track, 
            1=add new track, 
            3=add to selected items as takes, 
            &4=stretch/loop to fit time sel, 
            &8=try to match tempo 1x, 
            &16=try to match tempo 0.5x, 
            &32=try to match tempo 2x, 
            &64=don't preserve pitch when matching tempo, 
            &128=no loop/section if startpct/endpct set, 
            &256=force loop regardless of global preference for looping imported items, 
            &512=use high word as absolute track index if mode&3==0 or mode&2048, 
            &1024=insert into reasamplomatic on a new track (add 1 to insert on last selected track), 
            &2048=insert into open reasamplomatic instance (add 512 to use high word as absolute track index), 
            &4096=move to source preferred position (BWF start offset), 
            &8192=reverse
            
            Example:
            To insert an item at a specific trackindex, use:
            <pre><code>
                TrackIndex=3              -- set this to the track you want
                TrackIndex=TrackIndex<<16 -- move the index to high-word-destination for further use
                reaper.InsertMedia("C:\\test3.mp3", 0+512+TrackIndex) -- insert at track; it is important to add 512 in this to mode!
            </code></pre>
        </description>
        <retvals>
            integer retval - 0, inserting was unsuccessful; 1, inserting was successful
                           - Note: will always return 1, when mode=0 or mode=1, even if the file does not exist!
        </retvals>
        <parameters>
            string file - the file to insert
            integer mode - the mode, with which to insert the file(see description for more details)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertMediaSection</slug>
        <title>InsertMediaSection</title>
        <functioncall prog_lang="cpp">int InsertMediaSection(const char* file, int mode, double startpct, double endpct, double pitchshift)</functioncall>
        <functioncall prog_lang="eel">int InsertMediaSection("file", int mode, startpct, endpct, pitchshift)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.InsertMediaSection(string file, integer mode, number startpct, number endpct, number pitchshift)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_InsertMediaSection(String file, Int mode, Float startpct, Float endpct, Float pitchshift)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            see InsertMedia for more details
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            string file - 
            integer mode - 
            number startpct - 
            number endpct - 
            number pitchshift - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:InsertMedia
                   inserts mediafiles into a project
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertTrackAtIndex</slug>
        <title>InsertTrackAtIndex</title>
        <functioncall prog_lang="cpp">void InsertTrackAtIndex(int idx, bool wantDefaults)</functioncall>
        <functioncall prog_lang="eel">InsertTrackAtIndex(int idx, bool wantDefaults)</functioncall>
        <functioncall prog_lang="lua">reaper.InsertTrackAtIndex(integer idx, boolean wantDefaults)</functioncall>
        <functioncall prog_lang="python">RPR_InsertTrackAtIndex(Int idx, Boolean wantDefaults)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            inserts a track at idx,of course this will be clamped to 0..GetNumTracks().
        </description>
        <parameters>
            integer idx - the index, in which to insert the track; 0, insert before the first track.
            boolean wantDefaults - true, default envelopes/FX; false, no enabled FX/envelopes
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetNumTracks
                   gets the number of tracks
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, insert, track, index, default</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>IsMediaExtension</slug>
        <title>IsMediaExtension</title>
        <functioncall prog_lang="cpp">bool IsMediaExtension(const char* ext, bool wantOthers)</functioncall>
        <functioncall prog_lang="eel">bool IsMediaExtension("ext", bool wantOthers)</functioncall>
        <functioncall prog_lang="lua">boolean is_mediaextension = reaper.IsMediaExtension(string ext, boolean wantOthers)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_IsMediaExtension(String ext, Boolean wantOthers)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Tests a file extension (i.e. "wav" or "mid") to see if it's a media extension.
            If wantOthers is set, then "RPP", "TXT" and other project-type formats will also pass.
        </description>
        <retvals>
            boolean is_mediaextension - 
        </retvals>
        <parameters>
            string ext - 
            boolean wantOthers - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>IsMediaItemSelected</slug>
        <title>IsMediaItemSelected</title>
        <functioncall prog_lang="cpp">bool IsMediaItemSelected(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">bool IsMediaItemSelected(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">boolean item_selected = reaper.IsMediaItemSelected(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_IsMediaItemSelected(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get, if a MediaItem is selected or not.
        </description>
        <retvals>
            boolean item_selected - true, MediaItem is selected; false, MediaItem is not selected
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose selected-state you want to know
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>mediaitemmanagement, get, selected, state, unselected</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>IsProjectDirty</slug>
        <title>IsProjectDirty</title>
        <functioncall prog_lang="cpp">int IsProjectDirty(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int IsProjectDirty(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer project_dirty = reaper.IsProjectDirty(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_IsProjectDirty(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.

            A project becomes dirty, as soon as it was changed since creation/last saving.
        </description>
        <retvals>
            integer project_dirty - the state, if a project needs saving or not; 0, needs no saving; 1, needs saving
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, get, dirty, state, saved, unsaved</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>IsTrackSelected</slug>
        <title>IsTrackSelected</title>
        <functioncall prog_lang="cpp">bool IsTrackSelected(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">bool IsTrackSelected(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">boolean track_selected = reaper.IsTrackSelected(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_IsTrackSelected(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get, if a MediaTrack is selected or not.
        </description>
        <retvals>
            boolean track_selected - true, MediaTrack is selected; false, MediaTrack is not selected
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, whose selection-state you want to know
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, get, state, selection, deselection</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>IsTrackVisible</slug>
        <title>IsTrackVisible</title>
        <functioncall prog_lang="cpp">bool IsTrackVisible(MediaTrack* track, bool mixer)</functioncall>
        <functioncall prog_lang="eel">bool IsTrackVisible(MediaTrack track, bool mixer)</functioncall>
        <functioncall prog_lang="lua">boolean track_visible = reaper.IsTrackVisible(MediaTrack track, boolean mixer)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_IsTrackVisible(MediaTrack track, Boolean mixer)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets visibility-state of a MediaTrack.
        </description>
        <retvals>
            boolean track_visible - true, MediaTrack is visible; false, MediaTrack is invisible
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, whose visibility-state you want to know
            boolean mixer - true, visibility-state of the MediaTrack in the mixer; false, visibility-state of the MediaTrack in the TrackControlPanel
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, visible, get, invisible, mixer, track control panel, tcp, mcp</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_create</slug>
        <title>joystick_create</title>
        <functioncall prog_lang="cpp">joystick_device* joystick_create(const GUID* guid)</functioncall>
        <functioncall prog_lang="eel">joystick_device joystick_create("guidGUID")</functioncall>
        <functioncall prog_lang="lua">joystick_device joystick = reaper.joystick_create(string guidGUID)</functioncall>
        <functioncall prog_lang="python">joystick_device joystick = RPR_joystick_create(const GUID guid)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            creates a joystick device
        </description>
        <retvals>
            joystick_device joystick - 
        </retvals>
        <parameters>
            string guidGUID - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Joystick
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_destroy</slug>
        <title>joystick_destroy</title>
        <functioncall prog_lang="cpp">void joystick_destroy(joystick_device* device)</functioncall>
        <functioncall prog_lang="eel">joystick_destroy(joystick_device device)</functioncall>
        <functioncall prog_lang="lua">reaper.joystick_destroy(joystick_device device)</functioncall>
        <functioncall prog_lang="python">RPR_joystick_destroy(joystick_device device)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            destroys a joystick device
        </description>
        <parameters>
            joystick_device device - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Joystick
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_enum</slug>
        <title>joystick_enum</title>
        <functioncall prog_lang="cpp">const char* joystick_enum(int index, const char** namestrOutOptional)</functioncall>
        <functioncall prog_lang="eel">bool joystick_enum(#retval, int index, optional #namestr)</functioncall>
        <functioncall prog_lang="lua">string retval, optional string namestr = reaper.joystick_enum(integer index)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_joystick_enum(Int index, String namestrOutOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            enumerates installed devices, returns GUID as a string
        </description>
        <retvals>
            string retval - 
            string namestr - 
        </retvals>
        <parameters>
            integer index - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Joystick
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_getaxis</slug>
        <title>joystick_getaxis</title>
        <functioncall prog_lang="cpp">double joystick_getaxis(joystick_device* dev, int axis)</functioncall>
        <functioncall prog_lang="eel">double joystick_getaxis(joystick_device dev, int axis)</functioncall>
        <functioncall prog_lang="lua">number joystick_axis_value = reaper.joystick_getaxis(joystick_device dev, integer axis)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_joystick_getaxis(joystick_device dev, Int axis)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns axis value (-1..1)
        </description>
        <retvals>
            number joystick_axis_value - 
        </retvals>
        <parameters>
            joystick_device dev - 
            integer axis - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Joystick
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_getbuttonmask</slug>
        <title>joystick_getbuttonmask</title>
        <functioncall prog_lang="cpp">unsigned int joystick_getbuttonmask(joystick_device* dev)</functioncall>
        <functioncall prog_lang="eel">uint joystick_getbuttonmask(joystick_device dev)</functioncall>
        <functioncall prog_lang="lua">integer joystick_button_mask = reaper.joystick_getbuttonmask(joystick_device dev)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_joystick_getbuttonmask(joystick_device dev)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns button pressed mask, 1=first button, 2=second...
        </description>
        <retvals>
            integer joystick_button_mask - 
        </retvals>
        <parameters>
            joystick_device dev - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Joystick
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_getinfo</slug>
        <title>joystick_getinfo</title>
        <functioncall prog_lang="cpp">int joystick_getinfo(joystick_device* dev, int* axesOutOptional, int* povsOutOptional)</functioncall>
        <functioncall prog_lang="eel">int joystick_getinfo(joystick_device dev, optional int &axes, optional int &povs)</functioncall>
        <functioncall prog_lang="lua">integer retval, optional integer axes, optional integer povs = reaper.joystick_getinfo(joystick_device dev)</functioncall>
        <functioncall prog_lang="python">(Int retval, joystick_device dev, Int axesOutOptional, Int povsOutOptional) = RPR_joystick_getinfo(dev, axesOutOptional, povsOutOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns button count
        </description>
        <retvals>
            integer retval - 
            optional integer axes - 
            optional integer povs - 
        </retvals>
        <parameters>
            joystick_device dev - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Joystick
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_getpov</slug>
        <title>joystick_getpov</title>
        <functioncall prog_lang="cpp">double joystick_getpov(joystick_device* dev, int pov)</functioncall>
        <functioncall prog_lang="eel">double joystick_getpov(joystick_device dev, int pov)</functioncall>
        <functioncall prog_lang="lua">number joystick_pov = reaper.joystick_getpov(joystick_device dev, integer pov)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_joystick_getpov(joystick_device dev, Int pov)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns POV value (usually 0..655.35, or 655.35 on error)
        </description>
        <retvals>
            number joystick_pov - 
        </retvals>
        <parameters>
            joystick_device dev - 
            integer pov - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Joystick
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_update</slug>
        <title>joystick_update</title>
        <functioncall prog_lang="cpp">bool joystick_update(joystick_device* dev)</functioncall>
        <functioncall prog_lang="eel">bool joystick_update(joystick_device dev)</functioncall>
        <functioncall prog_lang="lua">boolean joystick_state = reaper.joystick_update(joystick_device dev)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_joystick_update(joystick_device dev)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)
        </description>
        <retvals>
            boolean joystick_state - 
        </retvals>
        <parameters>
            joystick_device dev - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Joystick
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>kbd_enumerateActions</slug>
        <title>kbd_enumerateActions</title>
        <functioncall prog_lang="cpp">int retval = kbd_enumerateActions(KbdSectionInfo* section, int idx, const char** nameOut)</functioncall>
        <functioncall prog_lang="eel">int retval = kbd_enumerateActions(KbdSectionInfo section, int idx, #name)</functioncall>
        <functioncall prog_lang="lua">integer retval, string name = reaper.kbd_enumerateActions(KbdSectionInfo section, integer idx)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_kbd_enumerateActions(KbdSectionInfo section, Int idx, String nameOut)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            Returns the description of an action.
        </description>
        <retvals>
            integer retval - true, the action exists; false, the action does not exist
            string name - the name of the action
        </retvals>
        <parameters>
            KbdSectionInfo section - the section, in which the action is located
                                  -0, Main
                                  -100, Main (alt recording)
                                  -32060, MIDI Editor
                                  -32061, MIDI Event List Editor
                                  -32062, MIDI Inline Editor
                                  -32063, Media Explorer
            integer idx - the command-id of the action, whose description you want to have.
        </parameters>
        <linked_to desc="see also:">
            Reaper:kbd_getTextFromCmd
                   an alternative version of this function
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Action Related Functions
        </chapter_context>
        <tags>actions, get, name</tags>
        <changelog>
            Reaper 6.71 - added
        </changelog>
    </US_DocBloc>

   
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>LICE_ClipLine</slug>
        <title>LICE_ClipLine</title>
        <functioncall prog_lang="cpp">bool LICE_ClipLine(int* pX1Out, int* pY1Out, int* pX2Out, int* pY2Out, int xLo, int yLo, int xHi, int yHi)</functioncall>
        <functioncall prog_lang="eel">bool LICE_ClipLine(int &pX1, int &pY1, int &pX2, int &pY2, int xLo, int yLo, int xHi, int yHi)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer pX1, integer pY1, integer pX2, integer pY2 = reaper.LICE_ClipLine(integer pX1, integer pY1, integer pX2, integer pY2, integer xLo, integer yLo, integer xHi, integer yHi)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int pX1Out, Int pY1Out, Int pX2Out, Int pY2Out, Int xLo, Int yLo, Int xHi, Int yHi) = RPR_LICE_ClipLine(pX1Out, pY1Out, pX2Out, pY2Out, xLo, yLo, xHi, yHi)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns false if the line is entirely offscreen.
        </description>
        <retvals>
            boolean retval - 
            integer pX1 - 
            integer pY1 - 
            integer pX2 - 
            integer pY2 - 
        </retvals>
        <parameters>
            integer pX1 - 
            integer pY1 - 
            integer pX2 - 
            integer pY2 - 
            integer xLo - 
            integer yLo - 
            integer xHi - 
            integer yHi - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>LocalizeString</slug>
        <title>LocalizeString</title>
        <functioncall prog_lang="cpp">const char* LocalizeString(const char* src_string, const char* section, int flagsOptional)</functioncall>
        <functioncall prog_lang="eel">bool LocalizeString(#retval, "src_string", "section", int flags)</functioncall>
        <functioncall prog_lang="lua">string retval = reaper.LocalizeString(string src_string, string section, integer flags)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_LocalizeString(String src_string, String section, Int flagsOptional)</functioncall>
        <requires>
            Reaper=6.11
        </requires>
        <description prog_lang="*">
            Returns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original.
        </description>
        <retvals>
            string retval - the localized string or the original string, if no localized string is available
        </retvals>
        <parameters>
            string src_string - the string, which you want to be translated
            string section - the section in the ReaperLangPack-file, in which the string to localize is located
            integer flags - 1, set to only localize if sprintf-style formatting matches the original
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Localization
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Loop_OnArrow</slug>
        <title>Loop_OnArrow</title>
        <functioncall prog_lang="cpp">bool Loop_OnArrow(ReaProject* project, int direction)</functioncall>
        <functioncall prog_lang="eel">bool Loop_OnArrow(ReaProject project, int direction)</functioncall>
        <functioncall prog_lang="lua">boolean snap_state = reaper.Loop_OnArrow(ReaProject project, integer direction)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_Loop_OnArrow(ReaProject project, Int direction)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Move the loop selection left or right in steps according to snap-settings(when snap is enabled).
        </description>
        <retvals>
            boolean snap_state - true, snap is enabled; false, snap is disabled
        </retvals>
        <parameters>
            ReaProject project - the project to be checked for. 0 for current project. 
            integer direction - the direction to move; negative values, move towards start of project; positive values, move towards end of project; 0, keep position
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, loop, on arrow, move, selection, snap</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Main_OnCommand</slug>
        <title>Main_OnCommand</title>
        <functioncall prog_lang="cpp">void Main_OnCommand(int command, int flag)</functioncall>
        <functioncall prog_lang="eel">Main_OnCommand(int command, int flag)</functioncall>
        <functioncall prog_lang="lua">reaper.Main_OnCommand(integer command, integer flag)</functioncall>
        <functioncall prog_lang="python">RPR_Main_OnCommand(Int command, Int flag)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Performs an action belonging to the main action section. 
            To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().
            See Main_OnCommandEx.
        </description>
        <parameters>
            integer command -  the command-id of the action, you want to run
            integer flag - set to 0
        </parameters>
        <linked_to desc="see also:">
            Reaper:NamedCommandLookup
                   gets the numerical representation of an action-command-id of scripts or named actions(by SWS, etc)
            Reaper:ReverseNamedCommandLookup
                   gets the action-command-id by its numerical representation
            Reaper:Main_OnCommandEx
                   runs an action of main-context towards another project
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags>helperfunctions, run, command, action, script</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Main_OnCommandEx</slug>
        <title>Main_OnCommandEx</title>
        <functioncall prog_lang="cpp">void Main_OnCommandEx(int command, int flag, ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">Main_OnCommandEx(int command, int flag, ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.Main_OnCommandEx(integer command, integer flag, ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_Main_OnCommandEx(Int command, Int flag, ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().
        </description>
        <parameters>
            integer command -  the command-id of the action, you want to run
            integer flag - unknown, use 0
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <linked_to desc="see also:">
            Reaper:NamedCommandLookup
                   gets the numerical representation of an action-command-id of scripts or named actions(by SWS, etc)
            Reaper:ReverseNamedCommandLookup
                   gets the action-command-id by its numerical representation
            Reaper:Main_OnCommand
                   runs an action of main-context
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags>helperfunctions, run, command, action, script, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Main_openProject</slug>
        <title>Main_openProject</title>
        <functioncall prog_lang="cpp">void Main_openProject(const char* name)</functioncall>
        <functioncall prog_lang="eel">Main_openProject("name")</functioncall>
        <functioncall prog_lang="lua">reaper.Main_openProject(string name)</functioncall>
        <functioncall prog_lang="python">RPR_Main_openProject(String name)</functioncall>
        <requires>
            Reaper=5.983
        </requires>
        <description prog_lang="*">
            opens a project. 

            will prompt the user to save unless name is prefixed with 'noprompt:'. 
                example: "noprompt:projectfile.rpp"

            If name is prefixed with 'template:', project file will be loaded as a template.
                example: "template:projectfile.rpp"

            You can combine both: "template:noprompt:projectfile.rpp"

            If passed a .RTrackTemplate file, adds the template to the existing project.
        </description>
        <parameters>
            string name - the path and filename of the project/template you want to open
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Misc
        </chapter_context>
        <tags>projectmanagement, open, project, template, filename</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Main_SaveProject</slug>
        <title>Main_SaveProject</title>
        <functioncall prog_lang="cpp">void Main_SaveProject(ReaProject* proj, bool forceSaveAsInOptional)</functioncall>
        <functioncall prog_lang="eel">Main_SaveProject(ReaProject proj, bool forceSaveAsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.Main_SaveProject(ReaProject proj, boolean forceSaveAsIn)</functioncall>
        <functioncall prog_lang="python">RPR_Main_SaveProject(ReaProject proj, Boolean forceSaveAsInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Save the project.
            Optional with a save-dialog.
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            boolean forceSaveAsIn - false, save the project; true, open save-file-dialog first
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Misc
        </chapter_context>
        <tags>projectmanagement, save, project, save dialog</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Main_SaveProjectEx</slug>
        <title>Main_SaveProjectEx</title>
        <functioncall prog_lang="cpp">void Main_SaveProjectEx(ReaProject* proj, const char* filename, int options)</functioncall>
        <functioncall prog_lang="eel">Main_SaveProjectEx(ReaProject proj, "filename", int options)</functioncall>
        <functioncall prog_lang="lua">reaper.Main_SaveProjectEx(ReaProject proj, string filename, integer options)</functioncall>
        <functioncall prog_lang="python">RPR_Main_SaveProjectEx(ReaProject proj, String filename, Int options)</functioncall>
        <requires>
            Reaper=6.53
        </requires>
        <description prog_lang="*">
            Save the project and allows passing a filename.
            
            If project can not be saved, it will show an errordialog to the user.
            
            If the projectfilename already exists, it might create an alternative project-file with the extension rpp-TEMP.
            
            Will obey backup-file-settings, so a file using the extension rpp-bak might be created.
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            string filename - the filename of the project
            integer options - options to save with:
                            - &1, save selected tracks as track template
                            - &2, include media with track templates 
                            - &4, include envelopes with track template
        </parameters>
        <linked_to desc="see also:">
            Reaper:Main_openProject
                   for opening a project
            Reaper:Main_SaveProject
                   for saving a project already saved
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Misc
        </chapter_context>
        <tags>projectmanagement, save, project, save dialog, filename</tags>
        <changelog>
            Reaper 6.53 - added to API
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Main_UpdateLoopInfo</slug>
        <title>Main_UpdateLoopInfo</title>
        <functioncall prog_lang="cpp">void Main_UpdateLoopInfo(int ignoremask)</functioncall>
        <functioncall prog_lang="eel">Main_UpdateLoopInfo(int ignoremask)</functioncall>
        <functioncall prog_lang="lua">reaper.Main_UpdateLoopInfo(integer ignoremask)</functioncall>
        <functioncall prog_lang="python">RPR_Main_UpdateLoopInfo(Int ignoremask)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            integer ignoremask - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MarkProjectDirty</slug>
        <title>MarkProjectDirty</title>
        <functioncall prog_lang="cpp">void MarkProjectDirty(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">MarkProjectDirty(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.MarkProjectDirty(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_MarkProjectDirty(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, need save, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MarkTrackItemsDirty</slug>
        <title>MarkTrackItemsDirty</title>
        <functioncall prog_lang="cpp">void MarkTrackItemsDirty(MediaTrack* track, MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">MarkTrackItemsDirty(MediaTrack track, MediaItem item)</functioncall>
        <functioncall prog_lang="lua">reaper.MarkTrackItemsDirty(MediaTrack track, MediaItem item)</functioncall>
        <functioncall prog_lang="python">RPR_MarkTrackItemsDirty(MediaTrack track, MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            If track is supplied, item is ignored
        </description>
        <parameters>
            MediaTrack track - the MediaTrack that you want to mark as dirty
            MediaItem item - if no MediaTrack is given, use this MediaItem to mark as dirty
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>miscellaneous, track, item, dirty</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Master_GetPlayRate</slug>
        <title>Master_GetPlayRate</title>
        <functioncall prog_lang="cpp">double Master_GetPlayRate(ReaProject* project)</functioncall>
        <functioncall prog_lang="eel">double Master_GetPlayRate(ReaProject project)</functioncall>
        <functioncall prog_lang="lua">number mas_playrate = reaper.Master_GetPlayRate(ReaProject project)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_Master_GetPlayRate(ReaProject project)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the playrate of the project.
        </description>
        <retvals>
            number mas_playrate - the playrate of the project, between 0.25 and 10.0
        </retvals>
        <parameters>
            ReaProject project - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, get, playrate</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Master_GetPlayRateAtTime</slug>
        <title>Master_GetPlayRateAtTime</title>
        <functioncall prog_lang="cpp">double Master_GetPlayRateAtTime(double time_s, ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">double Master_GetPlayRateAtTime(time_s, ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">number mas_playrate_time = reaper.Master_GetPlayRateAtTime(number time_s, ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_Master_GetPlayRateAtTime(Float time_s, ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            number mas_playrate_time - 
        </retvals>
        <parameters>
            number time_s - 
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Master_GetTempo</slug>
        <title>Master_GetTempo</title>
        <functioncall prog_lang="cpp">double Master_GetTempo()</functioncall>
        <functioncall prog_lang="eel">double Master_GetTempo()</functioncall>
        <functioncall prog_lang="lua">number mas_tempo = reaper.Master_GetTempo()</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_Master_GetTempo()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            number mas_tempo - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Master_NormalizePlayRate</slug>
        <title>Master_NormalizePlayRate</title>
        <functioncall prog_lang="cpp">double Master_NormalizePlayRate(double playrate, bool isnormalized)</functioncall>
        <functioncall prog_lang="eel">double Master_NormalizePlayRate(playrate, bool isnormalized)</functioncall>
        <functioncall prog_lang="lua">number mas_norm_playrate = reaper.Master_NormalizePlayRate(number playrate, boolean isnormalized)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_Master_NormalizePlayRate(Float playrate, Boolean isnormalized)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.
        </description>
        <retvals>
            number mas_norm_playrate - 
        </retvals>
        <parameters>
            number playrate - 
            boolean isnormalized - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Master_NormalizeTempo</slug>
        <title>Master_NormalizeTempo</title>
        <functioncall prog_lang="cpp">double Master_NormalizeTempo(double bpm, bool isnormalized)</functioncall>
        <functioncall prog_lang="eel">double Master_NormalizeTempo(bpm, bool isnormalized)</functioncall>
        <functioncall prog_lang="lua">number mas_norm_tempo = reaper.Master_NormalizeTempo(number bpm, boolean isnormalized)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_Master_NormalizeTempo(Float bpm, Boolean isnormalized)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.
        </description>
        <retvals>
            number mas_norm_tempo - 
        </retvals>
        <parameters>
            number bpm - 
            boolean isnormalized - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MB</slug>
        <title>MB</title>
        <functioncall prog_lang="cpp">int MB(const char* msg, const char* title, int type)</functioncall>
        <functioncall prog_lang="eel">int MB("msg", "title", int type)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MB(string msg, string title, integer type)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_MB(String msg, String title, Int type)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Shows Messagebox with user-clickable buttons.
        </description>
        <retvals>
            integer retval - the button pressed by the user
                    -1, OK
                    -2, CANCEL
                    -3, ABORT
                    -4, RETRY
                    -5, IGNORE
                    -6, YES
                    -7, NO
        </retvals>
        <parameters>
            string msg - the message, that shall be shown in messagebox
            string title - the title of the messagebox
            string type - which buttons shall be shown in the messagebox
                -0, OK
                -1, OK CANCEL
                -2, ABORT RETRY IGNORE
                -3, YES NO CANCEL
                -4, YES NO
                -5, RETRY CANCEL
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags>user, interface, input, dialog, messagebox</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MediaItemDescendsFromTrack</slug>
        <title>MediaItemDescendsFromTrack</title>
        <functioncall prog_lang="cpp">int MediaItemDescendsFromTrack(MediaItem* item, MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaItem item - 
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_CountEvts</slug>
        <title>MIDI_CountEvts</title>
        <functioncall prog_lang="cpp">int MIDI_CountEvts(MediaItem_Take* take, int* notecntOut, int* ccevtcntOut, int* textsyxevtcntOut)</functioncall>
        <functioncall prog_lang="eel">int MIDI_CountEvts(MediaItem_Take take, int &notecnt, int &ccevtcnt, int &textsyxevtcnt)</functioncall>
        <functioncall prog_lang="lua">integer retval, number notecnt, number ccevtcnt, number textsyxevtcnt = reaper.MIDI_CountEvts(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int notecntOut, Int ccevtcntOut, Int textsyxevtcntOut) = RPR_MIDI_CountEvts(take, notecntOut, ccevtcntOut, textsyxevtcntOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Count the number of notes, CC events, and text/sysex events in a given MIDI item.
        </description>
        <retvals>
            integer retval - 
            integer notecnt - 
            integer ccevtcnt - 
            integer textsyxevtcnt - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_DeleteCC</slug>
        <title>MIDI_DeleteCC</title>
        <functioncall prog_lang="cpp">bool MIDI_DeleteCC(MediaItem_Take* take, int ccidx)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_DeleteCC(MediaItem_Take take, int ccidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_DeleteCC(MediaItem_Take take, integer ccidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_DeleteCC(MediaItem_Take take, Int ccidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Delete a MIDI CC event.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer ccidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_DeleteEvt</slug>
        <title>MIDI_DeleteEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_DeleteEvt(MediaItem_Take* take, int evtidx)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_DeleteEvt(MediaItem_Take take, int evtidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_DeleteEvt(MediaItem_Take take, integer evtidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_DeleteEvt(MediaItem_Take take, Int evtidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Delete a MIDI event.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer evtidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_DeleteNote</slug>
        <title>MIDI_DeleteNote</title>
        <functioncall prog_lang="cpp">bool MIDI_DeleteNote(MediaItem_Take* take, int noteidx)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_DeleteNote(MediaItem_Take take, int noteidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_DeleteNote(MediaItem_Take take, integer noteidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_DeleteNote(MediaItem_Take take, Int noteidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Delete a MIDI note.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer noteidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_DeleteTextSysexEvt</slug>
        <title>MIDI_DeleteTextSysexEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_DeleteTextSysexEvt(MediaItem_Take* take, int textsyxevtidx)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_DeleteTextSysexEvt(MediaItem_Take take, int textsyxevtidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_DeleteTextSysexEvt(MediaItem_Take take, integer textsyxevtidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_DeleteTextSysexEvt(MediaItem_Take take, Int textsyxevtidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Delete a MIDI text or sysex event.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer textsyxevtidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_DisableSort</slug>
        <title>MIDI_DisableSort</title>
        <functioncall prog_lang="cpp">void MIDI_DisableSort(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">MIDI_DisableSort(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">reaper.MIDI_DisableSort(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">RPR_MIDI_DisableSort(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.974
        </requires>
        <description prog_lang="*">
            Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.
        </description>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_EnumSelCC</slug>
        <title>MIDI_EnumSelCC</title>
        <functioncall prog_lang="cpp">int MIDI_EnumSelCC(MediaItem_Take* take, int ccidx)</functioncall>
        <functioncall prog_lang="eel">int MIDI_EnumSelCC(MediaItem_Take take, int ccidx)</functioncall>
        <functioncall prog_lang="lua">integer sel_midicc_index = reaper.MIDI_EnumSelCC(MediaItem_Take take, integer ccidx)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_MIDI_EnumSelCC(MediaItem_Take take, Int ccidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).
        </description>
        <retvals>
            integer sel_midicc_index - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer ccidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_EnumSelEvts</slug>
        <title>MIDI_EnumSelEvts</title>
        <functioncall prog_lang="cpp">int MIDI_EnumSelEvts(MediaItem_Take* take, int evtidx)</functioncall>
        <functioncall prog_lang="eel">int MIDI_EnumSelEvts(MediaItem_Take take, int evtidx)</functioncall>
        <functioncall prog_lang="lua">integer sel_midi_evt_index = reaper.MIDI_EnumSelEvts(MediaItem_Take take, integer evtidx)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_MIDI_EnumSelEvts(MediaItem_Take take, Int evtidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).
        </description>
        <retvals>
            integer sel_midi_evt_index - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer evtidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_EnumSelNotes</slug>
        <title>MIDI_EnumSelNotes</title>
        <functioncall prog_lang="cpp">int MIDI_EnumSelNotes(MediaItem_Take* take, int noteidx)</functioncall>
        <functioncall prog_lang="eel">int MIDI_EnumSelNotes(MediaItem_Take take, int noteidx)</functioncall>
        <functioncall prog_lang="lua">integer sel_midi_note_index = reaper.MIDI_EnumSelNotes(MediaItem_Take take, integer noteidx)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_MIDI_EnumSelNotes(MediaItem_Take take, Int noteidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).
        </description>
        <retvals>
            integer sel_midi_note_index - 
        </retvals>
        <parameters>
            MediaItek_Take take - 
            integer noteidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_EnumSelTextSysexEvts</slug>
        <title>MIDI_EnumSelTextSysexEvts</title>
        <functioncall prog_lang="cpp">int MIDI_EnumSelTextSysexEvts(MediaItem_Take* take, int textsyxidx)</functioncall>
        <functioncall prog_lang="eel">int MIDI_EnumSelTextSysexEvts(MediaItem_Take take, int textsyxidx)</functioncall>
        <functioncall prog_lang="lua">integer sel_midi_sysex_index = reaper.MIDI_EnumSelTextSysexEvts(MediaItem_Take take, integer textsyxidx)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_MIDI_EnumSelTextSysexEvts(MediaItem_Take take, Int textsyxidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).
        </description>
        <retvals>
            integer sel_midi_sysex_index - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer textsyxidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetAllEvts</slug>
        <title>MIDI_GetAllEvts</title>
        <functioncall prog_lang="cpp">bool MIDI_GetAllEvts(MediaItem_Take* take, char* bufOutNeedBig, int* bufOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetAllEvts(MediaItem_Take take, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.MIDI_GetAllEvts(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, String bufOutNeedBig, Int bufOutNeedBig_sz) = RPR_MIDI_GetAllEvts(take, bufOutNeedBig, bufOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.

               offset: MIDI ticks from previous event
               flag: &1=selected &2=muted
               flag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier
               msg: the MIDI message.

            A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.
            For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.

            See MIDI_SetAllEvts.
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDI_SetAllEvts
                   sets all midi-events of a take
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetCC</slug>
        <title>MIDI_GetCC</title>
        <functioncall prog_lang="cpp">bool MIDI_GetCC(MediaItem_Take* take, int ccidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, int* chanmsgOut, int* chanOut, int* msg2Out, int* msg3Out)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetCC(MediaItem_Take take, int ccidx, bool &selected, bool &muted, &ppqpos, int &chanmsg, int &chan, int &msg2, int &msg3)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean selected, boolean muted, number ppqpos, integer chanmsg, integer number chan, integer msg2, integer msg3 = reaper.MIDI_GetCC(MediaItem_Take take, integer ccidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int ccidx, Boolean selectedOut, Boolean mutedOut, Float ppqposOut, Int chanmsgOut, Int chanOut, Int msg2Out, Int msg3Out) = RPR_MIDI_GetCC(take, ccidx, selectedOut, mutedOut, ppqposOut, chanmsgOut, chanOut, msg2Out, msg3Out)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get MIDI CC event properties.
        </description>
        <retvals>
            boolean retval - 
            boolean selected - 
            boolean muted - 
            number ppqpos - 
            integer chanmsg - 
            integer chan - 
            integer msg2 - 
            integer msg3 - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer ccidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetCCShape</slug>
        <title>MIDI_GetCCShape</title>
        <functioncall prog_lang="cpp">bool MIDI_GetCCShape(MediaItem_Take* take, int ccidx, int* shapeOut, double* beztensionOut)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetCCShape(MediaItem_Take take, int ccidx, int &shape, &beztension)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer shape, number beztension = reaper.MIDI_GetCCShape(MediaItem_Take take, integer ccidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int ccidx, Int shapeOut, Float beztensionOut) = RPR_MIDI_GetCCShape(take, ccidx, shapeOut, beztensionOut)</functioncall>
        <requires>
            Reaper=6.00
        </requires>
        <description>
            Get CC shape and bezier tension. 
            
            See MIDI_GetCC, MIDI_SetCCShape
        </description>
        <retvals>
            boolean retval - 
            integer shape - 
            number beztension - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer ccidx - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDI_GetCC
                   gets midi-cc-events properties in a take
            Reaper:MIDI_SetCCShape
                   sets shape and bezier-tension of a midi-cc in a take
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetEvt</slug>
        <title>MIDI_GetEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_GetEvt(MediaItem_Take* take, int evtidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, char* msgOut, int* msgOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetEvt(MediaItem_Take take, int evtidx, bool &selected, bool &muted, &ppqpos, #msg)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean selected, boolean muted, number ppqpos, string msg = reaper.MIDI_GetEvt(MediaItem_Take take, integer evtidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int evtidx, Boolean selectedOut, Boolean mutedOut, Float ppqposOut, String msgOut, Int msgOut_sz) = RPR_MIDI_GetEvt(take, evtidx, selectedOut, mutedOut, ppqposOut, msgOut, msgOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            Get MIDI event properties of a take.
        </description>
        <retvals>
            boolean retval - 
            boolean selected - 
            boolean muted - 
            number ppqpos - 
            string msg - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer evtidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetGrid</slug>
        <title>MIDI_GetGrid</title>
        <functioncall prog_lang="cpp">double MIDI_GetGrid(MediaItem_Take* take, double* swingOutOptional, double* noteLenOutOptional)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetGrid(MediaItem_Take take, optional &swing, optional &noteLen)</functioncall>
        <functioncall prog_lang="lua">number retval, optional number swing, optional number noteLen = reaper.MIDI_GetGrid(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Float retval, MediaItem_Take take, Float swingOutOptional, Float noteLenOutOptional) = RPR_MIDI_GetGrid(take, swingOutOptional, noteLenOutOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.
        </description>
        <retvals>
            number retval - 
            optional number swing - 
            optional number noteLen - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetHash</slug>
        <title>MIDI_GetHash</title>
        <functioncall prog_lang="cpp">bool MIDI_GetHash(MediaItem_Take* take, bool notesonly, char* hashOut, int hashOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetHash(MediaItem_Take take, bool notesonly, #hash)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string hash = reaper.MIDI_GetHash(MediaItem_Take take, boolean notesonly)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean notesonly, String hashOut, Int hashOut_sz) = RPR_MIDI_GetHash(take, notesonly, hashOut, hashOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            Get a string that only changes when the MIDI data changes. 
            
            If notesonly==true, then the string changes only when the MIDI notes change. 
        </description>
        <retvals>
            boolean retval - 
            string hash - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            boolean notesonly - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDI_GetTrackHash
                   gets a hash-string that only changes, when the track's midi-data changes
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetNote</slug>
        <title>MIDI_GetNote</title>
        <functioncall prog_lang="cpp">bool MIDI_GetNote(MediaItem_Take* take, int noteidx, bool* selectedOut, bool* mutedOut, double* startppqposOut, double* endppqposOut, int* chanOut, int* pitchOut, int* velOut)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetNote(MediaItem_Take take, int noteidx, bool &selected, bool &muted, &startppqpos, &endppqpos, int &chan, int &pitch, int &vel)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean selected, boolean muted, number startppqpos, number endppqpos, integer chan, integer pitch, integer vel = reaper.MIDI_GetNote(MediaItem_Take take, integer noteidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int noteidx, Boolean selectedOut, Boolean mutedOut, Float startppqposOut, Float endppqposOut, Int chanOut, Int pitchOut, Int velOut) = RPR_MIDI_GetNote(take, noteidx, selectedOut, mutedOut, startppqposOut, endppqposOut, chanOut, pitchOut, velOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get MIDI note properties.
        </description>
        <retvals>
            boolean retval - 
            boolean selected - 
            boolean muted - 
            number startppqpos - 
            number endppqpos - 
            integer chan - 
            integer pitch - 
            integer vel - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer noteidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetPPQPos_EndOfMeasure</slug>
        <title>MIDI_GetPPQPos_EndOfMeasure</title>
        <functioncall prog_lang="cpp">double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take* take, double ppqpos)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, ppqpos)</functioncall>
        <functioncall prog_lang="lua">number endposition = reaper.MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, number ppqpos)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, Float ppqpos)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the MIDI tick (ppq) position corresponding to the end of the measure.
        </description>
        <retvals>
            number endposition - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            number ppqpos - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetPPQPos_StartOfMeasure</slug>
        <title>MIDI_GetPPQPos_StartOfMeasure</title>
        <functioncall prog_lang="cpp">double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take* take, double ppqpos)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, ppqpos)</functioncall>
        <functioncall prog_lang="lua">number startposition = reaper.MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, number ppqpos)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, Float ppqpos)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the MIDI tick (ppq) position corresponding to the start of the measure.
        </description>
        <retvals>
            number startposition - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            number ppqpos - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetPPQPosFromProjQN</slug>
        <title>MIDI_GetPPQPosFromProjQN</title>
        <functioncall prog_lang="cpp">double MIDI_GetPPQPosFromProjQN(MediaItem_Take* take, double projqn)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetPPQPosFromProjQN(MediaItem_Take take, projqn)</functioncall>
        <functioncall prog_lang="lua">number ppq_position = reaper.MIDI_GetPPQPosFromProjQN(MediaItem_Take take, number projqn)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_MIDI_GetPPQPosFromProjQN(MediaItem_Take take, Float projqn)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.
        </description>
        <retvals>
            number ppq_position - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            number projqn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetPPQPosFromProjTime</slug>
        <title>MIDI_GetPPQPosFromProjTime</title>
        <functioncall prog_lang="cpp">double MIDI_GetPPQPosFromProjTime(MediaItem_Take* take, double projtime)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetPPQPosFromProjTime(MediaItem_Take take, projtime)</functioncall>
        <functioncall prog_lang="lua">number ppq_position = reaper.MIDI_GetPPQPosFromProjTime(MediaItem_Take take, number projtime)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_MIDI_GetPPQPosFromProjTime(MediaItem_Take take, Float projtime)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.
        </description>
        <retvals>
            number ppq_position - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            number projtime - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetProjQNFromPPQPos</slug>
        <title>MIDI_GetProjQNFromPPQPos</title>
        <functioncall prog_lang="cpp">double MIDI_GetProjQNFromPPQPos(MediaItem_Take* take, double ppqpos)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetProjQNFromPPQPos(MediaItem_Take take, ppqpos)</functioncall>
        <functioncall prog_lang="lua">number qn_project_time = reaper.MIDI_GetProjQNFromPPQPos(MediaItem_Take take, number ppqpos)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_MIDI_GetProjQNFromPPQPos(MediaItem_Take take, Float ppqpos)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.
        </description>
        <retvals>
            number qn_project_time - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            number ppqpos - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetProjTimeFromPPQPos</slug>
        <title>MIDI_GetProjTimeFromPPQPos</title>
        <functioncall prog_lang="cpp">double MIDI_GetProjTimeFromPPQPos(MediaItem_Take* take, double ppqpos)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, ppqpos)</functioncall>
        <functioncall prog_lang="lua">number seconds_project_time = reaper.MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, number ppqpos)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, Float ppqpos)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.
        </description>
        <retvals>
            number seconds_project_time - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            number ppqpos - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetRecentInputEvent</slug>
        <title>MIDI_GetRecentInputEvent</title>
        <functioncall prog_lang="cpp">int MIDI_GetRecentInputEvent(int idx, char* bufOut, int* bufOut_sz, int* tsOut, int* devIdxOut, double* projPosOut, int* projLoopCntOut)</functioncall>
        <functioncall prog_lang="eel">int MIDI_GetRecentInputEvent(int idx, #buf, int &ts, int &devIdx, &projPos, int &projLoopCnt)</functioncall>
        <functioncall prog_lang="lua">integer retval, string buf, integer ts, integer devIdx, number projPos, integer projLoopCnt = reaper.MIDI_GetRecentInputEvent(integer idx)</functioncall>
        <functioncall prog_lang="python">(Int retval, Int idx, String bufOut, Int bufOut_sz, Int tsOut, Int devIdxOut, Float projPosOut, Int projLoopCntOut) = RPR_MIDI_GetRecentInputEvent(idx, bufOut, bufOut_sz, tsOut, devIdxOut, projPosOut, projLoopCntOut)</functioncall>
        <requires>
            Reaper=6.41
        </requires>
        <description prog_lang="*">
            Gets a recent MIDI input event from the global history. 
            
            parameters:
            idx=0 for the most recent event, which also latches to the latest MIDI event state (to get a more recent list, calling with idx=0 is necessary). 
            idx=1 next most recent event, returns a non-zero sequence number for the event, or zero if no more events. 
            
            retvals:
            tsOut/ts will be set to the timestamp in samples relative to the current position (0 is current, -48000 is one second ago, etc). 
            
            devIdxOut/devIdx will have the low 16 bits set to the input device index, and 0x10000 will be set if device was enabled only for control. 
            
            projPosOut/projPos will be set to project position in seconds if project was playing back at time of event, otherwise -1. Large SysEx events will not be included in this event list.
        </description>
        <retvals>
            integer retval - 
            string buf - 
            integer ts - 
            integer devIdx - 
            integer projPos - 
            number projLoopCnt - 
        </retvals>
        <parameters>
            integer idx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Midi
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetScale</slug>
        <title>MIDI_GetScale</title>
        <functioncall prog_lang="cpp">bool MIDI_GetScale(MediaItem_Take* take, int* rootOut, int* scaleOut, char* nameOut, int nameOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetScale(MediaItem_Take take, int &root, int &scale, #name)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number root, number scale, string name = reaper.MIDI_GetScale(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int rootOut, Int scaleOut, String nameOut, Int nameOut_sz) = RPR_MIDI_GetScale(take, rootOut, scaleOut, nameOut, nameOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc.
        </description>
        <retvals>
            boolean retval - 
            integer root - 
            integer scale - 
            string name - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetTextSysexEvt</slug>
        <title>MIDI_GetTextSysexEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_GetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, bool* selectedOutOptional, bool* mutedOutOptional, double* ppqposOutOptional, int* typeOutOptional, char* msgOptional, int* msgOptional_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetTextSysexEvt(MediaItem_Take take, int textsyxevtidx, optional bool &selected, optional bool &muted, optional &ppqpos, optional int &type, optional #msg)</functioncall>
        <functioncall prog_lang="lua">boolean retval, optional boolean selected, optional boolean muted, optional number ppqpos, optional integer type, optional string msg = reaper.MIDI_GetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selected, optional boolean muted, optional number ppqpos, optional integer type, optional string msg)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int textsyxevtidx, Boolean selectedOutOptional, Boolean mutedOutOptional, Float ppqposOutOptional, Int typeOutOptional, String msgOptional, Int msgOptional_sz) = RPR_MIDI_GetTextSysexEvt(take, textsyxevtidx, selectedOutOptional, mutedOutOptional, ppqposOutOptional, typeOutOptional, msgOptional, msgOptional_sz)</functioncall>
        <requires>
            Reaper=6.00
        </requires>
        <description>
            Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. 

            See MIDI_GetEvt.
        </description>
        <retvals>
            boolean retval - 
            optional boolean selected - 
            optional boolean muted - 
            optional number ppqpos - 
            optional integer type - 
            optional string msg - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer textsyxevtidx - 
            optional boolean selected - 
            optional boolean muted - 
            optional number ppqpos -
            optional integer type - 
            optional string msg - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDI_GetEvt
                   get midi-events of a take
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetTrackHash</slug>
        <title>MIDI_GetTrackHash</title>
        <functioncall prog_lang="cpp">bool MIDI_GetTrackHash(MediaTrack* track, bool notesonly, char* hashOut, int hashOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetTrackHash(MediaTrack track, bool notesonly, #hash)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string hash = reaper.MIDI_GetTrackHash(MediaTrack track, boolean notesonly)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Boolean notesonly, String hashOut, Int hashOut_sz) = RPR_MIDI_GetTrackHash(track, notesonly, hashOut, hashOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. 
            
            See MIDI_GetHash
        </description>
        <retvals>
            boolean retval - 
            string hash - 
        </retvals>
        <parameters>
            MediaTrack track - 
            boolean notesonly - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDI_GetHash
                   gets a hash-string that only changes, when the take's midi-data changes
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_InsertCC</slug>
        <title>MIDI_InsertCC</title>
        <functioncall prog_lang="cpp">bool MIDI_InsertCC(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int chanmsg, int chan, int msg2, int msg3)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_InsertCC(MediaItem_Take take, bool selected, bool muted, ppqpos, int chanmsg, int chan, int msg2, int msg3)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_InsertCC(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer chanmsg, integer chan, integer msg2, integer msg3)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_InsertCC(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, Int chanmsg, Int chan, Int msg2, Int msg3)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Insert a new MIDI CC event.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            boolean selected - 
            boolean muted - 
            number ppqpos - 
            integer chanmsg - 
            integer chan - 
            integer msg2 - 
            integer msg3 - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>midi_init</slug>
        <title>midi_init</title>
        <functioncall prog_lang="cpp">void midi_init(int force_reinit_input, int force_reinit_output)</functioncall>
        <functioncall prog_lang="eel">midi_init(int force_reinit_input, int force_reinit_output)</functioncall>
        <functioncall prog_lang="lua">reaper.midi_init(integer force_reinit_input, integer force_reinit_output)</functioncall>
        <functioncall prog_lang="python">RPR_midi_init(Int force_reinit_input, Int force_reinit_output)</functioncall>
        <requires>
            Reaper=6.47
        </requires>
        <description prog_lang="*">
            Opens MIDI devices as configured in preferences. 
            
            force_reinit_input and force_reinit_output force a particular device index to close/re-open (pass -1 to not force any devices to reopen).
        </description>
        <parameters>
            integer force_reinit_input - 
            integer force_reinit_output - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Midi
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.47 - added to API
        </changelog>
    </US_DocBloc>
    
 

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_InsertEvt</slug>
        <title>MIDI_InsertEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_InsertEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, const char* bytestr, int bytestr_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_InsertEvt(MediaItem_Take take, bool selected, bool muted, ppqpos, "bytestr")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_InsertEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, string bytestr)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_InsertEvt(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, String bytestr, Int bytestr_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Insert a new MIDI event.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            boolean selected - 
            boolean muted - 
            number ppqpos - 
            string bytestr - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_InsertNote</slug>
        <title>MIDI_InsertNote</title>
        <functioncall prog_lang="cpp">bool MIDI_InsertNote(MediaItem_Take* take, bool selected, bool muted, double startppqpos, double endppqpos, int chan, int pitch, int vel, const bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_InsertNote(MediaItem_Take take, bool selected, bool muted, startppqpos, endppqpos, int chan, int pitch, int vel, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_InsertNote(MediaItem_Take take, boolean selected, boolean muted, number startppqpos, number endppqpos, integer chan, integer pitch, integer vel, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_InsertNote(MediaItem_Take take, Boolean selected, Boolean muted, Float startppqpos, Float endppqpos, Int chan, Int pitch, Int vel, const bool noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            boolean selected - 
            boolean muted - 
            number startppqpos - 
            number endppqpos - 
            integer chan - 
            integer pitch - 
            integer vel - 
            optional boolean noSortIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_InsertTextSysexEvt</slug>
        <title>MIDI_InsertTextSysexEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_InsertTextSysexEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int type, const char* bytestr, int bytestr_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_InsertTextSysexEvt(MediaItem_Take take, bool selected, bool muted, ppqpos, int type, "bytestr")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_InsertTextSysexEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer type, string bytestr)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_InsertTextSysexEvt(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, Int type, String bytestr, Int bytestr_sz)</functioncall>
        <requires>
            Reaper=6.00
        </requires>
        <description prog_lang="*">
            Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            boolean selected - 
            boolean muted - 
            number ppqpos - 
            integer type - 
            string bytestr - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>midi_reinit</slug>
        <title>midi_reinit</title>
        <functioncall prog_lang="cpp">void midi_reinit()</functioncall>
        <functioncall prog_lang="eel">midi_reinit()</functioncall>
        <functioncall prog_lang="lua">reaper.midi_reinit()</functioncall>
        <functioncall prog_lang="python">RPR_midi_reinit()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Reset (close and re-open) all MIDI devices
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Midi
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SelectAll</slug>
        <title>MIDI_SelectAll</title>
        <functioncall prog_lang="cpp">void MIDI_SelectAll(MediaItem_Take* take, bool select)</functioncall>
        <functioncall prog_lang="eel">MIDI_SelectAll(MediaItem_Take take, bool select)</functioncall>
        <functioncall prog_lang="lua">reaper.MIDI_SelectAll(MediaItem_Take take, boolean select)</functioncall>
        <functioncall prog_lang="python">RPR_MIDI_SelectAll(MediaItem_Take take, Boolean select)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Select or deselect all MIDI content.
        </description>
        <parameters>
            MediaItem_Take take - 
            boolean select - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetAllEvts</slug>
        <title>MIDI_SetAllEvts</title>
        <functioncall prog_lang="cpp">bool MIDI_SetAllEvts(MediaItem_Take* take, const char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetAllEvts(MediaItem_Take take, "buf")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_SetAllEvts(MediaItem_Take take, string buf)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_SetAllEvts(MediaItem_Take take, String buf, Int buf_sz)</functioncall>
        <requires>
            Reaper=6.00
        </requires>
        <description>
            Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.

               offset: MIDI ticks from previous event
               flag: &1=selected &2=muted
               flag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier
               msg: the MIDI message.

            A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.
            For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.

            See MIDI_GetAllEvts.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            string buf - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDI_GetAllEvts
                   gets all midi-events of a take
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetCC</slug>
        <title>MIDI_SetCC</title>
        <functioncall prog_lang="cpp">bool MIDI_SetCC(MediaItem_Take* take, int ccidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* chanmsgInOptional, const int* chanInOptional, const int* msg2InOptional, const int* msg3InOptional, const bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetCC(MediaItem_Take take, int ccidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional int chanmsgIn, optional int chanIn, optional int msg2In, optional int msg3In, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_SetCC(MediaItem_Take take, integer ccidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional integer chanmsgIn, optional integer chanIn, optional integer msg2In, optional integer msg3In, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_SetCC(MediaItem_Take take, Int ccidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, const int chanmsgInOptional, const int chanInOptional, const int msg2InOptional, const int msg3InOptional, const bool noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer ccidx - 
            optional boolean selectedIn - 
            optional boolean mutedIn - 
            optional number ppqposIn - 
            optional integer chanmsgIn - 
            optional integer chanIn - 
            optional integer msg2In - 
            optional integer msg3In - 
            optional boolean noSortIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetCCShape</slug>
        <title>MIDI_SetCCShape</title>
        <functioncall prog_lang="cpp">bool MIDI_SetCCShape(MediaItem_Take* take, int ccidx, int shape, double beztension, const bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetCCShape(MediaItem_Take take, int ccidx, int shape, beztension, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_SetCCShape(MediaItem_Take take, integer ccidx, integer shape, number beztension, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_SetCCShape(MediaItem_Take take, Int ccidx, Int shape, Float beztension, const bool noSortInOptional)</functioncall>
        <requires>
            Reaper=6.00
        </requires>
        <description>
            Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. 
            
            See MIDI_SetCC, MIDI_GetCCShape
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer ccidx - 
            integer shape - 
            number beztension - 
            optional boolean noSortIn - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDI_SetCC
                   sets the CC event properties
            Reaper:MIDI_GetCCShape
                   gets the CC-shape and bezier tension
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetEvt</slug>
        <title>MIDI_SetEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_SetEvt(MediaItem_Take* take, int evtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetEvt(MediaItem_Take take, int evtidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional "msg", optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_SetEvt(MediaItem_Take take, integer evtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional string msg, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_SetEvt(MediaItem_Take take, Int evtidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, String msgOptional, Int msgOptional_sz, const bool noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Set MIDI event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer evtidx - 
            optional boolean selectedIn - 
            optional boolean mutedIn - 
            optional number ppqposIn - 
            optional string msg - 
            optional boolean noSortIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetItemExtents</slug>
        <title>MIDI_SetItemExtents</title>
        <functioncall prog_lang="cpp">bool MIDI_SetItemExtents(MediaItem* item, double startQN, double endQN)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetItemExtents(MediaItem item, startQN, endQN)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_SetItemExtents(MediaItem item, number startQN, number endQN)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_SetItemExtents(MediaItem item, Float startQN, Float endQN)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Set the start/end positions of a media item that contains a MIDI take.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem item - 
            number startQN - 
            number endQN - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetNote</slug>
        <title>MIDI_SetNote</title>
        <functioncall prog_lang="cpp">bool MIDI_SetNote(MediaItem_Take* take, int noteidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* startppqposInOptional, const double* endppqposInOptional, const int* chanInOptional, const int* pitchInOptional, const int* velInOptional, const bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetNote(MediaItem_Take take, int noteidx, optional bool selectedIn, optional bool mutedIn, optional startppqposIn, optional endppqposIn, optional int chanIn, optional int pitchIn, optional int velIn, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_SetNote(MediaItem_Take take, integer noteidx, optional boolean selectedIn, optional boolean mutedIn, optional number startppqposIn, optional number endppqposIn, optional integer chanIn, optional integer pitchIn, optional integer velIn, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_SetNote(MediaItem_Take take, Int noteidx, const bool selectedInOptional, const bool mutedInOptional, const double startppqposInOptional, const double endppqposInOptional, const int chanInOptional, const int pitchInOptional, const int velInOptional, const bool noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer noteidx - 
            optional boolean selectedIn - 
            optional boolean mutedIn - 
            optional number startppqposIn - 
            optional number endppqposIn - 
            optional integer chanIn - 
            optional integer pitchIn - 
            optional integer velIn - 
            optional boolean noSortIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetTextSysexEvt</slug>
        <title>MIDI_SetTextSysexEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_SetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* typeInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetTextSysexEvt(MediaItem_Take take, int textsyxevtidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional int typeIn, optional "msg", optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDI_SetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional integer typeIn, optional string msg, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDI_SetTextSysexEvt(MediaItem_Take take, Int textsyxevtidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, const int typeInOptional, String msgOptional, Int msgOptional_sz, const bool noSortInOptional)</functioncall>
        <requires>
            Reaper=6.00
        </requires>
        <description prog_lang="*">
            Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer textsyxevtidx - 
            optional boolean selectedIn - 
            optional boolean mutedIn - 
            optional number ppqposIn - 
            optional integer typeIn - 
            optional string msg - 
            optional boolean noSortIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_Sort</slug>
        <title>MIDI_Sort</title>
        <functioncall prog_lang="cpp">void MIDI_Sort(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">MIDI_Sort(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">reaper.MIDI_Sort(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">RPR_MIDI_Sort(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.
        </description>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_EnumTakes</slug>
        <title>MIDIEditor_EnumTakes</title>
        <functioncall prog_lang="cpp">MediaItem_Take* MIDIEditor_EnumTakes(HWND midieditor, int takeindex, bool editable_only)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take MIDIEditor_EnumTakes(HWND midieditor, int takeindex, bool editable_only)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take = reaper.MIDIEditor_EnumTakes(HWND midieditor, integer takeindex, boolean editable_only)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take take = RPR_MIDIEditor_EnumTakes(HWND midieditor, Int takeindex, Boolean editable_only)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            list the takes that are currently being edited in this MIDI editor, starting with the active take. 
            
            See MIDIEditor_GetTake
        </description>
        <retvals>
            MediaItem_Take take - 
        </retvals>
        <parameters>
            HWND midieditor - 
            integer takeindex - 
            boolean editable_only - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDIEditor_GetTake
                   gets the take currently edited in the MIDI Editor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_GetActive</slug>
        <title>MIDIEditor_GetActive</title>
        <functioncall prog_lang="cpp">HWND MIDIEditor_GetActive()</functioncall>
        <functioncall prog_lang="eel">HWND MIDIEditor_GetActive()</functioncall>
        <functioncall prog_lang="lua">HWND hwnd = reaper.MIDIEditor_GetActive()</functioncall>
        <functioncall prog_lang="python">HWND hwnd = RPR_MIDIEditor_GetActive()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            get a pointer to the focused MIDI editor window
            see MIDIEditor_GetMode, MIDIEditor_OnCommand
        </description>
        <retvals>
            HWND hwnd - 
        </retvals>
        <linked_to desc="see also:">
            Reaper:MIDIEditor_GetMode
                   get the mode of an MIDI-Editor
            Reaper:MIDIEditor_OnCommand
                   runs an action from the MidiEditor-section inside a MidiEditor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_GetMode</slug>
        <title>MIDIEditor_GetMode</title>
        <functioncall prog_lang="cpp">int MIDIEditor_GetMode(HWND midieditor)</functioncall>
        <functioncall prog_lang="eel">int MIDIEditor_GetMode(HWND midieditor)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MIDIEditor_GetMode(HWND midieditor)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_MIDIEditor_GetMode(HWND midieditor)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)
            see MIDIEditor_GetActive, MIDIEditor_OnCommand
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            HWND midieditor - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDIEditor_GetActive
                   get the hwnd of the active MIDI-Editor
            Reaper:MIDIEditor_OnCommand
                   runs an action from the MidiEditor-section inside a MidiEditor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_GetSetting_int</slug>
        <title>MIDIEditor_GetSetting_int</title>
        <functioncall prog_lang="cpp">int MIDIEditor_GetSetting_int(HWND midieditor, const char* setting_desc)</functioncall>
        <functioncall prog_lang="eel">int MIDIEditor_GetSetting_int(HWND midieditor, "setting_desc")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MIDIEditor_GetSetting_int(HWND midieditor, string setting_desc)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_MIDIEditor_GetSetting_int(HWND midieditor, String setting_desc)</functioncall>
        <requires>
            Reaper=6.41
        </requires>
        <description>
            Get settings from a MIDI editor. setting_desc can be:
                snap_enabled: returns 0 or 1
                active_note_row: returns 0-127
                last_clicked_cc_lane: 
                    returns 0-127=CC, 
                            0x100|(0-31)=14-bit CC, 
                            0x200=velocity, 
                            0x201=pitch, 
                            0x202=program, 
                            0x203=channel pressure, 
                            0x204=bank/program select, 
                            0x205=text, 
                            0x206=sysex, 
                            0x207=off velocity, 
                            0x208=notation events, 
                            0x210=media item lane
                default_note_vel: returns 0-127
                default_note_chan: returns 0-15
                default_note_len: returns default length in MIDI ticks
                scale_enabled: returns 0-1
                scale_root: returns 0-12 (0=C) 
                list_cnt: if viewing list view, returns event count  
                if setting_desc is unsupported, the function returns -1.
                See MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            HWND midieditor - 
            string setting_desc - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDIEditor_SetSetting_int
                   Set settings for a MIDI Editor
            Reaper:MIDIEditor_GetActive
                   get the hwnd of the active MIDI Editor
            Reaper:MIDIEditor_GetSetting_str
                   get string-settings of a MIDI Editor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_GetSetting_str</slug>
        <title>MIDIEditor_GetSetting_str</title>
        <functioncall prog_lang="cpp">bool MIDIEditor_GetSetting_str(HWND midieditor, const char* setting_desc, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDIEditor_GetSetting_str(HWND midieditor, "setting_desc", #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.MIDIEditor_GetSetting_str(HWND midieditor, string setting_desc)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, HWND midieditor, String setting_desc, String bufOut, Int bufOut_sz) = RPR_MIDIEditor_GetSetting_str(midieditor, setting_desc, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.41
        </requires>
        <description>
            Get settings from a MIDI editor. setting_desc can be:
            last_clicked_cc_lane: returns text description ("velocity", "pitch", etc)
            scale: returns the scale record, for example "102034050607" for a major scale
            list_X: if viewing list view, returns string describing event at row X (0-based). String will have a list of key=value pairs, e.g. 'pos=4.0 len=4.0 offvel=127 msg=90317F'. pos/len times are in QN, len/offvel may not be present if event is not a note. other keys which may be present include pos_pq/len_pq, sel, mute, ccval14, ccshape, ccbeztension.

            if setting_desc is unsupported, the function returns false.

            See MIDIEditor_GetActive, MIDIEditor_GetSetting_int
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            HWND midieditor - 
            string setting_desc - 
            string buf - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDIEditor_GetActive
                   get the hwnd of the active MIDI Editor
            Reaper:MIDIEditor_GetSetting_int
                   get integer settings of a MIDI Editor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_GetTake</slug>
        <title>MIDIEditor_GetTake</title>
        <functioncall prog_lang="cpp">MediaItem_Take* MIDIEditor_GetTake(HWND midieditor)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take MIDIEditor_GetTake(HWND midieditor)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take = reaper.MIDIEditor_GetTake(HWND midieditor)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take take = RPR_MIDIEditor_GetTake(HWND midieditor)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            get the take that is currently being edited in this MIDI editor
            
            see MIDIEditor_EnumTakes
        </description>
        <retvals>
            MediaItem_Take take - 
        </retvals>
        <parameters>
            HWND midieditor - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDIEditor_EnumTakes
                   get the takes currently edited in Midi-editors
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_LastFocused_OnCommand</slug>
        <title>MIDIEditor_LastFocused_OnCommand</title>
        <functioncall prog_lang="cpp">bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)</functioncall>
        <functioncall prog_lang="eel">bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDIEditor_LastFocused_OnCommand(integer command_id, boolean islistviewcommand)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDIEditor_LastFocused_OnCommand(Int command_id, Boolean islistviewcommand)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Send an action command to the last focused MIDI editor. 
            
            Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.
            
            see MIDIEditor_OnCommand
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            integer command_id - 
            boolean islistviewcommand - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDIEditor_OnCommand
                   runs an action from the MIDI-Editor-section in a Midi editor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_OnCommand</slug>
        <title>MIDIEditor_OnCommand</title>
        <functioncall prog_lang="cpp">bool MIDIEditor_OnCommand(HWND midieditor, int command_id)</functioncall>
        <functioncall prog_lang="eel">bool MIDIEditor_OnCommand(HWND midieditor, int command_id)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDIEditor_OnCommand(HWND midieditor, integer command_id)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDIEditor_OnCommand(HWND midieditor, Int command_id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Send an action command to a MIDI editor. 
            
            Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).
            
            see MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            HWND midieditor - 
            integer command_id - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDIEditor_GetActive
                   gets the hwnd of the currently active MIDI editor.
            Reaper:MIDIEditor_LastFocused_OnCommand
                   runs an action from the MIDI editor-section in the last/currently focused MIDI editor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_SetSetting_int</slug>
        <title>MIDIEditor_SetSetting_int</title>
        <functioncall prog_lang="cpp">bool MIDIEditor_SetSetting_int(HWND midieditor, const char* setting_desc, int setting)</functioncall>
        <functioncall prog_lang="eel">bool MIDIEditor_SetSetting_int(HWND midieditor, "setting_desc", int setting)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MIDIEditor_SetSetting_int(HWND midieditor, string setting_desc, integer setting)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MIDIEditor_SetSetting_int(HWND midieditor, String setting_desc, Int setting)</functioncall>
        <requires>
            Reaper=5.975
        </requires>
        <description>
            Set settings for a MIDI editor. setting_desc can be:
            active_note_row: 0-127
            See MIDIEditor_GetSetting_int
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            HWND midieditor -
            string setting_desc - 
            integer setting - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDIEditor_GetSetting_int
                   gets integer-settings from a MIDI editor
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>mkpanstr</slug>
        <title>mkpanstr</title>
        <functioncall prog_lang="cpp">void mkpanstr(char* strNeed64, double pan)</functioncall>
        <functioncall prog_lang="eel">mkpanstr(#strNeed64, pan)</functioncall>
        <functioncall prog_lang="lua">string strNeed64 = reaper.mkpanstr(string strNeed64, number pan)</functioncall>
        <functioncall prog_lang="python">(String strNeed64, Float pan) = RPR_mkpanstr(strNeed64, pan)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Converts a double-number to its panstr-equivalent.

            See parsepanstr for its counterpart. 
        </description>
        <retvals>
            string strNeed64 - the converted panstring, from -100% over center to 100%
        </retvals>
        <parameters>
            string strNeed64 - just set this to ""
            number pan - the pan-number which shall be converted to the panstring; valid numbers are -1.0 to 1.0 even if you can set higher ones
        </parameters>
        <linked_to desc="see also:">
            Reaper:parsepanstr
                   converts a panstr into a double-number
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>mkvolpanstr</slug>
        <title>mkvolpanstr</title>
        <functioncall prog_lang="cpp">void mkvolpanstr(char* strNeed64, double vol, double pan)</functioncall>
        <functioncall prog_lang="eel">mkvolpanstr(#strNeed64, vol, pan)</functioncall>
        <functioncall prog_lang="lua">string strNeed64 = reaper.mkvolpanstr(string strNeed64, number vol, number pan)</functioncall>
        <functioncall prog_lang="python">(String strNeed64, Float vol, Float pan) = RPR_mkvolpanstr(strNeed64, vol, pan)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            creates a vol-pan-string, which holds a readable representation of the vol and pan-values.

            The format is like "+6.02db center" or "+inf +80R", etc

            see [mkpanstr](#mkpanstr) and [mkvolstr](#mkvolstr) for the individual pan/vol-string functions.
        </description>
        <retvals>
            string strNeed64 - the converted volpan-string
        </retvals>
        <parameters>
            string strNeed64 - just set this to ""
            number vol - the volume-value, which you want to convert into db
            number pan - the pan-value, which you want to convert into its percentage value; valid -1.0 to 1.0
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>mkvolstr</slug>
        <title>mkvolstr</title>
        <functioncall prog_lang="cpp">void mkvolstr(char* strNeed64, double vol)</functioncall>
        <functioncall prog_lang="eel">mkvolstr(#strNeed64, vol)</functioncall>
        <functioncall prog_lang="lua">string strNeed64 = reaper.mkvolstr(string strNeed64, number vol)</functioncall>
        <functioncall prog_lang="python">(String strNeed64, Float vol) = RPR_mkvolstr(strNeed64, vol)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Converts a volume-value into a string-representation of it as dB.

            Note: Unlike panstr, there is no parsevolstr-string-function available!
        </description>
        <retvals>
            string strNeed64 - the converted vol-string
        </retvals>
        <parameters>
            string strNeed64 - just set this to ""
            number vol - the volume-value, which shall be converted; 0, -inf; 1, 0dB; 1.412, +3dB
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MoveEditCursor</slug>
        <title>MoveEditCursor</title>
        <functioncall prog_lang="cpp">void MoveEditCursor(double adjamt, bool dosel)</functioncall>
        <functioncall prog_lang="eel">MoveEditCursor(adjamt, bool dosel)</functioncall>
        <functioncall prog_lang="lua">reaper.MoveEditCursor(number adjamt, boolean dosel)</functioncall>
        <functioncall prog_lang="python">RPR_MoveEditCursor(Float adjamt, Boolean dosel)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Moves the Edit Cursor.
        </description>
        <parameters>
            number adjamt - move of edit cursor by seconds, relative from the current position. positive-values=forward, negative values=backwards
            boolean dosel - true, create selection from old edit-cursor-position to the new position; false, just move the edit cursor
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, edit, cursor, move</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MoveMediaItemToTrack</slug>
        <title>MoveMediaItemToTrack</title>
        <functioncall prog_lang="cpp">bool MoveMediaItemToTrack(MediaItem* item, MediaTrack* desttr)</functioncall>
        <functioncall prog_lang="eel">bool MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1">
            Moves a MediaItem-object to a specific MediaTrack.

            Call [UpdateArrange](#UpdateArrange) to update the arrangeview after that.
        </description>
        <retvals>
            boolean retval - true, if move succeeded; false, if not
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, that shall be moved
            MediaTrack desttr - the MediaTrack, to which the MediaItem shall be moved to
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, move, item, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MuteAllTracks</slug>
        <title>MuteAllTracks</title>
        <functioncall prog_lang="cpp">void MuteAllTracks(bool mute)</functioncall>
        <functioncall prog_lang="eel">MuteAllTracks(bool mute)</functioncall>
        <functioncall prog_lang="lua">reaper.MuteAllTracks(boolean mute)</functioncall>
        <functioncall prog_lang="python">RPR_MuteAllTracks(Boolean mute)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Mutes all tracks
        </description>
        <parameters>
            boolean mute - true, mutes all tracks; false, unmutes all tracks
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>transportmanagement, mute, tracks, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>my_getViewport</slug>
        <title>my_getViewport</title>
        <functioncall prog_lang="cpp">void my_getViewport(RECT* r, const RECT* sr, bool wantWorkArea)</functioncall>
        <functioncall prog_lang="eel">my_getViewport(int &r.left, int &r.top, int &r.right, int &r.bot, int sr.left, int sr.top, int sr.right, int sr.bot, bool wantWorkArea)</functioncall>
        <functioncall prog_lang="lua">integer left, integer top, integer right, integer bottom = reaper.my_getViewport(integer r.left, integer r.top, integer r.right, integer r.bot, integer sr.left, integer sr.top, integer sr.right, integer sr.bot, boolean wantWorkArea)</functioncall>
        <functioncall prog_lang="python">RPR_my_getViewport(RECT r, const RECT sr, Boolean wantWorkArea)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            With r.??? and sr.??? parameters, you can define coordinates of a rectangle. 
            The function will return the left/top/right/bottom coordinates of the viewport that that rectangle is on/closest to.
        </description>
        <parameters>
            integer r.left - left coordinate of the rectangle
            integer r.top - top coordinate of the rectangle
            integer r.right - right coordinate of the rectangle
            integer r.bot - bottom coordinate of the rectangle
            integer sr.left - left coordinate of the rectangle in multimonitor usecases
            integer sr.top - top coordinate of the rectangle in multimonitor usecases
            integer sr.right - right coordinate of the rectangle in multimonitor usecases
            integer sr.bot - bottom coordinate of the rectangle in mutlimonitor usecases
            boolean wantWorkArea - true, returns workspace only; false, full monitor coordinates of the returned viewport
        </parameters>
        <retvals>
            integer left - left coordinate of the returned viewport
            integer top - top coordinate of the returned viewport
            integer right - right coordinate of the returned viewport
            integer bottom - bottom coordinate of the returned viewport
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>userinterface, viewport, multi monitor, get, workarea, full screen resolution</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NamedCommandLookup</slug>
        <title>NamedCommandLookup</title>
        <functioncall prog_lang="cpp">int NamedCommandLookup(const char* command_name)</functioncall>
        <functioncall prog_lang="eel">int NamedCommandLookup("command_name")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.NamedCommandLookup(string command_name)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_NamedCommandLookup(String command_name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1">
            Get the command ID number for named command that was registered by an extension such as "\_SWS\_ABOUT" or "\_113088d11ae641c193a2b7ede3041ad5" for a ReaScript or a custom action.
            
            see [Main\_OnCommand](#Main_OnCommand) for executing actions with command-ID-numbers.
            
            Note: never assume that this command-id is valid across multiple installations. That means, the command-id returned by NamedCommandLookup can be different for the same \_ActionCommandID between different Reaper-installations.
            So when you want to run a command, using the command-id, ALWAYS get it using NamedCommandLookup in your script first, and never store it somewhere to be used later on.
            Otherwise, you risk an action not running.
            This note is important for custom-actions/scripts/actions from extensions.
            The command-ids from Reaper's own actions will always stay the same.
            So rule of thumb: if an action has an action\_command\_id starting with an underscore \_, always use NamedCommandLookup with it.
        </description>
        <retvals>
            integer retval - the command-id-number of the script/action, which can be used to e.g. run the action, toggle actions, refresh toolbars, etc.
        </retvals>
        <parameters>
            string command_name - the ActionCommandID of the script/action, whose command-id number you want. Must start with _, eg. "SWS_ABOUT" -> "_SWS_ABOUT"
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags>helperfunctions, command, id, actioncommandid, lookup</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnPauseButton</slug>
        <title>OnPauseButton</title>
        <functioncall prog_lang="cpp">void OnPauseButton()</functioncall>
        <functioncall prog_lang="eel">OnPauseButton()</functioncall>
        <functioncall prog_lang="lua">reaper.OnPauseButton()</functioncall>
        <functioncall prog_lang="python">RPR_OnPauseButton()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Toggles pause/play during play or pause/rec during recording in the current project.
            When stopped, it will start paused play.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, pause, play, rec, toggle</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnPauseButtonEx</slug>
        <title>OnPauseButtonEx</title>
        <functioncall prog_lang="cpp">void OnPauseButtonEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">OnPauseButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.OnPauseButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_OnPauseButtonEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Toggles pause/play during play or pause/rec during recording in a specific project.
            When stopped, it will start paused play.
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, pause, play, rec, toggle, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnPlayButton</slug>
        <title>OnPlayButton</title>
        <functioncall prog_lang="cpp">void OnPlayButton()</functioncall>
        <functioncall prog_lang="eel">OnPlayButton()</functioncall>
        <functioncall prog_lang="lua">reaper.OnPlayButton()</functioncall>
        <functioncall prog_lang="python">RPR_OnPlayButton()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Starts playing at edit-cursor. Will stop recording, when executed during recording.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, play, editcursor, start</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnPlayButtonEx</slug>
        <title>OnPlayButtonEx</title>
        <functioncall prog_lang="cpp">void OnPlayButtonEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">OnPlayButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.OnPlayButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_OnPlayButtonEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Starts playing at edit-cursor. Will stop recording, when executed during recording.
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, play, editcursor, start, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnStopButton</slug>
        <title>OnStopButton</title>
        <functioncall prog_lang="cpp">void OnStopButton()</functioncall>
        <functioncall prog_lang="eel">OnStopButton()</functioncall>
        <functioncall prog_lang="lua">reaper.OnStopButton()</functioncall>
        <functioncall prog_lang="python">RPR_OnStopButton()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Stops playing/recording.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, stop, play, recording</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnStopButtonEx</slug>
        <title>OnStopButtonEx</title>
        <functioncall prog_lang="cpp">void OnStopButtonEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">OnStopButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.OnStopButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_OnStopButtonEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Stops playing/recording.
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, stop, play, recording</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OpenColorThemeFile</slug>
        <title>OpenColorThemeFile</title>
        <functioncall prog_lang="cpp">bool OpenColorThemeFile(const char* fn)</functioncall>
        <functioncall prog_lang="eel">bool OpenColorThemeFile("fn")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.OpenColorThemeFile(string fn)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_OpenColorThemeFile(String fn)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Open a different installed theme.
        </description>
        <retvals>
            boolean retval - true, changing theme worked; false, changing theme didn't work
        </retvals>
        <parameters>
            string fn - the path+filename of the color-theme-file, usually with the ".ReaperTheme"-extension
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags>userinterface, theme, load, open, filename</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OpenMediaExplorer</slug>
        <title>OpenMediaExplorer</title>
        <functioncall prog_lang="cpp">HWND OpenMediaExplorer(const char* mediafn, bool play)</functioncall>
        <functioncall prog_lang="eel">HWND OpenMediaExplorer("mediafn", bool play)</functioncall>
        <functioncall prog_lang="lua">HWND hwnd = reaper.OpenMediaExplorer(string mediafn, boolean play)</functioncall>
        <functioncall prog_lang="python">HWND hwnd = RPR_OpenMediaExplorer(String mediafn, Boolean play)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Opens mediafn in the Media Explorer.

            If you just want to change folder in MediaExplorer, give it a path instead of a file and set play to false.
        </description>
        <retvals>
            HWND hwnd - the window of the Media Explorer
        </retvals>
        <parameters>
            string mediafn - the filename/folder, to be opened with the Media Explorer
            boolean play - true, start/toggle playing immediately; false, just select file without playing
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>userinterface, media explorer, open, filename, audio, play</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OscLocalMessageToHost</slug>
        <title>OscLocalMessageToHost</title>
        <functioncall prog_lang="cpp">void OscLocalMessageToHost(const char* message, const double* valueInOptional)</functioncall>
        <functioncall prog_lang="eel">OscLocalMessageToHost("message", optional valueIn)</functioncall>
        <functioncall prog_lang="lua">reaper.OscLocalMessageToHost(string message, optional number valueIn)</functioncall>
        <functioncall prog_lang="python">RPR_OscLocalMessageToHost(String message, const double valueInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns.

            This is not broadcast outside of Reaper, so you can't control devices, plugins, etc with it!

            Messages sent via this function can be used for parameter-learn/modulation and as shortcuts for scripts.
            The parameter valueIn can be retrieved with the returnvalue val of the function reaper.get_action_context, so sending values to a script is possible that way.
        </description>
        <parameters>
            string message - the osc-message, which shall be sent to Reaper
            optional number valueIn - a number, which can be sent to scripts who are started by the osc-message
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Keyboard
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>parse_timestr</slug>
        <title>parse_timestr</title>
        <functioncall prog_lang="cpp">double parse_timestr(const char* buf)</functioncall>
        <functioncall prog_lang="eel">double parse_timestr("buf")</functioncall>
        <functioncall prog_lang="lua">number timestr = reaper.parse_timestr(string buf)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_parse_timestr(String buf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See [parse\_timestr_pos](#parse_timestr_pos), [parse\_timestr_len](#parse_timestr_len).
        </description>
        <retvals>
            number timestr - the converted time in seconds
        </retvals>
        <parameters>
            string buf - the timestring to convert (hh:mm:ss.sss). Each position of the time can be one digit only, means: "1:2:3.4" is valid. Milliseconds can be more than 3 digits. Hours, seconds, minutes with more than two digits will be converted correctly "1:120" will be converted to 180 seconds.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags>helperfunctions, timestring, hour, minute, second, millisecond, parse, convert, time</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>parse_timestr_len</slug>
        <title>parse_timestr_len</title>
        <functioncall prog_lang="cpp">double parse_timestr_len(const char* buf, double offset, int modeoverride)</functioncall>
        <functioncall prog_lang="eel">double parse_timestr_len("buf", offset, int modeoverride)</functioncall>
        <functioncall prog_lang="lua">number converted_time = reaper.parse_timestr_len(string buf, number offset, integer modeoverride)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_parse_timestr_len(String buf, Float offset, Int modeoverride)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Converts a time-string in its time-in-seconds-representation

            time formatting mode overrides: -1=proj default.
            0, time
            1, measures.beats + time
            2, measures.beats
            3, seconds
            4, samples
            5, h:m:s:f
        </description>
        <retvals>
            number converted_time - the time, as interpreted from the buf-parameter 
        </retvals>
        <parameters>
            string buf - the time-string, which shall be converted into its time in seconds
            number offset - ??Buggy??
            integer modeoverride - the format, in which the timestring is
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>parse_timestr_pos</slug>
        <title>parse_timestr_pos</title>
        <functioncall prog_lang="cpp">double parse_timestr_pos(const char* buf, int modeoverride)</functioncall>
        <functioncall prog_lang="eel">double parse_timestr_pos("buf", int modeoverride)</functioncall>
        <functioncall prog_lang="lua">number converted_time = reaper.parse_timestr_pos(string buf, integer modeoverride)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_parse_timestr_pos(String buf, Int modeoverride)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Parse time string and convert it into seconds.
        </description>
        <retvals>
            number converted_time - the converted time in seconds
        </retvals>
        <parameters>
            string buf - the timestring to be parsed and converted into seconds
            integer modeoverride - the format of the timestring to parse and convert
                        --1, proj default.
                        -0, time
                        -1, measures.beats + time
                        -2, measures.beats
                        -3, seconds
                        -4, samples
                        -5, h:m:s:f
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags>helperfunctions, parse, timestring, measures, beats, samples, seconds, hours, time, minutes, seconds</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>parsepanstr</slug>
        <title>parsepanstr</title>
        <functioncall prog_lang="cpp">double parsepanstr(const char* str)</functioncall>
        <functioncall prog_lang="eel">double parsepanstr("str")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.parsepanstr(string str)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_parsepanstr(String str)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Converts a string created by [mkpanstr](#mkpanstr) back to it's double-number.
        </description>
        <retvals>
            number retval - the double-value of the panstring
        </retvals>
        <parameters>
            string str - a panstring, whose value you want to convert back to its double-equivalent
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Sink_Enum</slug>
        <title>PCM_Sink_Enum</title>
        <functioncall prog_lang="cpp">unsigned int PCM_Sink_Enum(int idx, const char** descstrOut)</functioncall>
        <functioncall prog_lang="eel">uint PCM_Sink_Enum(int idx, #descstr)</functioncall>
        <functioncall prog_lang="lua">integer retval, string descstr = reaper.PCM_Sink_Enum(integer idx)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_PCM_Sink_Enum(Int idx, String descstrOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            enumerates the available PCM-sink-formats, which means, the output-formats available in Reaper
        </description>
        <retvals>
           integer retval - a number, which represents the PCM-sink-format as an integer-representation
                          - 2002876005 - WAV (evaw)
                          - 1634297446 - AIFF (ffia)
                          - 1769172768 - Audio CD Image (CUE/BIN format) ( osi)
                          - 1684303904 - DDP ( pdd)
                          - 1718378851 - FLAC (calf)
                          - 1836069740 - MP3 (encoder by LAME project) (l3pm)
                          - 1869047670 - OGG Vorbis (vggo)
                          - 1332176723 - OGG Opus (SggO)
                          - 1179012432 - Video (ffmpeg/libav encoder) (PMFF)
                          - 1195984416 - Video (GIF) ( FIG)
                          - 1279477280 - Video (LCF) ( FCL)
                          - 2004250731 - WavPack lossless compressor (kpvw)
                          - maybe others as well?
           string descstr - the PCM-sink-format
                    - 0 - WAV
                    - 1 - AIFF
                    - 2 - Audio CD Image (CUE/BIN format)
                    - 3 - DDP
                    - 4 - FLAC
                    - 5 - MP3 (encoder by LAME project)
                    - 6 - OGG Vorbis
                    - 7 - OGG Opus
                    - 8 - Video (ffmpeg/libav encoder)
                    - 9 - Video (GIF)
                    - 10 - Video (LCF)
                    - 11 - WavPack lossless compressor
                    - maybe others as well?
        </retvals>
        <parameters>
           integer idx - the index of the sink-format, beginning with 0
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            PCM_Sink
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Sink_GetExtension</slug>
        <title>PCM_Sink_GetExtension</title>
        <functioncall prog_lang="cpp">const char* PCM_Sink_GetExtension(const char* data, int data_sz)</functioncall>
        <functioncall prog_lang="eel">bool PCM_Sink_GetExtension(#retval, "data")</functioncall>
        <functioncall prog_lang="lua">string extension = reaper.PCM_Sink_GetExtension(string data)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_PCM_Sink_GetExtension(String data, Int data_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            allows you to retrieve the file-extension of a certain PCM-sink/fileformat available.

            See [PCM\_Sink\_Enum](#PCM_Sink_Enum) to enumerate available PCM-sink/fileformats.
        </description>
        <retvals>
            string extension - the extension returned by a certain format passed as parameter data
        </retvals>
        <parameters>
            string data - the format, whose extension-format you'd like to get:
                        - evaw, extension: "wav"
                        - ffia, extension: "aif"
                        -  osi, extension: "cue"
                        -  pdd, extension: "DAT"
                        - calf, extension: "flac"
                        - l3pm, extension: "mp3"
                        - vggo, extension: "ogg"
                        - SggO, extension: "opus"
                        - PMFF, extension: "avi"
                        -  FIG, extension: "gif"
                        -  FCL, extension: "lcf"
                        - kpvw, extension: "wv"
                        - maybe others?
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            PCM_Sink
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Sink_ShowConfig</slug>
        <title>PCM_Sink_ShowConfig</title>
        <functioncall prog_lang="cpp">HWND PCM_Sink_ShowConfig(const char* cfg, int cfg_sz, HWND hwndParent)</functioncall>
        <functioncall prog_lang="eel">HWND PCM_Sink_ShowConfig("cfg", HWND hwndParent)</functioncall>
        <functioncall prog_lang="lua">HWND hwnd = reaper.PCM_Sink_ShowConfig(string cfg, HWND hwndParent)</functioncall>
        <functioncall prog_lang="python">HWND hwnd = RPR_PCM_Sink_ShowConfig(String cfg, Int cfg_sz, HWND hwndParent)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            HWND hwnd - 
        </retvals>
        <parameters>
            string cfg - 
            HWND hwndParent - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            PCM_Sink
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_BuildPeaks</slug>
        <title>PCM_Source_BuildPeaks</title>
        <functioncall prog_lang="cpp">int PCM_Source_BuildPeaks(PCM_source* src, int mode)</functioncall>
        <functioncall prog_lang="eel">int PCM_Source_BuildPeaks(PCM_source src, int mode)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.PCM_Source_BuildPeaks(PCM_source src, integer mode)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_PCM_Source_BuildPeaks(PCM_source src, Int mode)</functioncall>
        <requires>
            Reaper=6.35
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            The process to build a new peak is to use the modes in a certain order:

            mode=0 starts the peak-building process(must be done once for this PCM\_Source)
            returned values are: 0, no peaks need to be built; 1, peaks are building

            mode=1 progresses the peak-building a bit each time you call PCM\_Source\_BuildPeaks with mode=1)
            call it repeatedly until it's finished and returns value 0! 
            returned values are: how many percent the peak-building still needs to do until it is finished

            mode=2, this finishes up peak-building(call this, when mode=1 returns 0 and only then!)
            returned value is 0
            Running this before mode=1 returns 0 can cause broken peaks shown, until you click into a mediaitem that uses the PCM\_Source.

            After all peak-building is done, use reaper.UpdateArrange() to show them.

            Note: All peaks of all takes that use a certain PCM\_Source will be built!

            Building peaks for multiple PCM\_Sources simultaneously is allowed.


            The following code builds a peak very simply. This is the easiest implementation.
            However, if the PCM\_Source, whose peaks need to be build, is a very long one, this can cause Reaper's UI to hang.
            So use this on short PCM\_Sources mainly.


                    -- Meo-Ada Mespotine - 19th of August 2021 - licensed under MIT-license
                    -- Rebuilt-Peak-Demo without defer, might cause hanging of Reaper's UI

                    -- Get Item 1, Take 1 and Source of Take 1
                    Item=reaper.GetMediaItem(0,0)
                    Take=reaper.GetMediaItemTake(Item,0)
                    Source=reaper.GetMediaItemTake_Source(Take)

                    -- start peak-building process(mode must be 0)
                    BuildStart=reaper.PCM_Source_BuildPeaks(Source, 0)

                    -- build peaks, until PCM_Source_BuildPeaks returns 0(mode must be 1)
                    while BuildProgress~=0 do
                      BuildProgress=reaper.PCM_Source_BuildPeaks(Source, 1)
                    end

                    -- when build-process is done, finish build-process(mode must be 2)
                    BuildXit=reaper.PCM_Source_BuildPeaks(Source, 2) 

                    -- update the arrangeview, so the newly built peaks are shown
                    reaper.UpdateArrange()


            If you want to build peaks for longer files and maybe showing a status-bar, you can use the following code.
            It uses defer-loops instead of a while-loop.
            As each ReaScript can have up to 1024 defer-loops running at the same time(more or less), I use each of 
            the 1024 defer-loops to build the peak a little further.
            This will prevent hanging UI but might be a little slower than the while-approach.


                    -- Meo-Ada Mespotine - 19th of August 2021 - licensed under MIT-license
                    -- Rebuilt-Peak-Demo using defer, might be a little slower but doesn't 
                    -- cause hanging of Reaper's UI
                    -- 
                    -- set Build_Factor to speed up building process
                    -- allowed values: 0(slow) and 1024(fast)
                    -- Use 1024 only, if you don't have any other defer-loops running.
                    -- If you have other defer-loops that need to be run now, set
                    -- Build_Factor to Build_Factor minus number of running defer-loops.

                    -- the number of defer-loops used to go through the peak build-process
                    -- the higher, the faster.
                    -- if you use other defer-loops at the time as well, set this lower than 1024 or the other defer-loop will not run
                    Build_Factor=255

                    -- Get Item 1, Take 1 and Source of Take 1
                    Item=reaper.GetMediaItem(0,0)
                    Take=reaper.GetMediaItemTake(Item,0)
                    Source=reaper.GetMediaItemTake_Source(Take)

                    -- start build-process of the peak(mode=0)
                    BuildStart=reaper.PCM_Source_BuildPeaks(Source, 0)

                    function main()
                      -- build peaks, until PCM_Source_BuildPeaks returns 0(mode must be 1)
                      BuildProgress=reaper.PCM_Source_BuildPeaks(Source, 1)
                      
                      if BuildProgress~=0 then 
                        -- if PCM_Source_BuildPeaks returned anything else than 0, defer this function again
                        reaper.defer(main) 
                      else 
                        -- if PCM_Source_BuildPeaks returned 0, finish building of the peaks(mode must be 2)
                        -- and update the arrangeview for the newly built peaks to show
                        BuildXit=reaper.PCM_Source_BuildPeaks(Source, 2) 
                        reaper.UpdateArrange()
                      end
                    end

                    -- run multiple defer-instances of the peak-build-function
                    for i=0, Build_Factor do
                      main()
                    end


            The following code combines both, defer-loops to cirvumvent possible hanging of Reaper's UI and a loop(for in this case) 
            to build as many small peak-bits and pieces as possible within each defer-loop.
            You can influence the ratio between using defer-loops and for-loops by setting Build\_Factor(defer) and Build\_Progression(for).
            Experiment, how high you can go with the number of for-loops, until Reaper's UI becomes laggy.


                    -- Meo-Ada Mespotine - 19th of August 2021 - licensed under MIT-license
                    -- Rebuilt-Peak-Demo defer and a regular for-loop combined, doesn't 
                    -- cause hanging of Reaper's UI
                    -- 
                    -- set Build_Factor to speed up building process
                    -- allowed values: 0(slow) and 1024(fast)
                    -- Use 1024 only, if you don't have any other defer-loops running.
                    -- If you have other defer-loops that need to be run now, set
                    -- Build_Factor to Build_Factor minus number of running defer-loops.

                    -- build-speed factors
                    Build_Factor=255     -- set to the number of defer-loops used
                    Build_Progression=20 -- set to the number of peak-building-bits built within each defer-loop

                    -- Get Item 1, Take 1 and Source of Take 1
                    Item=reaper.GetMediaItem(0,0)
                    Take=reaper.GetMediaItemTake(Item,0)
                    Source=reaper.GetMediaItemTake_Source(Take)

                    -- start build-process of the peak(mode=0)
                    BuildStart=reaper.PCM_Source_BuildPeaks(Source,0)

                    function main()
                      -- build peaks, until PCM_Source_BuildPeaks returns 0(mode must be 1)
                      -- do it for Build_Progression-times within this defer-loop.
                      for i=0, Build_Progression do
                        BuildProgress=reaper.PCM_Source_BuildPeaks(Source,1)
                      end
                      
                      if BuildProgress~=0 then 
                        -- if PCM_Source_BuildPeaks returned anything else than 0, defer this function again
                        reaper.defer(main) 
                      else 
                        -- if PCM_Source_BuildPeaks returned 0, finish building of the peaks(mode must be 2)
                        -- and update the arrangeview for the newly built peaks to show
                        BuildXit=reaper.PCM_Source_BuildPeaks(Source,2) 
                        reaper.UpdateArrange()
                      end
                    end


                    -- run multiple defer-instances of the peak-build-function
                    for i=0, Build_Factor do
                      main()
                    end
        </description>
        <retvals>
            integer retval - a value that returns the current state of the peak-building-process, depending on parameter mode
                           - when mode=0
                           -   0, no peaks need to be built
                           -   1, peaks are building
                           - when mode=1
                           -   the percentage, how much of the peaks still need to be built
                           -   0, peak-building is finished
                           - when mode=2
                           -   0, peak building is successfully finished for this PCM_source
        </retvals>
        <parameters>
            PCM_source src - the PCM_source, whose peaks you want to rebuild
            integer mode - sets the current "phase" of the peak-building
                         - 0, starts the peak-building-process for this PCM_source(must be done once per PCM_Source)
                         - 1, process the peak-building-process a bit further; do repeatedly until retval=0
                         - 2, finish up peak-building for this PCM_source
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Peaks/Waveforms
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_CreateFromFile</slug>
        <title>PCM_Source_CreateFromFile</title>
        <functioncall prog_lang="cpp">PCM_source* PCM_Source_CreateFromFile(const char* filename)</functioncall>
        <functioncall prog_lang="eel">PCM_source PCM_Source_CreateFromFile("filename")</functioncall>
        <functioncall prog_lang="lua">PCM_source src = reaper.PCM_Source_CreateFromFile(string filename)</functioncall>
        <functioncall prog_lang="python">PCM_source src = RPR_PCM_Source_CreateFromFile(String filename)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [PCM\_Source\_CreateFromFileEx](#PCM_Source_CreateFromFileEx).
        </description>
        <retvals>
            PCM_source src - 
        </retvals>
        <parameters>
            string filename - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_CreateFromFileEx</slug>
        <title>PCM_Source_CreateFromFileEx</title>
        <functioncall prog_lang="cpp">PCM_source* PCM_Source_CreateFromFileEx(const char* filename, bool forcenoMidiImp)</functioncall>
        <functioncall prog_lang="eel">PCM_source PCM_Source_CreateFromFileEx("filename", bool forcenoMidiImp)</functioncall>
        <functioncall prog_lang="lua">PCM_source src = reaper.PCM_Source_CreateFromFileEx(string filename, boolean forcenoMidiImp)</functioncall>
        <functioncall prog_lang="python">PCM_source src = RPR_PCM_Source_CreateFromFileEx(String filename, Boolean forcenoMidiImp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.
        </description>
        <retvals>
            PCM_source src - 
        </retvals>
        <parameters>
            string filename - 
            boolean forcenoMidiImp - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_CreateFromType</slug>
        <title>PCM_Source_CreateFromType</title>
        <functioncall prog_lang="cpp">PCM_source* PCM_Source_CreateFromType(const char* sourcetype)</functioncall>
        <functioncall prog_lang="eel">PCM_source PCM_Source_CreateFromType("sourcetype")</functioncall>
        <functioncall prog_lang="lua">PCM_source src = reaper.PCM_Source_CreateFromType(string sourcetype)</functioncall>
        <functioncall prog_lang="python">PCM_source src = RPR_PCM_Source_CreateFromType(String sourcetype)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Create a PCM_source from a "type" (use this if you're going to load its state via LoadState/ProjectStateContext).
            Valid types include "WAVE", "MIDI", or whatever plug-ins define as well.
        </description>
        <retvals>
            PCM_source src - 
        </retvals>
        <parameters>
            string sourcetype - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_Destroy</slug>
        <title>PCM_Source_Destroy</title>
        <functioncall prog_lang="cpp">void PCM_Source_Destroy(PCM_source* src)</functioncall>
        <functioncall prog_lang="eel">PCM_Source_Destroy(PCM_source src)</functioncall>
        <functioncall prog_lang="lua">reaper.PCM_Source_Destroy(PCM_source src)</functioncall>
        <functioncall prog_lang="python">RPR_PCM_Source_Destroy(PCM_source src)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Deletes a PCM_source -- be sure that you remove any project reference before deleting a source
        </description>
        <parameters>
            PCM_source src - the source to be deleted
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_GetPeaks</slug>
        <title>PCM_Source_GetPeaks</title>
        <functioncall prog_lang="cpp">int PCM_Source_GetPeaks(PCM_source* src, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)</functioncall>
        <functioncall prog_lang="eel">int PCM_Source_GetPeaks(PCM_source src, peakrate, starttime, int numchannels, int numsamplesperchannel, int want_extra_type, buffer_ptr buf)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.PCM_Source_GetPeaks(PCM_source src, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)</functioncall>
        <functioncall prog_lang="python">(Int retval, PCM_source src, Float peakrate, Float starttime, Int numchannels, Int numsamplesperchannel, Int want_extra_type, Float buf) = RPR_PCM_Source_GetPeaks(src, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). 
            Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). 
            extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            PCM_source src - 
            number peakrate - 
            number starttime - 
            integer numchannels - 
            integer numsamplesperchannel - 
            integer want_extra_type - 
            reaper.array buf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Peaks/Waveforms
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_GetSectionInfo</slug>
        <title>PCM_Source_GetSectionInfo</title>
        <functioncall prog_lang="cpp">bool PCM_Source_GetSectionInfo(PCM_source* src, double* offsOut, double* lenOut, bool* revOut)</functioncall>
        <functioncall prog_lang="eel">bool PCM_Source_GetSectionInfo(PCM_source src, &offs, &len, bool &rev)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number offs, number len, boolean rev = reaper.PCM_Source_GetSectionInfo(PCM_source src)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, PCM_source src, Float offsOut, Float lenOut, Boolean revOut) = RPR_PCM_Source_GetSectionInfo(src, offsOut, lenOut, revOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            If a section/reverse block, retrieves offset/len/reverse. return true if success
        </description>
        <retvals>
            boolean retval - 
            number offs - 
            number len - 
            boolean rev - 
        </retvals>
        <parameters>
            PCM_Source src - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PluginWantsAlwaysRunFx</slug>
        <title>PluginWantsAlwaysRunFx</title>
        <functioncall prog_lang="cpp">void PluginWantsAlwaysRunFx(int amt)</functioncall>
        <functioncall prog_lang="eel">PluginWantsAlwaysRunFx(int amt)</functioncall>
        <functioncall prog_lang="lua">reaper.PluginWantsAlwaysRunFx(integer amt)</functioncall>
        <functioncall prog_lang="python">RPR_PluginWantsAlwaysRunFx(Int amt)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            integer amt - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PreventUIRefresh</slug>
        <title>PreventUIRefresh</title>
        <functioncall prog_lang="cpp">void PreventUIRefresh(int prevent_count)</functioncall>
        <functioncall prog_lang="eel">PreventUIRefresh(int prevent_count)</functioncall>
        <functioncall prog_lang="lua">reaper.PreventUIRefresh(integer prevent_count)</functioncall>
        <functioncall prog_lang="python">RPR_PreventUIRefresh(Int prevent_count)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            adds prevent_count to the UI refresh prevention state; 
            
            Important: always add then remove the same amount, or major disfunction will occur
            It's important to add first and remove second, as other functions you use inbetween might
            change this counter as well.
            If you remove first and then add later, UI-refresh might be turned on again by another function used
            causing unwanted flicker!
            
        </description>
        <parameters>
            integer prevent_count - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PromptForAction</slug>
        <title>PromptForAction</title>
        <functioncall prog_lang="cpp">int PromptForAction(int session_mode, int init_id, int section_id)</functioncall>
        <functioncall prog_lang="eel">int PromptForAction(int session_mode, int init_id, int section_id)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.PromptForAction(integer session_mode, integer init_id, integer section_id)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_PromptForAction(Int session_mode, Int init_id, Int section_id)</functioncall>
        <requires>
            Reaper=6.12
        </requires>
        <description prog_lang="*">
            Opens the actionlist and allows you to get, which action the user selected.

            So the user can select numerous actions, and when they hit the select or select/close-button, you can get the actions selected.

            To start a new session, pass 1 as parameter session_mode.

            After that, repeatedly call the function with session_mode=0, which will return the selected actions.
                    - -1, the actionlist is closed
                    - 0, no action has been selected
                    - any other number, this action has been selected.
            In the latter case, call the function until it returns 0 again to get all selected actions.

            If you're finished, call the function with session_mode=-1


            When finished, call with session_mode=-1.
        </description>
        <retvals>
            integer retval - the selected actions
                           - -1, actionlist is not opened
                           - 0, no action has been selected yet/you retrieved all selected actions
                           - any other number, the selected actions; call repeatedly to get all selected commandids until the function returns 0 again
        </retvals>
        <parameters>
            integer session_mode - 1, start a new session; 0, retrieve selected actions; -1, end a session
            integer init_id - the command-id, which shall be preselected, when the actionlist opens
            integer section_id - the section in which you want to let the user select
                               - 0 - Main
                               - 100 - Main (alt recording)
                               - 32060 - MIDI Editor
                               - 32061 - MIDI Event List Editor
                               - 32062 - MIDI Inline Editor
                               - 32063 - Media Explorer 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaScriptError</slug>
        <title>ReaScriptError</title>
        <functioncall prog_lang="cpp">void ReaScriptError(const char* errmsg)</functioncall>
        <functioncall prog_lang="eel">ReaScriptError("errmsg")</functioncall>
        <functioncall prog_lang="lua">reaper.ReaScriptError(string errmsg)</functioncall>
        <functioncall prog_lang="python">RPR_ReaScriptError(String errmsg)</functioncall>
        <requires>
            Reaper=6.29
        </requires>
        <description prog_lang="*">
            Causes REAPER to display the error message after the current ReaScript finishes. If called within a Lua context and errmsg has a ! prefix, script execution will be terminated.
        </description>
        <parameters>
            string errmsg - the message to show
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>RecursiveCreateDirectory</slug>
        <title>RecursiveCreateDirectory</title>
        <functioncall prog_lang="cpp">int RecursiveCreateDirectory(const char* path, size_t ignored)</functioncall>
        <functioncall prog_lang="eel">int RecursiveCreateDirectory("path", size_t ignored)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.RecursiveCreateDirectory(string path, integer ignored)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_RecursiveCreateDirectory(String path, Int ignored)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Creates a new directory. 

            You can recursivly create directories, means: if the higher directories don't exist, the will also be automatically created.

            returns positive value on success, 0 on failure.
        </description>
        <retvals>
            integer retval - 0, failure; 1 and higher, success
        </retvals>
        <parameters>
            string path - the directory-path to be created
            integer ignored - unknown
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>helperfunctions, create, recursive, directory</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>reduce_open_files</slug>
        <title>reduce_open_files</title>
        <functioncall prog_lang="cpp">int reduce_open_files(int flags)</functioncall>
        <functioncall prog_lang="eel">int reduce_open_files(int flags)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.reduce_open_files(integer flags)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_reduce_open_files(Int flags)</functioncall>
        <requires>
            Reaper=6.00
        </requires>
        <description prog_lang="*">
            garbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). 
            
            returns number of files closed by this call.
        </description>
        <retvals>
            integer retval - the number of closed files
        </retvals>
        <parameters>
            integer flags - influences, how the garbage collection shall be
                          - &1, incrementally
                          - &2, aggressively(files need to be reopened after that, if needed)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>helperfunctions, reduce, open files</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>RefreshToolbar</slug>
        <title>RefreshToolbar</title>
        <functioncall prog_lang="cpp">void RefreshToolbar(int command_id)</functioncall>
        <functioncall prog_lang="eel">RefreshToolbar(int command_id)</functioncall>
        <functioncall prog_lang="lua">reaper.RefreshToolbar(integer command_id)</functioncall>
        <functioncall prog_lang="python">RPR_RefreshToolbar(Int command_id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Refreshes the toolbar-buttons, associated with a specific command_id/action

            see [NamedCommandLookup](#NamedCommandLookup) for getting command-ids from scripts and 3rd-party actions

            See [RefreshToolbar2](#RefreshToolbar2).
        </description>
        <parameters>
            integer command_id - the command_id-number of the action, whose toolbar button you want to toggle. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Toolbars
        </chapter_context>
        <tags>userinterfacer, toolbar, toggle, command</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>RefreshToolbar2</slug>
        <title>RefreshToolbar2</title>
        <functioncall prog_lang="cpp">void RefreshToolbar2(int section_id, int command_id)</functioncall>
        <functioncall prog_lang="eel">RefreshToolbar2(int section_id, int command_id)</functioncall>
        <functioncall prog_lang="lua">reaper.RefreshToolbar2(integer section_id, integer command_id)</functioncall>
        <functioncall prog_lang="python">RPR_RefreshToolbar2(Int section_id, Int command_id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Refreshes the toolbar-buttons, associated with a specific command_id/action within a certain section

            see [NamedCommandLookup](#NamedCommandLookup) for getting command-ids from scripts and 3rd-party actions
        </description>
        <parameters>
            integer section_id - the section, in which the action lies
                       - 0, Main
                       - 100, Main (alt recording)
                       - 32060, MIDI Editor
                       - 32061, MIDI Event List Editor
                       - 32062, MIDI Inline Editor
                       - 32063, Media Explorer
            integer command_id - the command_id-number of the action, whose toolbar button you want to toggle. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Toolbars
        </chapter_context>
        <tags>userinterfacer, toolbar, toggle, command, section</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>relative_fn</slug>
        <title>relative_fn</title>
        <functioncall prog_lang="cpp">void relative_fn(const char* in, char* out, int out_sz)</functioncall>
        <functioncall prog_lang="eel">relative_fn("in", #out)</functioncall>
        <functioncall prog_lang="lua">string out = reaper.relative_fn(string in, string out)</functioncall>
        <functioncall prog_lang="python">(String in, String out, Int out_sz) = RPR_relative_fn(in, out, out_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Makes a filename "in" relative to the current project, if any.
        </description>
        <retvals>
            string out - 
        </retvals>
        <parameters>
            string in - 
            string out - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>RemoveTrackSend</slug>
        <title>RemoveTrackSend</title>
        <functioncall prog_lang="cpp">bool RemoveTrackSend(MediaTrack* tr, int category, int sendidx)</functioncall>
        <functioncall prog_lang="eel">bool RemoveTrackSend(MediaTrack tr, int category, int sendidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.RemoveTrackSend(MediaTrack tr, integer category, integer sendidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_RemoveTrackSend(MediaTrack tr, Int category, Int sendidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Remove a send/receive/hardware output.

            For ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).
        </description>
        <retvals>
            boolean retval - true, removing worked; false, removing didn't work(e.g. does not exist)
        </retvals>
        <parameters>
            MediaTrack tr - the MediaTrack-object, in which you want to remove send/receive/hwouts
            integer category - less than 0, receives; 0, sends; greater than 0, hardware outputs
            integer sendidx - the idx of the send/receive/hwoutput to remove. 0, the first; 1 for the second, etc
        </parameters>
        <linked_to desc="see also:">
            Reaper:CreateTrackSend
                   creates a track-send
            Reaper:GetTrackNumSends
                   get number of send of a track
            Reaper:GetSetTrackSendInfo_String
                   gets sets additional string-attributes for metadata of track-sends
            Reaper:GetSetTrackSendInfo
                   gets and sets attributes for a track-send
            Reaper:GetTrackSendInfo_Value
                   gets attributes of a track-send
            Reaper:SetTrackSendInfo_Value
                   sets attributes of a track-send
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>RenderFileSection</slug>
        <title>RenderFileSection</title>
        <functioncall prog_lang="cpp">bool RenderFileSection(const char* source_filename, const char* target_filename, double start_percent, double end_percent, double playrate)</functioncall>
        <functioncall prog_lang="eel">bool RenderFileSection("source_filename", "target_filename", start_percent, end_percent, playrate)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.RenderFileSection(string source_filename, string target_filename, number start_percent, number end_percent, number playrate)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_RenderFileSection(String source_filename, String target_filename, Float start_percent, Float end_percent, Float playrate)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Not available while playing back.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            string source_filename - 
            string target_filename - 
            number start_percent - 
            number end_percent - 
            number playrate - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Render
        </chapter_context>
        <tags>file management, render, file, section</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReorderSelectedTracks</slug>
        <title>ReorderSelectedTracks</title>
        <functioncall prog_lang="cpp">bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)</functioncall>
        <functioncall prog_lang="eel">bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.ReorderSelectedTracks(integer beforeTrackIdx, integer makePrevFolder)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_ReorderSelectedTracks(Int beforeTrackIdx, Int makePrevFolder)</functioncall>
        <requires>
            Reaper=5.90
        </requires>
        <description prog_lang="*">
            Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. 
            makePrevFolder=0 for normal, 
               1 = as child of track preceding track specified by beforeTrackIdx, 
               2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder
        </description>
        <retvals>
            boolean retval - true, if it was successful; false, if not(e.g. no tracks were selected)
        </retvals>
        <parameters>
            integer beforeTrackIdx - the number of track, before which you want to move the selected tracks; zero-based(0 for track 1, 1 for track 2, etc)
            integer makePrevFolder - decides, whether the track before the moved tracks(beforeTrackIdx-1) shall be a folder-track. Does only
                                   - apply, when beforeTrackIdx>0(a track above the moved tracks exists).
                                   - 0, don't make track beforeTrackIdx-1 a folder track; 
                                   - 1, make track beforeTrackIdx-1 a folder track
                                   - 2, if track beforeTrackIdx-1 is the last track in folder, extend the folder(make the last moved track the last track in folder.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, move, selected, tracks, folder, last folder</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Resample_EnumModes</slug>
        <title>Resample_EnumModes</title>
        <functioncall prog_lang="cpp">const char* Resample_EnumModes(int mode)</functioncall>
        <functioncall prog_lang="eel">bool Resample_EnumModes(#retval, int mode)</functioncall>
        <functioncall prog_lang="lua">string resample_mode = reaper.Resample_EnumModes(integer mode)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_Resample_EnumModes(Int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            enumerates the existing resample-modes
        </description>
        <retvals>
            string resample_mode - the resample-mode
        </retvals>
        <parameters>
            integer mode - 0, Medium (64pt Sinc)
                         - 1, Low (Linear Interpolation)
                         - 2, Lowest (Point Sampling)
                         - 3, Good (192pt Sinc)
                         - 4, Better (384pt Sinc)
                         - 5, Fast (IIR + Linear Interpolation)
                         - 6, Fast (IIRx2 + Linear Interpolation)
                         - 7, Fast (16pt Sinc)
                         - 8, HQ (512pt Sinc)
                         - 9, Extreme HQ (768pt HQ Sinc)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>resolve_fn</slug>
        <title>resolve_fn</title>
        <functioncall prog_lang="cpp">void resolve_fn(const char* in, char* out, int out_sz)</functioncall>
        <functioncall prog_lang="eel">resolve_fn("in", #out)</functioncall>
        <functioncall prog_lang="lua">string out = reaper.resolve_fn(string in, string out)</functioncall>
        <functioncall prog_lang="python">(String in, String out, Int out_sz) = RPR_resolve_fn(in, out, out_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [resolve\_fn2](#resolve_fn2).
        </description>
        <retvals>
            string out - 
        </retvals>
        <parameters>
            string in - 
            string out - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>resolve_fn2</slug>
        <title>resolve_fn2</title>
        <functioncall prog_lang="cpp">void resolve_fn2(const char* in, char* out, int out_sz, const char* checkSubDirOptional)</functioncall>
        <functioncall prog_lang="eel">resolve_fn2("in", #out, optional "checkSubDir")</functioncall>
        <functioncall prog_lang="lua">string out = reaper.resolve_fn2(string in, string out, optional string checkSubDir)</functioncall>
        <functioncall prog_lang="python">(String in, String out, Int out_sz, String checkSubDirOptional) = RPR_resolve_fn2(in, out, out_sz, checkSubDirOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Resolves a filename "in" by using project settings etc. If no file found, out will be a copy of in.
        </description>
        <retvals>
            string out - 
        </retvals>
        <parameters>
            string in - 
            string out - 
            string checkSubDir - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReverseNamedCommandLookup</slug>
        <title>ReverseNamedCommandLookup</title>
        <functioncall prog_lang="cpp">const char* ReverseNamedCommandLookup(int command_id)</functioncall>
        <functioncall prog_lang="eel">bool ReverseNamedCommandLookup(#retval, int command_id)</functioncall>
        <functioncall prog_lang="lua">string action_command_id = reaper.ReverseNamedCommandLookup(integer command_id)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_ReverseNamedCommandLookup(Int command_id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return "SWS_ABOUT"), it will be NULL if command_id is a native action.
        </description>
        <retvals>
            string action_command_id - the ActionCommandID of the command/script/action
        </retvals>
        <parameters>
            integer command_id - the command/script/action, whose ActionCommandID you want to have
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags>helperfunctions, command, id, actioncommand, id, lookup</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ScaleFromEnvelopeMode</slug>
        <title>ScaleFromEnvelopeMode</title>
        <functioncall prog_lang="cpp">double ScaleFromEnvelopeMode(int scaling_mode, double val)</functioncall>
        <functioncall prog_lang="eel">double ScaleFromEnvelopeMode(int scaling_mode, val)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ScaleFromEnvelopeMode(integer scaling_mode, number val)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_ScaleFromEnvelopeMode(Int scaling_mode, Float val)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            integer scaling_mode - 
            number val - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ScaleToEnvelopeMode</slug>
        <title>ScaleToEnvelopeMode</title>
        <functioncall prog_lang="cpp">double ScaleToEnvelopeMode(int scaling_mode, double val)</functioncall>
        <functioncall prog_lang="eel">double ScaleToEnvelopeMode(int scaling_mode, val)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ScaleToEnvelopeMode(integer scaling_mode, number val)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_ScaleToEnvelopeMode(Int scaling_mode, Float val)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            integer scaling_mode - 
            number val - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SectionFromUniqueID</slug>
        <title>SectionFromUniqueID</title>
        <functioncall prog_lang="cpp">KbdSectionInfo* section = SectionFromUniqueID(int uniqueID)</functioncall>
        <functioncall prog_lang="eel">KbdSectionInfo section = SectionFromUniqueID(int uniqueID)/functioncall>
        <functioncall prog_lang="lua">KbdSectionInfo section = reaper.SectionFromUniqueID(integer uniqueID)</functioncall>
        <functioncall prog_lang="python">KbdSectionInfo section = RPR_SectionFromUniqueID(Int uniqueID)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            Delete the specific shortcut for the given command ID.
        </description>
        <retvals>
            KbdSectionInfo section - the section-object, that can be used for the various shortcut-functions
        </retvals>
        <parameters>
            integer uniqueID - the section, in which the action is located
                                  -0, Main
                                  -100, Main (alt recording)
                                  -32060, MIDI Editor
                                  -32061, MIDI Event List Editor
                                  -32062, MIDI Inline Editor
                                  -32063, Media Explorer
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountActionShortcuts
                   counts the number of shortcuts available for a command
            Reaper:GetActionShortcutDesc
                   for getting the description of the shortcut
            Reaper:DeleteActionShortcut
                   for deleting a shortcut
            Reaper:DoActionShortcutDialog
                   for opening the add shortcut-dialog
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Shortcuts
        </chapter_context>
        <tags>shortcuts, count</tags>
        <changelog>
            Reaper 6.71 - exposed to ReaScript-API
            Reaper 6.72 - section allows now the section-numbers as parameter section
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SelectAllMediaItems</slug>
        <title>SelectAllMediaItems</title>
        <functioncall prog_lang="cpp">void SelectAllMediaItems(ReaProject* proj, bool selected)</functioncall>
        <functioncall prog_lang="eel">SelectAllMediaItems(ReaProject proj, bool selected)</functioncall>
        <functioncall prog_lang="lua">reaper.SelectAllMediaItems(ReaProject proj, boolean selected)</functioncall>
        <functioncall prog_lang="python">RPR_SelectAllMediaItems(ReaProject proj, Boolean selected)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Selects or deselects all MediaItems in a project.
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            boolean selected - true, select; false, deselect
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, mediaitem, select, deselect, all</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SelectProjectInstance</slug>
        <title>SelectProjectInstance</title>
        <functioncall prog_lang="cpp">void SelectProjectInstance(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">SelectProjectInstance(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.SelectProjectInstance(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_SelectProjectInstance(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Switch to another opened project/projecttab.
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Misc
        </chapter_context>
        <tags>projectmanagement, switch, select, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SendMIDIMessageToHardware</slug>
        <title>SendMIDIMessageToHardware</title>
        <functioncall prog_lang="cpp">void SendMIDIMessageToHardware(int output, const char* msg, int msg_sz)</functioncall>
        <functioncall prog_lang="eel">SendMIDIMessageToHardware(int output, "msg")</functioncall>
        <functioncall prog_lang="lua">reaper.SendMIDIMessageToHardware(integer output, string msg)</functioncall>
        <functioncall prog_lang="python">RPR_SendMIDIMessageToHardware(Int output, String msg, Int msg_sz)</functioncall>
        <requires>
            Reaper=6.76
        </requires>
        <description prog_lang="*">
            Sends a MIDI message to output device specified by output. Message is sent in immediate mode.
        </description>
        <parameters>
            integer output - 
            string msg - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Midi
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.76 - added function to Reaper
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetActiveTake</slug>
        <title>SetActiveTake</title>
        <functioncall prog_lang="cpp">void SetActiveTake(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">SetActiveTake(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">reaper.SetActiveTake(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">RPR_SetActiveTake(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            set this take active in this media item
        </description>
        <parameters>
            MediaItem_Take take - the MediaItem_Take, you want to set as active-take in the MediaItem it is associated with
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetAutomationMode</slug>
        <title>SetAutomationMode</title>
        <functioncall prog_lang="cpp">void SetAutomationMode(int mode, bool onlySel)</functioncall>
        <functioncall prog_lang="eel">SetAutomationMode(int mode, bool onlySel)</functioncall>
        <functioncall prog_lang="lua">reaper.SetAutomationMode(integer mode, boolean onlySel)</functioncall>
        <functioncall prog_lang="python">RPR_SetAutomationMode(Int mode, Boolean onlySel)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets all or selected tracks to mode.

            Includes the master-track.
        </description>
        <parameters>
            integer mode - the automation-mode
                -0, Trim/read
                -1, Read
                -2, Touch
                -3, Write
                -4, Latch
                -5 and higher no mode selected
            boolean onlySel - true, only selected tracks; false, all tracks including master-track
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>envelopemanagement, set, mode, trim, read, touch, write, latch, selected, deselected, master</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetCurrentBPM</slug>
        <title>SetCurrentBPM</title>
        <functioncall prog_lang="cpp">void SetCurrentBPM(ReaProject* __proj, double bpm, bool wantUndo)</functioncall>
        <functioncall prog_lang="eel">SetCurrentBPM(ReaProject __proj, bpm, bool wantUndo)</functioncall>
        <functioncall prog_lang="lua">reaper.SetCurrentBPM(ReaProject proj, number bpm, boolean wantUndo)</functioncall>
        <functioncall prog_lang="python">RPR_SetCurrentBPM(ReaProject __proj, Float bpm, Boolean wantUndo)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            set current BPM in project, set wantUndo=true to add undo point
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number bpm - the new beats per minute-value
            boolean wantUndo - true, add undo point; false, no undo point added
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags>projectmanagement, set, bpm, undo</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetCursorContext</slug>
        <title>SetCursorContext</title>
        <functioncall prog_lang="cpp">void SetCursorContext(int mode, TrackEnvelope* envInOptional)</functioncall>
        <functioncall prog_lang="eel">SetCursorContext(int mode, TrackEnvelope envIn)</functioncall>
        <functioncall prog_lang="lua">reaper.SetCursorContext(integer mode, TrackEnvelope envIn)</functioncall>
        <functioncall prog_lang="python">RPR_SetCursorContext(Int mode, TrackEnvelope envInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Change the focus for the cursor.
            You must use this to change the focus for the cursor programmatically. 

            mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or envIn==NULL to clear the current track/take envelope selection)
        </description>
        <parameters>
            integer mode - the focus to be changed to
                 -0, track panels
                 -1, arrange window
                 -2, arrangewindow and env
            TrackEnvelope envIn - TrackEnvelope-object of the envelope to select(only when mode=2, else set to nil); nil, clear current track/envelope-selection;
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>arrangeviewmanagement, envelope, focus, set, cursor, context</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetEditCurPos</slug>
        <title>SetEditCurPos</title>
        <functioncall prog_lang="cpp">void SetEditCurPos(double time, bool moveview, bool seekplay)</functioncall>
        <functioncall prog_lang="eel">SetEditCurPos(time, bool moveview, bool seekplay)</functioncall>
        <functioncall prog_lang="lua">reaper.SetEditCurPos(number time, boolean moveview, boolean seekplay)</functioncall>
        <functioncall prog_lang="python">RPR_SetEditCurPos(Float time, Boolean moveview, Boolean seekplay)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Change the position of the edit-cursor in the current project.
        </description>
        <parameters>
            number time - the new editcursor-position in seconds
            boolean moveview - true, change the arrange-view so editcursor is visible; false, just set the edit-cursor without moving the view(editcursor might be out of sight)
            boolean seekplay - true, when playing, restart playing at the new edit-cursor position; false, keep playing at "old" playposition
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, set, edit, cursor, position, seekplay, move view</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetEditCurPos2</slug>
        <title>SetEditCurPos2</title>
        <functioncall prog_lang="cpp">void SetEditCurPos2(ReaProject* proj, double time, bool moveview, bool seekplay)</functioncall>
        <functioncall prog_lang="eel">SetEditCurPos2(ReaProject proj, time, bool moveview, bool seekplay)</functioncall>
        <functioncall prog_lang="lua">reaper.SetEditCurPos2(ReaProject proj, number time, boolean moveview, boolean seekplay)</functioncall>
        <functioncall prog_lang="python">RPR_SetEditCurPos2(ReaProject proj, Float time, Boolean moveview, Boolean seekplay)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Change the position of the edit-cursor in a specific project.
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number time - the new editcursor-position in seconds
            boolean moveview - true, change the arrange-view so editcursor is visible; false, just set the edit-cursor without moving the view(editcursor might be out of sight)
            boolean seekplay - true, when playing, restart playing at the new edit-cursor position; false, keep playing at "old" playposition
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Navigation
        </chapter_context>
        <tags>transportmanagement, set, edit, cursor, position, seekplay, move view, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetEnvelopePoint</slug>
        <title>SetEnvelopePoint</title>
        <functioncall prog_lang="cpp">bool SetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool SetEnvelopePoint(TrackEnvelope envelope, int ptidx, optional timeIn, optional valueIn, optional int shapeIn, optional tensionIn, optional bool selectedIn, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetEnvelopePoint(TrackEnvelope envelope, integer ptidx, optional number timeIn, optional number valueIn, optional integer shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int ptidx, Float timeInOptional, Float valueInOptional, Int shapeInOptional, Float tensionInOptional, Boolean selectedInOptional, Boolean noSortInOptional) = RPR_SetEnvelopePoint(envelope, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See [SetEnvelopePointEx](#SetEnvelopePointEx).
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            integer ptidx - 
            optional number timeIn -
            optional number valueIn - 
            optional integer shapeIn - 
            optional number tensionIn - 
            optional boolean selectedIn - 
            optional boolean noSortIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetEnvelopePointEx</slug>
        <title>SetEnvelopePointEx</title>
        <functioncall prog_lang="cpp">bool SetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool SetEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx, optional timeIn, optional valueIn, optional int shapeIn, optional tensionIn, optional bool selectedIn, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx, optional number timeIn, optional number valueIn, optional integer shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Int ptidx, Float timeInOptional, Float valueInOptional, Int shapeInOptional, Float tensionInOptional, Boolean selectedInOptional, Boolean noSortInOptional) = RPR_SetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
            autoitem\_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
            For automation items, pass autoitem\_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
            even if the automation item is trimmed so that not all points are visible.
            Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
            See [CountEnvelopePointsEx](#CountEnvelopePointsEx), [GetEnvelopePointEx](#GetEnvelopePointEx), [InsertEnvelopePointEx](#InsertEnvelopePointEx), [DeleteEnvelopePointEx](#DeleteEnvelopePointEx).
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            integer autoitem_idx - 
            integer ptidx - 
            optional number timeIn - 
            optional number valueIn - 
            optional integer shapeIn - 
            optional number tensionIn - 
            optional boolean selectedIn - 
            optional boolean noSortIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetEnvelopeStateChunk</slug>
        <title>SetEnvelopeStateChunk</title>
        <functioncall prog_lang="cpp">bool SetEnvelopeStateChunk(TrackEnvelope* env, const char* str, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool SetEnvelopeStateChunk(TrackEnvelope env, "str", bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetEnvelopeStateChunk(TrackEnvelope env, String str, Boolean isundoOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets the RPPXML state of an envelope, returns true if successful. 
        </description>
        <retvals>
            boolean retval - true, setting worked; false, setting didn't work
        </retvals>
        <parameters>
            TrackEnvelope env - the TrackEnvelope, whose statechunk you want to set
            string str - the new statechunk, that you want to set
            boolean isundo - undo flag is a performance/caching hint.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>envelopemanagement, set, statechunk, envelope</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetExtState</slug>
        <title>SetExtState</title>
        <functioncall prog_lang="cpp">void SetExtState(const char* section, const char* key, const char* value, bool persist)</functioncall>
        <functioncall prog_lang="eel">SetExtState("section", "key", "value", bool persist)</functioncall>
        <functioncall prog_lang="lua">reaper.SetExtState(string section, string key, string value, boolean persist)</functioncall>
        <functioncall prog_lang="python">RPR_SetExtState(String section, String key, String value, Boolean persist)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Set the extended state value for a specific section and key. 

            Persistant states are stored into the reaper-extstate.ini in the resources-folder.
            
            Note: section and key are not case-sensitive
            
            Important: always use a section-name, that is unique to you. For instance, add your name into the section-name, 
            so it's less likely, that somebody else uses the same section and accidentally overwrites your keys.
            Something like: "mespotine_MyCoolScript.lua"
            
            Note: Do not use newlines in extstates, as they might be cut when rereading them using GetExtState!
                  Find workarounds, like \n -> \\n to store and \\n -> \n to get them again.
                  This is due limitations of the ini-file-format.
                  
                  
            Here are some of the sections used by ReaTeam-scripts and extensions. Don't use to avoid possible name-conflicts.
            If your section is missing, contact me and I'll add it too:
            
            "_Slicer_"
            "(Un)Collapse envelope lanes"
            "+"
            "amagalma_Chunk Viewer-Editor"
            "amagalma_Grid Settings"
            "amagalma_Horizontal zoom presets"
            "amagalma_NormalizeTracks"
            "amagalma_Take_Vol_in_TS"
            "amagalma_Vertical zoom presets"
            "amagalma_backup_limit"
            "APIhelp"
            "babag_copy_paste_item_params"
            "BR_SPK_GlueTools"
            "brso_articulate"
            "BuyOne_Check length of custom action(s).lua"
            "BuyOne_Cycle through focused FX presets backwards (guide inside).lua"
            "BuyOne_Cycle through focused FX presets forward (guide inside).lua"
            "BuyOne_Exclusive dummy toggle"
            "BuyOne_Exclusive dummy toggles.lua"
            "BuyOne_Link two FX parameters via parameter modulation (guide inside).lua"
            "cfillion_copy_paste_markers"
            "cfillion_ireascript"
            "cfillion_ramp_envelope_points"
            "cfillion_show_nudge_settings"
            "cfillion_song_switcher"
            "cfillion_stepRecordReplace"
            "cfillion_underrun_monitor"
            "colswatch"
            "com.timtam.AccessiChord"
            "cool_MK Slicer.lua"
            "cool_MK_Shaper/Stutter.lua"
            "copy_paste"
            "Default_6.0 theme adjuster"
            "Dfk Project Map"
            "Edgemeal_fx_float"
            "Edit Groups"
            "GoToTimecode_AZ"
            "js_Draw LFO"
            "js_Draw ramp"
            "js_Insert ramps"
            "js_Mouse actions"
            "js_Mouse actions"
            "js_Multi Tool"
            "js_Step pattern"
            "js_Thumbnails"
            "LFO generator"
            "Lokasenna"
            "Lokasenna's Script Compiler"
            "Lokasenna's Theory Helper"
            "Lokasenna_CC Ryder"
            "Lokasenna_Copy values from selected MIDI notes"
            "Lokasenna_Debug mode"
            "Lokasenna_GUI"
            "Lokasenna_Pedal Steel"
            "Mespotine"
            "MFX-list"
            "MIDI Inspector"
            "MK Slicer (80icio MOD).lua"
            "osara"
            "Play-Stop with memory"
            "Preset Velocity"
            "RODILAB_Color_palette"
            "RODILAB_Match_criteria"
            "RODILAB_Track_name_groups"
            "ReaL_Comps"
            "ReaNoir"
            "savegrid"
            "Select CC lanes to show"
            "SmartSplit_AZ"
            "solger_ReaLauncher"
            "Source time position v2"
            "spk77_velocity_tool"
            "take_envelope_source"
            "talagan_Distribute MIDI notes evenly"
            "ToggleWet"
            "Track-Item Name Manipulation"
            "ultraschall_api"
            "vo_pomodoro"
        </description>
        <parameters>
            string section - the section, in which the key-value is stored
            string key - the key, which stores the value
            string value - the new value to be set
            boolean persist - true, means the value should be stored and reloaded the next time REAPER is opened
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetExtState
                   gets an extstate that stores information for your script
            Reaper:HasExtState
                   checks, if an extstate exists
            Reaper:DeleteExtState
                   deleted an extstate that stores information for your script
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Extension States
        </chapter_context>
        <tags>extension state, state, value, key, section, set, persist</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetGlobalAutomationOverride</slug>
        <title>SetGlobalAutomationOverride</title>
        <functioncall prog_lang="cpp">void SetGlobalAutomationOverride(int mode)</functioncall>
        <functioncall prog_lang="eel">SetGlobalAutomationOverride(int mode)</functioncall>
        <functioncall prog_lang="lua">reaper.SetGlobalAutomationOverride(integer mode)</functioncall>
        <functioncall prog_lang="python">RPR_SetGlobalAutomationOverride(Int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            mode: see [GetGlobalAutomationOverride](GetGlobalAutomationOverride)
        </description>
        <parameters>
            integer mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetItemStateChunk</slug>
        <title>SetItemStateChunk</title>
        <functioncall prog_lang="cpp">bool SetItemStateChunk(MediaItem* item, const char* str, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool SetItemStateChunk(MediaItem item, "str", bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetItemStateChunk(MediaItem item, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetItemStateChunk(MediaItem item, String str, Boolean isundoOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem item - 
            string str - 
            boolean isundo - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMasterTrackVisibility</slug>
        <title>SetMasterTrackVisibility</title>
        <functioncall prog_lang="cpp">int SetMasterTrackVisibility(int flag)</functioncall>
        <functioncall prog_lang="eel">int SetMasterTrackVisibility(int flag)</functioncall>
        <functioncall prog_lang="lua">integer mas_prev_vis_state = reaper.SetMasterTrackVisibility(integer flag)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_SetMasterTrackVisibility(Int flag)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            set &1=1 to show the master track in the TCP, &2=2 to hide in the mixer. Returns the previous visibility state. See [GetMasterTrackVisibility](#GetMasterTrackVisibility).
        </description>
        <retvals>
            integer mas_prev_vis_state - the previous visibility state
        </retvals>
        <parameters>
            integer flag - the flag to show the master-track in TCP, MCP or both
                         - TCP: &1=0, invisible; &1=1, visible
                         - MCP: &2=0, invisible; &2=1, visible
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemInfo_Value</slug>
        <title>SetMediaItemInfo_Value</title>
        <functioncall prog_lang="cpp">bool SetMediaItemInfo_Value(MediaItem* item, const char* parmname, double newvalue)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaItemInfo_Value(MediaItem item, "parmname", newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetMediaItemInfo_Value(MediaItem item, string parmname, number newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetMediaItemInfo_Value(MediaItem item, String parmname, Float newvalue)</functioncall>
        <requires>
            Reaper=6.34
        </requires>
        <description prog_lang="*">
            Set media item numerical-value attributes.
            B_MUTE : bool * : muted
            B_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.
            C_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.
            B_LOOPSRC : bool * : loop source
            B_ALLTAKESPLAY : bool * : all takes play
            B_UISEL : bool * : selected in arrange view
            C_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
            C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
            C_LOCK : char * : locked, &1=locked, &2=lock to active take
            D_VOL : double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
            D_POSITION : double * : item position in seconds
            D_LENGTH : double * : item length in seconds
            D_SNAPOFFSET : double * : item snap offset in seconds
            D_FADEINLEN : double * : item manual fadein length in seconds
            D_FADEOUTLEN : double * : item manual fadeout length in seconds
            D_FADEINDIR : double * : item fadein curvature, -1..1
            D_FADEOUTDIR : double * : item fadeout curvature, -1..1
            D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
            D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
            C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
            C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
            I_GROUPID : int * : group ID, 0=no group
            I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
            I_LASTH : int * : height in pixels (read-only)
            I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color.
            I_CURTAKE : int * : active take number
            IP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)
            F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
            F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
        </description>
        <retvals>
            boolean retval - true, setting was successful; false, setting was unsuccessful
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose attribute you want to set
            string parmname - the attribute, that you want to set
            number newvalue - the new value for the attribute
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemLength</slug>
        <title>SetMediaItemLength</title>
        <functioncall prog_lang="cpp">bool SetMediaItemLength(MediaItem* item, double length, bool refreshUI)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaItemLength(MediaItem item, length, bool refreshUI)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetMediaItemLength(MediaItem item, number length, boolean refreshUI)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetMediaItemLength(MediaItem item, Float length, Boolean refreshUI)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Redraws the screen only if refreshUI == true, otherwise see [UpdateArrange](#UpdateArrange)().
        </description>
        <retvals>
            boolean retval - true, setting was successful, false, setting was unsuccessful(e.g. length=negative)
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose length you want to change
            number length - the new length of MediaItem
            boolean refreshUI - true, refresh UI; false, don't refresh UI
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemPosition</slug>
        <title>SetMediaItemPosition</title>
        <functioncall prog_lang="cpp">bool SetMediaItemPosition(MediaItem* item, double position, bool refreshUI)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaItemPosition(MediaItem item, position, bool refreshUI)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetMediaItemPosition(MediaItem item, number position, boolean refreshUI)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetMediaItemPosition(MediaItem item, Float position, Boolean refreshUI)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Redraws the screen only if refreshUI == true.
            See [UpdateArrange](#UpdateArrange)().
        </description>
        <retvals>
            boolean retval - true, setting was successful, false, setting was unsuccessful(e.g. position=negative)
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose position you want to change
            number position - the new position of MediaItem
            boolean refreshUI - true, refresh UI; false, don't refresh UI
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemSelected</slug>
        <title>SetMediaItemSelected</title>
        <functioncall prog_lang="cpp">void SetMediaItemSelected(MediaItem* item, bool selected)</functioncall>
        <functioncall prog_lang="eel">SetMediaItemSelected(MediaItem item, bool selected)</functioncall>
        <functioncall prog_lang="lua">reaper.SetMediaItemSelected(MediaItem item, boolean selected)</functioncall>
        <functioncall prog_lang="python">RPR_SetMediaItemSelected(MediaItem item, Boolean selected)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets a mediaitem selected or unselected.
            
            Use [UpdateArrange](#UpdateArrange)() to make changes visible.
        </description>
        <parameters>
            MediaItem item - the MediaItem, that you want to set (un-)selected
            boolean selected - true, set the item selected; false, set it unselected
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemTake_Source</slug>
        <title>SetMediaItemTake_Source</title>
        <functioncall prog_lang="cpp">bool SetMediaItemTake_Source(MediaItem_Take* take, PCM_source* source)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)</functioncall>
        <requires>
            Reaper=5.961
        </requires>
        <description prog_lang="*">
            Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.
        </description>
        <retvals>
            boolean retval - true, setting was successful; false, setting was unsuccessful
        </retvals>
        <parameters>
            MediaItem_Take take - the take, whose source you want to set to a new one
            PCM_source source - the new source to be set to take
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemTakeInfo_Value</slug>
        <title>SetMediaItemTakeInfo_Value</title>
        <functioncall prog_lang="cpp">bool SetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname, double newvalue)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaItemTakeInfo_Value(MediaItem_Take take, "parmname", newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname, number newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetMediaItemTakeInfo_Value(MediaItem_Take take, String parmname, Float newvalue)</functioncall>
        <requires>
            Reaper=6.34
        </requires>
        <description prog_lang="*">
            Set media item take numerical-value attributes.
            D_STARTOFFS : double * : start offset in source media, in seconds
            D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
            D_PAN : double * : take pan, -1..1
            D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
            D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
            D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
            B_PPITCH : bool * : preserve pitch when changing playback rate
            I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
            I_LASTH : int * : height in pixels (read-only)
            I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
            I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
            I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color.
            IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
        </description>
        <retvals>
            boolean retval - true, setting was successful; false, setting was unsuccessful
        </retvals>
        <parameters>
            MediaItem_Take take - the take, whose attribute you want to set
            string parmname - the attribute, whose value you want to set
            number newvalue - the new value of the attribute
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaTrackInfo_Value</slug>
        <title>SetMediaTrackInfo_Value</title>
        <functioncall prog_lang="cpp">bool SetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname, double newvalue)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaTrackInfo_Value(MediaTrack tr, "parmname", newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetMediaTrackInfo_Value(MediaTrack tr, string parmname, number newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetMediaTrackInfo_Value(MediaTrack tr, String parmname, Float newvalue)</functioncall>
        <requires>
            Reaper=6.60
        </requires>
        <description>
            Set track numerical-value attributes.
            B_MUTE : bool * : muted
            B_PHASE : bool * : track phase inverted
            B_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)
            IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
            I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
            B_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed
            I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
            I_RECARM : int * : record armed, 0=not record armed, 1=record armed
            I_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.
            I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace
            I_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)
            I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
            I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
            B_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)
            I_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only
            I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
            I_NCHAN : int * : number of track channels, 2-64, even numbers only
            I_SELECTED : int * : track selected, 0=unselected, 1=selected
            I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
            I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
            I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
            I_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)
            I_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)
            I_MCPW : int * : current MCP width in pixels (read-only)
            I_MCPH : int * : current MCP height in pixels (read-only)
            I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc
            I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
            I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)
            I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
            I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). 0, default color. If you do not |0x1000000, then it will not be used, but will store the color
            I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
            B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
            D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
            D_PAN : double * : trim pan of track, -1..1
            D_WIDTH : double * : width of track, -1..1
            D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
            D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
            I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
            D_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc
            I_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper
            P_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope* : read only. Chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.
            B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
            B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
            B_MAINSEND : bool * : track sends audio to parent
            C_MAINSEND_OFFS : char * : channel offset of track send to parent
            C_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)
            I_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)
            C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)
            F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
            F_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)
            F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)
            F_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)
            I_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)
            D_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG
        </description>
        <retvals>
            boolean retval - true, setting was successful; false, setting was unsuccessful
        </retvals>
        <parameters>
            MediaTrack tr - the track, whose attribute you want to set
            string parmname - the attribute, that you want to set; refer description for possible attributes
            number newvalue - the new value, that you want to set to the attribute
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetSetMediaTrackInfo_String
                   gets/sets a string value of a MediaTrack-attribute
            Reaper:GetMediaTrackInfo_Value
                   returns a numerical value of a MediaTrack-attribute
        </linked_to>
        <changelog>
            Reaper 6.65 - attribute "I_PANLAW_FLAGS" added
            Reaper 6.60 - attribute "I_RECMODE_FLAGS" added
            Reaper 6.54 - attribute "I_FREEMODE" includes new value 2=track fixed lanes enabled
        </changelog>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMIDIEditorGrid</slug>
        <title>SetMIDIEditorGrid</title>
        <functioncall prog_lang="cpp">void SetMIDIEditorGrid(ReaProject* project, double division)</functioncall>
        <functioncall prog_lang="eel">SetMIDIEditorGrid(ReaProject project, division)</functioncall>
        <functioncall prog_lang="lua">reaper.SetMIDIEditorGrid(ReaProject project, number division)</functioncall>
        <functioncall prog_lang="python">RPR_SetMIDIEditorGrid(ReaProject project, Float division)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.
        </description>
        <parameters>
            ReaProject project - the project-number. 0 for the current project. 
            number division - the division-factor for the MIDI-editor's grid
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMixerScroll</slug>
        <title>SetMixerScroll</title>
        <functioncall prog_lang="cpp">MediaTrack* SetMixerScroll(MediaTrack* leftmosttrack)</functioncall>
        <functioncall prog_lang="eel">MediaTrack SetMixerScroll(MediaTrack leftmosttrack)</functioncall>
        <functioncall prog_lang="lua">MediaTrack tr = reaper.SetMixerScroll(MediaTrack leftmosttrack)</functioncall>
        <functioncall prog_lang="python">MediaTrack tr = RPR_SetMixerScroll(MediaTrack leftmosttrack)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.
        </description>
        <retvals>
            MediaTrack tr - the new leftmost-track as MediaTrack-object
        </retvals>
        <parameters>
            MediaTrack leftmosttrack - the requested leftmost-MediaTrack
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>userinterface, set, mixer, scroll, leftmost</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMouseModifier</slug>
        <title>SetMouseModifier</title>
        <functioncall prog_lang="cpp">void SetMouseModifier(const char* context, int modifier_flag, const char* action)</functioncall>
        <functioncall prog_lang="eel">SetMouseModifier("context", int modifier_flag, "action")</functioncall>
        <functioncall prog_lang="lua">reaper.SetMouseModifier(string context, integer modifier_flag, string action)</functioncall>
        <functioncall prog_lang="python">RPR_SetMouseModifier(String context, Int modifier_flag, String action)</functioncall>
        <requires>
            Reaper=6.74
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.
            
            Context is a string like "MM\_CTX\_ITEM". Find these strings by modifying an assignment in 
            Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.

            Modifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.
            (macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)

            For left-click and double-click contexts, the action can be any built-in command ID number
            or any custom action ID string. Find built-in command IDs in the REAPER actions window
            (enable "show action IDs" in the context menu), and find custom action ID strings in reaper-kb.ini.
            
            For built-in mouse modifier behaviors, find action IDs (which will be low numbers)
            by modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
            Assigning an action of -1 will reset that mouse modifier behavior to factory default.
            See [GetMouseModifier](#GetMouseModifier).
            
            Note: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.
            Special case: SetMouseModifier(context, -1, -1) will reset the entire context to default.
            Special case: SetMouseModifier(-1, -1, -1) will reset all contexts to default.
            
            See [Docs for reaper-mouse.ini](Reaper-Filetype-Descriptions.html#Reaper-mouse.ini) for more details
        </description>
        <parameters>
            string context - the context of the mouse-modifier
            integer modifier_flag - the flag for the mouse-modifiers + keyboard-modifiers(see description)
            string action - the action to bind this modifier to
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Mouse
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.74 - you can now specify commands instead of mouse-commands now(see note in description)
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetOnlyTrackSelected</slug>
        <title>SetOnlyTrackSelected</title>
        <functioncall prog_lang="cpp">void SetOnlyTrackSelected(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">SetOnlyTrackSelected(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">reaper.SetOnlyTrackSelected(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">RPR_SetOnlyTrackSelected(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Set exactly one track selected, deselect all others.

            This sets the track as Last-Touched-Track as well.
        </description>
        <parameters>
            MediaTrack track - the MediaTrack to be selected
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, set, selected, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectGrid</slug>
        <title>SetProjectGrid</title>
        <functioncall prog_lang="cpp">void SetProjectGrid(ReaProject* project, double division)</functioncall>
        <functioncall prog_lang="eel">SetProjectGrid(ReaProject project, division)</functioncall>
        <functioncall prog_lang="lua">reaper.SetProjectGrid(ReaProject project, number division)</functioncall>
        <functioncall prog_lang="python">RPR_SetProjectGrid(ReaProject project, Float division)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.
        </description>
        <parameters>
            ReaProject project - the project-number. 0 for the current project. 
            number division - the division-factor for the arange-view's grid
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project States
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarker</slug>
        <title>SetProjectMarker</title>
        <functioncall prog_lang="cpp">bool SetProjectMarker(int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarker(int markrgnindexnumber, bool isrgn, pos, rgnend, "name")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetProjectMarker(integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetProjectMarker(Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/alters an existing project-marker
            
            Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.
        </description>
        <retvals>
            boolean retval - true, setting the marker worked; false, setting the marker didn't work
        </retvals>
        <parameters>
            integer markrgnindexnumber - the shown number of the marker to be altered
            boolean isrgn - true, marker is a region; false, marker is a normal marker
            number pos - the position of the new marker in seconds
            number rgnend - the end of a region, if isrgn is true
            string name - shown name of the marker
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, set, marker, region, position, name</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarker2</slug>
        <title>SetProjectMarker2</title>
        <functioncall prog_lang="cpp">bool SetProjectMarker2(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarker2(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, "name")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetProjectMarker2(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetProjectMarker2(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/alters an existing project-marker in a given project.
            
            Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.
        </description>
        <retvals>
            boolean retval - true, setting the marker worked; false, setting the marker didn't work
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer markrgnindexnumber - the shown number of the marker to be altered
            boolean isrgn - true, marker is a region; false, marker is a normal marker
            number pos - the position of the new marker in seconds
            number rgnend - the end of a region, if isrgn is true
            string name - shown name of the marker
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, set, marker, region, position, name, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarker3</slug>
        <title>SetProjectMarker3</title>
        <functioncall prog_lang="cpp">bool SetProjectMarker3(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarker3(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, "name", int color)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetProjectMarker3(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetProjectMarker3(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name, Int color)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/alters an existing project-marker in a given project. Differs from SetProjectMarker2 and SetProjectMarker, that you can set color as well.
            Color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000
            
            set color=1&~0x10000000 to reset to default color for markers/regions
            
            Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.
        </description>
        <retvals>
            boolean retval - true, setting the marker worked; false, setting the marker didn't work
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer markrgnindexnumber - the shown number of the marker to be altered
            boolean isrgn - true, marker is a region; false, marker is a normal marker
            number pos - the position of the new marker in seconds
            number rgnend - the end of a region, if isrgn is true
            string name - shown name of the marker
            integer color - the new color-value as native color-value
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, set, marker, region, position, name, project, color</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarker4</slug>
        <title>SetProjectMarker4</title>
        <functioncall prog_lang="cpp">bool SetProjectMarker4(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color, int flags)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarker4(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, "name", int color, int flags)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetProjectMarker4(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color, integer flags)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetProjectMarker4(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name, Int color, Int flags)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets/alters an existing project-marker in a given project.
            color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name
            
            set color=1&~0x10000000 to reset to default color for markers/regions
        </description>
        <retvals>
            boolean retval - true, setting the marker worked; false, setting the marker didn't work
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer markrgnindexnumber - the shown number of the marker to be altered
            boolean isrgn - true, marker is a region; false, marker is a normal marker
            number pos - the position of the new marker in seconds
            number rgnend - the end of a region, if isrgn is true
            string name - shown name of the marker
            integer color - the new color-value as native color-value
            integer flags - &1 to clear name
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>markermanagement, set, marker, region, position, name, project, color, clear name</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarkerByIndex</slug>
        <title>SetProjectMarkerByIndex</title>
        <functioncall prog_lang="cpp">bool SetProjectMarkerByIndex(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarkerByIndex(ReaProject proj, int markrgnidx, bool isrgn, pos, rgnend, int IDnumber, "name", int color)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetProjectMarkerByIndex(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetProjectMarkerByIndex(ReaProject proj, Int markrgnidx, Boolean isrgn, Float pos, Float rgnend, Int IDnumber, String name, Int color)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            set color=1&~0x10000000 to reset to default color for markers/regions
        </description>
        <retvals>
            boolean retval - true, setting marker/region was successful; false, setting marker/region was unsuccessful
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer markrgnidx - the index within all markers(NOT the shown number!)
            boolean isrgn - true, set it as a region; false, set it as a regular marker
            number pos - the position of the marker
            number rgnend - the posiiton of the end of the region(if isrgn=false, simply set this to 0)
            integer IDnumber - the shown marker/region-number
            string name - the name of the marker
            integer color - the color of the marker
        </parameters>
        <linked_to desc="see also:">
            Reaper:SetProjectMarkerByIndex2
                   an enhanced version of SetProjectMarkerByIndex
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarkerByIndex2</slug>
        <title>SetProjectMarkerByIndex2</title>
        <functioncall prog_lang="cpp">bool SetProjectMarkerByIndex2(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color, int flags)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarkerByIndex2(ReaProject proj, int markrgnidx, bool isrgn, pos, rgnend, int IDnumber, "name", int color, int flags)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetProjectMarkerByIndex2(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color, integer flags)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetProjectMarkerByIndex2(ReaProject proj, Int markrgnidx, Boolean isrgn, Float pos, Float rgnend, Int IDnumber, String name, Int color, Int flags)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc, rather than representing the displayed marker/region ID number (see [SetProjectMarker3](#SetProjectMarker3)). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK).
            
            flags&1 to clear name
            flags&2, markers will not be re-sorted, and after making updates, you MUST call SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&2 to force re-sort/UI updates.
            
            set color=1&~0x10000000 to reset to default color for markers/regions
        </description>
        <retvals>
            boolean retval - true, setting was successful; false, setting was unsuccessful
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer markrgnidx - the index within all markers(NOT the shown number!)
            boolean isrgn - true, set it as a region; false, set it as a regular marker
            number pos - the position of the marker
            number rgnend - the posiiton of the end of the region(if isrgn=false, simply set this to 0)
            integer IDnumber - the shown marker/region-number
            string name - the name of the marker
            integer color - the color of the marker
            integer flags - &1 to clear name
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>marker management, set, marker</tags>
        <changelog>
          Reaper 6.71 - new flag&2 to prevent sorting temporarily(see description for details on how to use it!)
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjExtState</slug>
        <title>SetProjExtState</title>
        <functioncall prog_lang="cpp">int SetProjExtState(ReaProject* proj, const char* extname, const char* key, const char* value)</functioncall>
        <functioncall prog_lang="eel">int SetProjExtState(ReaProject proj, "extname", "key", "value")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SetProjExtState(ReaProject proj, string extname, string key, string value)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_SetProjExtState(ReaProject proj, String extname, String key, String value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or "", all extended data for that extname will be deleted. If val is NULL or "", the data previously associated with that key will be deleted. Returns the size of the state for this extname. 
            
            Important: if you want to store binary data, \0-bytes (Null-bytes) cause trouble. Everything after the first \0-byte will be cut off when reading the extstate via GetProjExtState.
            If you want to store data including \0-bytes, convert them first into a Hex-string or Base64 and decode them after reading it back.
            That way, you can be sure, the data stays intact.
            
            Also Important: always use a section-name, that is unique to you. For instance, add your name into the section-name, 
            so it's less likely, that somebody else uses the same section and accidentally overwrites your keys.
            Something like: "mespotine_MyCoolScript.lua"
            
            Here are some of the sections used by ReaTeam-scripts and extensions. Don't use to avoid possible name-conflicts.
            If your section is missing, contact me and I'll add it too:
                "ABLM2 Toggle"
                "AB_LM Toggle"
                "ak5k"
                "ak5k_Drums to MIDI"
                "com.pandabot.ChordGun"
                "com.pandabot.CopyAndPasteRhythm""
                "com.pandabot.selectEveryNItemsWithinSelection"
                "com.pandabot.selectEveryNNotesWithinSelection"
                "com.pandabot.selectEveryNTracksWithinSelection"
                "com.timtam.AccessiChord"
                "Edit Groups"
                "FindReplaceStorage"
                "js_Thumbnails"
                "LFO Generator"
                "Live_Inst_"
                "practice_coach"
                "RODILAB_Hide_tracks_with_no_items_in_time_selection"
                "RODILAB_Track_name_groups"
                "ReaL_Comps"
                "RegionRenderMatrixState"
                "Smart Zoom"
                "spk77 Track Tags"
                "TrackBasedItems"
                "time"
        </description>
        <retvals>
            integer retval - the number of key/value-pairs in the extname
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            string extname - the section, in which the key/value is stored
            string key - the key, that stores the value
            string value - the value, that's stored in the key
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetProjExtState
                   gets an ext-state that stored data for your project
            Reaper:EnumProjExtState
                   enumerates an ext-state that stores data for your project
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Project Extension States
        </chapter_context>
        <tags>projectmanagement, extended, state, value, section, key, extname, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetRegionRenderMatrix</slug>
        <title>SetRegionRenderMatrix</title>
        <functioncall prog_lang="cpp">void SetRegionRenderMatrix(ReaProject* proj, int regionindex, MediaTrack* track, int addorremove)</functioncall>
        <functioncall prog_lang="eel">SetRegionRenderMatrix(ReaProject proj, int regionindex, MediaTrack track, int addorremove)</functioncall>
        <functioncall prog_lang="lua">reaper.SetRegionRenderMatrix(ReaProject proj, integer regionindex, MediaTrack track, integer addorremove)</functioncall>
        <functioncall prog_lang="python">RPR_SetRegionRenderMatrix(ReaProject proj, Int regionindex, MediaTrack track, Int addorremove)</functioncall>
        <requires>
            Reaper=6.68
        </requires>
        <description>
            Add (flag > 0) or remove (flag < 0) a track from this region when using the region render matrix. 
            
            If adding, flag==2 means force mono, flag==4 means force stereo, flag==N means force N/2 channels.
            
            see TrackList_AdjustWindows to refresh the region-render-matrix
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer regionindex - the shown region-number
            MediaTrack track - the MediaTrack to add to the render-matrix for this region
            integer addorremove - greater than 0, add; lower than 0, remove from the render-matrix
        </parameters>
        <linked_to desc="see also:">
            Reaper:TrackList_AdjustWindows
                   refreshes ui of the region render matrix
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.68 - allows now forcing number of rendered channels using additional flag-values for addorremove-parameter
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTakeMarker</slug>
        <title>SetTakeMarker</title>
        <functioncall prog_lang="cpp">int index = SetTakeMarker(MediaItem_Take* take, int idx, const char* nameIn, double* srcposInOptional, int* colorInOptional)</functioncall>
        <functioncall prog_lang="eel">int index = SetTakeMarker(MediaItem_Take take, int idx, "nameIn", optional srcposIn, optional int colorIn)</functioncall>
        <functioncall prog_lang="lua">integer index = reaper.SetTakeMarker(MediaItem_Take take, integer idx, string nameIn, optional number srcposIn, optional integer colorIn)</functioncall>
        <functioncall prog_lang="python">(Int index, MediaItem_Take take, Int idx, String nameIn, Float srcposInOptional, Int colorInOptional) = RPR_SetTakeMarker(take, idx, nameIn, srcposInOptional, colorInOptional)</functioncall>
        <requires>
            Reaper=6.09
        </requires>
        <description>
            Inserts or updates a take marker. If idx<0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated).

            When inserting a new takemarker, parameter srcposIn must be given!
        </description>
        <retvals>
            integer index - index of the new or update take-marker
        </retvals>
        <parameters>
            MediaItem_Take take - the take, whose take-marker you want to delete
            integer idx - the id of the marker within the take, 0 for the first, 1 for the second, etc.
            string nameIn - the name of the takemarker
            optional number srcposIn - the position of the takemarker; omit if you want to keep the old position; must be given, when inserting a new takemarker
            optional integer colorIn - the color of the takemarker
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetNumTakeMarkers
                   gets the number of take-markers of a take
            Reaper:GetTakeMarker
                   gets attributes of a take-marker of a take
            Reaper:DeleteTakeMarker
                   deletes a take marker
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Take Markers
        </chapter_context>
        <tags>markermanagement, set, takemarker</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTakeStretchMarker</slug>
        <title>SetTakeStretchMarker</title>
        <functioncall prog_lang="cpp">int SetTakeStretchMarker(MediaItem_Take* take, int idx, double pos, const double* srcposInOptional)</functioncall>
        <functioncall prog_lang="eel">int SetTakeStretchMarker(MediaItem_Take take, int idx, pos, optional srcposIn)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SetTakeStretchMarker(MediaItem_Take take, integer idx, number pos, optional number srcposIn)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_SetTakeStretchMarker(MediaItem_Take take, Int idx, Float pos, const double srcposInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Adds or updates a stretch marker. If idx>0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer idx - 
            number pos - 
            optional number srcposIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Stretch Markers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTakeStretchMarkerSlope</slug>
        <title>SetTakeStretchMarkerSlope</title>
        <functioncall prog_lang="cpp">bool SetTakeStretchMarkerSlope(MediaItem_Take* take, int idx, double slope)</functioncall>
        <functioncall prog_lang="eel">bool SetTakeStretchMarkerSlope(MediaItem_Take take, int idx, slope)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetTakeStretchMarkerSlope(MediaItem_Take take, integer idx, number slope)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetTakeStretchMarkerSlope(MediaItem_Take take, Int idx, Float slope)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Set take stretch marker slope
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer idx - 
            number slope - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTakeStretchMarkerSlope
                   gets the take stretch marker slope
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Stretch Markers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTempoTimeSigMarker</slug>
        <title>SetTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">bool SetTempoTimeSigMarker(ReaProject* proj, int ptidx, double timepos, int measurepos, double beatpos, double bpm, int timesig_num, int timesig_denom, bool lineartempo)</functioncall>
        <functioncall prog_lang="eel">bool SetTempoTimeSigMarker(ReaProject proj, int ptidx, timepos, int measurepos, beatpos, bpm, int timesig_num, int timesig_denom, bool lineartempo)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetTempoTimeSigMarker(ReaProject proj, integer ptidx, number timepos, integer measurepos, number beatpos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempo)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetTempoTimeSigMarker(ReaProject proj, Int ptidx, Float timepos, Int measurepos, Float beatpos, Float bpm, Int timesig_num, Int timesig_denom, Boolean lineartempo)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. 
            
            ptidx=-1 will insert a new tempo/time signature marker. 
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer ptidx - 
            number timepos - 
            integer measurepos - 
            number beatpos - 
            number bpm - 
            integer timesig_num - 
            integer timesig_denom - 
            boolean lineartempo - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:CountTempoTimeSigMarkers
                   counts the number of tempo/time signature markers
            Reaper:DeleteTempoTimeSigMarker
                   removes a tempo/time signature-marker
            Reaper:GetTempoTimeSigMarker
                   gets the attributes of a tempo/time signature-marker
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Time Signature Markers
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetThemeColor</slug>
        <title>SetThemeColor</title>
        <functioncall prog_lang="cpp">int SetThemeColor(const char* ini_key, int color, int flagsOptional)</functioncall>
        <functioncall prog_lang="eel">int SetThemeColor("ini_key", int color, int flags)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SetThemeColor(string ini_key, integer color, integer flags)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_SetThemeColor(String ini_key, Int color, Int flagsOptional)</functioncall>
        <requires>
            Reaper=6.74
        </requires>
        <description>
            Temporarily updates the theme color to the color specified (or the theme default color if -1 is specified). 
            Returns -1 on failure, otherwise returns the color (or transformed-color). 
            
            Note that the UI is not updated by this, the caller should call UpdateArrange etc as necessary. 
            
            If the low bit of flags is set, any color transformations are bypassed. 
            To read a value see GetThemeColor

             * col_main_bg2 : Main window/transport background 
             * col_main_text2 : Main window/transport text 
             * col_main_textshadow : Main window text shadow (ignored if too close to text color) 
             * col_main_3dhl : Main window 3D highlight 
             * col_main_3dsh : Main window 3D shadow 
             * col_main_resize2 : Main window pane resize mouseover 
             * col_main_text : Themed Window text 
             * col_main_bg : Themed Window background 
             * col_main_editbk : Themed Window edit background 
             * col_nodarkmodemiscwnd : Do not use window theming on macOS dark mode
             * col_transport_editbk : Transport edit background 
             * col_toolbar_text : Toolbar button text 
             * col_toolbar_text_on : Toolbar button enabled text 
             * col_toolbar_frame : Toolbar frame when floating or docked 
             * toolbararmed_color : Toolbar button armed color 
             * toolbararmed_drawmode : Toolbar button armed fill mode 
             * io_text : I/O window text 
             * io_3dhl : I/O window 3D highlight 
             * io_3dsh : I/O window 3D shadow 
             * genlist_bg : Window list background 
             * genlist_fg : Window list text 
             * genlist_grid : Window list grid lines 
             * genlist_selbg : Window list selected row 
             * genlist_selfg : Window list selected text 
             * genlist_seliabg : Window list selected row (inactive) 
             * genlist_seliafg : Window list selected text (inactive) 
             * genlist_hilite : Window list highlighted text 
             * genlist_hilite_sel : Window list highlighted selected text 
             * col_buttonbg : Button background 
             * col_tcp_text : Track panel text 
             * col_tcp_textsel : Track panel (selected) text 
             * col_seltrack : Selected track control panel background 
             * col_seltrack2 : Unselected track control panel background (enabled with a checkbox above) 
             * tcplocked_color : Locked track control panel overlay color 
             * tcplocked_drawmode : Locked track control panel fill mode 
             * col_tracklistbg : Empty track list area 
             * col_mixerbg : Empty mixer list area 
             * col_arrangebg : Empty arrange view area 
             * arrange_vgrid : Empty arrange view area vertical grid shading 
             * col_fadearm : Fader background when automation recording 
             * col_fadearm2 : Fader background when automation playing 
             * col_fadearm3 : Fader background when in inactive touch/latch 
             * col_tl_fg : Timeline foreground 
             * col_tl_fg2 : Timeline foreground (secondary markings) 
             * col_tl_bg : Timeline background 
             * col_tl_bgsel : Time selection color 
             * timesel_drawmode : Time selection fill mode 
             * col_tl_bgsel2 : Timeline background (in loop points) 
             * col_trans_bg : Transport status background 
             * col_trans_fg : Transport status text 
             * playrate_edited : Project play rate control when not 1.0 
             * col_mi_label : Media item label 
             * col_mi_label_sel : Media item label (selected) 
             * col_mi_label_float : Floating media item label 
             * col_mi_label_float_sel : Floating media item label (selected) 
             * col_mi_bg : Media item background (odd tracks) 
             * col_mi_bg2 : Media item background (even tracks) 
             * col_tr1_itembgsel : Media item background selected (odd tracks) 
             * col_tr2_itembgsel : Media item background selected (even tracks) 
             * itembg_drawmode : Media item background fill mode 
             * col_tr1_peaks : Media item peaks (odd tracks) 
             * col_tr2_peaks : Media item peaks (even tracks) 
             * col_tr1_ps2 : Media item peaks when selected (odd tracks) 
             * col_tr2_ps2 : Media item peaks when selected (even tracks) 
             * col_peaksedge : Media item peaks edge highlight (odd tracks) 
             * col_peaksedge2 : Media item peaks edge highlight (even tracks) 
             * col_peaksedgesel : Media item peaks edge highlight when selected (odd tracks) 
             * col_peaksedgesel2 : Media item peaks edge highlight when selected (even tracks) 
             * cc_chase_drawmode : Media item MIDI CC peaks fill mode 
             * col_peaksfade : Media item peaks when active in crossfade editor (fade-out) 
             * col_peaksfade2 : Media item peaks when active in crossfade editor (fade-in) 
             * col_mi_fades : Media item fade/volume controls 
             * fadezone_color : Media item fade quiet zone fill color 
             * fadezone_drawmode : Media item fade quiet zone fill mode 
             * fadearea_color : Media item fade full area fill color 
             * fadearea_drawmode : Media item fade full area fill mode 
             * col_mi_fade2 : Media item edges of controls 
             * col_mi_fade2_drawmode : Media item edges of controls blend mode 
             * item_grouphl : Media item edge when selected via grouping 
             * col_offlinetext : Media item "offline" text 
             * col_stretchmarker : Media item stretch marker line 
             * col_stretchmarker_h0 : Media item stretch marker handle (1x) 
             * col_stretchmarker_h1 : Media item stretch marker handle (>1x) 
             * col_stretchmarker_h2 : Media item stretch marker handle (<1x) 
             * col_stretchmarker_b : Media item stretch marker handle edge 
             * col_stretchmarkerm : Media item stretch marker blend mode 
             * col_stretchmarker_text : Media item stretch marker text 
             * col_stretchmarker_tm : Media item transient guide handle 
             * take_marker : Media item take marker 
             * selitem_tag : Selected media item bar color 
             * activetake_tag : Active media item take bar color 
             * col_tr1_bg : Track background (odd tracks) 
             * col_tr2_bg : Track background (even tracks) 
             * selcol_tr1_bg : Selected track background (odd tracks) 
             * selcol_tr2_bg : Selected track background (even tracks) 
             * col_tr1_divline : Track divider line (odd tracks) 
             * col_tr2_divline : Track divider line (even tracks) 
             * col_envlane1_divline : Envelope lane divider line (odd tracks) 
             * col_envlane2_divline : Envelope lane divider line (even tracks) 
             * mute_overlay_col : Muted/unsoloed track/item overlay color 
             * mute_overlay_mode : Muted/unsoloed track/item overlay mode
             * inactive_take_overlay_col : Inactive take overlay color
             * inactive_take_overlay_mode : Inactive take overlay mode
             * locked_overlay_col : Locked track/item overlay color
             * locked_overlay_mode : Locked track/item overlay mode
             * marquee_fill : Marquee fill 
             * marquee_drawmode : Marquee fill mode 
             * marquee_outline : Marquee outline 
             * marqueezoom_fill : Marquee zoom fill 
             * marqueezoom_drawmode : Marquee zoom fill mode 
             * marqueezoom_outline : Marquee zoom outline 
             * areasel_fill : Razor edit area fill 
             * areasel_drawmode : Razor edit area fill mode 
             * areasel_outline : Razor edit area outline 
             * areasel_outlinemode : Razor edit area outline mode 
             * col_cursor : Edit cursor 
             * col_cursor2 : Edit cursor (alternate) 
             * playcursor_color : Play cursor 
             * playcursor_drawmode : Play cursor fill mode 
             * col_gridlines2 : Grid lines (start of measure) 
             * col_gridlines2dm : Grid lines (start of measure) - draw mode 
             * col_gridlines3 : Grid lines (start of beats) 
             * col_gridlines3dm : Grid lines (start of beats) - draw mode 
             * col_gridlines : Grid lines (in between beats) 
             * col_gridlines1dm : Grid lines (in between beats) - draw mode 
             * guideline_color : Editing guide line color 
             * guideline_drawmode : Editing guide fill mode 
             * region : Regions 
             * region_lane_bg : Region lane background 
             * region_lane_text : Region lane text 
             * marker : Markers 
             * marker_lane_bg : Marker lane background 
             * marker_lane_text : Marker lane text 
             * col_tsigmark : Time signature change marker 
             * ts_lane_bg : Time signature lane background 
             * ts_lane_text : Time signature lane text 
             * timesig_sel_bg : Time signature marker selected background 
             * col_routinghl1 : Routing matrix row highlight 
             * col_routinghl2 : Routing matrix column highlight 
             * col_routingact : Routing matrix input activity highlight
             * col_vudoint : Theme has interlaced VU meters 
             * col_vuclip : VU meter clip indicator 
             * col_vutop : VU meter top 
             * col_vumid : VU meter middle 
             * col_vubot : VU meter bottom 
             * col_vuintcol : VU meter interlace/edge color 
             * col_vumidi : VU meter midi activity 
             * col_vuind1 : VU (indicator) - no signal 
             * col_vuind2 : VU (indicator) - low signal 
             * col_vuind3 : VU (indicator) - med signal 
             * col_vuind4 : VU (indicator) - hot signal 
             * mcp_sends_normal : Sends text: normal 
             * mcp_sends_muted : Sends text: muted 
             * mcp_send_midihw : Sends text: MIDI hardware 
             * mcp_sends_levels : Sends level 
             * mcp_fx_normal : FX insert text: normal 
             * mcp_fx_bypassed : FX insert text: bypassed 
             * mcp_fx_offlined : FX insert text: offline 
             * mcp_fxparm_normal : FX parameter text: normal 
             * mcp_fxparm_bypassed : FX parameter text: bypassed 
             * mcp_fxparm_offlined : FX parameter text: offline 
             * tcp_list_scrollbar : List scrollbar (track panel) 
             * tcp_list_scrollbar_mode : List scrollbar (track panel) - draw mode 
             * tcp_list_scrollbar_mouseover : List scrollbar mouseover (track panel) 
             * tcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (track panel) - draw mode 
             * mcp_list_scrollbar : List scrollbar (mixer panel) 
             * mcp_list_scrollbar_mode : List scrollbar (mixer panel) - draw mode 
             * mcp_list_scrollbar_mouseover : List scrollbar mouseover (mixer panel) 
             * mcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (mixer panel) - draw mode 
             * midi_rulerbg : MIDI editor ruler background 
             * midi_rulerfg : MIDI editor ruler text 
             * midi_grid2 : MIDI editor grid line (start of measure) 
             * midi_griddm2 : MIDI editor grid line (start of measure) - draw mode 
             * midi_grid3 : MIDI editor grid line (start of beats) 
             * midi_griddm3 : MIDI editor grid line (start of beats) - draw mode 
             * midi_grid1 : MIDI editor grid line (between beats) 
             * midi_griddm1 : MIDI editor grid line (between beats) - draw mode 
             * midi_trackbg1 : MIDI editor background color (naturals) 
             * midi_trackbg2 : MIDI editor background color (sharps/flats) 
             * midi_trackbg_outer1 : MIDI editor background color, out of bounds (naturals) 
             * midi_trackbg_outer2 : MIDI editor background color, out of bounds (sharps/flats) 
             * midi_selpitch1 : MIDI editor background color, selected pitch (naturals) 
             * midi_selpitch2 : MIDI editor background color, selected pitch (sharps/flats) 
             * midi_selbg : MIDI editor time selection color 
             * midi_selbg_drawmode : MIDI editor time selection fill mode 
             * midi_gridhc : MIDI editor CC horizontal center line 
             * midi_gridhcdm : MIDI editor CC horizontal center line - draw mode 
             * midi_gridh : MIDI editor CC horizontal line 
             * midi_gridhdm : MIDI editor CC horizontal line - draw mode 
             * midi_ccbut : MIDI editor CC lane add/remove buttons 
             * midi_ccbut_text : MIDI editor CC lane button text 
             * midi_ccbut_arrow : MIDI editor CC lane button arrow 
             * midioct : MIDI editor octave line color 
             * midi_inline_trackbg1 : MIDI inline background color (naturals) 
             * midi_inline_trackbg2 : MIDI inline background color (sharps/flats) 
             * midioct_inline : MIDI inline octave line color 
             * midi_endpt : MIDI editor end marker 
             * midi_notebg : MIDI editor note, unselected (midi_note_colormap overrides) 
             * midi_notefg : MIDI editor note, selected (midi_note_colormap overrides) 
             * midi_notemute : MIDI editor note, muted, unselected (midi_note_colormap overrides) 
             * midi_notemute_sel : MIDI editor note, muted, selected (midi_note_colormap overrides) 
             * midi_itemctl : MIDI editor note controls 
             * midi_ofsn : MIDI editor note (offscreen) 
             * midi_ofsnsel : MIDI editor note (offscreen, selected) 
             * midi_editcurs : MIDI editor cursor 
             * midi_pkey1 : MIDI piano key color (naturals background, sharps/flats text) 
             * midi_pkey2 : MIDI piano key color (sharps/flats background, naturals text) 
             * midi_pkey3 : MIDI piano key color (selected) 
             * midi_noteon_flash : MIDI piano key note-on flash 
             * midi_leftbg : MIDI piano pane background 
             * midifont_col_light_unsel : MIDI editor note text and control color, unselected (light) 
             * midifont_col_dark_unsel : MIDI editor note text and control color, unselected (dark) 
             * midifont_mode_unsel : MIDI editor note text and control mode, unselected 
             * midifont_col_light : MIDI editor note text and control color (light) 
             * midifont_col_dark : MIDI editor note text and control color (dark) 
             * midifont_mode : MIDI editor note text and control mode 
             * score_bg : MIDI notation editor background 
             * score_fg : MIDI notation editor staff/notation/text 
             * score_sel : MIDI notation editor selected staff/notation/text 
             * score_timesel : MIDI notation editor time selection 
             * score_loop : MIDI notation editor loop points, selected pitch 
             * midieditorlist_bg : MIDI list editor background 
             * midieditorlist_fg : MIDI list editor text 
             * midieditorlist_grid : MIDI list editor grid lines 
             * midieditorlist_selbg : MIDI list editor selected row 
             * midieditorlist_selfg : MIDI list editor selected text 
             * midieditorlist_seliabg : MIDI list editor selected row (inactive) 
             * midieditorlist_seliafg : MIDI list editor selected text (inactive) 
             * midieditorlist_bg2 : MIDI list editor background (secondary) 
             * midieditorlist_fg2 : MIDI list editor text (secondary) 
             * midieditorlist_selbg2 : MIDI list editor selected row (secondary) 
             * midieditorlist_selfg2 : MIDI list editor selected text (secondary) 
             * col_explorer_sel : Media explorer selection 
             * col_explorer_seldm : Media explorer selection mode 
             * col_explorer_seledge : Media explorer selection edge 
             * explorer_grid : Media explorer grid, markers
             * explorer_pitchtext : Media explorer pitch detection text
             * docker_shadow : Tab control shadow 
             * docker_selface : Tab control selected tab 
             * docker_unselface : Tab control unselected tab 
             * docker_text : Tab control text 
             * docker_text_sel : Tab control text selected tab 
             * docker_bg : Tab control background 
             * windowtab_bg : Tab control background in windows 
             * auto_item_unsel : Envelope: Unselected automation item 
             * col_env1 : Envelope: Volume (pre-FX) 
             * col_env2 : Envelope: Volume 
             * env_trim_vol : Envelope: Trim Volume 
             * col_env3 : Envelope: Pan (pre-FX) 
             * col_env4 : Envelope: Pan 
             * env_track_mute : Envelope: Mute 
             * col_env5 : Envelope: Master playrate 
             * col_env6 : Envelope: Master tempo 
             * col_env7 : Envelope: Width/Send volume 
             * col_env8 : Envelope: Send pan 
             * col_env9 : Envelope: Send volume 2 
             * col_env10 : Envelope: Send pan 2 
             * env_sends_mute : Envelope: Send mute 
             * col_env11 : Envelope: Audio hardware output volume 
             * col_env12 : Envelope: Audio hardware output pan 
             * col_env13 : Envelope: FX parameter 1 
             * col_env14 : Envelope: FX parameter 2 
             * col_env15 : Envelope: FX parameter 3 
             * col_env16 : Envelope: FX parameter 4 
             * env_item_vol : Envelope: Item take volume 
             * env_item_pan : Envelope: Item take pan 
             * env_item_mute : Envelope: Item take mute 
             * env_item_pitch : Envelope: Item take pitch 
             * wiring_grid2 : Wiring: Background 
             * wiring_grid : Wiring: Background grid lines 
             * wiring_border : Wiring: Box border 
             * wiring_tbg : Wiring: Box background 
             * wiring_ticon : Wiring: Box foreground 
             * wiring_recbg : Wiring: Record section background 
             * wiring_recitem : Wiring: Record section foreground 
             * wiring_activity : Wiring: Activity lights
             * wiring_media : Wiring: Media 
             * wiring_recv : Wiring: Receives 
             * wiring_send : Wiring: Sends 
             * wiring_fader : Wiring: Fader 
             * wiring_parent : Wiring: Master/Parent 
             * wiring_parentwire_border : Wiring: Master/Parent wire border 
             * wiring_parentwire_master : Wiring: Master/Parent to master wire 
             * wiring_parentwire_folder : Wiring: Master/Parent to parent folder wire 
             * wiring_pin_normal : Wiring: Pins normal 
             * wiring_pin_connected : Wiring: Pins connected 
             * wiring_pin_disconnected : Wiring: Pins disconnected 
             * wiring_horz_col : Wiring: Horizontal pin connections 
             * wiring_sendwire : Wiring: Send hanging wire 
             * wiring_hwoutwire : Wiring: Hardware output wire 
             * wiring_recinputwire : Wiring: Record input wire 
             * wiring_hwout : Wiring: System hardware outputs 
             * wiring_recinput : Wiring: System record inputs 
             * autogroup : Automatic track group
             * group_0 : Group #1 
             * group_1 : Group #2 
             * group_2 : Group #3 
             * group_3 : Group #4 
             * group_4 : Group #5 
             * group_5 : Group #6 
             * group_6 : Group #7 
             * group_7 : Group #8 
             * group_8 : Group #9 
             * group_9 : Group #10 
             * group_10 : Group #11 
             * group_11 : Group #12 
             * group_12 : Group #13 
             * group_13 : Group #14 
             * group_14 : Group #15 
             * group_15 : Group #16 
             * group_16 : Group #17 
             * group_17 : Group #18 
             * group_18 : Group #19 
             * group_19 : Group #20 
             * group_20 : Group #21 
             * group_21 : Group #22 
             * group_22 : Group #23 
             * group_23 : Group #24 
             * group_24 : Group #25 
             * group_25 : Group #26 
             * group_26 : Group #27 
             * group_27 : Group #28 
             * group_28 : Group #29 
             * group_29 : Group #30 
             * group_30 : Group #31 
             * group_31 : Group #32 
             * group_32 : Group #33 
             * group_33 : Group #34 
             * group_34 : Group #35 
             * group_35 : Group #36 
             * group_36 : Group #37 
             * group_37 : Group #38 
             * group_38 : Group #39 
             * group_39 : Group #40 
             * group_40 : Group #41 
             * group_41 : Group #42 
             * group_42 : Group #43 
             * group_43 : Group #44 
             * group_44 : Group #45 
             * group_45 : Group #46 
             * group_46 : Group #47 
             * group_47 : Group #48 
             * group_48 : Group #49 
             * group_49 : Group #50 
             * group_50 : Group #51 
             * group_51 : Group #52 
             * group_52 : Group #53 
             * group_53 : Group #54 
             * group_54 : Group #55 
             * group_55 : Group #56 
             * group_56 : Group #57 
             * group_57 : Group #58 
             * group_58 : Group #59 
             * group_59 : Group #60 
             * group_60 : Group #61 
             * group_61 : Group #62 
             * group_62 : Group #63 
             * group_63 : Group #64 
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            string ini_key - 
            integer color - 
            integer flags - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetThemeColor
                   gets a certain theme-color
            Reaper:UpdateArrange
                   updates the arrangeview, so theme-color changes are applied
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.74 - new theme-colors: col_routingact, wiring_activity
            Reaper 6.59 - changes with color: col_env7 added width to it
            Reaper 6.57 - new theme-colors: inactive_take_overlay_col, inactive_take_overlay_mode; mute_overlay_col, mute_overlay_mode doesn't work on inactive takes anymore, but rather on items
            Reaper 6.54 - new theme colors: track_lane_tabcol, track_lanesolo_tabcol, track_lane_gutter, track_lane_gutter_drawmode, mute_overlay_col, mute_overlay_mode, locked_overlay_col, locked_overlay_mode
            Reaper 6.53 - new theme-colors: explorer_grid and explorer_pitchtext
            Reaper 6.44 - new theme-color: col_nodarkmodemiscwnd added
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetToggleCommandState</slug>
        <title>SetToggleCommandState</title>
        <functioncall prog_lang="cpp">bool SetToggleCommandState(int section_id, int command_id, int state)</functioncall>
        <functioncall prog_lang="eel">bool SetToggleCommandState(int section_id, int command_id, int state)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetToggleCommandState(integer section_id, integer command_id, integer state)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetToggleCommandState(Int section_id, Int command_id, Int state)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically.
        </description>
        <retvals>
            boolean retval - true, setting was successful; false, setting was unsuccessful
        </retvals>
        <parameters>
            integer section_id - the section of the action
                       -        0, Main  
                       -        100, Main (alt recording)  
                       -        32060, MIDI Editor  
                       -        32061, MIDI Event List Editor  
                       -        32062, MIDI Inline Editor  
                       -        32063, Media Explorer  
            integer command_id - the command-id of the action whose toggle command state you want to query
            integer state - toggle-state 
                    -0, off
                    -&1, on/checked in menus
                    -&2, on/grayed out in menus
                    -&16, on/bullet in front of the entry in menus
                    --1, NA because the action does not have on/off states.
        </parameters>
        <linked_to desc="see also:">
            Reaper:RefreshToolbar2
                   updates toolbar-buttons to on/off-state
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackAutomationMode</slug>
        <title>SetTrackAutomationMode</title>
        <functioncall prog_lang="cpp">void SetTrackAutomationMode(MediaTrack* tr, int mode)</functioncall>
        <functioncall prog_lang="eel">SetTrackAutomationMode(MediaTrack tr, int mode)</functioncall>
        <functioncall prog_lang="lua">reaper.SetTrackAutomationMode(MediaTrack tr, integer mode)</functioncall>
        <functioncall prog_lang="python">RPR_SetTrackAutomationMode(MediaTrack tr, Int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Set automation-mode for a specific MediaTrack.
        </description>
        <parameters>
            MediaTrack tr - the MediaTrack, whose automation-mode you want to set
            integer mode - the automation-mode
                        -0, Trim/read
                        -1, Read
                        -2, Touch
                        -3, Write
                        -4, Latch
                        -5 and higher no mode selected
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>envelopemanagement, set, mode, trim, read, touch, write, latch, master</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackColor</slug>
        <title>SetTrackColor</title>
        <functioncall prog_lang="cpp">void SetTrackColor(MediaTrack* track, int color)</functioncall>
        <functioncall prog_lang="eel">SetTrackColor(MediaTrack track, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.SetTrackColor(MediaTrack track, integer color)</functioncall>
        <functioncall prog_lang="python">RPR_SetTrackColor(MediaTrack track, Int color)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b).
            
            You cannot set default color with this function, use SetMediaTrackInfo_Value instead.
        </description>
        <parameters>
            MediaTrack track - the MediaTrack, whose color you want to change
            integer color - the new color-value
        </parameters>
        <linked_to desc="see also:">
            Reaper:ColorToNative
                   converts a color-value to a native operating-system-one
            Reaper:SetMediaTrackInfo_Value
                   Allows setting various track-attributes, including the default-color.
        </linked_to>        
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, set, color, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackMIDILyrics</slug>
        <title>SetTrackMIDILyrics</title>
        <functioncall prog_lang="cpp">bool SetTrackMIDILyrics(MediaTrack* track, int flag, const char* str)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackMIDILyrics(MediaTrack track, int flag, "str")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetTrackMIDILyrics(MediaTrack track, integer flag, string str)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetTrackMIDILyrics(MediaTrack track, Int flag, String str)</functioncall>
        <requires>
            Reaper=6.58
        </requires>
        <description>
            Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. 
            
            Flag is unused at present. 
            
            str is passed in as beat position, tab, text, tab 
            
            example with flag=2: "1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1 "
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer flag - 
            string str - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetTrackMIDILyrics
                   get the track-midi lyrics
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackMIDINoteName</slug>
        <title>SetTrackMIDINoteName</title>
        <functioncall prog_lang="cpp">bool SetTrackMIDINoteName(int track, int pitch, int chan, const char* name)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackMIDINoteName(int track, int pitch, int chan, "name")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetTrackMIDINoteName(integer track, integer pitch, integer chan, string name)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetTrackMIDINoteName(Int track, Int pitch, Int chan, String name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            channel > 0 assigns these note names to all channels.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer pitch - 
            integer chan - 
            string name - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackMIDINoteNameEx</slug>
        <title>SetTrackMIDINoteNameEx</title>
        <functioncall prog_lang="cpp">bool SetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan, const char* name)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, int pitch, int chan, "name")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan, string name)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, Int pitch, Int chan, String name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            channel > 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            MediaTrack track - 
            integer pitch - 
            integer chan - 
            string name - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackSelected</slug>
        <title>SetTrackSelected</title>
        <functioncall prog_lang="cpp">void SetTrackSelected(MediaTrack* track, bool selected)</functioncall>
        <functioncall prog_lang="eel">SetTrackSelected(MediaTrack track, bool selected)</functioncall>
        <functioncall prog_lang="lua">reaper.SetTrackSelected(MediaTrack track, boolean selected)</functioncall>
        <functioncall prog_lang="python">RPR_SetTrackSelected(MediaTrack track, Boolean selected)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Set a MediaTrack selected/deselected. Will retain already existing selection, so you can set multiple tracks selected that way.

            Will not affect Last-Touched-Track.
        </description>
        <parameters>
            MediaTrack track - the MediaTrack, whose selection state you want to set
            boolean selected - true, set MediaTrack to selected; false, set MediaTrack to deselected
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, select, deselect, unselect, track, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackSendInfo_Value</slug>
        <title>SetTrackSendInfo_Value</title>
        <functioncall prog_lang="cpp">bool SetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname, double newvalue)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackSendInfo_Value(MediaTrack tr, int category, int sendidx, "parmname", newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname, number newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetTrackSendInfo_Value(MediaTrack tr, Int category, Int sendidx, String parmname, Float newvalue)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Set send/receive/hardware output numerical-value attributes, return true on success.
            category is <0 for receives, 0=sends, >0 for hardware outputs
            parameter names:

               B_MUTE : bool *
               B_PHASE : bool * : true to flip phase
               B_MONO : bool *
               D_VOL : double * : 1.0 = +0dB etc
               D_PAN : double * : -1..+1
               D_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
               I_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
               I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
               I_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.
               I_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.
               I_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan 

            For ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).
            
            Note: convert a dB_volume-value to the value expected by D_VOL in Lua, using: math.exp(db_value/8.68588963806)
        </description>
        <retvals>
            boolean retval - true, setting value was successful; false, setting value was unsuccessful
        </retvals>
        <parameters>
            MediaTrack tr - the track, whose routing-attribute you want to set
            integer category - the category of the routing to set; <0 for receives, 0=sends, >0 for hardware outputs
            integer sendidx - the index of the routing-entry that you want to set
            string parmname - the name of the parameter, that you want to set
            number newvalue - the new value to set
        </parameters>
        <linked_to desc="see also:">
            Reaper:CreateTrackSend
                   creates a track-send
            Reaper:GetTrackNumSends
                   get number of send of a track
            Reaper:GetSetTrackSendInfo_String
                   gets sets additional string-attributes for metadata of track-sends
            Reaper:GetSetTrackSendInfo
                   gets and sets attributes for a track-send
            Reaper:GetTrackSendInfo_Value
                   gets attributes of a track-send
            Reaper:RemoveTrackSend
                   removes a track-send
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.79 - improved docs for I_SRCCHAN and I_DSTCHAN
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackSendUIPan</slug>
        <title>SetTrackSendUIPan</title>
        <functioncall prog_lang="cpp">bool SetTrackSendUIPan(MediaTrack* track, int send_idx, double pan, int isend)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackSendUIPan(MediaTrack track, int send_idx, pan, int isend)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetTrackSendUIPan(MediaTrack track, integer send_idx, number pan, integer isend)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetTrackSendUIPan(MediaTrack track, Int send_idx, Float pan, Int isend)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer send_idx - 
            number pan - 
            integer isend - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackSendUIVol</slug>
        <title>SetTrackSendUIVol</title>
        <functioncall prog_lang="cpp">bool SetTrackSendUIVol(MediaTrack* track, int send_idx, double vol, int isend)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackSendUIVol(MediaTrack track, int send_idx, vol, int isend)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetTrackSendUIVol(MediaTrack track, integer send_idx, number vol, integer isend)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetTrackSendUIVol(MediaTrack track, Int send_idx, Float vol, Int isend)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.
            
            Note: convert a dB_volume-value to the value expected by parameter vol in Lua, using: math.exp(db_value/8.68588963806)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer send_idx - 
            number vol - 
            integer isend - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackStateChunk</slug>
        <title>SetTrackStateChunk</title>
        <functioncall prog_lang="cpp">bool SetTrackStateChunk(MediaTrack* track, const char* str, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackStateChunk(MediaTrack track, "str", bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SetTrackStateChunk(MediaTrack track, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_SetTrackStateChunk(MediaTrack track, String str, Boolean isundoOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
        </description>
        <retvals>
            boolean retval - true, setting worked; false, setting didn't work
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, whose statechunk you want to set
            string str - the new trackstatechunk, you want to set this MediaTrack to
            boolean isundo - undo flag is a performance/caching hint
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>trackmanagement, set, track, statechunk</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackUIInputMonitor</slug>
        <title>SetTrackUIInputMonitor</title>
        <functioncall prog_lang="cpp">int retval = SetTrackUIInputMonitor(MediaTrack* track, int monitor, int igngroupflags)</functioncall>
        <functioncall prog_lang="eel">int retval = SetTrackUIInputMonitor(MediaTrack track, int monitor, int igngroupflags)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SetTrackUIInputMonitor(MediaTrack track, integer monitor, integer igngroupflags)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_SetTrackUIInputMonitor(MediaTrack track, Int monitor, Int igngroupflags)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            monitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring. 
            
            returns new value or -1 if error. 
            
            igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging
        </description>
        <retvals>
            integer retval - -1, in case of an error; else the monitoring state
        </retvals>
        <parameters>
            MediaTrack track - the track, whose monitoring you want to set
            integer monitor - the monitoring mode
                            - 0, no monitoring
                            - 1, monitoring
                            - 2, auto-monitoring
            integer igngroupflags - &1 to prevent track grouping
                                  - &2 to prevent selection ganging
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Set Track States
        </chapter_context>
        <tags>track management, set, monitoring</tags>
        <changelog>
            Reaper 6.71 - added
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackUIMute</slug>
        <title>SetTrackUIMute</title>
        <functioncall prog_lang="cpp">int retval = SetTrackUIMute(MediaTrack* track, int mute, int igngroupflags)</functioncall>
        <functioncall prog_lang="eel">int retval = SetTrackUIMute(MediaTrack track, int mute, int igngroupflags)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SetTrackUIMute(MediaTrack track, integer mute, integer igngroupflags)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_SetTrackUIMute(MediaTrack track, Int mute, Int igngroupflags)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            mute: <0 toggles, >0 sets mute, 0=unsets mute. 
            
            returns new value or -1 if error. 
            
            igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging
        </description>
        <retvals>
            integer retval - the new mute-state; -1, in case of an error
        </retvals>
        <parameters>
            MediaTrack track - the track, whose mute-state you want to set
            integer monitor - the mute-mode
                            - <0, toggles
                            - >0 sets mute
                            - 0, unsets mute
            integer igngroupflags - &1 to prevent track grouping
                                  - &2 to prevent selection ganging
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Set Track States
        </chapter_context>
        <tags>trackmanagement, set, mute</tags>
        <changelog>
            Reaper 6.71 - added
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackUIPan</slug>
        <title>SetTrackUIPan</title>
        <functioncall prog_lang="cpp">double retval = SetTrackUIPan(MediaTrack* track, double pan, bool relative, bool done, int igngroupflags)</functioncall>
        <functioncall prog_lang="eel">double retval = SetTrackUIPan(MediaTrack track, pan, bool relative, bool done, int igngroupflags)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.SetTrackUIPan(MediaTrack track, number pan, boolean relative, boolean done, integer igngroupflags)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_SetTrackUIPan(MediaTrack track, Float pan, Boolean relative, Boolean done, Int igngroupflags)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            sets pan of a certain track
            
            igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaTrack track - the track, whose panning you want to set
            number pan - the pan-value; -1=-100%, -0.01=-1%, 0=center, 0.01=1%, 1=100%
            boolean relative - true, change relative to the current value; false, set to absolute value
            boolean done - false, allow touch controls; true, finish touch controls
            integer igngroupflags - &1 to prevent track grouping
                                  - &2 to prevent selection ganging
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Set Track States
        </chapter_context>
        <tags>trackmanagement, set, pan</tags>
        <changelog>
            Reaper 6.71 - added
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackUIPolarity</slug>
        <title>SetTrackUIPolarity</title>
        <functioncall prog_lang="cpp">int retval = SetTrackUIPolarity(MediaTrack* track, int polarity, int igngroupflags)</functioncall>
        <functioncall prog_lang="eel">int retval = SetTrackUIPolarity(MediaTrack track, int polarity, int igngroupflags)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SetTrackUIPolarity(MediaTrack track, integer polarity, integer igngroupflags)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_SetTrackUIPolarity(MediaTrack track, Int polarity, Int igngroupflags)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            polarity (AKA phase): <0 toggles, 0=normal, >0=inverted. 
            
            returns new value or -1 if error. 
            
            igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging
        </description>
        <retvals>
            integer retval - the new polarity state; -1, in case of an error
        </retvals>
        <parameters>
            MediaTrack track - the track, whose polarity-state you want to set
            integer polarity - the polarity-mode
                            - <0, toggles
                            - >0 sets polarity
                            - 0, unsets polarity
            integer igngroupflags - &1 to prevent track grouping
                                  - &2 to prevent selection ganging
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Set Track States
        </chapter_context>
        <tags>trackmanagement, set, polarity</tags>
        <changelog>
            Reaper 6.71 - added
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackUIRecArm</slug>
        <title>SetTrackUIRecArm</title>
        <functioncall prog_lang="cpp">int retval = SetTrackUIRecArm(MediaTrack* track, int recarm, int igngroupflags)</functioncall>
        <functioncall prog_lang="eel">int retval = SetTrackUIRecArm(MediaTrack track, int recarm, int igngroupflags)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SetTrackUIRecArm(MediaTrack track, integer recarm, integer igngroupflags)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_SetTrackUIRecArm(MediaTrack track, Int recarm, Int igngroupflags)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            recarm: <0 toggles, >0 sets recarm, 0=unsets recarm.
            
            returns new value or -1 if error. 
            
            igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging
        </description>
        <retvals>
            integer retval - the new recarm-state
        </retvals>
        <parameters>
            MediaTrack track - the track, whose recarm-state you want to set
            integer recarm - the recarm-mode
                            - <0, toggles
                            - >0 sets recarm
                            - 0, unsets recarm
            integer igngroupflags - &1 to prevent track grouping
                                  - &2 to prevent selection ganging
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Set Track States
        </chapter_context>
        <tags>trackmanagement, set, recarm</tags>
        <changelog>
            Reaper 6.71 - added
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackUISolo</slug>
        <title>SetTrackUISolo</title>
        <functioncall prog_lang="cpp">int retval = SetTrackUISolo(MediaTrack* track, int solo, int igngroupflags)</functioncall>
        <functioncall prog_lang="eel">int retval = SetTrackUISolo(MediaTrack track, int solo, int igngroupflags)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SetTrackUISolo(MediaTrack track, integer solo, integer igngroupflags)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_SetTrackUISolo(MediaTrack track, Int solo, Int igngroupflags)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            solo: <0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo (non-SIP), 4 sets solo (SIP).
            
            returns new value or -1 if error. 
            
            igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging
        </description>
        <retvals>
            integer retval - the new solo-state
        </retvals>
        <parameters>
            MediaTrack track - the track, whose solo-state you want to set
            integer solo - the solo-mode
                            - <0, toggles
                            - 0, unsets mute
                            - 1, sets mute
                            - 2, sets solo(non-SIP)
                            - 4, sets solo (SIP)
            integer igngroupflags - &1 to prevent track grouping
                                  - &2 to prevent selection ganging
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Set Track States
        </chapter_context>
        <tags>trackmanagement, set, solo</tags>
        <changelog>
            Reaper 6.71 - added
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackUIVolume</slug>
        <title>SetTrackUIVolume</title>
        <functioncall prog_lang="cpp">double retval = SetTrackUIVolume(MediaTrack* track, double volume, bool relative, bool done, int igngroupflags)</functioncall>
        <functioncall prog_lang="eel">double retval = SetTrackUIVolume(MediaTrack track, volume, bool relative, bool done, int igngroupflags)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.SetTrackUIVolume(MediaTrack track, number volume, boolean relative, boolean done, integer igngroupflags)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_SetTrackUIVolume(MediaTrack track, Float volume, Boolean relative, Boolean done, Int igngroupflags)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            sets the volume of a track
            
            igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging
        </description>
        <retvals>
            number retval - the new volume
        </retvals>
        <parameters>
            MediaTrack track - the track, whose volume you want to set
            number volume - the volume in dB
            boolean relative - true, change relative to the current value; false, set to absolute value
            boolean done - false, allow touch controls; true, finish touch controls
            integer igngroupflags - &1 to prevent track grouping
                                  - &2 to prevent selection ganging
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Set Track States
        </chapter_context>
        <tags>trackmanagement, set, volume</tags>
        <changelog>
            Reaper 6.71 - added
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackUIWidth</slug>
        <title>SetTrackUIWidth</title>
        <functioncall prog_lang="cpp">double retval = SetTrackUIWidth(MediaTrack* track, double width, bool relative, bool done, int igngroupflags)</functioncall>
        <functioncall prog_lang="eel">double retval = SetTrackUIWidth(MediaTrack track, width, bool relative, bool done, int igngroupflags)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.SetTrackUIWidth(MediaTrack track, number width, boolean relative, boolean done, integer igngroupflags)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_SetTrackUIWidth(MediaTrack track, Float width, Boolean relative, Boolean done, Int igngroupflags)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description>
            sets the width of a track 
            
            returns new value or -1 if error. 
            
            igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging
        </description>
        <retvals>
            number retval - the new width of the track
        </retvals>
        <parameters>
            MediaTrack track - the track, whose width you want to set
            integer width - the width-mode; -1=-100%, 0=mono; 1=100%
            boolean relative - true, change relative to the current value; false, set to absolute value
            boolean done - false, allow touch controls; true, finish touch controls
            integer igngroupflags - &1 to prevent track grouping
                                  - &2 to prevent selection ganging
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Set Track States
        </chapter_context>
        <tags>trackmanagement, set, width</tags>
        <changelog>
            Reaper 6.71 - added
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ShowPopupMenu</slug>
        <title>ShowPopupMenu</title>
        <functioncall prog_lang="cpp">void ShowPopupMenu(const char* name, int x, int y, HWND hwndParentOptional, void* ctxOptional, int ctx2Optional, int ctx3Optional)</functioncall>
        <functioncall prog_lang="eel">ShowPopupMenu("name", int x, int y, HWND hwndParent, void* ctx, int ctx2, int ctx3)</functioncall>
        <functioncall prog_lang="lua">reaper.ShowPopupMenu(string name, integer x, integer y, optional HWND hwndParent, identifier ctx, integer ctx2, integer ctx3)</functioncall>
        <functioncall prog_lang="python">RPR_ShowPopupMenu(String name, Int x, Int y, HWND hwndParentOptional, void ctxOptional, Int ctx2Optional, Int ctx3Optional)</functioncall>
        <requires>
            Reaper=5.92
        </requires>
        <description prog_lang="*">
            shows a Reaper-context menu.
            You can decide, which menu to show and to which track/item/envelope/envelope-point/automation-item you want this context-menu to be applied to.
            e.g. you can decide, whether settings in the context-menu "track_panel" shall be applied to track 1, track 2, etc

            You can also apply this to the selected track/mediaitem/envelope.
            The parameters name and ctx influence each other, means: name="item" and ctx=reaper.GetMediaItem(0,1) apply the mediaitem-contextmenu to the Mediaitem-object, given to parameter ctx.
            The choice of the parameter name also influences, whether ctxOptional and ctx2Optional can be set or not and what they mean.

            Blocks further execution of a script, until the context-menu is closed.
        </description>
        <parameters>
            string name - the name of the context-menu to show
                        - can be track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item
            integer x - x-position of the contextmenu-display-position in pixels
            integer y - y-position of the contextmenu-display-position in pixels
            optional HWND hwndParent - the HWND-window in which to display the context-menu. 
                                     - nil, Reaper's main window will be used as HWND
            optional identifier ctx - the object for which to apply the contextmenu. Options selected in the context-menu will be applied to this track/item; 
                                    - nil, use the selected track(s)/item(s)/envelope, depending on the chosen context-menu-name in parameter name; 
                                    -      shows no context-menu, when no track/item/envelope is selected;
                                    - 
                                    - possible objects and their corresponding name-parameter:
                                    -   - MediaTrack(track_input, track_panel, track_routing)
                                    -   - MediaItem(item)
                                    -   - TrackEnvelope(also Take-Envelopes!) (envelope, envelope_point)
                                    - when using any other context-menu-name, this parameter will be ignored by Reaper.
            optional ctxOptional - when ctx is a TrackEnvelope(or nil) and menu="envelope_point", 
                                 -      this is the idx of the envelope-point to which to apply the context-menu
                                 - when ctx is a TrackEnvelope(or nil) and menu="envelope_item", 
                                 -      this reflects the automation-item in chosen envelope, to which to apply the context-menu(1 or higher for automation-item 1 or higher)
            optional ctx2Optional - when ctx is a TrackEnvelope(or nil) and menu="envelope_point", this reflects, 
                                  - 0, whether to apply the context-menu to the point in the envelope-lane or
                                  - 1 or higher, whether to apply the context-menu to the point in automation-item 1 or higher; 
                                  - nil, assumes 0(envelope-lane)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>userinterface, context, menu, track, envelope, item, automation item, envelope point, position, hwnd</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ShowActionList</slug>
        <title>ShowActionList</title>
        <functioncall prog_lang="cpp">void ShowActionList(KbdSectionInfo* section, HWND callerWnd)</functioncall>
        <functioncall prog_lang="eel">ShowActionList(KbdSectionInfo section, HWND callerWnd)</functioncall>
        <functioncall prog_lang="lua">reaper.ShowActionList(KbdSectionInfo section, optional HWND callerWnd)</functioncall>
        <functioncall prog_lang="python">RPR_ShowActionList(KbdSectionInfo section, HWND callerWnd)</functioncall>
        <requires>
            Reaper=6.72
        </requires>
        <description prog_lang="*">
            shows the action-list
        </description>
        <parameters>
            KbdSectionInfo section - 0, Main  
                                   - 100, Main (alt recording)  
                                   - 32060, MIDI Editor  
                                   - 32061, MIDI Event List Editor  
                                   - 32062, MIDI Inline Editor  
                                   - 32063, Media Explorer  
            optional HWND callerWnd - the HWND that shall call the ActionList; can be nil
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.72 - parameter section allows now the section-numbers to be given
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ShowConsoleMsg</slug>
        <title>ShowConsoleMsg</title>
        <functioncall prog_lang="cpp">void ShowConsoleMsg(const char* msg)</functioncall>
        <functioncall prog_lang="eel">ShowConsoleMsg("msg")</functioncall>
        <functioncall prog_lang="lua">reaper.ShowConsoleMsg(string msg)</functioncall>
        <functioncall prog_lang="python">RPR_ShowConsoleMsg(String msg)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Show a message to the user (also useful for debugging). Send "\n" for newline, "" to clear the console.
        </description>
        <parameters>
            string msg - a message to be shown in ReaConsole
        </parameters>
        <linked_to desc="see also:">
            Reaper:ClearConsole
                   clears the ReaScript-console window
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            ReaScript Console
        </chapter_context>
        <tags>helperfunctions, message, console</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ShowMessageBox</slug>
        <title>ShowMessageBox</title>
        <functioncall prog_lang="cpp">int ShowMessageBox(const char* msg, const char* title, int type)</functioncall>
        <functioncall prog_lang="eel">int ShowMessageBox("msg", "title", int type)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.ShowMessageBox(string msg, string title, integer type)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_ShowMessageBox(String msg, String title, Int type)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Shows Messagebox with user-clickable buttons.
        </description>
        <retvals>
            integer retval - the button pressed by the user
                    -1, OK
                    -2, CANCEL
                    -3, ABORT
                    -4, RETRY
                    -5, IGNORE
                    -6, YES
                    -7, NO
        </retvals>
        <parameters>
            string msg - the message, that shall be shown in messagebox
            string title - the title of the messagebox
            integer type - which buttons shall be shown in the messagebox
                -0, OK
                -1, OK CANCEL
                -2, ABORT RETRY IGNORE
                -3, YES NO CANCEL
                -4, YES NO
                -5, RETRY CANCEL
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags>user, interface, input, dialog, messagebox</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SLIDER2DB</slug>
        <title>SLIDER2DB</title>
        <functioncall prog_lang="cpp">double SLIDER2DB(double y)</functioncall>
        <functioncall prog_lang="eel">double SLIDER2DB(y)</functioncall>
        <functioncall prog_lang="lua">number db_value = reaper.SLIDER2DB(number y)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_SLIDER2DB(Float y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Convert slider-value to it's dB-value-equivalent.
        </description>
        <retvals>
            number db_value - the slider-value, you want to convert to dB
        </retvals>
        <parameters>
            number y - the dB-value
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Value Conversion
        </chapter_context>
        <tags>helperfunctions, slider, db, convert</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SnapToGrid</slug>
        <title>SnapToGrid</title>
        <functioncall prog_lang="cpp">double SnapToGrid(ReaProject* project, double time_pos)</functioncall>
        <functioncall prog_lang="eel">double SnapToGrid(ReaProject project, time_pos)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.SnapToGrid(ReaProject project, number time_pos)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_SnapToGrid(ReaProject project, Float time_pos)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            number retval  - 
        </retvals>
        <parameters>
            ReaProject project - the project-number. 0 for the current project. 
            number time_pos - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SoloAllTracks</slug>
        <title>SoloAllTracks</title>
        <functioncall prog_lang="cpp">void SoloAllTracks(int solo)</functioncall>
        <functioncall prog_lang="eel">SoloAllTracks(int solo)</functioncall>
        <functioncall prog_lang="lua">reaper.SoloAllTracks(integer solo)</functioncall>
        <functioncall prog_lang="python">RPR_SoloAllTracks(Int solo)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Set solo-state for all tracks.
        </description>
        <parameters>
            integer solo - the new solo state for all tracks
                    -0, solo off
                    -1, solo, ignore routing
                    -2, solo in place
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>trackmanagement, solo, state, set, on, off, solo in place, solo ignore routing</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Splash_GetWnd</slug>
        <title>Splash_GetWnd</title>
        <functioncall prog_lang="cpp">HWND Splash_GetWnd()</functioncall>
        <functioncall prog_lang="eel">HWND Splash_GetWnd()</functioncall>
        <functioncall prog_lang="lua">HWND hwnd = reaper.Splash_GetWnd()</functioncall>
        <functioncall prog_lang="python">HWND hwnd = RPR_Splash_GetWnd()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            gets the splash window, in case you want to display a message over it. Returns NULL when the splash window is not displayed.
        </description>
        <retvals>
            HWND hwnd - the window-handler of the splash-window
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SplitMediaItem</slug>
        <title>SplitMediaItem</title>
        <functioncall prog_lang="cpp">MediaItem* SplitMediaItem(MediaItem* item, double position)</functioncall>
        <functioncall prog_lang="eel">MediaItem SplitMediaItem(MediaItem item, position)</functioncall>
        <functioncall prog_lang="lua">MediaItem item = reaper.SplitMediaItem(MediaItem item, number position)</functioncall>
        <functioncall prog_lang="python">MediaItem item = RPR_SplitMediaItem(MediaItem item, Float position)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            The original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)
        </description>
        <retvals>
            MediaItem item - the new MediaItem on the right side of the split
        </retvals>
        <parameters>
            MediaItem item - the MediaItem so be split
            number position - the split-position in seconds
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>mediaitemmanagement, split, item</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>stringToGuid</slug>
        <title>stringToGuid</title>
        <functioncall prog_lang="cpp">void stringToGuid(const char* str, GUID* g)</functioncall>
        <functioncall prog_lang="eel">stringToGuid("str", #gGUID)</functioncall>
        <functioncall prog_lang="lua">string gGUID = reaper.stringToGuid(string str, string gGUID)</functioncall>
        <functioncall prog_lang="python">RPR_stringToGuid(String str, GUID g)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            string gGUID - 
        </retvals>
        <parameters>
            string str - 
            string gGUID -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>StuffMIDIMessage</slug>
        <title>StuffMIDIMessage</title>
        <functioncall prog_lang="cpp">void StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)</functioncall>
        <functioncall prog_lang="eel">StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)</functioncall>
        <functioncall prog_lang="lua">reaper.StuffMIDIMessage(integer mode, integer msg1, integer msg2, integer msg3)</functioncall>
        <functioncall prog_lang="python">RPR_StuffMIDIMessage(Int mode, Int msg1, Int msg2, Int msg3)</functioncall>
        <requires>
            Reaper=5.92
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see [GetNumMIDIOutputs](#GetNumMIDIOutputs), [GetMIDIOutputName](#GetMIDIOutputName).

            if mode is set to 1, you can send messages as control-message for Parameter Learn/Modulation and as shortcut for scripts.
            The parameter msg3 can be retrieved with the returnvalue val of the function reaper.get\_action\_context, so sending values to a script is possible that way.

            For more detailed information about the possible midi-messages you can send via StuffMIDIMessage, see: [StuffMIDIMessage-docs](misc_docs/API_How_StuffMidiMessage_works.txt)
        </description>
        <parameters>
            integer mode - the mode for sending the midi-message
                         - 0, for VKB; 
                         - 1, for control (actions map etc), 
                         - 2, for VKB-on-current-channel; 
                         - 16 for external MIDI device 0
                         - 17 for external MIDI device 1, etc
            integer msg1 - modifier
            integer msg2 - note/keyname
            integer msg3 - velocity
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Midi
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_AddByName</slug>
        <title>TakeFX_AddByName</title>
        <functioncall prog_lang="cpp">int TakeFX_AddByName(MediaItem_Take* take, const char* fxname, int instantiate)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_AddByName(MediaItem_Take take, "fxname", int instantiate)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TakeFX_AddByName(MediaItem_Take take, string fxname, integer instantiate)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TakeFX_AddByName(MediaItem_Take take, String fxname, Int instantiate)</functioncall>
        <requires>
            Reaper=6.12
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Adds or queries the position of a named FX in a take. See [TrackFX\_AddByName()](#TrackFX_AddByName) for information on fxname and instantiate. 
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            string fxname - 
            integer instantiate - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.70 - improve behavior with Track/TakeFX_AddByName() for JSFX [t=271878]
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_EndParamEdit</slug>
        <title>TakeFX_EndParamEdit</title>
        <functioncall prog_lang="cpp">bool TakeFX_EndParamEdit(MediaItem_Take* take, int fx, int param)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_EndParamEdit(MediaItem_Take take, int fx, int param)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_EndParamEdit(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_EndParamEdit(MediaItem_Take take, Int fx, Int param)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_FormatParamValue</slug>
        <title>TakeFX_FormatParamValue</title>
        <functioncall prog_lang="cpp">bool TakeFX_FormatParamValue(MediaItem_Take* take, int fx, int param, double val, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_FormatParamValue(MediaItem_Take take, int fx, int param, val, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_FormatParamValue(MediaItem_Take take, integer fx, integer param, number val)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, Float val, String bufOut, Int bufOut_sz) = RPR_TakeFX_FormatParamValue(take, fx, param, val, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            Note: only works with FX that support Cockos VST extensions.
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
            number val - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_FormatParamValueNormalized</slug>
        <title>TakeFX_FormatParamValueNormalized</title>
        <functioncall prog_lang="cpp">bool TakeFX_FormatParamValueNormalized(MediaItem_Take* take, int fx, int param, double value, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_FormatParamValueNormalized(MediaItem_Take take, int fx, int param, value, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_FormatParamValueNormalized(MediaItem_Take take, integer fx, integer param, number value, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, Float value, String buf, Int buf_sz) = RPR_TakeFX_FormatParamValueNormalized(take, fx, param, value, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Note: only works with FX that support Cockos VST extensions.
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
            number value - 
            string buf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetChainVisible</slug>
        <title>TakeFX_GetChainVisible</title>
        <functioncall prog_lang="cpp">int TakeFX_GetChainVisible(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetChainVisible(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TakeFX_GetChainVisible(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TakeFX_GetChainVisible(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetCount</slug>
        <title>TakeFX_GetCount</title>
        <functioncall prog_lang="cpp">int TakeFX_GetCount(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetCount(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TakeFX_GetCount(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TakeFX_GetCount(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetEnabled</slug>
        <title>TakeFX_GetEnabled</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetEnabled(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetEnabled(MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_GetEnabled(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_GetEnabled(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TakeFX\_SetEnabled](#TakeFX_SetEnabled)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetEnvelope</slug>
        <title>TakeFX_GetEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* TakeFX_GetEnvelope(MediaItem_Take* take, int fxindex, int parameterindex, bool create)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope TakeFX_GetEnvelope(MediaItem_Take take, int fxindex, int parameterindex, bool create)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope env = reaper.TakeFX_GetEnvelope(MediaItem_Take take, integer fxindex, integer parameterindex, boolean create)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope env = RPR_TakeFX_GetEnvelope(MediaItem_Take take, Int fxindex, Int parameterindex, Boolean create)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
        </description>
        <retvals>
            TrackEnvelope env - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fxindex - 
            integer parameterindex - 
            boolean create - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetFloatingWindow</slug>
        <title>TakeFX_GetFloatingWindow</title>
        <functioncall prog_lang="cpp">HWND TakeFX_GetFloatingWindow(MediaItem_Take* take, int index)</functioncall>
        <functioncall prog_lang="eel">HWND TakeFX_GetFloatingWindow(MediaItem_Take take, int index)</functioncall>
        <functioncall prog_lang="lua">HWND hwnd = reaper.TakeFX_GetFloatingWindow(MediaItem_Take take, integer index)</functioncall>
        <functioncall prog_lang="python">HWND hwnd = RPR_TakeFX_GetFloatingWindow(MediaItem_Take take, Int index)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns HWND of floating window for effect index, if any
        </description>
        <retvals>
            HWND hwd - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer index - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetFormattedParamValue</slug>
        <title>TakeFX_GetFormattedParamValue</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetFormattedParamValue(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetFormattedParamValue(MediaItem_Take take, int fx, int param, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetFormattedParamValue(MediaItem_Take take, integer fx, integer param, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, String buf, Int buf_sz) = RPR_TakeFX_GetFormattedParamValue(take, fx, param, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
            string buf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetFXGUID</slug>
        <title>TakeFX_GetFXGUID</title>
        <functioncall prog_lang="cpp">GUID* TakeFX_GetFXGUID(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetFXGUID(#retguid, MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">string GUID = reaper.TakeFX_GetFXGUID(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">String GUID = RPR_TakeFX_GetFXGUID(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            string GUID - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetFXName</slug>
        <title>TakeFX_GetFXName</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetFXName(MediaItem_Take* take, int fx, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetFXName(MediaItem_Take take, int fx, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetFXName(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, String bufOut, Int bufOut_sz) = RPR_TakeFX_GetFXName(take, fx, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetIOSize</slug>
        <title>TakeFX_GetIOSize</title>
        <functioncall prog_lang="cpp">int TakeFX_GetIOSize(MediaItem_Take* take, int fx, int* inputPinsOut, int* outputPinsOut)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetIOSize(MediaItem_Take take, int fx, int &inputPins, int &outputPins)</functioncall>
        <functioncall prog_lang="lua">integer retval, integer inputPins, integer outputPins = reaper.TakeFX_GetIOSize(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int fx, Int inputPinsOut, Int outputPinsOut) = RPR_TakeFX_GetIOSize(take, fx, inputPinsOut, outputPinsOut)</functioncall>
        <requires>
            Reaper=6.43
        </requires>
        <description prog_lang="*">
            gets the number of input/output pins for FX if available, returns plug-in type or -1 on error
            
            0, "DX"
            1, "LV2"
            2, "JSFX"
            3, "VST"
            5, "AU"
            6, "Video Processor"
            7, "CLAP"
            8, "Container"
        </description>
        <retvals>
            integer retval - 
            integer inputPins - 
            integer outputPins - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - the following retvals and parameters are not optional anymore:
                        - CPP: inputPinsOut, outputPinsOut
                        - EEL2: inputPins, outputPins
                        - LUA: inputPins, outputPins
                        - Python: inputPinsOut, outputPinsOut
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetNamedConfigParm</slug>
        <title>TakeFX_GetNamedConfigParm</title>
        <functioncall prog_lang="cpp">bool retval = TakeFX_GetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">bool retval = TakeFX_GetNamedConfigParm(MediaItem_Take take, int fx, "parmname", #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetNamedConfigParm(MediaItem_Take take, integer fx, string parmname)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, String parmname, String bufOutNeedBig, Int bufOutNeedBig_sz) = RPR_TakeFX_GetNamedConfigParm(take, fx, parmname, bufOutNeedBig, bufOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=6.74
        </requires>
        <description prog_lang="*">
            gets plug-in specific named configuration value (returns true on success)
            
            Supported values for read:
              pdc : PDC latency
              in_pin_X : name of input pin X
              out_pin_X : name of output pin X
              fx_type : type string
              fx_ident : type-specific identifier
              fx_name : pre-aliased name
              GainReduction_dB : [ReaComp + other supported compressors]
              vst_chunk[_program] : base64-encoded VST-specific chunk.
              clap_chunk : base64-encoded CLAP-specific chunk.
              param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state
              param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state
              param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*
              param.X.mod.[active,baseline,visible] : parameter module global settings
              param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set
              param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)
              param.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only
              
              BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]
              THRESHOLD, CEILING, TRUEPEAK : [ReaLlmit]
              NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]
              ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE
              FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE
              MODE, RSMODE : [RS5k] general mode, resample mode
              VIDEO_CODE : [video processor] code
              
              force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence
              instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
              chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
              chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            string parmname - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.74 - added support for x,y coordinates of acs
          Reaper 6.72 - added support for autobypass, instance oversample shift, chain oversample shift and chain pdc-mode
          Reaper 6.71 - added support for parameter modulation/linking; vst/videoprocessor-data getting
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetNumParams</slug>
        <title>TakeFX_GetNumParams</title>
        <functioncall prog_lang="cpp">int TakeFX_GetNumParams(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetNumParams(MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TakeFX_GetNumParams(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TakeFX_GetNumParams(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetOpen</slug>
        <title>TakeFX_GetOpen</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetOpen(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetOpen(MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_GetOpen(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_GetOpen(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns true if this FX UI is open in the FX chain window or a floating window. See [TakeFX\_SetOpen](#TakeFX_SetOpen)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParam</slug>
        <title>TakeFX_GetParam</title>
        <functioncall prog_lang="cpp">double TakeFX_GetParam(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut)</functioncall>
        <functioncall prog_lang="eel">double TakeFX_GetParam(MediaItem_Take take, int fx, int param, &minval, &maxval)</functioncall>
        <functioncall prog_lang="lua">number retval, number minval, number maxval = reaper.TakeFX_GetParam(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Float retval, MediaItem_Take take, Int fx, Int param, Float minvalOut, Float maxvalOut) = RPR_TakeFX_GetParam(take, fx, param, minvalOut, maxvalOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            number retval - 
            number minval - 
            number maxval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParameterStepSizes</slug>
        <title>TakeFX_GetParameterStepSizes</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetParameterStepSizes(MediaItem_Take* take, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetParameterStepSizes(MediaItem_Take take, int fx, int param, &step, &smallstep, &largestep, bool &istoggle)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TakeFX_GetParameterStepSizes(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, Float stepOut, Float smallstepOut, Float largestepOut, Boolean istoggleOut) = RPR_TakeFX_GetParameterStepSizes(take, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
            number step - 
            number smallstep - 
            number largestep - 
            boolean istoggle - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParamEx</slug>
        <title>TakeFX_GetParamEx</title>
        <functioncall prog_lang="cpp">double TakeFX_GetParamEx(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)</functioncall>
        <functioncall prog_lang="eel">double TakeFX_GetParamEx(MediaItem_Take take, int fx, int param, &minval, &maxval, &midval)</functioncall>
        <functioncall prog_lang="lua">number retval, number minval, number maxval, number midval = reaper.TakeFX_GetParamEx(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Float retval, MediaItem_Take take, Int fx, Int param, Float minvalOut, Float maxvalOut, Float midvalOut) = RPR_TakeFX_GetParamEx(take, fx, param, minvalOut, maxvalOut, midvalOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            number retval - 
            number minval - 
            number maxval - 
            number midval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParamFromIdent</slug>
        <title>TakeFX_GetParamFromIdent</title>
        <functioncall prog_lang="cpp">int TakeFX_GetParamFromIdent(MediaItem_Take* take, int fx, const char* ident_str)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetParamFromIdent(MediaItem_Take take, int fx, "ident_str")</functioncall>
        <functioncall prog_lang="lua">integer param = reaper.TakeFX_GetParamFromIdent(MediaItem_Take take, integer fx, string ident_str)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TakeFX_GetParamFromIdent(MediaItem_Take take, Int fx, String ident_str)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            gets the parameter index from an identifying string (:wet, :bypass, or a string returned from GetParamIdent), or -1 if unknown.
        </description>
        <retvals>
            integer param - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            string ident_str - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParamIdent</slug>
        <title>TakeFX_GetParamIdent</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetParamIdent(MediaItem_Take* take, int fx, int param, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetParamIdent(MediaItem_Take take, int fx, int param, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetParamIdent(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, String bufOut, Int bufOut_sz) = RPR_TakeFX_GetParamIdent(take, fx, param, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            gets an identifying string for the parameter
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParamName</slug>
        <title>TakeFX_GetParamName</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetParamName(MediaItem_Take* take, int fx, int param, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetParamName(MediaItem_Take take, int fx, int param, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetParamName(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, String bufOut, Int bufOut_sz) = RPR_TakeFX_GetParamName(take, fx, param, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParamNormalized</slug>
        <title>TakeFX_GetParamNormalized</title>
        <functioncall prog_lang="cpp">double TakeFX_GetParamNormalized(MediaItem_Take* take, int fx, int param)</functioncall>
        <functioncall prog_lang="eel">double TakeFX_GetParamNormalized(MediaItem_Take take, int fx, int param)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TakeFX_GetParamNormalized(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TakeFX_GetParamNormalized(MediaItem_Take take, Int fx, Int param)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetPinMappings</slug>
        <title>TakeFX_GetPinMappings</title>
        <functioncall prog_lang="cpp">int TakeFX_GetPinMappings(MediaItem_Take* take, int fx, int isoutput, int pin, int* high32Out)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetPinMappings(MediaItem_Take take, int fx, int isoutput, int pin, int &high32)</functioncall>
        <functioncall prog_lang="lua">integer retval, integer high32 = reaper.TakeFX_GetPinMappings(MediaItem_Take take, integer fx, integer isoutput, integer pin)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int fx, Int isoutput, Int pin, Int high32Out) = RPR_TakeFX_GetPinMappings(take, fx, isoutput, pin, high32Out)</functioncall>
        <requires>
            Reaper=6.43
        </requires>
        <description prog_lang="*">
            gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits
        </description>
        <retvals>
            integer retval - 
            integer high32 - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer is - 
            integer pin - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - the following retvals and parameters aren't optional anymore
                        - CPP: high32Out
                        - EEL2: high32
                        - Lua: high32
                        - Python: high32Out
        </changelog>
    </US_DocBloc>
 
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetPreset</slug>
        <title>TakeFX_GetPreset</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetPreset(MediaItem_Take* take, int fx, char* presetnameOut, int presetnameOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetPreset(MediaItem_Take take, int fx, #presetname)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string presetname = reaper.TakeFX_GetPreset(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, String presetnameOut, Int presetnameOut_sz) = RPR_TakeFX_GetPreset(take, fx, presetnameOut, presetnameOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). 
            
            Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). 
            
            See TakeFX_SetPreset
        </description>
        <retvals>
            boolean retval - true, the fx-parameters match preset; false, the fx-parameters do not match preset(see description for more details)
            string presetname - the name of the preset
        </retvals>
        <parameters>
            MediaItem_Take take - the take, of whose fx you want to get the presetname
            integer fx - the index of the fx, whose indexname you want to get; 0-based
        </parameters>
        <linked_to desc="see also:">
            Reaper:TakeFX_SetPreset
                   sets the preset of a take-fx
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetPresetIndex</slug>
        <title>TakeFX_GetPresetIndex</title>
        <functioncall prog_lang="cpp">int TakeFX_GetPresetIndex(MediaItem_Take* take, int fx, int* numberOfPresetsOut)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetPresetIndex(MediaItem_Take take, int fx, int &numberOfPresets)</functioncall>
        <functioncall prog_lang="lua">integer retval, integer numberOfPresets = reaper.TakeFX_GetPresetIndex(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int fx, Int numberOfPresetsOut) = RPR_TakeFX_GetPresetIndex(take, fx, numberOfPresetsOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See [TakeFX\_SetPresetByIndex](#TakeFX_SetPresetByIndex)
        </description>
        <retvals>
            integer retval - 
            integer numberOfPresets - 
        </retvals>
        <parameters>
            MediaItem take - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetUserPresetFilename</slug>
        <title>TakeFX_GetUserPresetFilename</title>
        <functioncall prog_lang="cpp">void TakeFX_GetUserPresetFilename(MediaItem_Take* take, int fx, char* fnOut, int fnOut_sz)</functioncall>
        <functioncall prog_lang="eel">TakeFX_GetUserPresetFilename(MediaItem_Take take, int fx, #fn)</functioncall>
        <functioncall prog_lang="lua">string fn = reaper.TakeFX_GetUserPresetFilename(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">(MediaItem_Take take, Int fx, String fnOut, Int fnOut_sz) = RPR_TakeFX_GetUserPresetFilename(take, fx, fnOut, fnOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            string fn - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_NavigatePresets</slug>
        <title>TakeFX_NavigatePresets</title>
        <functioncall prog_lang="cpp">bool TakeFX_NavigatePresets(MediaItem_Take* take, int fx, int presetmove)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_NavigatePresets(MediaItem_Take take, int fx, int presetmove)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_NavigatePresets(MediaItem_Take take, integer fx, integer presetmove)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_NavigatePresets(MediaItem_Take take, Int fx, Int presetmove)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer presetmove - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetEnabled</slug>
        <title>TakeFX_SetEnabled</title>
        <functioncall prog_lang="cpp">void TakeFX_SetEnabled(MediaItem_Take* take, int fx, bool enabled)</functioncall>
        <functioncall prog_lang="eel">TakeFX_SetEnabled(MediaItem_Take take, int fx, bool enabled)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_SetEnabled(MediaItem_Take take, integer fx, boolean enabled)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_SetEnabled(MediaItem_Take take, Int fx, Boolean enabled)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TakeFX\_GetEnabled](#TakeFX_GetEnabled)
        </description>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            boolean enabled - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetNamedConfigParm</slug>
        <title>TakeFX_SetNamedConfigParm</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, const char* value)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetNamedConfigParm(MediaItem_Take take, int fx, "parmname", "value")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_SetNamedConfigParm(MediaItem_Take take, integer fx, string parmname, string value)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_SetNamedConfigParm(MediaItem_Take take, Int fx, String parmname, String value)</functioncall>
        <requires>
            Reaper=6.74
        </requires>
        <description prog_lang="*">
            sets plug-in specific named configuration value (returns true on success).

            Support values for write:

            vst_chunk[_program] : base64-encoded VST-specific chunk.
            clap_chunk : base64-encoded CLAP-specific chunk.
            param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state
            param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state
            param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*
            param.X.mod.[active,baseline,visible] : parameter module global settings
            param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set
            param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)
            param.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only
            
            BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]
            THRESHOLD, CEILING, TRUEPEAK : [ReaLlmit]
            NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]
            ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE
            FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE
            MODE, RSMODE : [RS5k] general mode, resample mode
            VIDEO_CODE : [video processor] code
            
            force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence
            instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
            chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
            chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            string parmname - 
            string value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.74 - added support for x,y coordinates of acs
          Reaper 6.72 - added support for autobypass, instance oversample shift, chain oversample shift and chain pdc-mode
          Reaper 6.71 - added support for parameter modulation/linking; vst/videoprocessor-data setting
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetOpen</slug>
        <title>TakeFX_SetOpen</title>
        <functioncall prog_lang="cpp">void TakeFX_SetOpen(MediaItem_Take* take, int fx, bool open)</functioncall>
        <functioncall prog_lang="eel">TakeFX_SetOpen(MediaItem_Take take, int fx, bool open)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_SetOpen(MediaItem_Take take, integer fx, boolean open)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_SetOpen(MediaItem_Take take, Int fx, Boolean open)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Open this FX UI. See [TakeFX\_GetOpen](#TakeFX_GetOpen)
        </description>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            boolean open - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetParam</slug>
        <title>TakeFX_SetParam</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetParam(MediaItem_Take* take, int fx, int param, double val)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetParam(MediaItem_Take take, int fx, int param, val)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_SetParam(MediaItem_Take take, integer fx, integer param, number val)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_SetParam(MediaItem_Take take, Int fx, Int param, Float val)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
            number val - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetParamNormalized</slug>
        <title>TakeFX_SetParamNormalized</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetParamNormalized(MediaItem_Take* take, int fx, int param, double value)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetParamNormalized(MediaItem_Take take, int fx, int param, value)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_SetParamNormalized(MediaItem_Take take, integer fx, integer param, number value)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_SetParamNormalized(MediaItem_Take take, Int fx, Int param, Float value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer param - 
            number value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetPinMappings</slug>
        <title>TakeFX_SetPinMappings</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetPinMappings(MediaItem_Take* tk, int fx, int isOutput, int pin, int low32bits, int hi32bits)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetPinMappings(MediaItem_Take tk, int fx, int is, int pin, int low32bits, int hi32bits)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_SetPinMappings(MediaItem_Take tk, integer fx, integer is, integer pin, integer low32bits, integer hi32bits)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_SetPinMappings(MediaItem_Take tk, Int fx, Int isOutput, Int pin, Int low32bits, Int hi32bits)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take tk - 
            integer fx - 
            integer is - 
            integer pin - 
            integer low32bits - 
            integer hi32bits - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetPreset</slug>
        <title>TakeFX_SetPreset</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetPreset(MediaItem_Take* take, int fx, const char* presetname)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetPreset(MediaItem_Take take, int fx, "presetname")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_SetPreset(MediaItem_Take take, integer fx, string presetname)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_SetPreset(MediaItem_Take take, Int fx, String presetname)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See [TakeFX\_GetPreset](#TakeFX_GetPreset).

            presetname is case-sensitive.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            string presetname - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetPresetByIndex</slug>
        <title>TakeFX_SetPresetByIndex</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetPresetByIndex(MediaItem_Take* take, int fx, int idx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetPresetByIndex(MediaItem_Take take, int fx, int idx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_SetPresetByIndex(MediaItem_Take take, integer fx, integer idx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_SetPresetByIndex(MediaItem_Take take, Int fx, Int idx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See [TakeFX\_GetPresetIndex](#TakeFX_GetPresetIndex).
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            integer idx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_Show</slug>
        <title>TakeFX_Show</title>
        <functioncall prog_lang="cpp">void TakeFX_Show(MediaItem_Take* take, int index, int showFlag)</functioncall>
        <functioncall prog_lang="eel">TakeFX_Show(MediaItem_Take take, int index, int showFlag)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_Show(MediaItem_Take take, integer index, integer showFlag)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_Show(MediaItem_Take take, Int index, Int showFlag)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)
        </description>
        <parameters>
            MediaItem_Take take - 
            integer index - 
            integer showFlag - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeIsMIDI</slug>
        <title>TakeIsMIDI</title>
        <functioncall prog_lang="cpp">bool TakeIsMIDI(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">bool TakeIsMIDI(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeIsMIDI(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeIsMIDI(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Returns true if the active take contains MIDI.
        </description>
        <retvals>
            boolean retval - true, MediaItem_Take contains MIDI; false, MediaItem_Take doesn't contain MIDI
        </retvals>
        <parameters>
            MediaItem_Take take - the MediaItem_Take, that you want to check for MIDI-elements
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>midimanagement, take, item, check</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ThemeLayout_GetLayout</slug>
        <title>ThemeLayout_GetLayout</title>
        <functioncall prog_lang="cpp">bool ThemeLayout_GetLayout(const char* section, int idx, char* nameOut, int nameOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool ThemeLayout_GetLayout("section", int idx, #name)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string name = reaper.ThemeLayout_GetLayout(string section, integer idx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String section, Int idx, String nameOut, Int nameOut_sz) = RPR_ThemeLayout_GetLayout(section, idx, nameOut, nameOut_sz)</functioncall>
        <requires>
            Reaper=6.00
        </requires>
        <description>
            Gets theme layout information. 

                section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. 
                idx can be 
                    -1 to query the current value, 
                    -2 to get the description of the section (if not global), 
                    -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. 

             returns false if failed.
        </description>
        <retvals>
            boolean retval - 
            string name - 
        </retvals>
        <parameters>
            string section - 
            integer idx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags>Theme Management, get, layout, theme</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ThemeLayout_GetParameter</slug>
        <title>ThemeLayout_GetParameter</title>
        <functioncall prog_lang="cpp">const char* ThemeLayout_GetParameter(int wp, const char** descOutOptional, int* valueOutOptional, int* defValueOutOptional, int* minValueOutOptional, int* maxValueOutOptional)</functioncall>
        <functioncall prog_lang="eel">bool ThemeLayout_GetParameter(#retval, int wp, optional #desc, optional int &value, optional int &defValue, optional int &minValue, optional int &maxValue)</functioncall>
        <functioncall prog_lang="lua">string retval, optional string desc, optional integer value, optional integer defValue, optional integer minValue, optional integer maxValue = reaper.ThemeLayout_GetParameter(integer wp)</functioncall>
        <functioncall prog_lang="python">(String retval, Int wp, String descOutOptional, Int valueOutOptional, Int defValueOutOptional, Int minValueOutOptional, Int maxValueOutOptional) = RPR_ThemeLayout_GetParameter(wp, descOutOptional, valueOutOptional, defValueOutOptional, minValueOutOptional, maxValueOutOptional)</functioncall>
        <requires>
            Reaper=5.972
        </requires>
        <description>
            returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.
        </description>
        <retvals>
            string retval - 
            optional string desc - 
            optional integer value - 
            optional integer defValue - 
            optional integer minValue - 
            optional integer maxValue - 
        </retvals>
        <parameters>
            integer wp - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags>Theme Management, get, layout, theme, parameter</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ThemeLayout_RefreshAll</slug>
        <title>ThemeLayout_RefreshAll</title>
        <functioncall prog_lang="cpp">void ThemeLayout_RefreshAll()</functioncall>
        <functioncall prog_lang="eel">ThemeLayout_RefreshAll()</functioncall>
        <functioncall prog_lang="lua">reaper.ThemeLayout_RefreshAll()</functioncall>
        <functioncall prog_lang="python">RPR_ThemeLayout_RefreshAll()</functioncall>
        <requires>
            Reaper=5.972
        </requires>
        <description>
            Refreshes all layouts
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags>Theme Management, refresh, layout, theme</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ThemeLayout_SetLayout</slug>
        <title>ThemeLayout_SetLayout</title>
        <functioncall prog_lang="cpp">bool ThemeLayout_SetLayout(const char* section, const char* layout)</functioncall>
        <functioncall prog_lang="eel">bool ThemeLayout_SetLayout("section", " layout")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.ThemeLayout_SetLayout(string section, string layout)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_ThemeLayout_SetLayout(String section, String layout)</functioncall>
        <requires>
            Reaper=5.974
        </requires>
        <description>
            Sets theme layout override for a particular section 

            section can be 'global' or 'mcp' etc. 

            If setting global layout, prefix a ! to the layout string to clear any per-layout overrides. 

            Returns false if failed.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            string section - 
            string layout - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags>Theme Management, set, layout, theme</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ThemeLayout_SetParameter</slug>
        <title>ThemeLayout_SetParameter</title>
        <functioncall prog_lang="cpp">bool ThemeLayout_SetParameter(int wp, int value, bool persist)</functioncall>
        <functioncall prog_lang="eel">bool ThemeLayout_SetParameter(int wp, int value, bool persist)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.ThemeLayout_SetParameter(integer wp, integer value, boolean persist)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_ThemeLayout_SetParameter(Int wp, Int value, Boolean persist)</functioncall>
        <requires>
            Reaper=5.972
        </requires>
        <description>
            sets theme layout parameter to value. persist=true in order to have change loaded on next theme load. 

            note that the caller should update layouts via ??? to make changes visible.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            integer wp - 
            integer value - 
            boolean persist - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags>Theme Management, set, layout, theme, parameter</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>time_precise</slug>
        <title>time_precise</title>
        <functioncall prog_lang="cpp">double time_precise()</functioncall>
        <functioncall prog_lang="lua">number time_stamp = reaper.time_precise()</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_time_precise()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1">
            Gets a precise system timestamp in seconds.

            For EEL-programming, see [eel\_time\_precise](#eel_time_precise).
        </description>
        <retvals>
            number time_stamp - the system-timestamp in seconds with a precision of 7 digits
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>helperfunctions, time, precise</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_beatsToTime</slug>
        <title>TimeMap2_beatsToTime</title>
        <functioncall prog_lang="cpp">double TimeMap2_beatsToTime(ReaProject* proj, double tpos, const int* measuresInOptional)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_beatsToTime(ReaProject proj, tpos, optional int measuresIn)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TimeMap2_beatsToTime(ReaProject proj, number tpos, optional integer measuresIn)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TimeMap2_beatsToTime(ReaProject proj, Float tpos, const int measuresInOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number tpos - 
            optional integer measuresIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_GetDividedBpmAtTime</slug>
        <title>TimeMap2_GetDividedBpmAtTime</title>
        <functioncall prog_lang="cpp">double TimeMap2_GetDividedBpmAtTime(ReaProject* proj, double time)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_GetDividedBpmAtTime(ReaProject proj, time)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TimeMap2_GetDividedBpmAtTime(ReaProject proj, number time)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TimeMap2_GetDividedBpmAtTime(ReaProject proj, Float time)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number time - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_GetNextChangeTime</slug>
        <title>TimeMap2_GetNextChangeTime</title>
        <functioncall prog_lang="cpp">double TimeMap2_GetNextChangeTime(ReaProject* proj, double time)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_GetNextChangeTime(ReaProject proj, time)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TimeMap2_GetNextChangeTime(ReaProject proj, number time)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TimeMap2_GetNextChangeTime(ReaProject proj, Float time)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            when does the next time map (tempo or time sig) change occur
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number time - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_QNToTime</slug>
        <title>TimeMap2_QNToTime</title>
        <functioncall prog_lang="cpp">double TimeMap2_QNToTime(ReaProject* proj, double qn)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_QNToTime(ReaProject proj, qn)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TimeMap2_QNToTime(ReaProject proj, number qn)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TimeMap2_QNToTime(ReaProject proj, Float qn)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            converts project QN position to time.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number qn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_timeToBeats</slug>
        <title>TimeMap2_timeToBeats</title>
        <functioncall prog_lang="cpp">double TimeMap2_timeToBeats(ReaProject* proj, double tpos, int* measuresOutOptional, int* cmlOutOptional, double* fullbeatsOutOptional, int* cdenomOutOptional)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_timeToBeats(ReaProject proj, tpos, optional int &measures, optional int &cml, optional &fullbeats, optional int &cdenom)</functioncall>
        <functioncall prog_lang="lua">number retval, optional integer measures, optional integer cml, optional number fullbeats, optional integer cdenom = reaper.TimeMap2_timeToBeats(ReaProject proj, number tpos)</functioncall>
        <functioncall prog_lang="python">(Float retval, ReaProject proj, Float tpos, Int measuresOutOptional, Int cmlOutOptional, Float fullbeatsOutOptional, Int cdenomOutOptional) = RPR_TimeMap2_timeToBeats(proj, tpos, measuresOutOptional, cmlOutOptional, fullbeatsOutOptional, cdenomOutOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            convert a time into beats.
            if measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.
            if cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)
            if fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).
            if cdenom is non-NULL, will be set to the current time signature denominator.
        </description>
        <retvals>
            number retval - 
            optional integer measures - 
            optional integer cml - 
            optional number fullbeats - 
            optional integer cdenom - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number tpos - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_timeToQN</slug>
        <title>TimeMap2_timeToQN</title>
        <functioncall prog_lang="cpp">double TimeMap2_timeToQN(ReaProject* proj, double tpos)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_timeToQN(ReaProject proj, tpos)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TimeMap2_timeToQN(ReaProject proj, number tpos)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TimeMap2_timeToQN(ReaProject proj, Float tpos)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            converts project time position to QN position.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number tpos - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_curFrameRate</slug>
        <title>TimeMap_curFrameRate</title>
        <functioncall prog_lang="cpp">double TimeMap_curFrameRate(ReaProject* proj, bool* dropFrameOut)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_curFrameRate(ReaProject proj, bool &dropFrame)</functioncall>
        <functioncall prog_lang="lua">number retval, boolean dropFrame = reaper.TimeMap_curFrameRate(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">(Float retval, ReaProject proj, Boolean dropFrameOut) = RPR_TimeMap_curFrameRate(proj, dropFrameOut)</functioncall>
        <requires>
            Reaper=6.43
        </requires>
        <description prog_lang="*">
            Gets project framerate, and optionally whether it is drop-frame timecode
        </description>
        <retvals>
            number retval - 
            boolean dropFrame - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - the following retvals and parameters aren't optional anymore:
                        - CPP: dropFrameOut
                        - EEL2: dropFrame
                        - Lua: dropFrame
                        - Python: dropFrameOut
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_GetDividedBpmAtTime</slug>
        <title>TimeMap_GetDividedBpmAtTime</title>
        <functioncall prog_lang="cpp">double TimeMap_GetDividedBpmAtTime(double time)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_GetDividedBpmAtTime(time)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TimeMap_GetDividedBpmAtTime(number time)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TimeMap_GetDividedBpmAtTime(Float time)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            number time - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_GetMeasureInfo</slug>
        <title>TimeMap_GetMeasureInfo</title>
        <functioncall prog_lang="cpp">double TimeMap_GetMeasureInfo(ReaProject* proj, int measure, double* qn_startOut, double* qn_endOut, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_GetMeasureInfo(ReaProject proj, int measure, &qn_start, &qn_end, int &timesig_num, int &timesig_denom, &tempo)</functioncall>
        <functioncall prog_lang="lua">number retval, number qn_start, number qn_end, integer timesig_num, integer timesig_denom, number tempo = reaper.TimeMap_GetMeasureInfo(ReaProject proj, integer measure)</functioncall>
        <functioncall prog_lang="python">(Float retval, ReaProject proj, Int measure, Float qn_startOut, Float qn_endOut, Int timesig_numOut, Int timesig_denomOut, Float tempoOut) = RPR_TimeMap_GetMeasureInfo(proj, measure, qn_startOut, qn_endOut, timesig_numOut, timesig_denomOut, tempoOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.
        </description>
        <retvals>
            number retval - 
            number qn_start - 
            number qn_end - 
            integer timesig_num - 
            integer timesig_denom - 
            number tempo - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer measure - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_GetMetronomePattern</slug>
        <title>TimeMap_GetMetronomePattern</title>
        <functioncall prog_lang="cpp">int TimeMap_GetMetronomePattern(ReaProject* proj, double time, char* pattern, int pattern_sz)</functioncall>
        <functioncall prog_lang="eel">int TimeMap_GetMetronomePattern(ReaProject proj, time, #pattern)</functioncall>
        <functioncall prog_lang="lua">integer retval, string pattern = reaper.TimeMap_GetMetronomePattern(ReaProject proj, number time, string pattern)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, Float time, String pattern, Int pattern_sz) = RPR_TimeMap_GetMetronomePattern(proj, time, pattern, pattern_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be "1221222". The length of the string is the time signature numerator, and the function returns the time signature denominator.
        </description>
        <retvals>
            boolean retval - 
            string pattern - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number time - 
            string pattern - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_GetTimeSigAtTime</slug>
        <title>TimeMap_GetTimeSigAtTime</title>
        <functioncall prog_lang="cpp">void TimeMap_GetTimeSigAtTime(ReaProject* proj, double time, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)</functioncall>
        <functioncall prog_lang="eel">TimeMap_GetTimeSigAtTime(ReaProject proj, time, int &timesig_num, int &timesig_denom, &tempo)</functioncall>
        <functioncall prog_lang="lua">integer timesig_num, integer timesig_denom, number tempo = reaper.TimeMap_GetTimeSigAtTime(ReaProject proj, number time)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Float time, Int timesig_numOut, Int timesig_denomOut, Float tempoOut) = RPR_TimeMap_GetTimeSigAtTime(proj, time, timesig_numOut, timesig_denomOut, tempoOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            get the effective time signature and tempo
        </description>
        <retvals>
            integer timesig_num - 
            integer timesig_denom - 
            number tempo - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number time - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_QNToMeasures</slug>
        <title>TimeMap_QNToMeasures</title>
        <functioncall prog_lang="cpp">int TimeMap_QNToMeasures(ReaProject* proj, double qn, double* qnMeasureStartOutOptional, double* qnMeasureEndOutOptional)</functioncall>
        <functioncall prog_lang="eel">int TimeMap_QNToMeasures(ReaProject proj, qn, optional &qnMeasureStart, optional &qnMeasureEnd)</functioncall>
        <functioncall prog_lang="lua">integer retval, optional number qnMeasureStart, optional number qnMeasureEnd = reaper.TimeMap_QNToMeasures(ReaProject proj, number qn)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, Float qn, Float qnMeasureStartOutOptional, Float qnMeasureEndOutOptional) = RPR_TimeMap_QNToMeasures(proj, qn, qnMeasureStartOutOptional, qnMeasureEndOutOptional)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Find which measure the given QN position falls in.
        </description>
        <retvals>
            integer retval - 
            optional number qnMeasureStart - 
            optional number qnMeasureEnd - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number qn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_QNToTime</slug>
        <title>TimeMap_QNToTime</title>
        <functioncall prog_lang="cpp">double TimeMap_QNToTime(double qn)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_QNToTime(qn)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TimeMap_QNToTime(number qn)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TimeMap_QNToTime(Float qn)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            converts project QN position to time.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            number qn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_QNToTime_abs</slug>
        <title>TimeMap_QNToTime_abs</title>
        <functioncall prog_lang="cpp">double TimeMap_QNToTime_abs(ReaProject* proj, double qn)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_QNToTime_abs(ReaProject proj, qn)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TimeMap_QNToTime_abs(ReaProject proj, number qn)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TimeMap_QNToTime_abs(ReaProject proj, Float qn)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See [TimeMap2\_QNToTime](#TimeMap2_QNToTime)
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number qn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_timeToQN</slug>
        <title>TimeMap_timeToQN</title>
        <functioncall prog_lang="cpp">double TimeMap_timeToQN(double tpos)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_timeToQN(tpos)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TimeMap_timeToQN(number tpos)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TimeMap_timeToQN(Float tpos)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            converts project QN position to time.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            number tpos - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_timeToQN_abs</slug>
        <title>TimeMap_timeToQN_abs</title>
        <functioncall prog_lang="cpp">double TimeMap_timeToQN_abs(ReaProject* proj, double tpos)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_timeToQN_abs(ReaProject proj, tpos)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TimeMap_timeToQN_abs(ReaProject proj, number tpos)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TimeMap_timeToQN_abs(ReaProject proj, Float tpos)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See [TimeMap2\_timeToQN](#TimeMap2_timeToQN)
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number tpos - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ToggleTrackSendUIMute</slug>
        <title>ToggleTrackSendUIMute</title>
        <functioncall prog_lang="cpp">bool ToggleTrackSendUIMute(MediaTrack* track, int send_idx)</functioncall>
        <functioncall prog_lang="eel">bool ToggleTrackSendUIMute(MediaTrack track, int send_idx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.ToggleTrackSendUIMute(MediaTrack track, integer send_idx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_ToggleTrackSendUIMute(MediaTrack track, Int send_idx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer send_idx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Track_GetPeakHoldDB</slug>
        <title>Track_GetPeakHoldDB</title>
        <functioncall prog_lang="cpp">double Track_GetPeakHoldDB(MediaTrack* track, int channel, bool clear)</functioncall>
        <functioncall prog_lang="eel">double Track_GetPeakHoldDB(MediaTrack track, int channel, bool clear)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.Track_GetPeakHoldDB(MediaTrack track, integer channel, boolean clear)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_Track_GetPeakHoldDB(MediaTrack track, Int channel, Boolean clear)</functioncall>
        <requires>
            Reaper=6.35
        </requires>
        <description prog_lang="*">
            Returns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc). If clear is set, clears the meter hold. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer channel - 
            boolean clear - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Track_GetPeakInfo</slug>
        <title>Track_GetPeakInfo</title>
        <functioncall prog_lang="cpp">double Track_GetPeakInfo(MediaTrack* track, int channel)</functioncall>
        <functioncall prog_lang="eel">double Track_GetPeakInfo(MediaTrack track, int channel)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.Track_GetPeakInfo(MediaTrack track, integer channel)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_Track_GetPeakInfo(MediaTrack track, Int channel)</functioncall>
        <requires>
            Reaper=6.35
        </requires>
        <description prog_lang="*">
            Returns peak meter value (1.0=+0dB, 0.0=-inf) for channel. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer channel - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackCtl_SetToolTip</slug>
        <title>TrackCtl_SetToolTip</title>
        <functioncall prog_lang="cpp">void TrackCtl_SetToolTip(const char* fmt, int xpos, int ypos, bool topmost)</functioncall>
        <functioncall prog_lang="eel">TrackCtl_SetToolTip("fmt", int xpos, int ypos, bool topmost)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackCtl_SetToolTip(string fmt, integer xpos, integer ypos, boolean topmost)</functioncall>
        <functioncall prog_lang="python">RPR_TrackCtl_SetToolTip(String fmt, Int xpos, Int ypos, Boolean topmost)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Displays tooltip at location, or removes if empty string.

            Only one tooltip can be shown, means, a new tooltip removes the previous one.
        </description>
        <parameters>
            string fmt - the message, to be shown as tooltip; empty string removes tooltip
            integer xpos - horizontal position in pixels
            integer ypos - vertical position in pixels
            boolean topmost - true, puts tooltip on top of all windows of the operating system; 
                            - false, tooltip will only be shown within Reaper's windows
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>userinterface, tooltip, message, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_AddByName</slug>
        <title>TrackFX_AddByName</title>
        <functioncall prog_lang="cpp">int TrackFX_AddByName(MediaTrack* track, const char* fxname, bool recFX, int instantiate)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_AddByName(MediaTrack track, "fxname", bool recFX, int instantiate)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TrackFX_AddByName(MediaTrack track, string fxname, boolean recFX, integer instantiate)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TrackFX_AddByName(MediaTrack track, String fxname, Boolean recFX, Int instantiate)</functioncall>
        <requires>
            Reaper=6.72
        </requires>
        <description prog_lang="*">
            Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). 

            Specify a negative value for instantiate to always create a new effect, 
            0 to only query the first instance of an effect, or a positive value to add an instance if one is not found.

            Returns -1 on failure or the new position in chain on success.
        </description>
        <retvals>
            integer retval - the index of the position of the new fx; -1, in case of an error
        </retvals>
        <parameters>
            MediaTrack track - the track, into whose FXChain you want to add a new FX; for inputFX(monitoring FX), this must be the master track + recFX==true
            string fxname - the name of the fx/instrument-plugin
            boolean recFX - true, add the fx to the inputFX(only when track=master track); false, add it to track
            integer instantiate - negative, always create this new fx; positive, create the fx, if it does not yet exist; 0, query position of the first fx with that name
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags>fxmanagement, add, track fx, input fx</tags>
        <changelog>
          Reaper 6.72 - improve JSFX name matching in TrackFX_AddByName() [p=2621360] [p=2622666]
          Reaper 6.70 - improve behavior with Track/TakeFX_AddByName() for JSFX [t=271878]
          Reaper 6.69 - fix TrackFX_AddByName with only VST2-UID specified
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_CopyToTrack</slug>
        <title>TrackFX_CopyToTrack</title>
        <functioncall prog_lang="cpp">void TrackFX_CopyToTrack(MediaTrack* src_track, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="eel">TrackFX_CopyToTrack(MediaTrack src_track, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_CopyToTrack(MediaTrack src_track, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_CopyToTrack(MediaTrack src_track, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description prog_lang="*">
            Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX. 

            Note:
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
            Add 0x1000000 to the fx-indices to address monitoringFX/rec-inputFX.
        </description>
        <parameters>
            MediaTrack src_track - the source-track, whose fx you want to copy; use master-track to address inputfx
            Int src_fx - the index of the fx(0-based); add 0x1000000 to use it for inputfx
            MediaTrack dest_track - the destination-track, into which you want to paste/insert the fx; use master-track to address inputfx
            Int dest_fx - the index of the fx(0-based); add 0x1000000 to use it for inputfx
            Boolean is_move - true, move the fx; false, just copy the fx as new fx to the new position
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_CopyToTake</slug>
        <title>TrackFX_CopyToTake</title>
        <functioncall prog_lang="cpp">void TrackFX_CopyToTake(MediaTrack* src_track, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="eel">TrackFX_CopyToTake(MediaTrack src_track, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_CopyToTake(MediaTrack src_track, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_CopyToTake(MediaTrack src_track, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description prog_lang="*">
            Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX. 

            Note:
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
            Add 0x1000000 to the fx-indices to address monitoringFX/rec-inputFX.
        </description>
        <parameters>
            MediaTrack src_track - the source-track, whose fx you want to copy; use master-track to address inputfx
            Int src_fx - the index of the fx(0-based); add 0x1000000 to use it for inputfx
            MediaItem_Take dest_take - the destination-take, into which you want to paste/insert the fx
            Int dest_fx - the index of the fx(0-based)
            Boolean is_move - true, move the fx; false, just copy the fx as new fx to the new position
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_EndParamEdit</slug>
        <title>TrackFX_EndParamEdit</title>
        <functioncall prog_lang="cpp">bool TrackFX_EndParamEdit(MediaTrack* track, int fx, int param)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_EndParamEdit(MediaTrack track, int fx, int param)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_EndParamEdit(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_EndParamEdit(MediaTrack track, Int fx, Int param)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - true, setting value was successful; false, setting value was unsuccessful
        </retvals>
        <parameters>
            MediaTrack track - the track, of which you want to set an fx's parameter editing ended
            integer fx - the index of the fx; ass 0x1000000 to address rec-input-fx/monitoringfx
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_FormatParamValue</slug>
        <title>TrackFX_FormatParamValue</title>
        <functioncall prog_lang="cpp">bool TrackFX_FormatParamValue(MediaTrack* track, int fx, int param, double val, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_FormatParamValue(MediaTrack track, int fx, int param, val, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_FormatParamValue(MediaTrack track, integer fx, integer param, number val)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, Float val, String bufOut, Int bufOut_sz) = RPR_TrackFX_FormatParamValue(track, fx, param, val, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.81
        </requires>
        <description prog_lang="*">
            returns a formatted version of the currently set parameter-value.

            Note: only works with FX that support Cockos VST extensions.

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.

            returns false in case of an error
        </description>
        <retvals>
            boolean retval - true, parameter can be retrieved; false, an error occured(e.g. no such fx)
            string buf - the formatted parameter value
        </retvals> 
        <parameters>
            MediaTrack track - the track, which contains the fx; use master-track if you want to address input-fx(see fx)
            integer fx - the index of the fx(0-based); add 0x1000000 to use inputFX(only with track=mastertrack)
            integer param - the parameter, whose format you want to apply to the value
            number val - a value, which shall be formatted accordingly
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.81 - fix inconsistent rounding for TrackFX_FormatParamValue on bypass envelopes
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_FormatParamValueNormalized</slug>
        <title>TrackFX_FormatParamValueNormalized</title>
        <functioncall prog_lang="cpp">bool TrackFX_FormatParamValueNormalized(MediaTrack* track, int fx, int param, double value, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_FormatParamValueNormalized(MediaTrack track, int fx, int param, value, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_FormatParamValueNormalized(MediaTrack track, integer fx, integer param, number value, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, Float value, String buf, Int buf_sz) = RPR_TrackFX_FormatParamValueNormalized(track, fx, param, value, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns a formatted version of the currently set parameter-value and normalizes it.

            Note: only works with FX that support Cockos VST extensions.

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.

            returns false in case of an error
        </description>
        <retvals>
            boolean retval - true, parameter can be retrieved; false, an error occured(e.g. no such fx)
            string buf - the formatted parameter value
        </retvals>
        <parameters>
            MediaTrack track - the track, which contains the fx; use master-track if you want to address input-fx(see fx)
            integer fx - the index of the fx(0-based); add 0x1000000 to use inputFX(only with track=mastertrack)
            integer param - the parameter, whose format you want to apply to the value
            number val - a value, which shall be formatted accordingly
            string buf - simply set this to ""
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetByName</slug>
        <title>TrackFX_GetByName</title>
        <functioncall prog_lang="cpp">int TrackFX_GetByName(MediaTrack* track, const char* fxname, bool instantiate)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetByName(MediaTrack track, "fxname", bool instantiate)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TrackFX_GetByName(MediaTrack track, string fxname, boolean instantiate)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TrackFX_GetByName(MediaTrack track, String fxname, Boolean instantiate)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See [TrackFX\_GetInstrument](#TrackFX_GetInstrument), [TrackFX\_GetEQ](#TrackFX_GetEQ). Deprecated in favor of TrackFX_AddByName.

            returns -1 in case of an error
        </description>
        <retvals>
            integer retval - the index of the first track FX with fxname
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, which may hold the fx
            string fxname - the name of the fx, whose first index-position you want to query
            boolean instantiate - true, add the fx, is it's not existing; false, just query
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetChainVisible</slug>
        <title>TrackFX_GetChainVisible</title>
        <functioncall prog_lang="cpp">int TrackFX_GetChainVisible(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetChainVisible(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TrackFX_GetChainVisible(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TrackFX_GetChainVisible(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
        </description>
        <retvals>
            integer retval - the current visibility/selected state of the FXChain:
                    - positive, the index of the selected fx(0-based)
                    - -1, hidden
                    - -2, visible but no effect inserted
        </retvals>
        <parameters>
            MediaTrack track - the track, whose FXChain-visibility you want to query
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetCount</slug>
        <title>TrackFX_GetCount</title>
        <functioncall prog_lang="cpp">int TrackFX_GetCount(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetCount(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TrackFX_GetCount(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TrackFX_GetCount(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns the number of trackfx in the FXChain of track
        </description>
        <retvals>
            integer retval - the number of fx in the FXChain of track
        </retvals>
        <parameters>
            MediaTrack track - the track, whose number of fx in the FXChain you want to count
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetEnabled</slug>
        <title>TrackFX_GetEnabled</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetEnabled(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetEnabled(MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_GetEnabled(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_GetEnabled(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            returns, if a certain FX in track is enabled

            See [TrackFX\_SetEnabled](#TrackFX_SetEnabled)

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.

            returns false in case of an error
        </description>
        <retvals>
            boolean retval - true, fx is enabled; false, fx is disabled or not existing
        </retvals>
        <parameters>
            MediaTrack track - the track, whose fx-enabled-state you want to query; use master-track to query inputFX(see fx)
            integer fx - the index of the fx, whose enabled-state you want to query(0-based); add 0x1000000 to query inputFX
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetEQ</slug>
        <title>TrackFX_GetEQ</title>
        <functioncall prog_lang="cpp">int TrackFX_GetEQ(MediaTrack* track, bool instantiate)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetEQ(MediaTrack track, bool instantiate)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TrackFX_GetEQ(MediaTrack track, boolean instantiate)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TrackFX_GetEQ(MediaTrack track, Boolean instantiate)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See [TrackFX\_GetInstrument](#TrackFX_GetInstrument), [TrackFX\_GetByName](#TrackFX_GetByName).

            returns -1 if no ReaEQ is available.
        </description>
        <retvals>
            integer retval - the index of first ReaEQ in the FXChain; -1, if no ReaEQ is available
        </retvals>
        <parameters>
            MediaTrack track - the track, whose first ReaEQ-instance-index you want to query
            boolean instantiate - true, add ReaEQ if not existing yet; false, just query its position
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetEQBandEnabled</slug>
        <title>TrackFX_GetEQBandEnabled</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetEQBandEnabled(MediaTrack* track, int fx, int bandtype, int bandidx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetEQBandEnabled(MediaTrack track, int fx, int bandtype, int bandidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_GetEQBandEnabled(MediaTrack track, integer fx, integer bandtype, integer bandidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_GetEQBandEnabled(MediaTrack track, Int fx, Int bandtype, Int bandidx)</functioncall>
        <requires>
            Reaper=6.44
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns true if the EQ band is enabled.
            Returns false if the band is disabled, or if track/fxidx is not ReaEQ.
            Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.
            Bandidx:(ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.

            See [TrackFX\_GetEQ](#TrackFX_GetEQ), [TrackFX\_GetEQParam](#TrackFX_GetEQParam), [TrackFX\_SetEQParam](#TrackFX_SetEQParam), [TrackFX\_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).
        </description>
        <retvals>
            boolean retval - true, if the EQ band is enabled; false, if the EQ band is disabled
        </retvals>
        <parameters>
            MediaTrack track - the track, whose ReaEQ-instance-enabledstate you want to query
            integer fx - the index of the fx in the FXChain, that is the ReaEQ-instance in question
            integer bandtype - -1, master gain;
                             - 0, hipass
                             - 1, loshelf
                             - 2, band
                             - 3, notch, 
                             - 4, hishelf
                             - 5, lopass
                             - 6, bandpass
                             - 7, parallel bandpass
            integer bandidx - (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - new bandtypes added, master gain(-1) and bandpass(6); bandidx is ignored by master gain
            Reaper 6.44 - new bandtypes added, parallel bandpass(7)
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetEQParam</slug>
        <title>TrackFX_GetEQParam</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetEQParam(MediaTrack* track, int fx, int paramidx, int* bandtypeOut, int* bandidxOut, int* paramtypeOut, double* normvalOut)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetEQParam(MediaTrack track, int fx, int paramidx, int &bandtype, int &bandidx, int &paramtype, &normval)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer bandtype, integer bandidx, integer paramtype, number normval = reaper.TrackFX_GetEQParam(MediaTrack track, integer fx, integer paramidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int paramidx, Int bandtypeOut, Int bandidxOut, Int paramtypeOut, Float normvalOut) = RPR_TrackFX_GetEQParam(track, fxidx, paramidx, bandtypeOut, bandidxOut, paramtypeOut, normvalOut)</functioncall>
        <requires>
            Reaper=6.44
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns false if track/fxidx is not ReaEQ.
            Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.
            Bandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
            Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.

            See [TrackFX\_GetEQ](#TrackFX_GetEQ), [TrackFX\_SetEQParam](#TrackFX_SetEQParam), [TrackFX\_GetEQBandEnabled](#TrackFX_GetEQBandEnabled), [TrackFX\_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).
        </description>
        <retvals>
            boolean retval - true, if it's a ReaEQ-instance; false, is not a ReaEQ-instance or in case of an error
            integer bandtype - -1, master gain;
                             - 0, hipass
                             - 1, loshelf
                             - 2, band
                             - 3, notch, 
                             - 4, hishelf
                             - 5, lopass
                             - 6, bandpass
                             - 7, parallel bandpass
            integer bandidx - 0, target first band matching bandtype; 1, target 2nd band matching bandtype, etc. 
            integer paramtype - 0, freq; 1, gain; 2, Q 
            number normval - the normalized value
        </retvals>
        <parameters>
            MediaTrack track - the track, whose ReaEQ-instance-attributes you want to get
            integer fx - the index of the fx; add 0x1000000 to address rec-input-fx/monitoringfx; 0-based
            integer paramidx - the parameter whose eq-states you want to retrieve; 0-based
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - new bandtypes added, bandpass(6)
            Reaper 6.44 - new bandtypes added, parallel bandpass(7)
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetFloatingWindow</slug>
        <title>TrackFX_GetFloatingWindow</title>
        <functioncall prog_lang="cpp">HWND TrackFX_GetFloatingWindow(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">HWND TrackFX_GetFloatingWindow(MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">HWND hwnd = reaper.TrackFX_GetFloatingWindow(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">HWND hwnd = RPR_TrackFX_GetFloatingWindow(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns HWND of floating window for effect index, if any

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            HWND hwnd - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetFormattedParamValue</slug>
        <title>TrackFX_GetFormattedParamValue</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetFormattedParamValue(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetFormattedParamValue(MediaTrack track, int fx, int param, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetFormattedParamValue(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, String bufOut, Int bufOut_sz) = RPR_TrackFX_GetFormattedParamValue(track, fx, param, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaItem track - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetFXGUID</slug>
        <title>TrackFX_GetFXGUID</title>
        <functioncall prog_lang="cpp">GUID* TrackFX_GetFXGUID(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetFXGUID(#retguid, MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">string GUID = reaper.TrackFX_GetFXGUID(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">String GUID = RPR_TrackFX_GetFXGUID(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
             string GUID - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetFXName</slug>
        <title>TrackFX_GetFXName</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetFXName(MediaTrack* track, int fx, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetFXName(MediaTrack track, int fx, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetFXName(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String bufOut, Int bufOut_sz) = RPR_TrackFX_GetFXName(track, fx, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetInstrument</slug>
        <title>TrackFX_GetInstrument</title>
        <functioncall prog_lang="cpp">int TrackFX_GetInstrument(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetInstrument(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TrackFX_GetInstrument(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TrackFX_GetInstrument(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See [TrackFX\_GetEQ](#TrackFX_GetEQ), [TrackFX\_GetByName](#TrackFX_GetByName).
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetIOSize</slug>
        <title>TrackFX_GetIOSize</title>
        <functioncall prog_lang="cpp">int TrackFX_GetIOSize(MediaTrack* track, int fx, int* inputPinsOut, int* outputPinsOut)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetIOSize(MediaTrack track, int fx, int &inputPins, int &outputPins)</functioncall>
        <functioncall prog_lang="lua">integer retval, integer inputPins, integer outputPins = reaper.TrackFX_GetIOSize(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaTrack track, Int fx, Int inputPinsOut, Int outputPinsOut) = RPR_TrackFX_GetIOSize(track, fx, inputPinsOut, outputPinsOut)</functioncall>
        <requires>
            Reaper=6.43
        </requires>
        <description prog_lang="*">
            gets the number of input/output pins for FX if available, returns plug-in type or -1 on error

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
            
            0, "DX"
            1, "LV2"
            2, "JSFX"
            3, "VST"
            5, "AU"
            6, "Video Processor"
            7, "CLAP"
            8, "Container"
        </description>
        <retvals>
            integer retval - 
            integer inputPins - 
            integer outputPins - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - the following retvals and parameters are not optional anymore
                        - CPP: inputPinsOut, outputPinsOut
                        - EEL2: inputPins, outputPins
                        - Lua: inputPins, outputPins
                        - Python: inputPinsOut, outputPinsOut
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetNamedConfigParm</slug>
        <title>TrackFX_GetNamedConfigParm</title>
        <functioncall prog_lang="cpp">bool retval = TrackFX_GetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">bool retval = TrackFX_GetNamedConfigParm(MediaTrack track, int fx, "parmname", #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetNamedConfigParm(MediaTrack track, integer fx, string parmname)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String parmname, String bufOutNeedBig, Int bufOutNeedBig_sz) = RPR_TrackFX_GetNamedConfigParm(track, fx, parmname, bufOutNeedBig, bufOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=6.79
        </requires>
        <description prog_lang="*">
            gets plug-in specific named configuration value (returns true on success). 
            
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.            

            Supported values for read:
              pdc : PDC latency
              in_pin_X : name of input pin X
              out_pin_X : name of output pin X
              fx_type : type string
              fx_ident : type-specific identifier
              fx_name : pre-aliased name
              GainReduction_dB : [ReaComp + other supported compressors]
              
              original_name : pre-renamed FX instance name
              renamed_name : renamed FX instance name (empty string = not renamed)
              
              vst_chunk[_program] : base64-encoded VST-specific chunk.
              clap_chunk : base64-encoded CLAP-specific chunk.
              
              param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state
              param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo] : parameter modulation ACS state
              param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*
              param.X.mod.[active,baseline,visible] : parameter module global settings
              param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set
              param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)
              param.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only
              BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]
              THRESHOLD, CEILING, TRUEPEAK : [ReaLlmit]
              NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]
              
              ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE
              FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE
              MODE, RSMODE : [RS5k] general mode, resample mode
              VIDEO_CODE : [video processor] code
              
              force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence
              instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
              chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
              chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            string parmname - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.79 - added original_name to get original name and renamed_name to get (re-)name of fx-instances
          Reaper 6.72 - added support for autobypass, instance oversample shift, chain oversample shift and chain pdc-mode
          Reaper 6.71 - added support for parameter modulation/linking; vst/videoprocessor-data getting
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetNumParams</slug>
        <title>TrackFX_GetNumParams</title>
        <functioncall prog_lang="cpp">int TrackFX_GetNumParams(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetNumParams(MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TrackFX_GetNumParams(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TrackFX_GetNumParams(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetOpen</slug>
        <title>TrackFX_GetOpen</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetOpen(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetOpen(MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_GetOpen(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_GetOpen(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns true if this FX UI is open in the FX chain window or a floating window. See [TrackFX\_SetOpen](#TrackFX_SetOpen)

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - true, TrackFX is open; false, TrackFX is closed
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, in which the fx to check is located
            integer fx - the id of the fx in the fx-chain
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags>trackmanagement, check, open, get, ui, fx</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParam</slug>
        <title>TrackFX_GetParam</title>
        <functioncall prog_lang="cpp">double TrackFX_GetParam(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut)</functioncall>
        <functioncall prog_lang="eel">double TrackFX_GetParam(MediaTrack track, int fx, int param, &minval, &maxval)</functioncall>
        <functioncall prog_lang="lua">number retval, number minval, number maxval = reaper.TrackFX_GetParam(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Float retval, MediaTrack track, Int fx, Int param, Float minvalOut, Float maxvalOut) = RPR_TrackFX_GetParam(track, fx, param, minvalOut, maxvalOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            number retval - 
            number minval - 
            number maxval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParameterStepSizes</slug>
        <title>TrackFX_GetParameterStepSizes</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetParameterStepSizes(MediaTrack* track, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetParameterStepSizes(MediaTrack track, int fx, int param, &step, &smallstep, &largestep, bool &istoggle)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TrackFX_GetParameterStepSizes(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, Float stepOut, Float smallstepOut, Float largestepOut, Boolean istoggleOut) = RPR_TrackFX_GetParameterStepSizes(track, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
            number step - 
            number smallstep - 
            number largestep - 
            boolean istoggle - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParamEx</slug>
        <title>TrackFX_GetParamEx</title>
        <functioncall prog_lang="cpp">double TrackFX_GetParamEx(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)</functioncall>
        <functioncall prog_lang="eel">double TrackFX_GetParamEx(MediaTrack track, int fx, int param, &minval, &maxval, &midval)</functioncall>
        <functioncall prog_lang="lua">number retval, number minval, number maxval, number midval = reaper.TrackFX_GetParamEx(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Float retval, MediaTrack track, Int fx, Int param, Float minvalOut, Float maxvalOut, Float midvalOut) = RPR_TrackFX_GetParamEx(track, fx, param, minvalOut, maxvalOut, midvalOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            number retval - 
            number minval - 
            number maxval - 
            number midval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParamFromIdent</slug>
        <title>TrackFX_GetParamFromIdent</title>
        <functioncall prog_lang="cpp">int TrackFX_GetParamFromIdent(MediaTrack* track, int fx, const char* ident_str)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetParamFromIdent(MediaTrack track, int fx, "ident_str")</functioncall>
        <functioncall prog_lang="lua">integer param = reaper.TrackFX_GetParamFromIdent(MediaTrack track, integer fx, string ident_str)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TrackFX_GetParamFromIdent(MediaTrack track, Int fx, String ident_str)</functioncall>
        <requires>
            Reaper=6.38
        </requires>
        <description prog_lang="*">
            gets the parameter index from an identifying string (:wet, :bypass, :delta, or a string returned from GetParamIdent), or -1 if unknown.
        </description>
        <retvals>
            integer param - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            string ident_str - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParamIdent</slug>
        <title>TrackFX_GetParamIdent</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetParamIdent(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetParamIdent(MediaTrack track, int fx, int param, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetParamIdent(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, String bufOut, Int bufOut_sz) = RPR_TrackFX_GetParamIdent(track, fx, param, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            gets an identifying string for the parameter
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParamName</slug>
        <title>TrackFX_GetParamName</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetParamName(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetParamName(MediaTrack track, int fx, int param, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetParamName(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, String bufOut, Int bufOut_sz) = RPR_TrackFX_GetParamName(track, fx, param, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParamNormalized</slug>
        <title>TrackFX_GetParamNormalized</title>
        <functioncall prog_lang="cpp">double TrackFX_GetParamNormalized(MediaTrack* track, int fx, int param)</functioncall>
        <functioncall prog_lang="eel">double TrackFX_GetParamNormalized(MediaTrack track, int fx, int param)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.TrackFX_GetParamNormalized(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">Float retval = RPR_TrackFX_GetParamNormalized(MediaTrack track, Int fx, Int param)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            integer param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetPinMappings</slug>
        <title>TrackFX_GetPinMappings</title>
        <functioncall prog_lang="cpp">int TrackFX_GetPinMappings(MediaTrack* tr, int fx, int isoutput, int pin, int* high32Out)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetPinMappings(MediaTrack tr, int fx, int isoutput, int pin, int &high32)</functioncall>
        <functioncall prog_lang="lua">integer retval, integer high32 = reaper.TrackFX_GetPinMappings(MediaTrack tr, integer fx, integer isoutput, integer pin)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaTrack tr, Int fx, Int isoutput, Int pin, Int high32Out) = RPR_TrackFX_GetPinMappings(tr, fx, isoutput, pin, high32Out)</functioncall>
        <requires>
            Reaper=6.43
        </requires>
        <description prog_lang="*">
            gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            integer retval - 
            integer high32 - 
        </retvals>
        <parameters>
            MediaTrack tr - 
            integer fx - 
            integer is - 
            integer pin - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - the following retvals and parameters aren't optional anymore
                        - CPP: high32Out
                        - EEL2: high32
                        - Lua: high32
                        - Python: high32Out
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetPreset</slug>
        <title>TrackFX_GetPreset</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetPreset(MediaTrack* track, int fx, char* presetnameOut, int presetnameOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetPreset(MediaTrack track, int fx, #presetname)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string presetname = reaper.TrackFX_GetPreset(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String presetnameOut, Int presetnameOut_sz) = RPR_TrackFX_GetPreset(track, fx, presetnameOut, presetnameOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description>
            Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). 
            
            Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). 
            
            see TrackFX_SetPreset

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - true, the fx-parameters match preset; false, the fx-parameters do not match preset(see description)
            string presetname - the name of the preset
        </retvals>
        <parameters>
            MediaTrack track - the track, from whose fx you want to get the preset-name
            integer fx - the index of the fx, whose presetname you want to have; 0-based
        </parameters>
        <linked_to desc="see also:">
            Reaper:TrackFX_SetPreset
                   sets the preset of a track-fx
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetPresetIndex</slug>
        <title>TrackFX_GetPresetIndex</title>
        <functioncall prog_lang="cpp">int TrackFX_GetPresetIndex(MediaTrack* track, int fx, int* numberOfPresetsOut)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetPresetIndex(MediaTrack track, int fx, int &numberOfPresets)</functioncall>
        <functioncall prog_lang="lua">integer retval, integer numberOfPresets = reaper.TrackFX_GetPresetIndex(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaTrack track, Int fx, Int numberOfPresetsOut) = RPR_TrackFX_GetPresetIndex(track, fx, numberOfPresetsOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See [TrackFX\_SetPresetByIndex](#TrackFX_SetPresetByIndex)

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            integer retval - 
            integer numberOfPresets - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetRecChainVisible</slug>
        <title>TrackFX_GetRecChainVisible</title>
        <functioncall prog_lang="cpp">int TrackFX_GetRecChainVisible(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetRecChainVisible(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TrackFX_GetRecChainVisible(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TrackFX_GetRecChainVisible(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected

            To get the monitoring FX rather than record input FX, use Master-Track.

            Note:
            To access record input FX in other TrackFX-functions, use FX indices [0x1000000..0x1000000+n) for the individual fxs in the FXChain and pass over the track, whose rec-input-fxchain you want to access.
            Also pass over the track, whose rec-input-fx you want to access. Pass over MasterTrack to get the monitoring FX-chain.
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetRecCount</slug>
        <title>TrackFX_GetRecCount</title>
        <functioncall prog_lang="cpp">int TrackFX_GetRecCount(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetRecCount(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.TrackFX_GetRecCount(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_TrackFX_GetRecCount(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns count of record input FX of a track. 

            To get the monitoring FX rather than record input FX, use Master-Track.

            Note:
            To access record input FX in other TrackFX-functions, use FX indices [0x1000000..0x1000000+n) for the individual fxs in the FXChain and pass over the track, whose rec-input-fxchain you want to access.
            Also pass over the track, whose rec-input-fx you want to access. Pass over MasterTrack to get the monitoring FX-chain.

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetUserPresetFilename</slug>
        <title>TrackFX_GetUserPresetFilename</title>
        <functioncall prog_lang="cpp">void TrackFX_GetUserPresetFilename(MediaTrack* track, int fx, char* fnOut, int fnOut_sz)</functioncall>
        <functioncall prog_lang="eel">TrackFX_GetUserPresetFilename(MediaTrack track, int fx, #fn)</functioncall>
        <functioncall prog_lang="lua">string fn = reaper.TrackFX_GetUserPresetFilename(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">(MediaTrack track, Int fx, String fnOut, Int fnOut_sz) = RPR_TrackFX_GetUserPresetFilename(track, fx, fnOut, fnOut_sz)</functioncall>
        <requires>
            Reaper=6.37
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            string fn - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_NavigatePresets</slug>
        <title>TrackFX_NavigatePresets</title>
        <functioncall prog_lang="cpp">bool TrackFX_NavigatePresets(MediaTrack* track, int fx, int presetmove)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_NavigatePresets(MediaTrack track, int fx, int presetmove)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_NavigatePresets(MediaTrack track, integer fx, integer presetmove)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_NavigatePresets(MediaTrack track, Int fx, Int presetmove)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            integer presetmove - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetEnabled</slug>
        <title>TrackFX_SetEnabled</title>
        <functioncall prog_lang="cpp">void TrackFX_SetEnabled(MediaTrack* track, int fx, bool enabled)</functioncall>
        <functioncall prog_lang="eel">TrackFX_SetEnabled(MediaTrack track, int fx, bool enabled)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_SetEnabled(MediaTrack track, integer fx, boolean enabled)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_SetEnabled(MediaTrack track, Int fx, Boolean enabled)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Set a TrackFX enabled/disabled.

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.

            See [TrackFX\_GetEnabled](#TrackFX_GetEnabled)
        </description>
        <parameters>
            MediaTrack track - 
            integer fx - 
            boolean enabled - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetEQBandEnabled</slug>
        <title>TrackFX_SetEQBandEnabled</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx, bool enable)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetEQBandEnabled(MediaTrack track, int fxidx, int bandtype, int bandidx, bool enable)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.TrackFX_SetEQBandEnabled(MediaTrack track, integer fxidx, integer bandtype, integer bandidx, boolean enable)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_SetEQBandEnabled(MediaTrack track, Int fxidx, Int bandtype, Int bandidx, Boolean enable)</functioncall>
        <requires>
            Reaper=6.44
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Enable or disable a ReaEQ band.
            Returns false if track/fxidx is not ReaEQ.
            Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass
            Bandidx: (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
            See [TrackFX\_GetEQ](#TrackFX_GetEQ), [TrackFX\_GetEQParam](#TrackFX_GetEQParam), [TrackFX\_SetEQParam](#TrackFX_SetEQParam), [TrackFX\_GetEQBandEnabled](#TrackFX_GetEQBandEnabled).

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - the track, on which the eq is located
            integer fx - the index of the eq to set bands enabled
            integer bandtype - -1, master gain;
                             - 0, hipass
                             - 1, loshelf
                             - 2, band
                             - 3, notch, 
                             - 4, hishelf
                             - 5, lopass
                             - 6, bandpass
                             - 7, parallel bandpass
            integer bandidx - (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
            boolean enable - true, enable the band; false, disble the band
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - new bandtypes added, master gain(-1) and bandpass(6); bandidx is ignored by master gain
            Reaper 6.44 - new bandtypes added, parallel bandpass(7)
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetEQParam</slug>
        <title>TrackFX_SetEQParam</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetEQParam(MediaTrack* track, int fx, int bandtype, int bandidx, int paramtype, double val, bool isnorm)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetEQParam(MediaTrack track, int fx, int bandtype, int bandidx, int paramtype, val, bool isnorm)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_SetEQParam(MediaTrack track, integer fx, integer bandtype, integer bandidx, integer paramtype, number val, boolean isnorm)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_SetEQParam(MediaTrack track, Int fx, Int bandtype, Int bandidx, Int paramtype, Float val, Boolean isnorm)</functioncall>
        <requires>
            Reaper=6.44
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.
            Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.
            Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
            Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
            See [TrackFX\_GetEQ](#TrackFX_GetEQ), [TrackFX\_GetEQParam](#TrackFX_GetEQParam), [TrackFX\_GetEQBandEnabled](#TrackFX_GetEQBandEnabled), [TrackFX\_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - true, setting was successful; false, setting was unsuccesful
        </retvals>
        <parameters>
            MediaTrack track - the track, on which the eq is located
            integer fx - the index of the eq to set bands enabled
            integer bandtype - -1, master gain;
                             - 0, hipass
                             - 1, loshelf
                             - 2, band
                             - 3, notch, 
                             - 4, hishelf
                             - 5, lopass
                             - 6, bandpass
                             - 7, parallel bandpass
            integer bandidx - (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
            integer paramtype - 0, freq
                              - 1, gain
                              - 2, Q
            number val - the value to set the paremeter with
            boolean isnorm - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
            Reaper 6.43 - new bandtypes added: bandpass(6)
            Reaper 6.44 - new bandtypes added, parallel bandpass(7)
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetNamedConfigParm</slug>
        <title>TrackFX_SetNamedConfigParm</title>
        <functioncall prog_lang="cpp">bool retval = TrackFX_SetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, const char* value)</functioncall>
        <functioncall prog_lang="eel">bool retval = TrackFX_SetNamedConfigParm(MediaTrack track, int fx, "parmname", "value")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_SetNamedConfigParm(MediaTrack track, integer fx, string parmname, string value)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_SetNamedConfigParm(MediaTrack track, Int fx, String parmname, String value)</functioncall>
        <requires>
            Reaper=6.79
        </requires>
        <description prog_lang="*">
            sets plug-in specific named configuration value (returns true on success)

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.

            Support values for write:

            vst_chunk[_program] : base64-encoded VST-specific chunk.
            clap_chunk : base64-encoded CLAP-specific chunk.
            param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state
            param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo] : parameter modulation ACS state
            param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*
            param.X.mod.[active,baseline,visible] : parameter module global settings
            param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set
            param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)
            param.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only
            
            BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]
            THRESHOLD, CEILING, TRUEPEAK : [ReaLlmit]
            NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]
            ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE
            FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE
            MODE, RSMODE : [RS5k] general mode, resample mode
            VIDEO_CODE : [video processor] code
            
            force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence
            instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
            chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
            chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)
            
            renamed_name : renamed FX instance name (empty string = not renamed)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            string parmname - 
            string value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.79 - added renamed_name to rename an FX-instance
          Reaper 6.72 - added support for autobypass, instance oversample shift, chain oversample shift and chain pdc-mode
          Reaper 6.71 - added support for parameter modulation/linking; vst/videoprocessor-data setting
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetOffline</slug>
        <title>TrackFX_SetOffline</title>
        <functioncall prog_lang="cpp">void TrackFX_SetOffline(MediaTrack* track, int fx, bool offline)</functioncall>
        <functioncall prog_lang="eel">TrackFX_SetOffline(MediaTrack track, int fx, bool offline)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_SetOffline(MediaTrack track, integer fx, boolean offline)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_SetOffline(MediaTrack track, Int fx, Boolean offline)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TrackFX\_GetOffline](#TrackFX_GetOffline)

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <parameters>
            MediaTrack track - 
            integer fx - 
            boolean offline - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetOffline</slug>
        <title>TakeFX_SetOffline</title>
        <functioncall prog_lang="cpp">void TakeFX_SetOffline(MediaItem_Take* take, int fx, bool offline)</functioncall>
        <functioncall prog_lang="eel">TakeFX_SetOffline(MediaItem_Take take, int fx, bool offline)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_SetOffline(MediaItem_Take take, integer fx, boolean offline)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_SetOffline(MediaItem_Take take, Int fx, Boolean offline)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TakeFX\_GetOffline](#TakeFX_GetOffline)
        </description>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            boolean offline - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetOffline</slug>
        <title>TakeFX_GetOffline</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetOffline(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetOffline(MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_GetOffline(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_GetOffline(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TakeFX\_SetOffline](#TakeFX_SetOffline)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_Delete</slug>
        <title>TakeFX_Delete</title>
        <functioncall prog_lang="cpp">bool TakeFX_Delete(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_Delete(MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_Delete(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TakeFX_Delete(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description prog_lang="*">
            Remove a FX from take chain (returns true on success)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_CopyToTake</slug>
        <title>TakeFX_CopyToTake</title>
        <functioncall prog_lang="cpp">void TakeFX_CopyToTake(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="eel">TakeFX_CopyToTake(MediaItem_Take src_take, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_CopyToTake(MediaItem_Take src_take, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_CopyToTake(MediaItem_Take src_take, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description prog_lang="*">
            Copies (or moves) FX from src_take to dest_take. Can be used with src_take=dest_take to reorder. 
        </description>
        <parameters>
            MediaItem_Take src_take - the source-take, from which you want to copy an fx
            integer src_fx - the index of the source-fx
            MediaItem_Take dest_take - the destination-take, to which you want to copy an fx 
            integer dest_fx - the index of the target-fx
            boolean is_move - true, move fx from source to destination-take; false, just copy fx from source to destination-take
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_CopyToTrack</slug>
        <title>TakeFX_CopyToTrack</title>
        <functioncall prog_lang="cpp">void TakeFX_CopyToTrack(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="eel">TakeFX_CopyToTrack(MediaItem_Take src_take, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_CopyToTrack(MediaItem_Take src_take, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_CopyToTrack(MediaItem_Take src_take, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description prog_lang="*">
            Copies (or moves) FX from src_take to dest_track. 

            Note:
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
            Add 0x1000000 to the fx-indices to address monitoringFX/rec-inputFX.
        </description>
        <parameters>
            MediaItem_Take src_take - 
            integer src_fx - 
            MediaTrack dest_track - 
            integer dest_fx - 
            boolean is_move - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetOffline</slug>
        <title>TrackFX_GetOffline</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetOffline(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetOffline(MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_GetOffline(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_GetOffline(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TrackFX\_SetOffline](#TrackFX_SetOffline)

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_Delete</slug>
        <title>TrackFX_Delete</title>
        <functioncall prog_lang="cpp">bool TrackFX_Delete(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_Delete(MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_Delete(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_Delete(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description prog_lang="*">
            Remove a FX from track chain (returns true on success).

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetOpen</slug>
        <title>TrackFX_SetOpen</title>
        <functioncall prog_lang="cpp">void TrackFX_SetOpen(MediaTrack* track, int fx, bool open)</functioncall>
        <functioncall prog_lang="eel">TrackFX_SetOpen(MediaTrack track, int fx, bool open)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_SetOpen(MediaTrack track, integer fx, boolean open)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_SetOpen(MediaTrack track, Int fx, Boolean open)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Open this FX UI. See [TrackFX\_GetOpen](#TrackFX_GetOpen)

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <parameters>
            MediaTrack track - the track, in which the FX to be opened is located
            integer fx - the fx-id within the fxchain
            boolean open - true, open FX-UI; false, close FX-UI
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags>trackmanagement, set, open, ui, fx</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetParam</slug>
        <title>TrackFX_SetParam</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetParam(MediaTrack* track, int fx, int param, double val)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetParam(MediaTrack track, int fx, int param, val)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_SetParam(MediaTrack track, integer fx, integer param, number val)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_SetParam(MediaTrack track, Int fx, Int param, Float val)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            integer param - 
            number val - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetParamNormalized</slug>
        <title>TrackFX_SetParamNormalized</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetParamNormalized(MediaTrack* track, int fx, int param, double value)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetParamNormalized(MediaTrack track, int fx, int param, value)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_SetParamNormalized(MediaTrack track, integer fx, integer param, number value)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_SetParamNormalized(MediaTrack track, Int fx, Int param, Float value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            integer param - 
            number value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetPinMappings</slug>
        <title>TrackFX_SetPinMappings</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetPinMappings(MediaTrack* tr, int fx, int isOutput, int pin, int low32bits, int hi32bits)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetPinMappings(MediaTrack tr, int fx, int is, int pin, int low32bits, int hi32bits)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_SetPinMappings(MediaTrack tr, integer fx, integer is, integer pin, integer low32bits, integer hi32bits)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_SetPinMappings(MediaTrack tr, Int fx, Int isOutput, Int pin, Int low32bits, Int hi32bits)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack tr - 
            integer fx - 
            integer is - 
            integer pin - 
            integer low32bits - 
            integer hi32bits - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetPreset</slug>
        <title>TrackFX_SetPreset</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetPreset(MediaTrack* track, int fx, const char* presetname)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetPreset(MediaTrack track, int fx, "presetname")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_SetPreset(MediaTrack track, integer fx, string presetname)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_SetPreset(MediaTrack track, Int fx, String presetname)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See [TrackFX\_GetPreset](#TrackFX_GetPreset).

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.

            presetname is case-sensitive.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            string presetname - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetPresetByIndex</slug>
        <title>TrackFX_SetPresetByIndex</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetPresetByIndex(MediaTrack* track, int fx, int idx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetPresetByIndex(MediaTrack track, int fx, int idx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_SetPresetByIndex(MediaTrack track, integer fx, integer idx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_TrackFX_SetPresetByIndex(MediaTrack track, Int fx, Int idx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See [TrackFX\_GetPresetIndex](#TrackFX_GetPresetIndex).

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            integer idx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_Show</slug>
        <title>TrackFX_Show</title>
        <functioncall prog_lang="cpp">void TrackFX_Show(MediaTrack* track, int fx, int showFlag)</functioncall>
        <functioncall prog_lang="eel">TrackFX_Show(MediaTrack track, int fx, int showFlag)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_Show(MediaTrack track, integer fx, integer showFlag)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_Show(MediaTrack track, Int fx, Int showFlag)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Shows a track-FX-window.

            By setting fx you can add 0x1000000 set to reference input FX. 
            To use global monitoring inputFX, use the master-track, any other track will access the track's rec-input-fx.
        </description>
        <parameters>
            MediaTrack track - the MediaTrack, whose TrackFX you want to show
            integer fx - the id of the track within the fxchain
            integer showFlag - how to show the FX-window
                    -0, for hidechain
                    -1, for show chain(index valid)
                    -2, for hide floating window(index valid)
                    -3, for show floating window(index valid)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags>trackmanagement, show, fx, window</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackList_AdjustWindows</slug>
        <title>TrackList_AdjustWindows</title>
        <functioncall prog_lang="cpp">void TrackList_AdjustWindows(bool isMinor)</functioncall>
        <functioncall prog_lang="eel">TrackList_AdjustWindows(bool isMinor)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackList_AdjustWindows(boolean isMinor)</functioncall>
        <functioncall prog_lang="python">RPR_TrackList_AdjustWindows(Boolean isMinor)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Updates the TCP and optionally the MCP. Helpful, when setting a new trackheight using I\_HEIGHTOVERRIDE in [SetMediaTrackInfo\_Value](#SetMediaTrackInfo_Value).
            
            This also updates the Region Render Matrix.
        </description>
        <parameters>
            boolean isMinor - false, updates only TCP; true, updates TCP and MCP
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackList_UpdateAllExternalSurfaces</slug>
        <title>TrackList_UpdateAllExternalSurfaces</title>
        <functioncall prog_lang="cpp">void TrackList_UpdateAllExternalSurfaces()</functioncall>
        <functioncall prog_lang="eel">TrackList_UpdateAllExternalSurfaces()</functioncall>
        <functioncall prog_lang="lua">reaper.TrackList_UpdateAllExternalSurfaces()</functioncall>
        <functioncall prog_lang="python">RPR_TrackList_UpdateAllExternalSurfaces()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Surfaces
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_BeginBlock</slug>
        <title>Undo_BeginBlock</title>
        <functioncall prog_lang="cpp">void Undo_BeginBlock()</functioncall>
        <functioncall prog_lang="eel">Undo_BeginBlock()</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_BeginBlock()</functioncall>
        <functioncall prog_lang="python">RPR_Undo_BeginBlock()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            call to start a new block
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_BeginBlock2</slug>
        <title>Undo_BeginBlock2</title>
        <functioncall prog_lang="cpp">void Undo_BeginBlock2(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">Undo_BeginBlock2(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_BeginBlock2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_BeginBlock2(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            call to start a new undo block. Code after that and before Undo_EndBlock can be undone.
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <linked_to desc="see also:">
            Reaper:Undo_EndBlock2
                   ends an undo-block
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags>projectmanagement, start, undo, block</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_CanRedo2</slug>
        <title>Undo_CanRedo2</title>
        <functioncall prog_lang="cpp">const char* Undo_CanRedo2(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">bool Undo_CanRedo2(#retval, ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">string undo_string = reaper.Undo_CanRedo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_Undo_CanRedo2(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns string of next action,if able,NULL if not
            
            basically, if you undid an action, this will return the description of the action you undid.
        </description>
        <retvals>
            string undo_string - next redo-able action
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_CanUndo2</slug>
        <title>Undo_CanUndo2</title>
        <functioncall prog_lang="cpp">const char* Undo_CanUndo2(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">bool Undo_CanUndo2(#retval, ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">string undo_text = reaper.Undo_CanUndo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">String retval = RPR_Undo_CanUndo2(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            returns string of last action,if able,NULL if not
            
            basically returns the description of the next undoable action
        </description>
        <retvals>
            string undo_text - the next undoable action
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_DoRedo2</slug>
        <title>Undo_DoRedo2</title>
        <functioncall prog_lang="cpp">int Undo_DoRedo2(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int Undo_DoRedo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.Undo_DoRedo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_Undo_DoRedo2(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            redo an undone action
            
            nonzero if success
        </description>
        <retvals>
            integer retval - 0, not successful; everything else, successful
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_DoUndo2</slug>
        <title>Undo_DoUndo2</title>
        <functioncall prog_lang="cpp">int Undo_DoUndo2(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int Undo_DoUndo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.Undo_DoUndo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_Undo_DoUndo2(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            undo an undoable action
            
            nonzero if success
        </description>
        <retvals>
            integer retval - 0, not successful; everything else, successful
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_EndBlock</slug>
        <title>Undo_EndBlock</title>
        <functioncall prog_lang="cpp">void Undo_EndBlock(const char* descchange, int extraflags)</functioncall>
        <functioncall prog_lang="eel">Undo_EndBlock("descchange", int extraflags)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_EndBlock(string descchange, integer extraflags)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_EndBlock(String descchange, Int extraflags)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description prog_lang="*">
            call to end the block,with extra flags if any,and a description
        </description>
        <parameters>
            string descchange - a string that describes the changes of the undo-block
            integer extraflags - set to -1, include all undo states
                       - 1, track/master vol/pan/routing, routing/hwout envelopes too
                       - 2, track/master fx
                       - 4, track items
                       - 8, loop selection, markers, regions, extensions
                       - 16, freeze state
                       - 32, non-FX envelopes only
                       - 64, FX envelopes, implied by UNDO_STATE_FX too
                       - 128, contents of automation items -- not position, length, rate etc of automation items, which is part of envelope state
                       - 256, ARA state
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_EndBlock2</slug>
        <title>Undo_EndBlock2</title>
        <functioncall prog_lang="cpp">void Undo_EndBlock2(ReaProject* proj, const char* descchange, int extraflags)</functioncall>
        <functioncall prog_lang="eel">Undo_EndBlock2(ReaProject proj, "descchange", int extraflags)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_EndBlock2(ReaProject proj, string descchange, integer extraflags)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_EndBlock2(ReaProject proj, String descchange, Int extraflags)</functioncall>
        <requires>
            Reaper=5.979
        </requires>
        <description prog_lang="*">
            call to end the block,with extra flags if any,and a description
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            string descchange - a string that describes the changes of the undo-block
            integer extraflags - set to -1, include all undo states
                       - 1, track/master vol/pan/routing, routing/hwout envelopes too
                       - 2, track/master fx
                       - 4, track items
                       - 8, loop selection, markers, regions, extensions
                       - 16, freeze state
                       - 32, non-FX envelopes only
                       - 64, FX envelopes, implied by UNDO_STATE_FX too
                       - 128, contents of automation items -- not position, length, rate etc of automation items, which is part of envelope state
                       - 256, ARA state
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_OnStateChange</slug>
        <title>Undo_OnStateChange</title>
        <functioncall prog_lang="cpp">void Undo_OnStateChange(const char* descchange)</functioncall>
        <functioncall prog_lang="eel">Undo_OnStateChange("descchange")</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_OnStateChange(string descchange)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_OnStateChange(String descchange)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            limited state change to items
        </description>
        <parameters>
            string descchange - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_OnStateChange2</slug>
        <title>Undo_OnStateChange2</title>
        <functioncall prog_lang="cpp">void Undo_OnStateChange2(ReaProject* proj, const char* descchange)</functioncall>
        <functioncall prog_lang="eel">Undo_OnStateChange2(ReaProject proj, "descchange")</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_OnStateChange2(ReaProject proj, string descchange)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_OnStateChange2(ReaProject proj, String descchange)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            limited state change to items
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            string descchange - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_OnStateChange_Item</slug>
        <title>Undo_OnStateChange_Item</title>
        <functioncall prog_lang="cpp">void Undo_OnStateChange_Item(ReaProject* proj, const char* name, MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">Undo_OnStateChange_Item(ReaProject proj, "name", MediaItem item)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_OnStateChange_Item(ReaProject proj, string name, MediaItem item)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_OnStateChange_Item(ReaProject proj, String name, MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            string name - 
            MediaItem item - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_OnStateChangeEx</slug>
        <title>Undo_OnStateChangeEx</title>
        <functioncall prog_lang="cpp">void Undo_OnStateChangeEx(const char* descchange, int whichStates, int trackparm)</functioncall>
        <functioncall prog_lang="eel">Undo_OnStateChangeEx("descchange", int whichStates, int trackparm)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_OnStateChangeEx(string descchange, integer whichStates, integer trackparm)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_OnStateChangeEx(String descchange, Int whichStates, Int trackparm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            trackparm=-1 by default,or if updating one fx chain,you can specify track index
        </description>
        <parameters>
            string descchange - 
            integer whichStates - 
            integer trackparm - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_OnStateChangeEx2</slug>
        <title>Undo_OnStateChangeEx2</title>
        <functioncall prog_lang="cpp">void Undo_OnStateChangeEx2(ReaProject* proj, const char* descchange, int whichStates, int trackparm)</functioncall>
        <functioncall prog_lang="eel">Undo_OnStateChangeEx2(ReaProject proj, "descchange", int whichStates, int trackparm)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_OnStateChangeEx2(ReaProject proj, string descchange, integer whichStates, integer trackparm)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_OnStateChangeEx2(ReaProject proj, String descchange, Int whichStates, Int trackparm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            trackparm=-1 by default,or if updating one fx chain,you can specify track index
        </description>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            string descchange - 
            integer whichStates - 
            integer trackparm - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Project Management
            Undo
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>UpdateArrange</slug>
        <title>UpdateArrange</title>
        <functioncall prog_lang="cpp">void UpdateArrange()</functioncall>
        <functioncall prog_lang="eel">UpdateArrange()</functioncall>
        <functioncall prog_lang="lua">reaper.UpdateArrange()</functioncall>
        <functioncall prog_lang="python">RPR_UpdateArrange()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Redraw the arrange view
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>arrangeviewmanagement, update, arrangeview</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>UpdateItemInProject</slug>
        <title>UpdateItemInProject</title>
        <functioncall prog_lang="cpp">void UpdateItemInProject(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">UpdateItemInProject(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">reaper.UpdateItemInProject(MediaItem item)</functioncall>
        <functioncall prog_lang="python">RPR_UpdateItemInProject(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            MediaItem item - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>UpdateTimeline</slug>
        <title>UpdateTimeline</title>
        <functioncall prog_lang="cpp">void UpdateTimeline()</functioncall>
        <functioncall prog_lang="eel">UpdateTimeline()</functioncall>
        <functioncall prog_lang="lua">reaper.UpdateTimeline()</functioncall>
        <functioncall prog_lang="python">RPR_UpdateTimeline()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Redraw the arrange view and ruler
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>arrangeviewmanagement, update, timeline</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ValidatePtr</slug>
        <title>ValidatePtr</title>
        <functioncall prog_lang="cpp">bool ValidatePtr(void* pointer, const char* ctypename)</functioncall>
        <functioncall prog_lang="eel">bool ValidatePtr(void* pointer, "ctypename")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.ValidatePtr(identifier pointer, string ctypename)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_ValidatePtr(void pointer, String ctypename)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). 
            Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.

            see ValidatePtr2
        </description>
        <retvals>
            boolean retval - true, the object/pointer is of ctypename; false, it is not
        </retvals>
        <parameters>
            identifier pointer - a pointer to the object to check for. In Lua or Python, you just give the object to check as this parameter.
            string ctypename - the type of project to check for(given as a pointer)
        </parameters>
        <linked_to desc="see also:">
            Reaper:ValidatePtr2
                   checks, if a pointer is a valid one within a project
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>helperfunctions, validate, objects, project, track, item, take, envelope, pcmsource</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ValidatePtr2</slug>
        <title>ValidatePtr2</title>
        <functioncall prog_lang="cpp">bool ValidatePtr2(ReaProject* proj, void* pointer, const char* ctypename)</functioncall>
        <functioncall prog_lang="eel">bool ValidatePtr2(ReaProject proj, void* pointer, "ctypename")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.ValidatePtr2(ReaProject proj, identifier pointer, string ctypename)</functioncall>
        <functioncall prog_lang="python">Boolean retval = RPR_ValidatePtr2(ReaProject proj, void pointer, String ctypename)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.
        </description>
        <retvals>
            boolean retval - true, the object/pointer is of ctypename; false, it is not
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            identifier pointer - a pointer to the object to check for. In Lua or Python, you just give the object to check as this parameter.
            string ctypename - the type of project to check for(given as a pointer)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>helperfunctions, validate, objects, project, track, item, take, envelope, pcmsource</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ViewPrefs</slug>
        <title>ViewPrefs</title>
        <functioncall prog_lang="cpp">void ViewPrefs(int page, const char* pageByName)</functioncall>
        <functioncall prog_lang="eel">ViewPrefs(int page, "pageByName")</functioncall>
        <functioncall prog_lang="lua">reaper.ViewPrefs(integer page, string pageByName)</functioncall>
        <functioncall prog_lang="python">RPR_ViewPrefs(Int page, String pageByName)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="*">
            Opens the prefs to a page, use pageByName if page is 0.
        </description>
        <parameters>
            integer page - the idx of the preferences-page. The following are valid:
                    - 139, General 
                    - 474, Paths 
                    - 219, Keyboard/Multitouch 
                    - 212, Project 
                    - 178, Track/Send Defaults 
                    - 477, Media Item Defaults 
                    - 156, Audio 
                    - 118, Device 
                    - 153, MIDI Devices 
                    - 203, Buffering 
                    - 584, Mute/Solo 
                    - 136, Playback 
                    - 517, Seeking 
                    - 137, Recording 
                    - 518, Loop Recording 
                    - 478, Rendering 
                    - 213, Appearance 
                    - 236, Media(Appearance) 
                    - 459, Peaks/Waveforms 
                    - 524, Fades/Crossfades 
                    - 458, Track Control Panels 
                    - 172, Editing Behavior 
                    - 447, Envelope Display 
                    - 519, Automation 
                    - 215, Mouse 
                    - 466, Mouse Modifiers 
                    - 490, MIDI Editor 
                    - 138, Media 
                    - 257, MIDI 
                    - 449, Video/REX/Misc 
                    - 154, Plug-ins
                    - 505, Compatibility 
                    - 210, VST 
                    - 209, ReWire/DX 
                    - 515, ReaScript 
                    - 227, ReaMote 
                    - 257, Control/OSC/web 
                    - 160, External Editors 
            string pageByName - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetTrackGroupMembershipHigh</slug>
        <title>GetSetTrackGroupMembershipHigh</title>
        <functioncall prog_lang="cpp">unsigned int GetSetTrackGroupMembershipHigh(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)</functioncall>
        <functioncall prog_lang="eel">uint GetSetTrackGroupMembershipHigh(MediaTrack tr, "groupname", uint setmask, uint setvalue)</functioncall>
        <functioncall prog_lang="lua">integer groupstate = reaper.GetSetTrackGroupMembershipHigh(MediaTrack tr, string groupname, integer setmask, integer setvalue)</functioncall>
        <functioncall prog_lang="python">Int retval = RPR_GetSetTrackGroupMembershipHigh(MediaTrack tr, String groupname, Int setmask, Int setvalue)</functioncall>
        <requires>
            Reaper=6.72
        </requires>
        <description prog_lang="*"> 
            Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:
            VOLUME_LEAD
            VOLUME_FOLLOW
            VOLUME_VCA_LEAD
            VOLUME_VCA_FOLLOW
            PAN_LEAD
            PAN_FOLLOW
            WIDTH_LEAD
            WIDTH_FOLLOW
            MUTE_LEAD
            MUTE_FOLLOW
            SOLO_LEAD
            SOLO_FOLLOW
            RECARM_LEAD
            RECARM_FOLLOW
            POLARITY_LEAD
            POLARITY_FOLLOW
            AUTOMODE_LEAD
            AUTOMODE_FOLLOW
            VOLUME_REVERSE
            PAN_REVERSE
            WIDTH_REVERSE
            NO_LEAD_WHEN_FOLLOW
            VOLUME_VCA_FOLLOW_ISPREFX
            MEDIA_EDIT_LEAD
            MEDIA_EDIT_FOLLOW

            Note: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).
        </description>
        <parameters>
            MediaTrack tr - 
            string groupname - 
            integer setmask - 
            integer setvalue -
        </parameters>
        <retvals>
            integer groupstate - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.72 - added MEDIA_EDIT_LEAD and MEDIA_EDIT_FOLLOW as groupname
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetTrackSendInfo_String</slug>
        <title>GetSetTrackSendInfo_String</title>
        <functioncall prog_lang="cpp">bool GetSetTrackSendInfo_String(MediaTrack* tr, int category, int sendidx, const char* parmname, char* stringNeedBig, bool setNewValue)</functioncall>
        <functioncall prog_lang="eel">bool GetSetTrackSendInfo_String(MediaTrack tr, int category, int sendidx, "parmname", #stringNeedBig, bool setNewValue)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetTrackSendInfo_String(MediaTrack tr, integer category, integer sendidx, string parmname, string stringNeedBig, boolean setNewValue)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack tr, Int category, Int sendidx, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetTrackSendInfo_String(tr, category, sendidx, parmname, stringNeedBig, setNewValue)</functioncall>
        <requires>
            Reaper=5.975
        </requires>
        <description prog_lang="*"> 
            Gets/sets a send attribute string:
                P_EXT:xyz : char * : extension-specific persistent data

            This is a little like extstates for routings, with xyz being the key and stringNeedBig being the value.

            For ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).
        </description>
        <parameters>
            MediaTrack tr - the MediaTrack, whose routings you want to give additional attributes
            integer category - category is <0 for receives, 0=sends, >0 for hardware outputs
            integer sendidx - the index of the send/receive/hwout
            string parmname - the parametername
                            - "P_EXT:attribute_name", where attribute_name can be any name. You can have multiple ones, just give them different attribute-names.
            string stringNeedBig - the value of the attribute
            boolean setNewValue - true, set a new value; false, get the currently saved value
        </parameters>
        <linked_to desc="see also:">
            Reaper:CreateTrackSend
                   creates a track-send
            Reaper:GetTrackNumSends
                   get number of send of a track
            Reaper:GetSetTrackSendInfo
                   gets and sets attributes for a track-send
            Reaper:GetTrackSendInfo_Value
                   gets attributes of a track-send
            Reaper:RemoveTrackSend
                   removes a track-send
            Reaper:SetTrackSendInfo_Value
                   sets attributes of a track-send
        </linked_to>
        <retvals>
            boolean retval - true, getting/setting was successful; false, getting/setting was unsuccessful
            string stringNeedBig - the currently stored value
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvAlloc</slug>
        <title>BR_EnvAlloc</title>
        <functioncall prog_lang="cpp">BR_Envelope* BR_EnvAlloc(TrackEnvelope* envelope, bool takeEnvelopesUseProjectTime)</functioncall>
        <functioncall prog_lang="eel">BR_Envelope extension_api("BR_EnvAlloc", TrackEnvelope envelope, bool takeEnvelopesUseProjectTime)</functioncall>
        <functioncall prog_lang="lua">BR_Envelope env = reaper.BR_EnvAlloc(TrackEnvelope envelope, boolean takeEnvelopesUseProjectTime)</functioncall>
        <functioncall prog_lang="python">BR_Envelope env = BR_EnvAlloc(TrackEnvelope envelope, Boolean takeEnvelopesUseProjectTime)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Create a BR_Envelope-object from a track-envelope pointer or take-envelope pointer. 
            To apply changes to a BR_Envelope-object, always call BR_EnvFree to release the object and commit changes if needed.
            A BR_Envelope is not a TrackEnvelope-object and therefore can't be used as TrackEnvelope-object!
            
            Delete a BR_Envelope with BR_EnvFree.

            For manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.
        </description>
        <retvals>
            BR_Envelope env - the requested Envelope as a BR_Envelope-object
        </retvals>
        <parameters>
            TrackEnvelope envelope - a TrackEnvelope-object of the envelope, that you want to have as a BR_Envelope
            boolean takeEnvelopesUseProjectTime - false, take envelope points' positions are counted from take position, not project start time; true, work with project time instead
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>sws, envelopemanagement, br, br_envelope, create, get, envelope, allocate, sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvCountPoints</slug>
        <title>BR_EnvCountPoints</title>
        <functioncall prog_lang="cpp">int BR_EnvCountPoints(BR_Envelope* envelope)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_EnvCountPoints", BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_EnvCountPoints(BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_EnvCountPoints(BR_Envelope envelope)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.
        </description>
        <retvals>
            integer retval - the number of envelope-points in the BR_Envelope-object
        </retvals>
        <parameters>
            BR_Envelope envelope - the BR_Envelope-object, whose points you want to count
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags>sws, envelopemanagement, br, br_envelope, sws, envelope, count, point</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvDeletePoint</slug>
        <title>BR_EnvDeletePoint</title>
        <functioncall prog_lang="cpp">bool BR_EnvDeletePoint(BR_Envelope* envelope, int id)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_EnvDeletePoint", BR_Envelope envelope, int id)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_EnvDeletePoint(BR_Envelope envelope, integer id)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_EnvDeletePoint(BR_Envelope envelope, Int id)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc.
        </description>
        <retvals>
            boolean retval - true, deleting was successful; false, deleting was unsuccessful
        </retvals>
        <parameters>
            BR_Envelope envelope - the BR_Envelope-object, where you want to delete an envelope-point
            integer id - the envelope-point-idx, that you want to delete. 0, first envelope-point; 1, second envelope-point, etc
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags>sws, envelopemanagement, br, br_envelope, sws, envelope, delete, point</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvFind</slug>
        <title>BR_EnvFind</title>
        <functioncall prog_lang="cpp">int BR_EnvFind(BR_Envelope* envelope, double position, double delta)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_EnvFind", BR_Envelope envelope, position, delta)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_EnvFind(BR_Envelope envelope, number position, number delta)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_EnvFind(BR_Envelope envelope, Float position, Float delta)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc. 
            
            Pass delta > 0 to search surrounding range - in that case the closest point to position within delta will be searched for. 
            
            Returns envelope point id (zero-based) on success or -1 on failure.
        </description>
        <retvals>
            integer retval - envelope-point-id or -1 on failure
        </retvals>
        <parameters>
            BR_Envelope envelope - the BR_Envelope-object, in which you want to find an envelope-point
            number position - the position in seconds, where you want to find from
            number delta - delta > 0 to search surrounding range
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>sws, envelopemanagement, br, br_envelope, sws, envelope, find, point, delta</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvFindNext</slug>
        <title>BR_EnvFindNext</title>
        <functioncall prog_lang="cpp">int BR_EnvFindNext(BR_Envelope* envelope, double position)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_EnvFindNext", BR_Envelope envelope, position)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_EnvFindNext(BR_Envelope envelope, number position)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_EnvFindNext(BR_Envelope envelope, Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. 
            
            Returns envelope point id (zero-based) on success or -1 on failure.
        </description>
        <retvals>
            integer retval - envelope-point-id or -1 on failure
        </retvals>
        <parameters>
            BR_Envelope envelope - the BR_Envelope-object, in which you want to find the next envelope-point
            number position - the position in seconds, where you want to find the next envelope-point from
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>sws, envelopemanagement, br, br_envelope, sws, envelope, find, point, next</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvFindPrevious</slug>
        <title>BR_EnvFindPrevious</title>
        <functioncall prog_lang="cpp">int BR_EnvFindPrevious(BR_Envelope* envelope, double position)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_EnvFindPrevious", BR_Envelope envelope, position)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_EnvFindPrevious(BR_Envelope envelope, number position)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_EnvFindPrevious(BR_Envelope envelope, Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. 
            
            Returns envelope point id (zero-based) on success or -1 on failure.
        </description>
        <retvals>
            integer retval - envelope-point-id or -1 on failure
        </retvals>
        <parameters>
            BR_Envelope envelope - the BR_Envelope-object, in which you want to find the previous envelope-point
            number position - the position in seconds, where you want to find the previous envelope-point from
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>sws, envelopemanagement, br, br_envelope, sws, envelope, find, point, previous</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvFree</slug>
        <title>BR_EnvFree</title>
        <functioncall prog_lang="cpp">bool BR_EnvFree(BR_Envelope* envelope, bool commit)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_EnvFree", BR_Envelope envelope, bool commit)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_EnvFree(BR_Envelope envelope, boolean commit)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_EnvFree(BR_Envelope envelope, Boolean commit)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Free envelope object allocated with BR_EnvAlloc and commit changes if needed. 
            
            Returns true if changes were committed successfully. 
            
            Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false.
        </description>
        <retvals>
            boolean retval - true, committing was successful; false, committing was unsuccessful or no committing was necessary
        </retvals>
        <parameters>
            BR_Envelope envelope - the BR_Envelope-object that you want to commit and be freed
            boolean commit - true, commit changes when freeing the BR_Envelope-object; false, don't commit changes when freeing the BR_Envelope-object
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>sws, envelopemanagement, br, br_envelope, sws, envelope, free</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvGetParentTake</slug>
        <title>BR_EnvGetParentTake</title>
        <functioncall prog_lang="cpp">MediaItem_Take* BR_EnvGetParentTake(BR_Envelope* envelope)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take extension_api("BR_EnvGetParentTake", BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take = reaper.BR_EnvGetParentTake(BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take take = BR_EnvGetParentTake(BR_Envelope envelope)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.
        </description>
        <retvals>
            MediaItem_Take take - 
        </retvals>
        <parameters>
            BR_Envelope envelope - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Take Envelopes
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvGetParentTrack</slug>
        <title>BR_EnvGetParentTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* BR_EnvGetParentTrack(BR_Envelope* envelope)</functioncall>
        <functioncall prog_lang="eel">MediaTrack extension_api("BR_EnvGetParentTrack", BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="lua">MediaTrack tr = reaper.BR_EnvGetParentTrack(BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="python">MediaTrack tr = BR_EnvGetParentTrack(BR_Envelope envelope)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.
        </description>
        <retvals>
            MediaTrack tr - 
        </retvals>
        <parameters>
            BR_Envelope envelope - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Track Envelopes
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvGetPoint</slug>
        <title>BR_EnvGetPoint</title>
        <functioncall prog_lang="cpp">bool BR_EnvGetPoint(BR_Envelope* envelope, int id, double* positionOut, double* valueOut, int* shapeOut, bool* selectedOut, double* bezierOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_EnvGetPoint", BR_Envelope envelope, int id, &position, &value, int &shape, bool &selected, &bezier)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number position, number value, integer shape, boolean selected, number bezier = reaper.BR_EnvGetPoint(BR_Envelope envelope, integer id)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, BR_Envelope envelope, Int id, Float positionOut, Float valueOut, Int shapeOut, Boolean selectedOut, Float bezierOut) = BR_EnvGetPoint(envelope, id, positionOut, valueOut, shapeOut, selectedOut, bezierOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. 
            
            Returns true on success.
        </description>
        <retvals>
            boolean retval - 
            number position - 
            number value - 
            integer shape - 
            boolean selected - 
            number bezier - 
        </retvals>
        <parameters>
            BR_Envelope envelope - 
            integer id - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvGetProperties</slug>
        <title>BR_EnvGetProperties</title>
        <functioncall prog_lang="cpp">void BR_EnvGetProperties(BR_Envelope* envelope, bool* activeOut, bool* visibleOut, bool* armedOut, bool* inLaneOut, int* laneHeightOut, int* defaultShapeOut, double* minValueOut, double* maxValueOut, double* centerValueOut, int* typeOut, bool* faderScalingOut, int* automationItemsOptionsOutOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_EnvGetProperties", BR_Envelope envelope, bool &active, bool &visible, bool &armed, bool &inLane, int &laneHeight, int &defaultShape, &minValue, &maxValue, &centerValue, int &type, bool &faderScaling, optional int &automationItemsOptions)</functioncall>
        <functioncall prog_lang="lua">boolean active, boolean visible, boolean armed, boolean inLane, integer laneHeight, integer defaultShape, number minValue, number maxValue, number centerValue, integer type, boolean faderScaling, optional integer automationItemsOptions = reaper.BR_EnvGetProperties(BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="python">(BR_Envelope envelope, Boolean activeOut, Boolean visibleOut, Boolean armedOut, Boolean inLaneOut, Int laneHeightOut, Int defaultShapeOut, Float minValueOut, Float maxValueOut, Float centerValueOut, Int typeOut, Boolean faderScalingOut, Int automationItemsOptionsOutOptional) = BR_EnvGetProperties(envelope, activeOut, visibleOut, armedOut, inLaneOut, laneHeightOut, defaultShapeOut, minValueOut, maxValueOut, centerValueOut, typeOut, faderScalingOut, automationItemsOptionsOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.11.0
        </requires>
        <description>
            [BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.

            active: true if envelope is active
            visible: true if envelope is visible
            armed: true if envelope is armed
            inLane: true if envelope has it's own envelope lane
            laneHeight: envelope lane override height. 0 for none, otherwise size in pixels
            defaultShape: default point shape: 0->Linear, 1->Square, 2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier
            minValue: minimum envelope value
            maxValue: maximum envelope value
            type: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan, 3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute, 7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter
            faderScaling: true if envelope uses fader scaling
            automationItemsOptions: -1->project default, &1=0->don't attach to underl. env., &1->attach to underl. env. on right side, &2->attach to underl. env. on both sides, &4: bypass underl. env.
        </description>
        <retvals>
            boolean active - 
            boolean visible - 
            boolean armed - 
            boolean inLane - 
            integer laneHeight - 
            integer defaultShape - 
            number minValue - 
            number maxValue - 
            number centerValue - 
            integer type - 
            boolean faderScaling - 
            optional integer automationItemsOptions - 
        </retvals>
        <parameters>
            BR_Envelope envelope - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvSetPoint</slug>
        <title>BR_EnvSetPoint</title>
        <functioncall prog_lang="cpp">bool BR_EnvSetPoint(BR_Envelope* envelope, int id, double position, double value, int shape, bool selected, double bezier)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_EnvSetPoint", BR_Envelope envelope, int id, position, value, int shape, bool selected, bezier)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_EnvSetPoint(BR_Envelope envelope, integer id, number position, number value, integer shape, boolean selected, number bezier)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_EnvSetPoint(BR_Envelope envelope, Int id, Float position, Float value, Int shape, Boolean selected, Float bezier)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc. 
            
            To create point instead, pass id = -1. 
            
            Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see BR_EnvSortPoints.
            Returns true on success.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            BR_Envelope envelope - 
            integer id - 
            number position - 
            number value - 
            integer shape - 
            boolean selected - 
            number bezier - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvSetProperties</slug>
        <title>BR_EnvSetProperties</title>
        <functioncall prog_lang="cpp">void BR_EnvSetProperties(BR_Envelope* envelope, bool active, bool visible, bool armed, bool inLane, int laneHeight, int defaultShape, bool faderScaling, int* automationItemsOptionsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_EnvSetProperties", BR_Envelope envelope, bool active, bool visible, bool armed, bool inLane, int laneHeight, int defaultShape, bool faderScaling, optional int automationItemsOptionsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.BR_EnvSetProperties(BR_Envelope envelope, boolean active, boolean visible, boolean armed, boolean inLane, integer laneHeight, integer defaultShape, boolean faderScaling, optional integer automationItemsOptionsIn)</functioncall>
        <functioncall prog_lang="python">(BR_Envelope envelope, Boolean active, Boolean visible, Boolean armed, Boolean inLane, Int laneHeight, Int defaultShape, Boolean faderScaling, Int automationItemsOptionsInOptional) = BR_EnvSetProperties(envelope, active, visible, armed, inLane, laneHeight, defaultShape, faderScaling, automationItemsOptionsInOptional)</functioncall>
        <requires>
            Reaper=5.979
            SWS=2.11.0
        </requires>
        <description>
            [BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. 
            
            For parameter description see BR_EnvGetProperties.
            
            Setting automationItemsOptions requires REAPER 5.979+.
        </description>
        <parameters>
            TrackEnvelope envelope - 
            boolean active - 
            boolean visible - 
            boolean armed - 
            boolean inLane - 
            integer laneHeight - 
            integer defaultShape - 
            boolean faderScaling - 
            optional integer automationItemsOptionsIn - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvSortPoints</slug>
        <title>BR_EnvSortPoints</title>
        <functioncall prog_lang="cpp">void BR_EnvSortPoints(BR_Envelope* envelope)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_EnvSortPoints", BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="lua">reaper.BR_EnvSortPoints(BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="python">BR_EnvSortPoints(BR_Envelope envelope)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Sort envelope points by position. 
            
            The only reason to call this is if sorted points are explicitly needed after editing them with BR_EnvSetPoint. 
            
            Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.
        </description>
        <parameters>
            BR_Envelope envelope - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
            Reaper:BR_EnvValueAtPos
                   gets envelope point value at position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Envelope Points
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvValueAtPos</slug>
        <title>BR_EnvValueAtPos</title>
        <functioncall prog_lang="cpp">double BR_EnvValueAtPos(BR_Envelope* envelope, double position)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_EnvValueAtPos", BR_Envelope envelope, position)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.BR_EnvValueAtPos(BR_Envelope envelope, number position)</functioncall>
        <functioncall prog_lang="python">Float retval = BR_EnvValueAtPos(BR_Envelope envelope, Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            BR_Envelope envelope - 
            number position - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_EnvAlloc
                   creates an envelope object, that can be used by BR_Env-functions
            Reaper:BR_EnvCountPoints
                   counts envelope points
            Reaper:BR_EnvDeletePoint
                   deletes an envelope point
            Reaper:BR_EnvFind
                   finds envelope point at position
            Reaper:BR_EnvFindNext
                   find next envelope point after position
            Reaper:BR_EnvFindPrevious
                   find previous envelope point before position
            Reaper:BR_EnvFree
                   delete an BR_Envelope object created by BR_EnvAlloc
            Reaper:BR_EnvGetParentTake
                   gets parent take of an envelope
            Reaper:BR_EnvGetParentTrack
                   gets parent track of an envelope
            Reaper:BR_EnvGetPoint
                   gets envelope point
            Reaper:BR_EnvGetProperties
                   gets envelope point properties
            Reaper:BR_EnvSetPoint
                   sets an envelope point
            Reaper:BR_EnvSetProperties
                   sets envelope point properties
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetArrangeView</slug>
        <title>BR_GetArrangeView</title>
        <functioncall prog_lang="cpp">void BR_GetArrangeView(ReaProject* proj, double* startTimeOut, double* endTimeOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetArrangeView", ReaProject proj, &startTime, &endTime)</functioncall>
        <functioncall prog_lang="lua">number startTime, number endTime = reaper.BR_GetArrangeView(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Float startTimeOut, Float endTimeOut) = BR_GetArrangeView(proj, startTimeOut, endTimeOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+)
            
            Get start and end time position of arrange view. 
            
            To set arrange view instead, see BR_SetArrangeView.
        </description>
        <deprecated since_when="SWS 2.9.7" alternative="GetSet_ArrangeView2(available since at least Reaper 5.13)"/>
        <retvals>
            number startTime - the current starttime in the arrangeview in seconds
            number endTime - the current endtime in the arrangeview in seconds
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetSet_ArrangeView2
                   gets/sets arrangeview position and viewrange
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Arrangeview Management
        </chapter_context>
        <tags>sws, arrangeviewmanagement, get, start, end, seconds, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetClosestGridDivision</slug>
        <title>BR_GetClosestGridDivision</title>
        <functioncall prog_lang="cpp">double BR_GetClosestGridDivision(double position)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetClosestGridDivision", position)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.BR_GetClosestGridDivision(number position)</functioncall>
        <functioncall prog_lang="python">Float retval = BR_GetClosestGridDivision(Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Get closest grid division to position. 
            
            Note that this functions is different from SnapToGrid in two regards. SnapToGrid() needs snap enabled to work and this one works always. 
            Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. 
            
            For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            number position - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_GetNextGridDivision
                   gets the next grid division after position
            Reaper:BR_GetPrevGridDivision
                   gets the previous grid division before position
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetCurrentTheme</slug>
        <title>BR_GetCurrentTheme</title>
        <functioncall prog_lang="cpp">void BR_GetCurrentTheme(char* themePathOut, int themePathOut_sz, char* themeNameOut, int themeNameOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetCurrentTheme", #themePath, #themeName)</functioncall>
        <functioncall prog_lang="lua">string themePath, string themeName = reaper.BR_GetCurrentTheme()</functioncall>
        <functioncall prog_lang="python">(String themePathOut, Int themePathOut_sz, String themeNameOut, Int themeNameOut_sz) = BR_GetCurrentTheme(themePathOut, themePathOut_sz, themeNameOut, themeNameOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension
        </description>
        <retvals>
            string themePath - 
            string themeName - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaItemByGUID</slug>
        <title>BR_GetMediaItemByGUID</title>
        <functioncall prog_lang="cpp">MediaItem* BR_GetMediaItemByGUID(ReaProject* proj, const char* guidStringIn)</functioncall>
        <functioncall prog_lang="eel">MediaItem extension_api("BR_GetMediaItemByGUID", ReaProject proj, "guidStringIn")</functioncall>
        <functioncall prog_lang="lua">MediaItem item = reaper.BR_GetMediaItemByGUID(ReaProject proj, string guidStringIn)</functioncall>
        <functioncall prog_lang="python">MediaItem item = BR_GetMediaItemByGUID(ReaProject proj, String guidStringIn)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. 
            
            To get item's GUID as a string, see BR_GetMediaItemGUID.
        </description>
        <retvals>
            MediaItem item - the requested MediaItem as a MediaItem-object
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            string guidStringIn - the guid of the MediaItem you want to request.
        </parameters>
        <linked_to desc="see also:">
            Reaper:BR_GetMediaItemGUID
                   gets the guid of a MediaItem
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>sws, mediaitemmanagement, get, guid, project</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaItemGUID</slug>
        <title>BR_GetMediaItemGUID</title>
        <functioncall prog_lang="cpp">void BR_GetMediaItemGUID(MediaItem* item, char* guidStringOut, int guidStringOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetMediaItemGUID", MediaItem item, #guidString)</functioncall>
        <functioncall prog_lang="lua">string guidString = reaper.BR_GetMediaItemGUID(MediaItem item)</functioncall>
        <functioncall prog_lang="python">(MediaItem item, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaItemGUID(item, guidStringOut, guidStringOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see [BR\_GetMediaItemByGUID](#BR_GetMediaItemByGUID).
        </description>
        <retvals>
            string guidString - the requested guid of the MediaItem
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose guid you want to request
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>sws, mediaitemmanagement, get, guid, item</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaItemImageResource</slug>
        <title>BR_GetMediaItemImageResource</title>
        <functioncall prog_lang="cpp">bool BR_GetMediaItemImageResource(MediaItem* item, char* imageOut, int imageOut_sz, int* imageFlagsOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_GetMediaItemImageResource", MediaItem item, #image, int &imageFlags)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string image, integer imageFlags = reaper.BR_GetMediaItemImageResource(MediaItem item)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, String imageOut, Int imageOut_sz, Int imageFlagsOut) = BR_GetMediaItemImageResource(item, imageOut, imageOut_sz, imageFlagsOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.11.0
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Get currently loaded image resource and its flags for a given item. Returns false if there is no image resource set. To set image resource, see [BR\_SetMediaItemImageResource](#BR_SetMediaItemImageResource).
        </description>
        <retvals>
            boolean retval - 
            string image - 
            integer imageFlags - 
        </retvals>
        <parameters>
            MediaItem item - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaItemTakeGUID</slug>
        <title>BR_GetMediaItemTakeGUID</title>
        <functioncall prog_lang="cpp">void BR_GetMediaItemTakeGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetMediaItemTakeGUID", MediaItem_Take take, #guidString)</functioncall>
        <functioncall prog_lang="lua">string guidString = reaper.BR_GetMediaItemTakeGUID(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(MediaItem_Take take, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaItemTakeGUID(take, guidStringOut, guidStringOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see [SNM\_GetMediaItemTakeByGUID](#SNM_GetMediaItemTakeByGUID).
        </description>
        <retvals>
            string guidString - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaSourceProperties</slug>
        <title>BR_GetMediaSourceProperties</title>
        <functioncall prog_lang="cpp">bool BR_GetMediaSourceProperties(MediaItem_Take* take, bool* sectionOut, double* startOut, double* lengthOut, double* fadeOut, bool* reverseOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_GetMediaSourceProperties", MediaItem_Take take, bool &section, &start, &length, &fade, bool &reverse)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean section, number start, number length, number fade, boolean reverse = reaper.BR_GetMediaSourceProperties(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean sectionOut, Float startOut, Float lengthOut, Float fadeOut, Boolean reverseOut) = BR_GetMediaSourceProperties(take, sectionOut, startOut, lengthOut, fadeOut, reverseOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).
            To set source properties, see [BR\_SetMediaSourceProperties](#BR_SetMediaSourceProperties).
        </description>
        <retvals>
            boolean retval - 
            boolean section - 
            number start - 
            number length - 
            number fade - 
            boolean reverse - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackByGUID</slug>
        <title>BR_GetMediaTrackByGUID</title>
        <functioncall prog_lang="cpp">MediaTrack* BR_GetMediaTrackByGUID(ReaProject* proj, const char* guidStringIn)</functioncall>
        <functioncall prog_lang="eel">MediaTrack extension_api("BR_GetMediaTrackByGUID", ReaProject proj, "guidStringIn")</functioncall>
        <functioncall prog_lang="lua">MediaTrack tr = reaper.BR_GetMediaTrackByGUID(ReaProject proj, string guidStringIn)</functioncall>
        <functioncall prog_lang="python">MediaTrack tr = BR_GetMediaTrackByGUID(ReaProject proj, String guidStringIn)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.12.1.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see [GetSetMediaTrackInfo\_String](#GetSetMediaTrackInfo_String).
        </description>
        <retvals>
            MediaTrack tr - the MediaTrack requested, as MediaTrack-object
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            string guidStringIn - the guid of the track you want to request
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>sws, trackmanagement, get, guid, track</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackFreezeCount</slug>
        <title>BR_GetMediaTrackFreezeCount</title>
        <functioncall prog_lang="cpp">int BR_GetMediaTrackFreezeCount(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_GetMediaTrackFreezeCount", MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_GetMediaTrackFreezeCount(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_GetMediaTrackFreezeCount(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Get media track freeze count (if track isn't frozen at all, returns 0).
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackGUID</slug>
        <title>BR_GetMediaTrackGUID</title>
        <functioncall prog_lang="cpp">void BR_GetMediaTrackGUID(MediaTrack* track, char* guidStringOut, int guidStringOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetMediaTrackGUID", MediaTrack track, #guidString)</functioncall>
        <functioncall prog_lang="lua">string guidString = reaper.BR_GetMediaTrackGUID(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(MediaTrack track, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaTrackGUID(track, guidStringOut, guidStringOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.12.1.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Deprecated, see [GetSetMediaTrackInfo\_String](#GetSetMediaTrackInfo_String) (v5.95+). Get media track GUID as a string (guidStringOut\_sz should be at least 64). To get media track back from GUID string, see [BR\_GetMediaTrackByGUID](#BR_GetMediaTrackByGUID).
        </description>
        <deprecated since_when="SWS 2.12.1.1" alternative="GetSetMediaTrackInfo_String(available since Reaper 5.95)"/>
        <retvals>
            string guidString - the guid of the track
        </retvals>
        <parameters>
            MediaTrack track - the track, whose guid you want to get
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackLayouts</slug>
        <title>BR_GetMediaTrackLayouts</title>
        <functioncall prog_lang="cpp">void BR_GetMediaTrackLayouts(MediaTrack* track, char* mcpLayoutNameOut, int mcpLayoutNameOut_sz, char* tcpLayoutNameOut, int tcpLayoutNameOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetMediaTrackLayouts", MediaTrack track, #mcpLayoutName, #tcpLayoutName)</functioncall>
        <functioncall prog_lang="lua">string mcpLayoutName, string tcpLayoutName = reaper.BR_GetMediaTrackLayouts(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(MediaTrack track, String mcpLayoutNameOut, Int mcpLayoutNameOut_sz, String tcpLayoutNameOut, Int tcpLayoutNameOut_sz) = BR_GetMediaTrackLayouts(track, mcpLayoutNameOut, mcpLayoutNameOut_sz, tcpLayoutNameOut, tcpLayoutNameOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Deprecated, see [GetSetMediaTrackInfo](#GetSetMediaTrackInfo) (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string ("") means that layout is set to the default layout. To set media track layouts, see [BR\_SetMediaTrackLayouts](#BR_SetMediaTrackLayouts).
        </description>
        <deprecated since_when="SWS 2.9.7" alternative="GetSetMediaTrackInfo(available since Reaper 5.02)"/>
        <retvals>
            string mcpLayoutName - 
            string tcpLayoutName - 
        </retvals>
        <parameters>
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackSendInfo_Envelope</slug>
        <title>BR_GetMediaTrackSendInfo_Envelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* BR_GetMediaTrackSendInfo_Envelope(MediaTrack* track, int category, int sendidx, int envelopeType)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope extension_api("BR_GetMediaTrackSendInfo_Envelope", MediaTrack track, int category, int sendidx, int envelopeType)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope env = reaper.BR_GetMediaTrackSendInfo_Envelope(MediaTrack track, integer category, integer sendidx, integer envelopeType)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope env = BR_GetMediaTrackSendInfo_Envelope(MediaTrack track, Int category, Int sendidx, Int envelopeType)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Get track envelope for send/receive/hardware output.

            category is <0 for receives, 0=sends, >0 for hardware outputs
            sendidx is zero-based (see [GetTrackNumSends](#GetTrackNumSends) to count track sends/receives/hardware outputs)
            envelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)

            Note: To get or set other send attributes, see [BR\_GetSetTrackSendInfo](#BR_GetSetTrackSendInfo) and [BR\_GetMediaTrackSendInfo\_Track](#BR_GetMediaTrackSendInfo_Track).
        </description>
        <retvals>
            TrackEnvelope env - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer category - 
            integer sendidx - 
            integer envelopeType - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackSendInfo_Track</slug>
        <title>BR_GetMediaTrackSendInfo_Track</title>
        <functioncall prog_lang="cpp">MediaTrack* BR_GetMediaTrackSendInfo_Track(MediaTrack* track, int category, int sendidx, int trackType)</functioncall>
        <functioncall prog_lang="eel">MediaTrack extension_api("BR_GetMediaTrackSendInfo_Track", MediaTrack track, int category, int sendidx, int trackType)</functioncall>
        <functioncall prog_lang="lua">MediaTrack tr = reaper.BR_GetMediaTrackSendInfo_Track(MediaTrack track, integer category, integer sendidx, integer trackType)</functioncall>
        <functioncall prog_lang="python">MediaTrack tr = BR_GetMediaTrackSendInfo_Track(MediaTrack track, Int category, Int sendidx, Int trackType)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Get source or destination media track for send/receive.

            category is <0 for receives, 0=sends
            sendidx is zero-based (see [GetTrackNumSends](#GetTrackNumSends) to count track sends/receives)
            trackType determines which track is returned (0=source track, 1=destination track)

            Note: To get or set other send attributes, see [BR\_GetSetTrackSendInfo](#BR_GetSetTrackSendInfo) and [BR\_GetMediaTrackSendInfo_Envelope](#BR_GetMediaTrackSendInfo_Envelope).
        </description>
        <retvals>
            MediaTrack tr - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer category - 
            integer sendidx - 
            integer trackType - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMidiSourceLenPPQ</slug>
        <title>BR_GetMidiSourceLenPPQ</title>
        <functioncall prog_lang="cpp">double BR_GetMidiSourceLenPPQ(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetMidiSourceLenPPQ", MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.BR_GetMidiSourceLenPPQ(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Float retval = BR_GetMidiSourceLenPPQ(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMidiTakePoolGUID</slug>
        <title>BR_GetMidiTakePoolGUID</title>
        <functioncall prog_lang="cpp">bool BR_GetMidiTakePoolGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_GetMidiTakePoolGUID", MediaItem_Take take, #guidString)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string guidString = reaper.BR_GetMidiTakePoolGUID(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, String guidStringOut, Int guidStringOut_sz) = BR_GetMidiTakePoolGUID(take, guidStringOut, guidStringOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.
        </description>
        <retvals>
            boolean retval - 
            string guidString - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMidiTakeTempoInfo</slug>
        <title>BR_GetMidiTakeTempoInfo</title>
        <functioncall prog_lang="cpp">bool BR_GetMidiTakeTempoInfo(MediaItem_Take* take, bool* ignoreProjTempoOut, double* bpmOut, int* numOut, int* denOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_GetMidiTakeTempoInfo", MediaItem_Take take, bool &ignoreProjTempo, &bpm, int &num, int &den)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean ignoreProjTempo, number bpm, integer num, integer den = reaper.BR_GetMidiTakeTempoInfo(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean ignoreProjTempoOut, Float bpmOut, Int numOut, Int denOut) = BR_GetMidiTakeTempoInfo(take, ignoreProjTempoOut, bpmOut, numOut, denOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Get "ignore project tempo" information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.
        </description>
        <retvals>
            boolean retval - 
            boolean ignoreProjTempo - 
            number bpm - 
            integer num - 
            integer den - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext</slug>
        <title>BR_GetMouseCursorContext</title>
        <functioncall prog_lang="cpp">void BR_GetMouseCursorContext(char* windowOut, int windowOut_sz, char* segmentOut, int segmentOut_sz, char* detailsOut, int detailsOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetMouseCursorContext", #window, #segment, #details)</functioncall>
        <functioncall prog_lang="lua">string window, string segment, string details = reaper.BR_GetMouseCursorContext()</functioncall>
        <functioncall prog_lang="python">(String windowOut, Int windowOut_sz, String segmentOut, Int segmentOut_sz, String detailsOut, Int detailsOut_sz) = BR_GetMouseCursorContext(windowOut, windowOut_sz, segmentOut, segmentOut_sz, detailsOut, detailsOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.

            To get more info on stuff that was found under mouse cursor see [BR\_GetMouseCursorContext\_Envelope](#BR_GetMouseCursorContext_Envelope), [BR\_GetMouseCursorContext\_Item](#BR_GetMouseCursorContext_Item), [BR\_GetMouseCursorContext\_MIDI](#BR_GetMouseCursorContext_MIDI), [BR\_GetMouseCursorContext\_Position](#BR_GetMouseCursorContext_Position), [BR\_GetMouseCursorContext\_Take](#BR_GetMouseCursorContext_Take), [BR\_GetMouseCursorContext\_Track](#BR_GetMouseCursorContext_Track)
            <table border='2'>
            <tr><th style='width:100px'>Window</th><th style='width:100px'>Segment</th><th style='width:300px'>Details</th></tr>
            <tr><th rowspan='1' align = 'center'>unknown</th><td>""</td><td>""</td></tr>
            <tr><th rowspan='4' align = 'center'>ruler</th><td>region\_lane </td><td>""</td></tr>
            <tr><td>marker\_lane </td><td>""</td></tr>
            <tr><td>tempo\_lane </td><td>""</td></tr>
            <tr><td>timeline</td><td>""</td></tr>
            <tr><th rowspan='1' align = 'center'>transport</th><td>""</td><td>""</td></tr>
            <tr><th rowspan='3' align = 'center'>tcp </th><td>track</td><td>""</td></tr>
            <tr><td>envelope</td><td>""</td></tr>
            <tr><td>empty</td><td>""</td></tr>
            <tr><th rowspan='2' align = 'center'>mcp </th><td>track</td><td>""</td></tr>
            <tr><td>empty</td><td>""</td></tr>
            <tr><th rowspan='3' align = 'center'>arrange</th><td>track</td><td>empty,item, item\_stretch\_marker,env\_point, env\_segment </td></tr>
            <tr><td>envelope</td><td>empty, env\_point, env\_segment</td></tr>
            <tr><td>empty</td><td>""</td></tr>
            <tr><th rowspan='5' align = 'center'>midi\_editor </th><td>unknown</td><td>""</td></tr>
            <tr><td>ruler</td><td>""</td></tr>
            <tr><td>piano</td><td>""</td></tr>
            <tr><td>notes</td><td>""</td></tr>
            <tr><td>cc\_lane</td><td>cc\_selector, cc\_lane</td></tr>
            </table>
        </description>
        <retvals>
            string window - the window, in which the mouse-cursor was, at time of calling BR_GetMouseCursorContext
            string segment - the segment within the window
            string details - details with the segment of the window
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Mouse
        </chapter_context>
        <tags>sws, userinterface, get, mouse, cursor, context</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_Envelope</slug>
        <title>BR_GetMouseCursorContext_Envelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* BR_GetMouseCursorContext_Envelope(bool* takeEnvelopeOut)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope extension_api("BR_GetMouseCursorContext_Envelope", bool &takeEnvelope)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope retval, boolean takeEnvelope = reaper.BR_GetMouseCursorContext_Envelope()</functioncall>
        <functioncall prog_lang="python">(TrackEnvelope retval, Boolean takeEnvelopeOut) = BR_GetMouseCursorContext_Envelope(takeEnvelopeOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Returns envelope that was captured with the last call to [BR\_GetMouseCursorContext](#BR_GetMouseCursorContext). In case the envelope belongs to take, takeEnvelope will be true.
        </description>
        <retvals>
            TrackEnvelope retval - 
            boolean takeEnvelope - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Envelope Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_Item</slug>
        <title>BR_GetMouseCursorContext_Item</title>
        <functioncall prog_lang="cpp">MediaItem* BR_GetMouseCursorContext_Item()</functioncall>
        <functioncall prog_lang="eel">MediaItem extension_api("BR_GetMouseCursorContext_Item")</functioncall>
        <functioncall prog_lang="lua">MediaItem item = reaper.BR_GetMouseCursorContext_Item()</functioncall>
        <functioncall prog_lang="python">MediaItem item = BR_GetMouseCursorContext_Item()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Returns item under mouse cursor that was captured with the last call to [BR\_GetMouseCursorContext](#BR_GetMouseCursorContext). Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.
        </description>
        <retvals>
            MediaItem item - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Mouse
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_MIDI</slug>
        <title>BR_GetMouseCursorContext_MIDI</title>
        <functioncall prog_lang="cpp">void* BR_GetMouseCursorContext_MIDI(bool* inlineEditorOut, int* noteRowOut, int* ccLaneOut, int* ccLaneValOut, int* ccLaneIdOut)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_GetMouseCursorContext_MIDI", bool &inlineEditor, int &noteRow, int &ccLane, int &ccLaneVal, int &ccLaneId)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd, boolean inlineEditor, integer noteRow, integer ccLane, integer ccLaneVal, integer ccLaneId = reaper.BR_GetMouseCursorContext_MIDI()</functioncall>
        <functioncall prog_lang="python">(void retval, Boolean inlineEditorOut, Int noteRowOut, Int ccLaneOut, Int ccLaneValOut, Int ccLaneIdOut) = BR_GetMouseCursorContext_MIDI(inlineEditorOut, noteRowOut, ccLaneOut, ccLaneValOut, ccLaneIdOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Returns midi editor under mouse cursor that was captured with the last call to [BR\_GetMouseCursorContext](#BR_GetMouseCursorContext).

            inlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)
            noteRow: note row or piano key under mouse cursor (0-127)
            ccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events)
            ccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)
            ccLaneId: lane position, counting from the top (0 based)

            Note: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1
        </description>
        <retvals>
            identifier hwnd - 
            boolean inlineEditor - 
            integer noteRow - 
            integer ccLane - 
            integer ccLaneVal - 
            integer ccLaneId - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_Position</slug>
        <title>BR_GetMouseCursorContext_Position</title>
        <functioncall prog_lang="cpp">double BR_GetMouseCursorContext_Position()</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetMouseCursorContext_Position")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.BR_GetMouseCursorContext_Position()</functioncall>
        <functioncall prog_lang="python">Float retval = BR_GetMouseCursorContext_Position()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to [BR\_GetMouseCursorContext](#BR_GetMouseCursorContext).
        </description>
        <retvals>
            number retval - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Arrangeview Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_StretchMarker</slug>
        <title>BR_GetMouseCursorContext_StretchMarker</title>
        <functioncall prog_lang="cpp">int BR_GetMouseCursorContext_StretchMarker()</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_GetMouseCursorContext_StretchMarker")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_GetMouseCursorContext_StretchMarker()</functioncall>
        <functioncall prog_lang="python">Int retval = BR_GetMouseCursorContext_StretchMarker()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to [BR\_GetMouseCursorContext](#BR_GetMouseCursorContext).
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Stretch Markers
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_Take</slug>
        <title>BR_GetMouseCursorContext_Take</title>
        <functioncall prog_lang="cpp">MediaItem_Take* BR_GetMouseCursorContext_Take()</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take extension_api("BR_GetMouseCursorContext_Take")</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take = reaper.BR_GetMouseCursorContext_Take()</functioncall>
        <functioncall prog_lang="python">MediaItem_Take take = BR_GetMouseCursorContext_Take()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Returns take under mouse cursor that was captured with the last call to [BR\_GetMouseCursorContext](#BR_GetMouseCursorContext).
        </description>
        <retvals>
            MediaItem_Take take - the found take under the mouse-cursor
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_Track</slug>
        <title>BR_GetMouseCursorContext_Track</title>
        <functioncall prog_lang="cpp">MediaTrack* BR_GetMouseCursorContext_Track()</functioncall>
        <functioncall prog_lang="eel">MediaTrack extension_api("BR_GetMouseCursorContext_Track")</functioncall>
        <functioncall prog_lang="lua">MediaTrack tr = reaper.BR_GetMouseCursorContext_Track()</functioncall>
        <functioncall prog_lang="python">MediaTrack tr = BR_GetMouseCursorContext_Track()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Returns track under mouse cursor that was captured with the last call to [BR\_GetMouseCursorContext](#BR_GetMouseCursorContext).
        </description>
        <retvals>
            MediaTrack tr - the track under the mouse-cursor
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetNextGridDivision</slug>
        <title>BR_GetNextGridDivision</title>
        <functioncall prog_lang="cpp">double BR_GetNextGridDivision(double position)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetNextGridDivision", position)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.BR_GetNextGridDivision(number position)</functioncall>
        <functioncall prog_lang="python">Float retval = BR_GetNextGridDivision(Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Get next grid division after the time position. For more grid divisions function, see [BR\_GetClosestGridDivision](#BR_GetClosestGridDivision) and [BR\_GetPrevGridDivision](#BR_GetPrevGridDivision).
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            number position - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetPrevGridDivision</slug>
        <title>BR_GetPrevGridDivision</title>
        <functioncall prog_lang="cpp">double BR_GetPrevGridDivision(double position)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetPrevGridDivision", position)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.BR_GetPrevGridDivision(number position)</functioncall>
        <functioncall prog_lang="python">Float retval = BR_GetPrevGridDivision(Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Get previous grid division before the time position. For more grid division functions, see [BR\_GetClosestGridDivision](#BR_GetClosestGridDivision) and [BR\_GetNextGridDivision](#BR_GetNextGridDivision).
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            number position - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Time/Grid Conversion/Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetSetTrackSendInfo</slug>
        <title>BR_GetSetTrackSendInfo</title>
        <functioncall prog_lang="cpp">double BR_GetSetTrackSendInfo(MediaTrack* track, int category, int sendidx, const char* parmname, bool setNewValue, double newValue)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetSetTrackSendInfo", MediaTrack track, int category, int sendidx, "parmname", bool setNewValue, newValue)</functioncall>
        <functioncall prog_lang="lua">number value = reaper.BR_GetSetTrackSendInfo(MediaTrack track, integer category, integer sendidx, string parmname, boolean setNewValue, number newValue)</functioncall>
        <functioncall prog_lang="python">Float retval = BR_GetSetTrackSendInfo(MediaTrack track, Int category, Int sendidx, String parmname, Boolean setNewValue, Float newValue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [BR] Get or set send attributes.

            category is <0 for receives, 0=sends, >0 for hardware outputs
            sendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)
            To set attribute, pass setNewValue as true

            List of possible parameters:

               B_MUTE : send mute state (1.0 if muted, otherwise 0.0)
               B_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)
               B_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)
               D_VOL : send volume (1.0=+0dB etc...)
               D_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)
               D_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)
               I_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)
               I_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)
               I_DSTCHAN : audio destination starting channel index (&1024=mono (and in case of hardware output &512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)
               I_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)
               I_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)
               I_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
               I_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
               I_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI

            Note: To get or set other send attributes, see [BR\_GetMediaTrackSendInfo\_Envelope](#BR_GetMediaTrackSendInfo_Envelope) and [BR\_GetMediaTrackSendInfo\_Track](#BR_GetMediaTrackSendInfo_Track).
        </description>
        <retvals>
            number value - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer category - 
            integer sendidx - 
            string parmname - 
            boolean setNewValue - 
            number newValue - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>sws</tags>
        <linked_to desc="see also:">
            Reaper:GetTrackNumSends 
                   counts the track sends/receives/hardware outputs
        </linked_to>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetTakeFXCount</slug>
        <title>BR_GetTakeFXCount</title>
        <functioncall prog_lang="cpp">int BR_GetTakeFXCount(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_GetTakeFXCount", MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_GetTakeFXCount(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_GetTakeFXCount(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Returns FX count for supplied take
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_IsMidiOpenInInlineEditor</slug>
        <title>BR_IsMidiOpenInInlineEditor</title>
        <functioncall prog_lang="cpp">bool BR_IsMidiOpenInInlineEditor(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_IsMidiOpenInInlineEditor", MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_IsMidiOpenInInlineEditor(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_IsMidiOpenInInlineEditor(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [SWS] Check if take has MIDI inline editor open and returns true or false.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_IsTakeMidi</slug>
        <title>BR_IsTakeMidi</title>
        <functioncall prog_lang="cpp">bool BR_IsTakeMidi(MediaItem_Take* take, bool* inProjectMidiOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_IsTakeMidi", MediaItem_Take take, bool &inProjectMidi)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean inProjectMidi = reaper.BR_IsTakeMidi(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean inProjectMidiOut) = BR_IsTakeMidi(take, inProjectMidiOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.
        </description>
        <retvals>
            boolean retval - 
            boolean inProjectMidi - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_ItemAtMouseCursor</slug>
        <title>BR_ItemAtMouseCursor</title>
        <functioncall prog_lang="cpp">MediaItem* BR_ItemAtMouseCursor(double* positionOut)</functioncall>
        <functioncall prog_lang="eel">MediaItem extension_api("BR_ItemAtMouseCursor", &position)</functioncall>
        <functioncall prog_lang="lua">MediaItem item, number position = reaper.BR_ItemAtMouseCursor()</functioncall>
        <functioncall prog_lang="python">(MediaItem retval, Float positionOut) = BR_ItemAtMouseCursor(positionOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.
        </description>
        <retvals>
            MediaItem item - the item at mouse-cursor
            number position - position at mouse-cursor
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_MIDI_CCLaneRemove</slug>
        <title>BR_MIDI_CCLaneRemove</title>
        <functioncall prog_lang="cpp">bool BR_MIDI_CCLaneRemove(vpid* midiEditor, int laneId)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_MIDI_CCLaneRemove", void* midiEditor, int laneId)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_MIDI_CCLaneRemove(identifier midiEditor, integer laneId)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_MIDI_CCLaneRemove(void midiEditor, Int laneId)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            identifier midiEditor - 
            integer laneId - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_MIDI_CCLaneReplace</slug>
        <title>BR_MIDI_CCLaneReplace</title>
        <functioncall prog_lang="cpp">bool BR_MIDI_CCLaneReplace(void* midiEditor, int laneId, int newCC)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_MIDI_CCLaneReplace", void* midiEditor, int laneId, int newCC)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_MIDI_CCLaneReplace(identifier midiEditor, integer laneId, integer newCC)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_MIDI_CCLaneReplace(void midiEditor, Int laneId, Int newCC)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.
            Valid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            identifier midiEditor - 
            integer laneId - 
            integer newCC - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_PositionAtMouseCursor</slug>
        <title>BR_PositionAtMouseCursor</title>
        <functioncall prog_lang="cpp">double BR_PositionAtMouseCursor(bool checkRuler)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_PositionAtMouseCursor", bool checkRuler)</functioncall>
        <functioncall prog_lang="lua">number position = reaper.BR_PositionAtMouseCursor(boolean checkRuler)</functioncall>
        <functioncall prog_lang="python">Float retval = BR_PositionAtMouseCursor(Boolean checkRuler)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.
        </description>
        <retvals>
            number position - the position at mouse-cursor
        </retvals>
        <parameters>
            boolean checkRuler - true, include ruler/markerarea; false, donÄt include ruler/markerarea
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Arrangeview Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetArrangeView</slug>
        <title>BR_SetArrangeView</title>
        <functioncall prog_lang="cpp">void BR_SetArrangeView(ReaProject* proj, double startTime, double endTime)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_SetArrangeView", ReaProject proj, startTime, endTime)</functioncall>
        <functioncall prog_lang="lua">reaper.BR_SetArrangeView(ReaProject proj, number startTime, number endTime)</functioncall>
        <functioncall prog_lang="python">BR_SetArrangeView(ReaProject proj, Float startTime, Float endTime)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Deprecated, see [GetSet\_ArrangeView2](#GetSet_ArrangeView2) (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see [BR\_GetArrangeView](#BR_GetArrangeView).
        </description>
        <deprecated since_when="SWS 2.9.7" alternative="GetSet_ArrangeView2(available since at least Reaper 5.13)"/>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            number startTime - the new starttime of the arrangewview in seconds
            number endTime - the new endtime of the arrangewview in seconds
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Arrangeview Management
        </chapter_context>
        <tags>sws, arrangeviewmanagement, set, starttime, endtime, arrangeview, seconds</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetItemEdges</slug>
        <title>BR_SetItemEdges</title>
        <functioncall prog_lang="cpp">bool BR_SetItemEdges(MediaItem* item, double startTime, double endTime)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetItemEdges", MediaItem item, startTime, endTime)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_SetItemEdges(MediaItem item, number startTime, number endTime)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_SetItemEdges(MediaItem item, Float startTime, Float endTime)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Set item start and end edges' position - returns true in case of any changes
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem item - 
            number startTime - 
            number endTime - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetMediaItemImageResource</slug>
        <title>BR_SetMediaItemImageResource</title>
        <functioncall prog_lang="cpp">void BR_SetMediaItemImageResource(MediaItem* item, const char* imageIn, int imageFlags)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_SetMediaItemImageResource", MediaItem item, "imageIn", int imageFlags)</functioncall>
        <functioncall prog_lang="lua">reaper.BR_SetMediaItemImageResource(MediaItem item, string imageIn, integer imageFlags)</functioncall>
        <functioncall prog_lang="python">BR_SetMediaItemImageResource(MediaItem item, String imageIn, Int imageFlags)</functioncall>
        <requires>
            Reaper=5.974
            SWS=2.13.1.0
        </requires>
        <description>
            [BR] Set image resource and its flags for a given item. 
            
            To clear current image resource, pass imageIn as "".
            
            imageFlags: 
            &1=0: don't display image, 
            &1: center / tile, 
            &3: stretch, 
            &5: full height (REAPER 5.974+).
            
            Can also be used to display existing text in empty items unstretched (pass imageIn = "", imageFlags = 0) or stretched (pass imageIn = "". imageFlags = 3).
            
            To get image resource, see BR_GetMediaItemImageResource
        </description>
        <parameters>
            MediaItem item - 
            string imageIn - 
            integer imageFlags - 
        </parameters>
        <linked_to desc="see also:">
            SWS:BR_GetMediaItemImageResource
                   get the image resource of a MediaItem
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetMediaSourceProperties</slug>
        <title>BR_SetMediaSourceProperties</title>
        <functioncall prog_lang="cpp">bool BR_SetMediaSourceProperties(MediaItem_Take* take, bool section, double start, double length, double fade, bool reverse)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetMediaSourceProperties", MediaItem_Take take, bool section, start, length, fade, bool reverse)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_SetMediaSourceProperties(MediaItem_Take take, boolean section, number start, number length, number fade, boolean reverse)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_SetMediaSourceProperties(MediaItem_Take take, Boolean section, Float start, Float length, Float fade, Boolean reverse)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.
            To get source properties, see [BR\_GetMediaSourceProperties](#BR_GetMediaSourceProperties).
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            boolean section - 
            number start - 
            number length - 
            number fade - 
            boolean reverse - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetMediaTrackLayouts</slug>
        <title>BR_SetMediaTrackLayouts</title>
        <functioncall prog_lang="cpp">bool BR_SetMediaTrackLayouts(MediaTrack* track, const char* mcpLayoutNameIn, const char* tcpLayoutNameIn)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetMediaTrackLayouts", MediaTrack track, "mcpLayoutNameIn", "tcpLayoutNameIn")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_SetMediaTrackLayouts(MediaTrack track, string mcpLayoutNameIn, string tcpLayoutNameIn)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_SetMediaTrackLayouts(MediaTrack track, String mcpLayoutNameIn, String tcpLayoutNameIn)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Deprecated, see [GetSetMediaTrackInfo](#GetSetMediaTrackInfo) (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string ("") as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).
            To get media track layouts, see [BR\_GetMediaTrackLayouts](#BR_GetMediaTrackLayouts).
        </description>
        <deprecated since_when="SWS 2.9.7" alternative="GetSetMediaTrackInfo(available since at least Reaper 5.02)"/>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            stirng mcpLayoutNameIn - 
            string tcpLayoutNameIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Theme Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetMidiTakeTempoInfo</slug>
        <title>BR_SetMidiTakeTempoInfo</title>
        <functioncall prog_lang="cpp">bool BR_SetMidiTakeTempoInfo(MediaItem_Take* take, bool ignoreProjTempo, double bpm, int num, int den)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetMidiTakeTempoInfo", MediaItem_Take take, bool ignoreProjTempo, bpm, int num, int den)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_SetMidiTakeTempoInfo(MediaItem_Take take, boolean ignoreProjTempo, number bpm, integer num, integer den)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_SetMidiTakeTempoInfo(MediaItem_Take take, Boolean ignoreProjTempo, Float bpm, Int num, Int den)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Set "ignore project tempo" information for MIDI take. Returns true in case the take was successfully updated.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            boolean ignoreProjTempo - 
            number bpm - 
            integer num - 
            integer den - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetTakeSourceFromFile</slug>
        <title>BR_SetTakeSourceFromFile</title>
        <functioncall prog_lang="cpp">bool BR_SetTakeSourceFromFile(MediaItem_Take* take, const char* filenameIn, bool inProjectData)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetTakeSourceFromFile", MediaItem_Take take, "filenameIn", bool inProjectData)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_SetTakeSourceFromFile(MediaItem_Take take, string filenameIn, boolean inProjectData)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_SetTakeSourceFromFile(MediaItem_Take take, String filenameIn, Boolean inProjectData)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.
            Any take source properties from the previous source will be lost - to preserve them, see [BR\_SetTakeSourceFromFile2](#BR_SetTakeSourceFromFile2).
            Note: To set source from existing take, see [SNM\_GetSetSourceState2](#SNM_GetSetSourceState2).
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            string filenameIn - 
            boolean inProjectData - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetTakeSourceFromFile2</slug>
        <title>BR_SetTakeSourceFromFile2</title>
        <functioncall prog_lang="cpp">bool BR_SetTakeSourceFromFile2(MediaItem_Take* take, const char* filenameIn, bool inProjectData, bool keepSourceProperties)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetTakeSourceFromFile2", MediaItem_Take take, "filenameIn", bool inProjectData, bool keepSourceProperties)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_SetTakeSourceFromFile2(MediaItem_Take take, string filenameIn, boolean inProjectData, boolean keepSourceProperties)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_SetTakeSourceFromFile2(MediaItem_Take take, String filenameIn, Boolean inProjectData, Boolean keepSourceProperties)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Differs from [BR\_SetTakeSourceFromFile](#BR_SetTakeSourceFromFile) only that it can also preserve existing take media source properties.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            string filenameIn - 
            boolean inProjectData - 
            boolean keepSourceProperties - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_TakeAtMouseCursor</slug>
        <title>BR_TakeAtMouseCursor</title>
        <functioncall prog_lang="cpp">MediaItem_Take* BR_TakeAtMouseCursor(double* positionOut)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take extension_api("BR_TakeAtMouseCursor", &position)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take, number position = reaper.BR_TakeAtMouseCursor()</functioncall>
        <functioncall prog_lang="python">(MediaItem_Take retval, Float positionOut) = BR_TakeAtMouseCursor(positionOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Get take under mouse cursor. Position is mouse cursor position in arrange.
        </description>
        <retvals>
            MediaItem_Take take - the take under mouse-cursor
            number position - the position under mouse-cursor
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_TrackAtMouseCursor</slug>
        <title>BR_TrackAtMouseCursor</title>
        <functioncall prog_lang="cpp">MediaTrack* BR_TrackAtMouseCursor(int* contextOut, double* positionOut)</functioncall>
        <functioncall prog_lang="eel">MediaTrack extension_api("BR_TrackAtMouseCursor", int &context, &position)</functioncall>
        <functioncall prog_lang="lua">MediaTrack retval, integer context, number position = reaper.BR_TrackAtMouseCursor()</functioncall>
        <functioncall prog_lang="python">(MediaTrack retval, Int contextOut, Float positionOut) = BR_TrackAtMouseCursor(contextOut, positionOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Get track under mouse cursor.
            Context signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.
            Position will hold mouse cursor position in arrange if applicable.
        </description>
        <retvals>
            MediaItem retval - 
            integer context - 
            number position - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_TrackFX_GetFXModuleName</slug>
        <title>BR_TrackFX_GetFXModuleName</title>
        <functioncall prog_lang="cpp">bool BR_TrackFX_GetFXModuleName(MediaTrack* track, int fx, char* nameOut, int nameOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_TrackFX_GetFXModuleName", MediaTrack track, int fx, #name)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string name = reaper.BR_TrackFX_GetFXModuleName(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String nameOut, Int nameOut_sz) = BR_TrackFX_GetFXModuleName(track, fx, nameOut, nameOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.13.0.0
        </requires>
        <description prog_lang="*">
            [BR] Deprecated, see TrackFX_GetNamedConfigParm/'fx_ident' (v6.37+). Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.
        </description>
        <deprecated since_when="SWS 2.13.0.0" alternative="TrackFX_GetNamedConfigParm with attribute 'fx_ident' (Reaperv6.37+)"/>
        <retvals>
            boolean retval - true, getting name was successful; false, getting name was unsuccesful
            string name - the name of the fx-module
        </retvals>
        <parameters>
            MediaTrack track - the track, in which the fx is located, whose name you want to get
            integer fx - the index of the fx, whose name you want to get
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.0.0 - deprecated from now on
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetPrivateProfileString</slug>
        <title>BR_Win32_GetPrivateProfileString</title>
        <functioncall prog_lang="cpp">int BR_Win32_GetPrivateProfileString(const char* sectionName, const char* keyName, const char* defaultString, const char* filePath, char* stringOut, int stringOut_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_GetPrivateProfileString", "sectionName", "keyName", "defaultString", "filePath", #string)</functioncall>
        <functioncall prog_lang="lua">integer retval, string value = reaper.BR_Win32_GetPrivateProfileString(string sectionName, string keyName, string defaultString, string filePath)</functioncall>
        <functioncall prog_lang="python">(Int retval, String sectionName, String keyName, String defaultString, String filePath, String stringOut, Int stringOut_sz) = BR_Win32_GetPrivateProfileString(sectionName, keyName, defaultString, filePath, stringOut, stringOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1">
            [BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini

            If you have multiple sections in that file with the same name, only the first one will be used, the rest will be ignored by Reaper.
            If you have multiple keys with the same name within a section, only the first one will be used, the rest will be ignored by Reaper.
            You can get the paths using [GetExePath](#GetExePath) for the Reaper-application-folder, [GetResourcePath](#GetResourcePath) for the ressources-folder or get\_ini\_file for the path+filename of the Reaper.ini-file.
        </description>
        <retvals>
            integer retval - number of characters of the value
            string value - the value of that key
        </retvals>
        <parameters>
            string sectionName - the [section] in which the key is stored, you'd like to get
            string keyName - the key from the [section], whose value you'd like to get
            string defaultString - a default value that will be returned, if the [section] and/or key does not exist in the ini-file yet.
            string filePath - the path+filename, where the [section] and key are stored
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>sws, filemanagement, ini, get, value, section, key</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_ShellExecute</slug>
        <title>BR_Win32_ShellExecute</title>
        <functioncall prog_lang="cpp">int BR_Win32_ShellExecute(const char* operation, const char* file, const char* parameters, const char* directory, int showFlags)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_ShellExecute", "operation", "file", "parameters", "directory", int showFlags)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_ShellExecute(string operation, string file, string parameters, string directory, integer showFlags)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_ShellExecute(String operation, String file, String parameters, String directory, Int showFlags)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API ShellExecute() with HWND set to main window
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            string operation - 
            string file - 
            string parameters - 
            string directory - 
            integer showFlags - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_WritePrivateProfileString</slug>
        <title>BR_Win32_WritePrivateProfileString</title>
        <functioncall prog_lang="cpp">bool BR_Win32_WritePrivateProfileString(const char* sectionName, const char* keyName, const char* value, const char* filePath)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_Win32_WritePrivateProfileString", "sectionName", "keyName", "value", "filePath")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_Win32_WritePrivateProfileString(string sectionName, string keyName, string value, string filePath)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_Win32_WritePrivateProfileString(String sectionName, String keyName, String value, String filePath)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.13.0.0
        </requires>
        <description markup_type="markdown" markup_version="1.0.1">
            [BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini

            If you have multiple sections in that file with the same name, only the first one will be used, the rest will be ignored by Reaper.
            If you have multiple keys with the same name within a section, only the first one will be used, the rest will be ignored by Reaper.
            You can get the paths using [GetExePath](#GetExePath) for the Reaper-application-folder, [GetResourcePath](#GetResourcePath) for the ressources-folder or [get\_ini\_file](#get_ini_file) for the path+filename of the Reaper.ini-file.
            
            You can pass an empty string as value to delete a key.
            
            Important: Don't use \n in parameter value, or the reread-value might be incomplete!
        </description>
        <retvals>
            boolean retval - true, if it worked; false, if not
        </retvals>
        <parameters>
            string sectionName - the [section] in which the key is stored, you'd like to set
            string keyName - the key from the [section], whose value you'd like to set
            string value - the value you want to have set to the key
            stirng filePath - the path+filename, where the [section] and key are going to be stored
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>filemanagement, ini, write, value, section, key</tags>
        <changelog>
            SWS 2.13.0.0 - allows now deleting ini-entries, when passing an empty string as parameter
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetBeatAtTime</slug>
        <title>Blink_GetBeatAtTime(Blink)</title>
        <functioncall prog_lang="cpp">double Blink_GetBeatAtTime(double time, double quantum)</functioncall>
        <functioncall prog_lang="eel">double extension_api("Blink_GetBeatAtTime", time, quantum)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.Blink_GetBeatAtTime(number time, number quantum)</functioncall>
        <functioncall prog_lang="python">Double retval = Blink_GetBeatAtTime(double time, double quantum)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Get session beat value corresponding to given time for given quantum.
        </description>
        <retvals>
            number retval -
        </retvals>
        <parameters>
            number time - 
            number quantum -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetClockNow</slug>
        <title>Blink_GetClockNow(Blink)</title>
        <functioncall prog_lang="cpp">double Blink_GetClockNow()</functioncall>
        <functioncall prog_lang="eel">double extension_api("Blink_GetClockNow")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.Blink_GetClockNow()</functioncall>
        <functioncall prog_lang="python">Double retval = Blink_GetClockNow()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Clock used by Blink.
        </description>
        <retvals>
            number retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetEnabled</slug>
        <title>Blink_GetEnabled(Blink)</title>
        <functioncall prog_lang="cpp">bool Blink_GetEnabled()</functioncall>
        <functioncall prog_lang="eel">bool extension_api("Blink_GetEnabled")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.Blink_GetEnabled()</functioncall>
        <functioncall prog_lang="python">Boolean retval = Blink_GetEnabled()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Is Blink currently enabled?
        </description>
        <retvals>
            boolean retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetMaster</slug>
        <title>Blink_GetMaster(Blink)</title>
        <functioncall prog_lang="cpp">bool Blink_GetMaster()</functioncall>
        <functioncall prog_lang="eel">bool extension_api("Blink_GetMaster")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.Blink_GetMaster()</functioncall>
        <functioncall prog_lang="python">Boolean retval = Blink_GetMaster()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Is Blink Master?
        </description>
        <retvals>
            boolean retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetNumPeers</slug>
        <title>Blink_GetNumPeers(Blink)</title>
        <functioncall prog_lang="cpp">int Blink_GetNumPeers()</functioncall>
        <functioncall prog_lang="eel">int extension_api("Blink_GetNumPeers")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.Blink_GetNumPeers()</functioncall>
        <functioncall prog_lang="python">Int retval = Blink_GetNumPeers()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            How many peers are currently connected in Link session?
        </description>
        <retvals>
            integer retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetPhaseAtTime</slug>
        <title>Blink_GetPhaseAtTime(Blink)</title>
        <functioncall prog_lang="cpp">double Blink_GetPhaseAtTime(double time, double quantum)</functioncall>
        <functioncall prog_lang="eel">double extension_api("Blink_GetPhaseAtTime", time, quantum)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.Blink_GetPhaseAtTime(number time, number quantum)</functioncall>
        <functioncall prog_lang="python">Double retval = Blink_GetPhaseAtTime(double time, double quantum)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Get session phase at given time for given quantum.
        </description>
        <retvals>
            number retval -
        </retvals>
        <parameters>
            number time - 
            number quantum -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetPlaying</slug>
        <title>Blink_GetPlaying(Blink)</title>
        <functioncall prog_lang="cpp">bool Blink_GetPlaying()</functioncall>
        <functioncall prog_lang="eel">bool extension_api("Blink_GetPlaying")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.Blink_GetPlaying()</functioncall>
        <functioncall prog_lang="python">Boolean retval = Blink_GetPlaying()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Is transport playing?
        </description>
        <retvals>
            boolean retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetPuppet</slug>
        <title>Blink_GetPuppet(Blink)</title>
        <functioncall prog_lang="cpp">bool Blink_GetPuppet()</functioncall>
        <functioncall prog_lang="eel">bool extension_api("Blink_GetPuppet")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.Blink_GetPuppet()</functioncall>
        <functioncall prog_lang="python">Boolean retval = Blink_GetPuppet()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Is Blink Puppet?
        </description>
        <retvals>
            boolean retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetQuantum</slug>
        <title>Blink_GetQuantum(Blink)</title>
        <functioncall prog_lang="cpp">double Blink_GetQuantum()</functioncall>
        <functioncall prog_lang="eel">double extension_api("Blink_GetQuantum")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.Blink_GetQuantum()</functioncall>
        <functioncall prog_lang="python">Double retval = Blink_GetQuantum()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Get quantum.
        </description>
        <retvals>
            number retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetStartStopSyncEnabled</slug>
        <title>Blink_GetStartStopSyncEnabled(Blink)</title>
        <functioncall prog_lang="cpp">bool Blink_GetStartStopSyncEnabled()</functioncall>
        <functioncall prog_lang="eel">bool extension_api("Blink_GetStartStopSyncEnabled")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.Blink_GetStartStopSyncEnabled()</functioncall>
        <functioncall prog_lang="python">Boolean retval = Blink_GetStartStopSyncEnabled()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Is start/stop synchronization enabled?
        </description>
        <retvals>
            boolean retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetTempo</slug>
        <title>Blink_GetTempo(Blink)</title>
        <functioncall prog_lang="cpp">double Blink_GetTempo()</functioncall>
        <functioncall prog_lang="eel">double extension_api("Blink_GetTempo")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.Blink_GetTempo()</functioncall>
        <functioncall prog_lang="python">Double retval = Blink_GetTempo()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Tempo of timeline, in quarter note Beats Per Minute.
        </description>
        <retvals>
            number retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetTimeAtBeat</slug>
        <title>Blink_GetTimeAtBeat(Blink)</title>
        <functioncall prog_lang="cpp">double Blink_GetTimeAtBeat(double beat, double quantum)</functioncall>
        <functioncall prog_lang="eel">double extension_api("Blink_GetTimeAtBeat", beat, quantum)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.Blink_GetTimeAtBeat(number beat, number quantum)</functioncall>
        <functioncall prog_lang="python">Double retval = Blink_GetTimeAtBeat(double beat, double quantum)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Get time at which given beat occurs for given quantum.
        </description>
        <retvals>
            number retval -
        </retvals>
        <parameters>
            number beat - 
            number quantum -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetTimeForPlaying</slug>
        <title>Blink_GetTimeForPlaying(Blink)</title>
        <functioncall prog_lang="cpp">double Blink_GetTimeForPlaying()</functioncall>
        <functioncall prog_lang="eel">double extension_api("Blink_GetTimeForPlaying")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.Blink_GetTimeForPlaying()</functioncall>
        <functioncall prog_lang="python">Double retval = Blink_GetTimeForPlaying()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Get time at which transport start/stop occurs.
        </description>
        <retvals>
            number retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_GetVersion</slug>
        <title>Blink_GetVersion(Blink)</title>
        <functioncall prog_lang="cpp">double Blink_GetVersion()</functioncall>
        <functioncall prog_lang="eel">double extension_api("Blink_GetVersion")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.Blink_GetVersion()</functioncall>
        <functioncall prog_lang="python">Double retval = Blink_GetVersion()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Get Blink version.
        </description>
        <retvals>
            number retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetBeatAtStartPlayingTimeRequest</slug>
        <title>Blink_SetBeatAtStartPlayingTimeRequest(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetBeatAtStartPlayingTimeRequest(double beat, double quantum)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetBeatAtStartPlayingTimeRequest", beat, quantum)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetBeatAtStartPlayingTimeRequest(number beat, number quantum)</functioncall>
        <functioncall prog_lang="python">Blink_SetBeatAtStartPlayingTimeRequest(double beat, double quantum)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Convenience function to attempt to map given beat to time when transport is starting to play in context of given quantum. This function evaluates to a no-op if GetPlaying() equals false.
        </description>
        <parameters>
            number beat - 
            number quantum -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetBeatAtTimeForce</slug>
        <title>Blink_SetBeatAtTimeForce(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetBeatAtTimeForce(double bpm, double time, double quantum)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetBeatAtTimeForce", bpm, time, quantum)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetBeatAtTimeForce(number bpm, number time, number quantum)</functioncall>
        <functioncall prog_lang="python">Blink_SetBeatAtTimeForce(double bpm, double time, double quantum)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>

            Rudely re-map beat/time relationship for all peers in Link session.
        </description>
        <parameters>
            number bpm - 
            number time - 
            number quantum -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetBeatAtTimeRequest</slug>
        <title>Blink_SetBeatAtTimeRequest(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetBeatAtTimeRequest(double bpm, double time, double quantum)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetBeatAtTimeRequest", bpm, time, quantum)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetBeatAtTimeRequest(number bpm, number time, number quantum)</functioncall>
        <functioncall prog_lang="python">Blink_SetBeatAtTimeRequest(double bpm, double time, double quantum)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>
            Attempt to map given beat to given time in context of given quantum.
        </description>
        <parameters>
            number bpm - 
            number time - 
            number quantum -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetCaptureTransportCommands</slug>
        <title>Blink_SetCaptureTransportCommands(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetCaptureTransportCommands(bool enable)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetCaptureTransportCommands", bool enable)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetCaptureTransportCommands(boolean enable)</functioncall>
        <functioncall prog_lang="python">Blink_SetCaptureTransportCommands(bool enable)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.4
        </requires>
        <description>
            Captures REAPER Transport commands and 'Tempo: Increase/Decrease current project tempo by 01 BPM' commands and broadcasts them into Link session. When used with Master or Puppet mode enabled, provides better integration between REAPER and Link session transport and tempos.
        </description>
        <parameters>
            boolean enable -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
            ReaBlink 0.4.4 - updated documentation
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetEnabled</slug>
        <title>Blink_SetEnabled(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetEnabled(bool enable)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetEnabled", bool enable)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetEnabled(boolean enable)</functioncall>
        <functioncall prog_lang="python">Blink_SetEnabled(bool enable)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>
            Enable/disable Blink. In Blink methods transport, tempo and timeline refer to Link session, not local REAPER instance.
        </description>
        <parameters>
            boolean enable -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetMaster</slug>
        <title>Blink_SetMaster(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetMaster(bool enable)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetMaster", bool enable)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetMaster(boolean enable)</functioncall>
        <functioncall prog_lang="python">Blink_SetMaster(bool enable)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>
            Set Blink as Master. Puppet needs to be enabled first. Same as Puppet, but possible beat offset is broadcast to Link session, effectively forcing local REAPER timeline on peers. Only one, if any, Blink should be Master in Link session.
        </description>
        <parameters>
            boolean enable -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetPlaying</slug>
        <title>Blink_SetPlaying(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetPlaying(bool playing, double time)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetPlaying", bool playing, time)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetPlaying(boolean playing, number time)</functioncall>
        <functioncall prog_lang="python">Blink_SetPlaying(bool playing, double time)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>
            Set if transport should be playing or stopped, taking effect at given time.
        </description>
        <parameters>
            boolean playing - 
            number time -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetPlayingAndBeatAtTimeRequest</slug>
        <title>Blink_SetPlayingAndBeatAtTimeRequest(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetPlayingAndBeatAtTimeRequest(bool playing, double time, double beat, double quantum)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetPlayingAndBeatAtTimeRequest", bool playing, time, beat, quantum)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetPlayingAndBeatAtTimeRequest(boolean playing, number time, number beat, number quantum)</functioncall>
        <functioncall prog_lang="python">Blink_SetPlayingAndBeatAtTimeRequest(bool playing, double time, double beat, double quantum)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>
            Convenience function to start or stop transport at given time and attempt to map given beat to this time in context of given quantum.
        </description>
        <parameters>
            boolean playing - 
            number time - 
            number beat - 
            number quantum -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetPuppet</slug>
        <title>Blink_SetPuppet(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetPuppet(bool enable)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetPuppet", bool enable)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetPuppet(boolean enable)</functioncall>
        <functioncall prog_lang="python">Blink_SetPuppet(bool enable)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>
            Set Blink as Puppet. When enabled, Blink attempts to synchronize local REAPER tempo to Link session tempo by adjusting current active tempo/time signature marker, or broadcasts local REAPER tempo changes into Link session, and attempts to correct possible offset by adjusting REAPER playrate. Based on cumulative single beat phase since Link session transport start, regardless of quantum.
        </description>
        <parameters>
            boolean enable -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetQuantum</slug>
        <title>Blink_SetQuantum(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetQuantum(double quantum)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetQuantum", quantum)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetQuantum(number quantum)</functioncall>
        <functioncall prog_lang="python">Blink_SetQuantum(double quantum)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>
            Set quantum. Usually this is set to length of one measure/bar in quarter notes.
        </description>
        <parameters>
            number quantum -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetStartStopSyncEnabled</slug>
        <title>Blink_SetStartStopSyncEnabled(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetStartStopSyncEnabled(bool enable)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetStartStopSyncEnabled", bool enable)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetStartStopSyncEnabled(boolean enable)</functioncall>
        <functioncall prog_lang="python">Blink_SetStartStopSyncEnabled(bool enable)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>
            Enable start/stop synchronization.
        </description>
        <parameters>
            boolean enable -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetTempo</slug>
        <title>Blink_SetTempo(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetTempo(double bpm)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetTempo", bpm)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetTempo(number bpm)</functioncall>
        <functioncall prog_lang="python">Blink_SetTempo(double bpm)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>
            Set timeline tempo to given bpm value.
        </description>
        <parameters>
            number bpm -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_SetTempoAtTime</slug>
        <title>Blink_SetTempoAtTime(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_SetTempoAtTime(double bpm, double time)</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_SetTempoAtTime", bpm, time)</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_SetTempoAtTime(number bpm, number time)</functioncall>
        <functioncall prog_lang="python">Blink_SetTempoAtTime(double bpm, double time)</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>
            Set tempo to given bpm value, taking effect at given time.
        </description>
        <parameters>
            number bpm - 
            number time -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Blink_StartStop</slug>
        <title>Blink_StartStop(Blink)</title>
        <functioncall prog_lang="cpp">void Blink_StartStop()</functioncall>
        <functioncall prog_lang="eel">extension_api("Blink_StartStop")</functioncall>
        <functioncall prog_lang="lua">reaper.Blink_StartStop()</functioncall>
        <functioncall prog_lang="python">Blink_StartStop()</functioncall>
        <requires>
            Reaper=6.23
            ReaBlink=0.4.0
        </requires>
        <description>
            Transport start/stop.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaBlink
        </chapter_context>
        <tags>reablink, ableton live</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

  <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetCustomColor</slug>
        <title>CF_GetCustomColor</title>
        <functioncall prog_lang="cpp">int retval = CF_GetCustomColor(int index)</functioncall>
        <functioncall prog_lang="eel">int retval = CF_GetCustomColor(int index)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.CF_GetCustomColor(integer index)</functioncall>
        <functioncall prog_lang="python">Int retval = CF_GetCustomColor(Int index)</functioncall>
        <requires>
            Reaper=6.20
            SWS=2.13.1.0
        </requires>
        <description>
            Get one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based.
        </description>
        <retvals>
             integer retval - the color-value of the chosen custom-color
        </retvals>
        <parameters>
             integer index - the index of the SWS-custom-color
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            SWS
            Miscellaneous
        </chapter_context>
        <tags>sws</tags>
        <changelog>
          SWS 2.13.1.0 - new function added
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_SetCustomColor</slug>
        <title>CF_SetCustomColor</title>
        <functioncall prog_lang="cpp">void retval = CF_SetCustomColor(int index, int color)</functioncall>
        <functioncall prog_lang="eel">CF_SetCustomColor(int index, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.CF_SetCustomColor(integer index, integer color)</functioncall>
        <functioncall prog_lang="python">CF_SetCustomColor(Int index, Int color)</functioncall>
        <requires>
            Reaper=6.20
            SWS=2.13.1.0
        </requires>
        <description>
            Set one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based. 
        </description>
        <parameters>
             integer index - the index of the SWS-color to set
             integer color - the new color-value for this SWS-custom-color
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            SWS
            Miscellaneous
        </chapter_context>
        <tags>sws</tags>
        <changelog>
          SWS 2.13.1.0 - new function added
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_DeleteTakeFromItem</slug>
        <title>NF_DeleteTakeFromItem</title>
        <functioncall prog_lang="cpp">bool retval = NF_DeleteTakeFromItem(MediaItem* item, int takeIdx)</functioncall>
        <functioncall prog_lang="eel">bool retval = NF_DeleteTakeFromItem(MediaItem item, int takeIdx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.NF_DeleteTakeFromItem(MediaItem item, integer takeIdx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_DeleteTakeFromItem(MediaItem item, Int takeIdx)</functioncall>
        <requires>
            Reaper=6.20
            SWS=2.13.1.0
        </requires>
        <description>
            Deletes a take from an item. takeIdx is zero-based. Returns true on success.
        </description>
        <retvals>
             boolean retval -  true, deleting was successful; false, deleting was unsuccessful
        </retvals>
        <parameters>
             MediaItem item - the item, whose take you want to remove
             integer takeIdx - the take of the item, that you want to remove
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
          SWS 2.13.1.0 - new function added
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetClipboard</slug>
        <title>CF_GetClipboard</title>
        <functioncall prog_lang="cpp">void CF_GetClipboard(char* textOutNeedBig, int textOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("CF_GetClipboard", #text)</functioncall>
        <functioncall prog_lang="lua">string text = reaper.CF_GetClipboard()</functioncall>
        <functioncall prog_lang="python">(String textOutNeedBig, Int textOutNeedBig_sz) = CF_GetClipboard(textOutNeedBig, textOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.979
            SWS=2.12.1.1
        </requires>
        <description prog_lang="*">
            Read the contents of the system clipboard.
        </description>
        <retvals>
            string text - the content of the clipboard
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws, helperfunctions, clipboard, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetClipboardBig</slug>
        <title>CF_GetClipboardBig</title>
        <functioncall prog_lang="cpp">const char* CF_GetClipboardBig(WDL_FastString* output)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_GetClipboardBig", #retval, WDL_FastString output)</functioncall>
        <functioncall prog_lang="lua">string clipboard_content = reaper.CF_GetClipboardBig(WDL_FastString output)</functioncall>
        <functioncall prog_lang="python">String retval = CF_GetClipboardBig(WDL_FastString output)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.11.0
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[DEPRECATED: Use [CF\_GetClipboard](#CF_GetClipboard)\] Read the contents of the system clipboard. See [SNM\_CreateFastString](#SNM_CreateFastString) and [SNM\_DeleteFastString](#SNM_DeleteFastString).
        </description>
        <deprecated since_when="SWS 2.11.0" alternative="CF_GetClipboard"/>
        <retvals>
            string clipboard_content - the content of the clipboard
        </retvals>
        <parameters>
            WDL_FastString output - a faststring used by this 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws, helperfunctions, clipboard, get, faststring, big</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_SetClipboard</slug>
        <title>CF_SetClipboard</title>
        <functioncall prog_lang="cpp">void CF_SetClipboard(const char* str)</functioncall>
        <functioncall prog_lang="eel">extension_api("CF_SetClipboard", "str")</functioncall>
        <functioncall prog_lang="lua">reaper.CF_SetClipboard(string str)</functioncall>
        <functioncall prog_lang="python">CF_SetClipboard(String str)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            Write the given string into the system clipboard.
        </description>
        <parameters>
            string str - the string to put into the clipboard
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws, helperfunctions, clipboard, put, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_AddMidiNote</slug>
        <title>FNG_AddMidiNote</title>
        <functioncall prog_lang="cpp">RprMidiNote* FNG_AddMidiNote(RprMidiTake* midiTake)</functioncall>
        <functioncall prog_lang="eel">RprMidiNote extension_api("FNG_AddMidiNote", RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="lua">RprMidiNote note = reaper.FNG_AddMidiNote(RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="python">RprMidiNote note = FNG_AddMidiNote(RprMidiTake midiTake)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [FNG]Add MIDI note to MIDI take
        </description>
        <retvals>
            RprMidiNote note - 
        </retvals>
        <parameters>
            RprMidiTake midiTake - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_AllocMidiTake</slug>
        <title>FNG_AllocMidiTake</title>
        <functioncall prog_lang="cpp">RprMidiTake* FNG_AllocMidiTake(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">RprMidiTake extension_api("FNG_AllocMidiTake", MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">RprMidiTake rpr_take = reaper.FNG_AllocMidiTake(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">RprMidiTake rpr_take = FNG_AllocMidiTake(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [FNG]Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take
        </description>
        <retvals>
            RprMidiTake rpr_take - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_CountMidiNotes</slug>
        <title>FNG_CountMidiNotes</title>
        <functioncall prog_lang="cpp">int FNG_CountMidiNotes(RprMidiTake* midiTake)</functioncall>
        <functioncall prog_lang="eel">int extension_api("FNG_CountMidiNotes", RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.FNG_CountMidiNotes(RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="python">Int retval = FNG_CountMidiNotes(RprMidiTake midiTake)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [FNG]Count of how many MIDI notes are in the MIDI take
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            RprMidiTake midiTake - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_FreeMidiTake</slug>
        <title>FNG_FreeMidiTake</title>
        <functioncall prog_lang="cpp">void FNG_FreeMidiTake(RprMidiTake* midiTake)</functioncall>
        <functioncall prog_lang="eel">extension_api("FNG_FreeMidiTake", RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="lua">reaper.FNG_FreeMidiTake(RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="python">FNG_FreeMidiTake(RprMidiTake midiTake)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [FNG]Commit changes to MIDI take and free allocated memory
        </description>
        <parameters>
            RprMidiTake midiTake - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_GetMidiNote</slug>
        <title>FNG_GetMidiNote</title>
        <functioncall prog_lang="cpp">RprMidiNote* FNG_GetMidiNote(RprMidiTake* midiTake, int index)</functioncall>
        <functioncall prog_lang="eel">RprMidiNote extension_api("FNG_GetMidiNote", RprMidiTake midiTake, int index)</functioncall>
        <functioncall prog_lang="lua">RprMidiNote note = reaper.FNG_GetMidiNote(RprMidiTake midiTake, integer index)</functioncall>
        <functioncall prog_lang="python">RprMidiNote note = FNG_GetMidiNote(RprMidiTake midiTake, Int index)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [FNG]Get a MIDI note from a MIDI take at specified index
        </description>
        <retvals>
            RprMidiNote note - 
        </retvals>
        <parameters>
            RprMidiTake midiTake - 
            integer index - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_GetMidiNoteIntProperty</slug>
        <title>FNG_GetMidiNoteIntProperty</title>
        <functioncall prog_lang="cpp">int FNG_GetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property)</functioncall>
        <functioncall prog_lang="eel">int extension_api("FNG_GetMidiNoteIntProperty", RprMidiNote midiNote, "property")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.FNG_GetMidiNoteIntProperty(RprMidiNote midiNote, string property)</functioncall>
        <functioncall prog_lang="python">Int retval = FNG_GetMidiNoteIntProperty(RprMidiNote midiNote, String property)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [FNG]Get MIDI note property
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            RprMidiNote midiNote - 
            string property - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_SetMidiNoteIntProperty</slug>
        <title>FNG_SetMidiNoteIntProperty</title>
        <functioncall prog_lang="cpp">void FNG_SetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property, int value)</functioncall>
        <functioncall prog_lang="eel">extension_api("FNG_SetMidiNoteIntProperty", RprMidiNote midiNote, "property", int value)</functioncall>
        <functioncall prog_lang="lua">reaper.FNG_SetMidiNoteIntProperty(RprMidiNote midiNote, string property, integer value)</functioncall>
        <functioncall prog_lang="python">FNG_SetMidiNoteIntProperty(RprMidiNote midiNote, String property, Int value)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [FNG]Set MIDI note property
        </description>
        <parameters>
            RprMidiNote midiNote - 
            string property - 
            integer value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_AnalyzeTakeLoudness</slug>
        <title>NF_AnalyzeTakeLoudness</title>
        <functioncall prog_lang="cpp">bool NF_AnalyzeTakeLoudness(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double* truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_AnalyzeTakeLoudness", MediaItem_Take take, bool analyzeTruePeak, &lufsIntegrated, &range, & truePeak, &truePeakPos, &shortTermMax, &momentaryMax)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax = reaper.NF_AnalyzeTakeLoudness(MediaItem_Take take, boolean analyzeTruePeak)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean analyzeTruePeak, Float lufsIntegratedOut, Float rangeOut, Float truePeakOut, Float truePeakPosOut, Float shortTermMaxOut, Float momentaryMaxOut) = NF_AnalyzeTakeLoudness(take, analyzeTruePeak, lufsIntegratedOut, rangeOut, truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.13.1.0
        </requires>
        <description prog_lang="*">
            Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value in dBTP and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec.
        </description>
        <retvals>
            boolean retval - 
            number lufsIntegrated - 
            number range - 
            number truePeak - 
            number truePeakPos - 
            number shortTermMax - 
            number momentaryMax - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            boolean analyzeTruePeak - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Normalizing/Loudness
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_Base64_Decode</slug>
        <title>NF_Base64_Decode</title>
        <functioncall prog_lang="cpp">bool NF_Base64_Decode(const char* base64Str, char* decodedStrOutNeedBig, int decodedStrOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_Base64_Decode", "base64Str", #decodedStr)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string decodedStr = reaper.NF_Base64_Decode(string base64Str)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String base64Str, String decodedStrOutNeedBig, Int decodedStrOutNeedBig_sz) = NF_Base64_Decode(base64Str, decodedStrOutNeedBig, decodedStrOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description>
           Decodes a Base64-string.
           
           Returns true on success.
        </description>
        <retvals>
            boolean retval - 
            string decodeStr - 
        </retvals>
        <parameters>
            string base64Str - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>   

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_Base64_Encode</slug>
        <title>NF_Base64_Encode</title>
        <functioncall prog_lang="cpp">void NF_Base64_Encode(const char* str, int str_sz, bool usePadding, char* encodedStrOutNeedBig, int encodedStrOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("NF_Base64_Encode", "str", bool usePadding, #encodedStr)</functioncall>
        <functioncall prog_lang="lua">string encodedStr = reaper.NF_Base64_Encode(string str, boolean usePadding)</functioncall>
        <functioncall prog_lang="python">(String str, Int str_sz, Boolean usePadding, String encodedStrOutNeedBig, Int encodedStrOutNeedBig_sz) = NF_Base64_Encode(str, str_sz, usePadding, encodedStrOutNeedBig, encodedStrOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description>
           Encodes a string into Base64-encoding
           
           Input string may contain null bytes in REAPER 6.44 or newer. 
           
           Note: Doesn't allow padding in the middle (e.g. concatenated encoded strings), doesn't allow newlines.
        </description>
        <retvals>
            string decodeStr - 
        </retvals>
        <parameters>
            string str - 
            boolean usePadding - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>   

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_ClearGlobalStartupAction</slug>
        <title>NF_ClearGlobalStartupAction</title>
        <functioncall prog_lang="cpp">bool NF_ClearGlobalStartupAction()</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_ClearGlobalStartupAction")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.NF_ClearGlobalStartupAction()</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_ClearGlobalStartupAction()</functioncall>
        <requires>
            Reaper=6.23
            SWS=2.13.0.0
        </requires>
        <description>            
            Returns true if global startup action was cleared successfully.
        </description>        
        <retvals>
            boolean retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Configuration Settings
        </chapter_context>
        <tags>sws, configuration, settings, startup action, clear</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_ClearProjectStartupAction</slug>
        <title>NF_ClearProjectStartupAction</title>
        <functioncall prog_lang="cpp">bool NF_ClearProjectStartupAction()</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_ClearProjectStartupAction")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.NF_ClearProjectStartupAction()</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_ClearProjectStartupAction()</functioncall>
        <requires>
            Reaper=6.23
            SWS=2.13.0.0
        </requires>
        <description>            
            Returns true if project startup action was cleared successfully.
        </description>        
        <retvals>
            boolean retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Configuration Settings
        </chapter_context>
        <tags>sws, configuration, settings, startup action, clear</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_ClearProjectTrackSelectionAction</slug>
        <title>NF_ClearProjectTrackSelectionAction</title>
        <functioncall prog_lang="cpp">bool NF_ClearProjectTrackSelectionAction()</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_ClearProjectTrackSelectionAction")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.NF_ClearProjectTrackSelectionAction()</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_ClearProjectTrackSelectionAction()</functioncall>
        <requires>
            Reaper=6.23
            SWS=2.13.0.0
        </requires>
        <description>            
            Returns true if project track selection action was cleared successfully.
        </description>        
        <retvals>
            boolean retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Configuration Settings
        </chapter_context>
        <tags>sws, configuration, settings, startup action, clear</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetGlobalStartupAction</slug>
        <title>NF_GetGlobalStartupAction</title>
        <functioncall prog_lang="cpp">bool NF_GetGlobalStartupAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_GetGlobalStartupAction", #desc, #cmdId)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string desc, string cmdId = reaper.NF_GetGlobalStartupAction()</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_GetGlobalStartupAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)</functioncall>
        <requires>
            Reaper=6.23
            SWS=2.13.0.0
        </requires>
        <description>            
            Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if global startup action is set, otherwise empty string. Returns false on failure.
        </description>        
        <retvals>
            boolean retval - 
            string desc - 
            string cmdId - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Configuration Settings
        </chapter_context>
        <tags>sws, configuration, settings, startup action, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_AnalyzeTakeLoudness2</slug>
        <title>NF_AnalyzeTakeLoudness2</title>
        <functioncall prog_lang="cpp">bool NF_AnalyzeTakeLoudness2(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double* truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut, double* shortTermMaxPosOut, double* momentaryMaxPosOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_AnalyzeTakeLoudness2", MediaItem_Take take, bool analyzeTruePeak, &lufsIntegrated, &range, & truePeak, &truePeakPos, &shortTermMax, &momentaryMax, &shortTermMaxPos, &momentaryMaxPos)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax, number shortTermMaxPos, number momentaryMaxPos = reaper.NF_AnalyzeTakeLoudness2(MediaItem_Take take, boolean analyzeTruePeak)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean analyzeTruePeak, Float lufsIntegratedOut, Float rangeOut, Float truePeakOut, Float truePeakPosOut, Float shortTermMaxOut, Float momentaryMaxOut, Float shortTermMaxPosOut, Float momentaryMaxPosOut) = NF_AnalyzeTakeLoudness2(take, analyzeTruePeak, lufsIntegratedOut, rangeOut, truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut, shortTermMaxPosOut, momentaryMaxPosOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Same as [NF\_AnalyzeTakeLoudness](#NF_AnalyzeTakeLoudness) but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos actually indicate the beginning of time *intervalls*, (3 sec. and 0.4 sec. resp.). 
        </description>
        <retvals>
            boolean retval - 
            number lufsIntegrated - 
            number range - 
            number truePeak - 
            number truePeakPos - 
            number shortTermMax - 
            number momentaryMax - 
            number shortTermMaxPos - 
            number momentaryMaxPos - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            boolean analyzeTruePeak - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Normalizing/Loudness
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_AnalyzeTakeLoudness_IntegratedOnly</slug>
        <title>NF_AnalyzeTakeLoudness_IntegratedOnly</title>
        <functioncall prog_lang="cpp">bool NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take* take, double* lufsIntegratedOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_AnalyzeTakeLoudness_IntegratedOnly", MediaItem_Take take, &lufsIntegrated)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number lufsIntegrated = reaper.NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Float lufsIntegratedOut) = NF_AnalyzeTakeLoudness_IntegratedOnly(take, lufsIntegratedOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Does LUFS integrated analysis only. Faster than full loudness analysis ([NF\_AnalyzeTakeLoudness](#NF_AnalyzeTakeLoudness)) . Use this if only LUFS integrated is required.
            Take vol. env. is taken into account. 

            See: [Signal flow](http://wiki.cockos.com/wiki/index.php/Measure_and_normalize_loudness_with_SWS).

        </description>
        <retvals>
            boolean retval - 
            number lufsIntegrated - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Normalizing/Loudness
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetMediaItemAverageRMS</slug>
        <title>NF_GetMediaItemAverageRMS</title>
        <functioncall prog_lang="cpp">double NF_GetMediaItemAverageRMS(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">double extension_api("NF_GetMediaItemAverageRMS", MediaItem item)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.NF_GetMediaItemAverageRMS(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Float retval = NF_GetMediaItemAverageRMS(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            Returns the average overall (non-windowed) dB RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. 
            Returns -150.0 if MIDI take or empty item.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaItem item - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Normalizing/Loudness
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetMediaItemMaxPeak</slug>
        <title>NF_GetMediaItemMaxPeak</title>
        <functioncall prog_lang="cpp">double NF_GetMediaItemMaxPeak(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">double extension_api("NF_GetMediaItemMaxPeak", MediaItem item)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.NF_GetMediaItemMaxPeak(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Float retval = NF_GetMediaItemMaxPeak(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            Returns the greatest max. peak value in dBFS of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. 
            Returns -150.0 if MIDI take or empty item.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaItem item - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Normalizing/Loudness
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetMediaItemPeakRMS_NonWindowed</slug>
        <title>NF_GetMediaItemPeakRMS_NonWindowed</title>
        <functioncall prog_lang="cpp">double NF_GetMediaItemPeakRMS_NonWindowed(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">double extension_api("NF_GetMediaItemPeakRMS_NonWindowed", MediaItem item)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.NF_GetMediaItemPeakRMS_NonWindowed(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Float retval = NF_GetMediaItemPeakRMS_NonWindowed(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            Returns the greatest overall (non-windowed) dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. 
            Returns -150.0 if MIDI take or empty item.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaItem item - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Normalizing/Loudness
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetMediaItemPeakRMS_Windowed</slug>
        <title>NF_GetMediaItemPeakRMS_Windowed</title>
        <functioncall prog_lang="cpp">double NF_GetMediaItemPeakRMS_Windowed(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">double extension_api("NF_GetMediaItemPeakRMS_Windowed", MediaItem item)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.NF_GetMediaItemPeakRMS_Windowed(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Float retval = NF_GetMediaItemPeakRMS_Windowed(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            Returns the average dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. 
            Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaItem item - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Normalizing/Loudness
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetProjectStartupAction</slug>
        <title>NF_GetProjectStartupAction</title>
        <functioncall prog_lang="cpp">bool NF_GetProjectStartupAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_GetProjectStartupAction", #desc, #cmdId)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string desc, string cmdId = reaper.NF_GetProjectStartupAction()</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_GetProjectStartupAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)</functioncall>
        <requires>
            Reaper=6.23
            SWS=2.13.0.0
        </requires>
        <description>            
            Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project startup action is set, otherwise empty string. Returns false on failure.
        </description>        
        <retvals>
            boolean retval - 
            string desc - 
            string cmdId - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Configuration Settings
        </chapter_context>
        <tags>sws, configuration, settings, startup action, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetProjectTrackSelectionAction</slug>
        <title>NF_GetProjectTrackSelectionAction</title>
        <functioncall prog_lang="cpp">bool NF_GetProjectTrackSelectionAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_GetProjectTrackSelectionAction", #desc, #cmdId)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string desc, string cmdId = reaper.NF_GetProjectTrackSelectionAction()</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_GetProjectTrackSelectionAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)</functioncall>
        <requires>
            Reaper=6.23
            SWS=2.13.0.0
        </requires>
        <description>            
            Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project track selection action is set, otherwise empty string. Returns false on failure.
        </description>        
        <retvals>
            boolean retval - 
            string desc - 
            string cmdId - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Configuration Settings
        </chapter_context>
        <tags>sws, configuration, settings, track selection action, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_ReadAudioFileBitrate</slug>
        <title>NF_ReadAudioFileBitrate</title>
        <functioncall prog_lang="cpp">int NF_ReadAudioFileBitrate(const char* fn)</functioncall>
        <functioncall prog_lang="eel">int extension_api("NF_ReadAudioFileBitrate", "fn")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.NF_ReadAudioFileBitrate(string fn)</functioncall>
        <functioncall prog_lang="python">Int retval = NF_ReadAudioFileBitrate(const char* fn)</functioncall>
        <requires>
            Reaper=6.23
            SWS=2.13.0.0
        </requires>
        <description>            
            Returns the bitrate of an audio file in kb/s if available (0 otherwise). For supported filetypes see <a href="https://taglib.org/api/classTagLib_1_1AudioProperties.html#ae5b7650b50f8c8f8cc022f25cfee48c5">TagLib::AudioProperties::bitrate</a>.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            string fn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>sws, audio management, read, audio, file, bitrate</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_ScrollHorizontallyByPercentage</slug>
        <title>NF_ScrollHorizontallyByPercentage</title>
        <functioncall prog_lang="cpp">void NF_ScrollHorizontallyByPercentage(int amount)</functioncall>
        <functioncall prog_lang="eel">extension_api("NF_ScrollHorizontallyByPercentage", int amount)</functioncall>
        <functioncall prog_lang="lua">reaper.NF_ScrollHorizontallyByPercentage(integer amount)</functioncall>
        <functioncall prog_lang="python">NF_ScrollHorizontallyByPercentage(Int amount)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description>
           100 means scroll one page. Negative values scroll left.
        </description>
        <parameters>
            integer amount - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Arrangeview Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>   
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_SetGlobalStartupAction</slug>
        <title>NF_SetGlobalStartupAction</title>
        <functioncall prog_lang="cpp">bool NF_SetGlobalStartupAction(const char* str)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_SetGlobalStartupAction", "str")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.NF_SetGlobalStartupAction(string str)</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_SetGlobalStartupAction(const char* str)</functioncall>
        <requires>
            Reaper=6.23
            SWS=2.13.0.0
        </requires>
        <description>            
            Returns true if global startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. "_SWS_ABOUT", "_f506bc780a0ab34b8fdedb67ed5d3649"), not command IDs (e.g. "47145").
            Tip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.
            NOnly works for actions / scripts from Main action section.
        </description>        
        <retvals>
            boolean retval - 
        </retvals>        
        <parameters>
            string str -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Configuration Settings
        </chapter_context>
        <tags>sws, configuration, settings, startup action, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_SetProjectStartupAction</slug>
        <title>NF_SetProjectStartupAction</title>
        <functioncall prog_lang="cpp">bool NF_SetProjectStartupAction(const char* str)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_SetProjectStartupAction", "str")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.NF_SetProjectStartupAction(string str)</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_SetProjectStartupAction(const char* str)</functioncall>
        <requires>
            Reaper=6.23
            SWS=2.13.0.0
        </requires>
        <description>            
            Returns true if project startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. "_SWS_ABOUT", "_f506bc780a0ab34b8fdedb67ed5d3649"), not command IDs (e.g. "47145").
            Tip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.
            Only works for actions / scripts from Main action section. Project must be saved after setting project startup action to be persistent.
        </description>        
        <retvals>
            boolean retval - 
        </retvals>        
        <parameters>
            string str -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Configuration Settings
        </chapter_context>
        <tags>sws, configuration, settings, startup action, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_SetProjectTrackSelectionAction</slug>
        <title>NF_SetProjectTrackSelectionAction</title>
        <functioncall prog_lang="cpp">bool NF_SetProjectTrackSelectionAction(const char* str)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_SetProjectTrackSelectionAction", "str")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.NF_SetProjectTrackSelectionAction(string str)</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_SetProjectTrackSelectionAction(const char* str)</functioncall>
        <requires>
            Reaper=6.23
            SWS=2.13.0.0
        </requires>
        <description>            
            Returns true if project track selection action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. "_SWS_ABOUT", "_f506bc780a0ab34b8fdedb67ed5d3649"), not command IDs (e.g. "47145").
            Tip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.
            Only works for actions / scripts from Main action section. Project must be saved after setting project track selection action to be persistent.
        </description>        
        <retvals>
            boolean retval - 
        </retvals>        
        <parameters>
            string str -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Configuration Settings
        </chapter_context>
        <tags>sws, configuration, settings, startup action, set</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_TakeFX_GetFXModuleName</slug>
        <title>NF_TakeFX_GetFXModuleName</title>
        <functioncall prog_lang="cpp">bool NF_TakeFX_GetFXModuleName(MediaItem* item, int fx, char* nameOut, int nameOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_TakeFX_GetFXModuleName", MediaItem item, int fx, #name)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string name = reaper.NF_TakeFX_GetFXModuleName(MediaItem item, integer fx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, Int fx, String nameOut, Int nameOut_sz) = NF_TakeFX_GetFXModuleName(item, fx, nameOut, nameOut_sz)</functioncall>
        <requires>
            Reaper=6.23
            SWS=2.13.0.0
        </requires>
        <description>            
            Deprecated, see TakeFX_GetNamedConfigParm/'fx_ident' (v6.37+). See BR_TrackFX_GetFXModuleName. fx: counted consecutively across all takes (zero-based).
        </description>        
        <retvals>
            boolean retval - 
        </retvals>        
        <parameters>
            string str -
        </parameters>
        <deprecated since_when="SWS 2.13.0.0" alternative="TakeFX_GetNamedConfigParm/'fx_ident'(since at least Reaper 6.37"/>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags>sws, fx management, get, fx module name</tags>
        <changelog>
            SWS 2.13.0.0 - function deprecated
        </changelog>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_AddReceive</slug>
        <title>SNM_AddReceive</title>
        <functioncall prog_lang="cpp">bool SNM_AddReceive(MediaTrack* src, MediaTrack* dest, int type)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_AddReceive", MediaTrack src, MediaTrack dest, int type)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_AddReceive(MediaTrack src, MediaTrack dest, integer type)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_AddReceive(MediaTrack src, MediaTrack dest, Int type)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&M\] Deprecated, see [CreateTrackSend](#CreateTrackSend) (v5.15pre1+). Adds a receive. Returns false if nothing updated.
            type -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).
            Note: obeys default sends preferences, supports frozen tracks, etc..
        </description>
        <deprecated since_when="SWS 2.9.7" alternative="CreateTrackSend(available since at least Reaper 5.40)"/>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack src - 
            MediaTrack dest - 
            integer type - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_AddTCPFXParm</slug>
        <title>SNM_AddTCPFXParm</title>
        <functioncall prog_lang="cpp">bool SNM_AddTCPFXParm(MediaTrack* tr, int fxId, int prmId)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_AddTCPFXParm", MediaTrack tr, int fxId, int prmId)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_AddTCPFXParm(MediaTrack tr, integer fxId, integer prmId)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_AddTCPFXParm(MediaTrack tr, Int fxId, Int prmId)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [S&M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack tr - 
            integer fxId - 
            integer prmId - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_CreateFastString</slug>
        <title>SNM_CreateFastString</title>
        <functioncall prog_lang="cpp">WDL_FastString* SNM_CreateFastString(const char* str)</functioncall>
        <functioncall prog_lang="eel">WDL_FastString extension_api("SNM_CreateFastString", "str")</functioncall>
        <functioncall prog_lang="lua">WDL_FastString fstr = reaper.SNM_CreateFastString(string str)</functioncall>
        <functioncall prog_lang="python">WDL_FastString fstr = SNM_CreateFastString(String str)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&M\] Instantiates a new "fast string". You must delete this string, see [SNM\_DeleteFastString](#SNM_DeleteFastString).
        </description>
        <retvals>
            WDL_FastString fstr - 
        </retvals>
        <parameters>
            string str - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_DeleteFastString</slug>
        <title>SNM_DeleteFastString</title>
        <functioncall prog_lang="cpp">void SNM_DeleteFastString(WDL_FastString* str)</functioncall>
        <functioncall prog_lang="eel">extension_api("SNM_DeleteFastString", WDL_FastString str)</functioncall>
        <functioncall prog_lang="lua">reaper.SNM_DeleteFastString(WDL_FastString str)</functioncall>
        <functioncall prog_lang="python">SNM_DeleteFastString(WDL_FastString str)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [S&M] Deletes a "fast string" instance.
        </description>
        <parameters>
            WDL_FastString str - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetDoubleConfigVar</slug>
        <title>SNM_GetDoubleConfigVar</title>
        <functioncall prog_lang="cpp">double SNM_GetDoubleConfigVar(const char* varname, double errvalue)</functioncall>
        <functioncall prog_lang="eel">double extension_api("SNM_GetDoubleConfigVar", "varname", errvalue)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.SNM_GetDoubleConfigVar(string varname, number errvalue)</functioncall>
        <functioncall prog_lang="python">Float retval = SNM_GetDoubleConfigVar(String varname, Float errvalue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.12.1
        </requires>
        <description>
            [S&M] Returns a floating-point preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).

            The settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.
            Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.

            see <a ="Reaper_Config_Variables.html">Reaper Config Variables</a> for valid config-vars
        </description>
        <retvals>
            number retval - the returned number/doublefloat-value of varname
        </retvals>
        <parameters>
            string varname - the name of the config-variable to be read; not case sensitive
            number errvalue - the errorvalue that will be returned, if varname isn't a valid one
        </parameters>
        <linked_to desc="see also:">
            SWS:SNM_GetIntConfigVar
                   gets value of integer-config variables
            SWS:SNM_SetIntConfigVar
                   sets value of integer-config variables
            SWS:SNM_SetDoubleConfigVar
                   sets value of double-float-config variables
            SWS:get_config_var_string
                   gets value of string-config variables
            SWS:SNM_SetStringConfigVar
                   sets value of string-config variables
            www:Reaper_Config_Variables.html
                a list of config-variables as used in Reaper
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Config Variables
        </chapter_context>
        <tags>sws, reaper, project, config, preferences, variables, get, internal</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetFastString</slug>
        <title>SNM_GetFastString</title>
        <functioncall prog_lang="cpp">const char* SNM_GetFastString(WDL_FastString* str)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetFastString", #retval, WDL_FastString str)</functioncall>
        <functioncall prog_lang="lua">string str = reaper.SNM_GetFastString(WDL_FastString str)</functioncall>
        <functioncall prog_lang="python">String retval = SNM_GetFastString(WDL_FastString str)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [S&M] Gets the "fast string" content.
        </description>
        <retvals>
            string str - 
        </retvals>
        <parameters>
            WDL_FastString str - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetFastStringLength</slug>
        <title>SNM_GetFastStringLength</title>
        <functioncall prog_lang="cpp">int SNM_GetFastStringLength(WDL_FastString* str)</functioncall>
        <functioncall prog_lang="eel">int extension_api("SNM_GetFastStringLength", WDL_FastString str)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SNM_GetFastStringLength(WDL_FastString str)</functioncall>
        <functioncall prog_lang="python">Int retval = SNM_GetFastStringLength(WDL_FastString str)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [S&M] Gets the "fast string" length.
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            WDL_FastString str - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetIntConfigVar</slug>
        <title>SNM_GetIntConfigVar</title>
        <functioncall prog_lang="cpp">int SNM_GetIntConfigVar(const char* varname, int errvalue)</functioncall>
        <functioncall prog_lang="eel">int extension_api("SNM_GetIntConfigVar", "varname", int errvalue)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SNM_GetIntConfigVar(string varname, integer errvalue)</functioncall>
        <functioncall prog_lang="python">Int retval = SNM_GetIntConfigVar(String varname, Int errvalue)</functioncall>
        <requires>
            Reaper=5.80
            SWS=2.9.7
        </requires>
        <description>
            [S&M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).

            The settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.
            Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.

            see <a href="Reaper_Config_Variables.html">Reaper Config Variables</a> for valid config-vars
        </description>
        <retvals>
            integer retval - the returned integer-value of varname
        </retvals>
        <parameters>
            string varname - the name of the config-variable to be read; not case sensitive
            integer errvalue - the errorvalue that will be returned, if varname isn't a valid one
        </parameters>
        <linked_to desc="see also:">
            SWS:SNM_SetIntConfigVar
                   sets value of integer-config variables
            SWS:SNM_GetDoubleConfigVar
                   gets value of double-float-config variables
            SWS:SNM_SetDoubleConfigVar
                   sets value of double-float-config variables
            SWS:get_config_var_string
                   gets value of string-config variables
            SWS:SNM_SetStringConfigVar
                   sets value of string-config variables
            www:Reaper_Config_Variables.html
                a list of config-variables as used in Reaper
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Config Variables
        </chapter_context>
        <tags>sws, reaper, project, config, preferences, variables, get, internal</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetLongConfigVar</slug>
        <title>SNM_GetLongConfigVar</title>
        <functioncall prog_lang="cpp">bool SNM_GetLongConfigVar(const char* varname, int* highOut, int* lowOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetLongConfigVar", "varname", int &high, int &low)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer high, integer low = reaper.SNM_GetLongConfigVar(string varname)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String varname, Int highOut, Int lowOut) = SNM_GetLongConfigVar(varname, highOut, lowOut)</functioncall>
        <requires>
            Reaper=5.80
            SWS=2.12.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&M\] Reads a 64-bit integer preference split in two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).

            see [Reaper Config Variables](Reaper_Config_Variables.html) for valid config-vars
        </description>
        <retvals>
            boolean retval - true, varname was found; false, varname wasn't found
            integer high - the high-32bits of the value
            integer low - the low-32bits of the value
        </retvals>
        <parameters>
            string varname - the name of the config-variable to be read; not case sensitive
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Config Variables
        </chapter_context>
        <tags>sws, reaper, project, config, preferences, variables, get, internal</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetMediaItemTakeByGUID</slug>
        <title>SNM_GetMediaItemTakeByGUID</title>
        <functioncall prog_lang="cpp">MediaItem_Take* SNM_GetMediaItemTakeByGUID(ReaProject* project, const char* guid)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take extension_api("SNM_GetMediaItemTakeByGUID", ReaProject project, "guid")</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take = reaper.SNM_GetMediaItemTakeByGUID(ReaProject project, string guid)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take take = SNM_GetMediaItemTakeByGUID(ReaProject project, String guid)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&M\] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see [BR\_GetMediaItemTakeGUID](#BR_GetMediaItemTakeGUID)
        </description>
        <retvals>
            MediaItem_Take take - 
        </retvals>
        <parameters>
            ReaProject project - the project-number. 0 for the current project. 
            string guid - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetProjectMarkerName</slug>
        <title>SNM_GetProjectMarkerName</title>
        <functioncall prog_lang="cpp">bool SNM_GetProjectMarkerName(ReaProject* proj, int num, bool isrgn, WDL_FastString* name)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetProjectMarkerName", ReaProject proj, int num, bool isrgn, WDL_FastString name)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_GetProjectMarkerName(ReaProject proj, integer num, boolean isrgn, WDL_FastString name)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_GetProjectMarkerName(ReaProject proj, Int num, Boolean isrgn, WDL_FastString name)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [S&M] Gets a marker/region name. Returns true if marker/region found.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer num - 
            boolean isrgn - 
            WDL_FastString name - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetSetObjectState</slug>
        <title>SNM_GetSetObjectState</title>
        <functioncall prog_lang="cpp">bool SNM_GetSetObjectState(void* obj, WDL_FastString* state, bool setnewvalue, bool wantminimalstate)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetSetObjectState", void* obj, WDL_FastString state, bool setnewvalue, bool wantminimalstate)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_GetSetObjectState(identifier obj, WDL_FastString state, boolean setnewvalue, boolean wantminimalstate)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_GetSetObjectState(void obj, WDL_FastString state, Boolean setnewvalue, Boolean wantminimalstate)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.
            When getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!
            Note: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            identifier obj - 
            WDL_FastString state - 
            boolean setnewvalue - 
            boolean wantminimalstate - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetSetSourceState</slug>
        <title>SNM_GetSetSourceState</title>
        <functioncall prog_lang="cpp">bool SNM_GetSetSourceState(MediaItem* item, int takeidx, WDL_FastString* state, bool setnewvalue)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetSetSourceState", MediaItem item, int takeidx, WDL_FastString state, bool setnewvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_GetSetSourceState(MediaItem item, integer takeidx, WDL_FastString state, boolean setnewvalue)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_GetSetSourceState(MediaItem item, Int takeidx, WDL_FastString state, Boolean setnewvalue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&M\] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.
            Note: this function does not use a MediaItem\_Take\* param in order to manage empty takes (i.e. takes with MediaItem\_Take\*==NULL), see [SNM\_GetSetSourceState2](#SNM_GetSetSourceState2).
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem item - 
            integer takeidx - 
            WDL_FastString state - 
            boolean setnewvalue - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetSetSourceState2</slug>
        <title>SNM_GetSetSourceState2</title>
        <functioncall prog_lang="cpp">bool SNM_GetSetSourceState2(MediaItem_Take* take, WDL_FastString* state, bool setnewvalue)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetSetSourceState2", MediaItem_Take take, WDL_FastString state, bool setnewvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_GetSetSourceState2(MediaItem_Take take, WDL_FastString state, boolean setnewvalue)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_GetSetSourceState2(MediaItem_Take take, WDL_FastString state, Boolean setnewvalue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&M\] Gets or sets a take source state. Returns false if failed.
            Note: this function cannot deal with empty takes, see [SNM\_GetSetSourceState](#SNM_GetSetSourceState).
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            WDL_FastString state - 
            boolean setnewvalue - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetSourceType</slug>
        <title>SNM_GetSourceType</title>
        <functioncall prog_lang="cpp">bool SNM_GetSourceType(MediaItem_Take* take, WDL_FastString* type)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetSourceType", MediaItem_Take take, WDL_FastString type)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_GetSourceType(MediaItem_Take takeWDL_FastString type)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_GetSourceType(MediaItem_Take take, WDL_FastString type)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.12.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [S&M] Deprecated, see [GetMediaSourceType](#GetMediaSourceType). Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)
        </description>
        <deprecated since_when="SWS 2.12.1" alternative="GetMediaSourceType(available since at least Reaper 5.62)"/>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            takeWDL_FastString type - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Take Management
            Take States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_MoveOrRemoveTrackFX</slug>
        <title>SNM_MoveOrRemoveTrackFX</title>
        <functioncall prog_lang="cpp">bool SNM_MoveOrRemoveTrackFX(MediaTrack* tr, int fxId, int what)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_MoveOrRemoveTrackFX", MediaTrack tr, int fxId, int what)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_MoveOrRemoveTrackFX(MediaTrack tr, integer fxId, integer what)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_MoveOrRemoveTrackFX(MediaTrack tr, Int fxId, Int what)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [S&M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take, TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns true if tr has been updated.
            fxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.
        </description>
        <deprecated since_when="SWS 2.10.0.1" alternative="TakeFX_/TrackFX_ CopyToTrack/Take, TrackFX/TakeFX _Delete(available since at least Reaper 5.96)"/>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack tr - 
            integer fxId - 
            integer what - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_ReadMediaFileTag</slug>
        <title>SNM_ReadMediaFileTag</title>
        <functioncall prog_lang="cpp">bool SNM_ReadMediaFileTag(const char* fn, const char* tag, char* tagvalOut, int tagvalOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_ReadMediaFileTag", "fn", "tag", #tagval)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string tagval = reaper.SNM_ReadMediaFileTag(string fn, string tag)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String fn, String tag, String tagvalOut, Int tagvalOut_sz) = SNM_ReadMediaFileTag(fn, tag, tagvalOut, tagvalOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.12.0
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&M\] Reads a media file tag. Supported tags: "artist", "album", "genre", "comment", "title", "track" (track number) or "year". Returns false if tag was not found. See [SNM\_TagMediaFile](#SNM_TagMediaFile).
        </description>
        <retvals>
            boolean retval - true, value could be read; false, value could not be read
            string tagval - the value of the requested tag
        </retvals>
        <parameters>
            string fn - the filename+path of the mediafile
            string tag - the tag you want to request; "artist", "album", "genre", "comment", "title", "track", "year"
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_RemoveReceive</slug>
        <title>SNM_RemoveReceive</title>
        <functioncall prog_lang="cpp">bool SNM_RemoveReceive(MediaTrack* tr, int rcvidx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_RemoveReceive", MediaTrack tr, int rcvidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_RemoveReceive(MediaTrack tr, integer rcvidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_RemoveReceive(MediaTrack tr, Int rcvidx)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&M\] Deprecated, see [RemoveTrackSend](#RemoveTrackSend) (v5.15pre1+). Removes a receive. Returns false if nothing updated.
        </description>
        <deprecated since_when="SWS 2.9.7" alternative="RemoveTrackSend(available since at least Reaper 5.16)"/>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack tr - 
            integer rcvidx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_RemoveReceivesFrom</slug>
        <title>SNM_RemoveReceivesFrom</title>
        <functioncall prog_lang="cpp">bool SNM_RemoveReceivesFrom(MediaTrack* tr, MediaTrack* srctr)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_RemoveReceivesFrom", MediaTrack tr, MediaTrack srctr)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_RemoveReceivesFrom(MediaTrack tr, MediaTrack srctr)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_RemoveReceivesFrom(MediaTrack tr, MediaTrack srctr)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [S&M] Removes all receives from srctr. Returns false if nothing updated.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack tr - 
            MediaTrack srctr - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Routing
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SelectResourceBookmark</slug>
        <title>SNM_SelectResourceBookmark</title>
        <functioncall prog_lang="cpp">int SNM_SelectResourceBookmark(const char* name)</functioncall>
        <functioncall prog_lang="eel">int extension_api("SNM_SelectResourceBookmark", "name")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SNM_SelectResourceBookmark(string name)</functioncall>
        <functioncall prog_lang="python">Int retval = SNM_SelectResourceBookmark(String name)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            string name - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SetDoubleConfigVar</slug>
        <title>SNM_SetDoubleConfigVar</title>
        <functioncall prog_lang="cpp">bool SNM_SetDoubleConfigVar(const char* varname, double newvalue)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_SetDoubleConfigVar", "varname", newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_SetDoubleConfigVar(string varname, number newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_SetDoubleConfigVar(String varname, Float newvalue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.12.1
        </requires>
        <description>
            [S&M] Sets a floating-point preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).

            The settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.
            Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.

            The changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!

            see <a hre="Reaper_Config_Variables.html">Reaper Config Variables</a> for valid config-vars
         </description>
        <retvals>
            boolean retval - true, if setting was successful; false, if not 
        </retvals>
        <parameters>
            string varname - the name of the config-variable to be read; not case sensitive
            number newvalue - the new value to be set into varname
        </parameters>
        <linked_to desc="see also:">
            SWS:SNM_GetIntConfigVar
                   gets value of integer-config variables
            SWS:SNM_SetIntConfigVar
                   sets value of integer-config variables
            SWS:SNM_GetDoubleConfigVar
                   gets value of double-float-config variables
            SWS:get_config_var_string
                   gets value of string-config variables
            SWS:SNM_SetStringConfigVar
                   sets value of string-config variables
            www:Reaper_Config_Variables.html
                a list of config-variables as used in Reaper
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Config Variables
        </chapter_context>
        <tags>sws, reaper, project, config, preferences, variables, set, internal</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SetFastString</slug>
        <title>SNM_SetFastString</title>
        <functioncall prog_lang="cpp">WDL_FastString* SNM_SetFastString(WDL_FastString* str, const char* newstr)</functioncall>
        <functioncall prog_lang="eel">WDL_FastString extension_api("SNM_SetFastString", WDL_FastString str, "newstr")</functioncall>
        <functioncall prog_lang="lua">WDL_FastString fstr = reaper.SNM_SetFastString(WDL_FastString str, string newstr)</functioncall>
        <functioncall prog_lang="python">WDL_FastString fstr = SNM_SetFastString(WDL_FastString str, String newstr)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [S&M] Sets the "fast string" content. Returns str for facility.
        </description>
        <retvals>
            WDL_FastString fstr - 
        </retvals>
        <parameters>
            WDL_FastString str - 
            string newstr - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SetIntConfigVar</slug>
        <title>SNM_SetIntConfigVar</title>
        <functioncall prog_lang="cpp">bool SNM_SetIntConfigVar(const char* varname, int newvalue)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_SetIntConfigVar", "varname", int newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_SetIntConfigVar(string varname, integer newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_SetIntConfigVar(String varname, Int newvalue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description>
            [S&M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).

            Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.
            The changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!

            see <a href="Reaper_Config_Variables.html">Reaper Config Variables</a> for valid config-vars
        </description>
        <retvals>
            boolean retval - true, if setting was successful, false if not
        </retvals>
        <parameters>
            string varname - the name of the config-variable to be read; not case sensitive
            integer newvalue - the newly set value for varname
        </parameters>
        <linked_to desc="see also:">
            SWS:SNM_GetIntConfigVar
                   gets value of integer-config variables
            SWS:SNM_GetDoubleConfigVar
                   gets value of double-float-config variables
            SWS:SNM_SetDoubleConfigVar
                   sets value of double-float-config variables
            SWS:get_config_var_string
                   gets value of string-config variables
            SWS:SNM_SetStringConfigVar
                   sets value of string-config variables
            www:Reaper_Config_Variables.html
                a list of config-variables as used in Reaper
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Config Variables
        </chapter_context>
        <tags>sws, reaper, project, config, preferences, variables, set, internal</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SetLongConfigVar</slug>
        <title>SNM_SetLongConfigVar</title>
        <functioncall prog_lang="cpp">bool SNM_SetLongConfigVar(const char* varname, int newHighValue, int newLowValue)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_SetLongConfigVar", "varname", int newHighValue, int newLowValue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_SetLongConfigVar(string varname, integer newHighValue, integer newLowValue)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_SetLongConfigVar(String varname, Int newHighValue, Int newLowValue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.12.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&M\] Sets a 64-bit integer preference from two 32-bit integers (looks in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).

            Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.
            The changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!

            see [Reaper Config Variables](Reaper_Config_Variables.html) for valid config-vars
        </description>
        <retvals>
            boolean retval - true, if setting was successful, false if not
        </retvals>
        <parameters>
            string varname - the name of the config-variable to be read; not case sensitive
            integer newHighValue - the newly set value for varname of the high-32bits
            integer newLowValue - the newly set value for varname of the low-32bits
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Config Variables
        </chapter_context>
        <tags>sws, reaper, project, config, preferences, variables, set, internal</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SetProjectMarker</slug>
        <title>SNM_SetProjectMarker</title>
        <functioncall prog_lang="cpp">bool SNM_SetProjectMarker(ReaProject* proj, int num, bool isrgn, double pos, double rgnend, const char* name, int color)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_SetProjectMarker", ReaProject proj, int num, bool isrgn, pos, rgnend, "name", int color)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_SetProjectMarker(ReaProject proj, integer num, boolean isrgn, number pos, number rgnend, string name, integer color)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_SetProjectMarker(ReaProject proj, Int num, Boolean isrgn, Float pos, Float rgnend, String name, Int color)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&M\] Deprecated, see [SetProjectMarker4](#SetProjectMarker4) -- Same function as SetProjectMarker3() except it can set empty names "".
        </description>
        <deprecated since_when="SWS 2.9.7" alternative="SetProjectMarker4(available since at least Reaper 5.62)"/>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. 
            integer num - 
            boolean isrgn - 
            number pos - 
            number rgnend - 
            string name - 
            integer color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SetStringConfigVar</slug>
        <title>SNM_SetStringConfigVar</title>
        <functioncall prog_lang="cpp">bool SNM_SetStringConfigVar(const char* varname, const char* newvalue)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_SetStringConfigVar", "varname", "newvalue")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_SetStringConfigVar(string varname, string newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_SetStringConfigVar(String varname, String newvalue)</functioncall>
        <requires>
            Reaper=6.02
            SWS=2.13.0.0
        </requires>
        <description>
            [S&M] Sets a string preference (general prefs only). Returns false if failed (e.g. varname not found or value too long).
            
            see <a ="Reaper_Config_Variables.html">Reaper Config Variables</a> for valid config-vars
        </description>
        <retvals>
            boolean retval - true, setting was successful; false, setting was unsuccessful
        </retvals>
        <parameters>
            string varname - the name of the config-var
            string newvalue - the new value to set the config variable with
        </parameters>
        <linked_to desc="see also:">
            SWS:SNM_GetIntConfigVar
                   gets value of integer-config variables
            SWS:SNM_SetIntConfigVar
                   sets value of integer-config variables
            SWS:SNM_GetDoubleConfigVar
                   gets value of double-float-config variables
            SWS:SNM_SetDoubleConfigVar
                   sets value of double-float-config variables
            SWS:get_config_var_string
                   gets value of string-config variables
            www:Reaper_Config_Variables.html
                a list of config-variables as used in Reaper
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Config Variables
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_TagMediaFile</slug>
        <title>SNM_TagMediaFile</title>
        <functioncall prog_lang="cpp">bool SNM_TagMediaFile(const char* fn, const char* tag, const char* tagval)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_TagMediaFile", "fn", "tag", "tagval")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_TagMediaFile(string fn, string tag, string tagval)</functioncall>
        <functioncall prog_lang="python">Boolean retval = SNM_TagMediaFile(String fn, String tag, String tagval)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.12.0
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&M\] Tags a media file thanks to [TagLib](https://taglib.github.io). Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See [SNM\_ReadMediaFileTag](#SNM_ReadMediaFileTag).
        </description>
        <retvals>
            boolean retval - true, if adding the tag worked; false, if adding didn't work.
        </retvals>
        <parameters>
            string fn - the mediafilename, in which to add the tag
            string tag - "artist", "album", "genre", "comment", "title", "track" or "year"
            string tagval - the new value to be added
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>sws, filemanagement, tag, id3, add</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_TieResourceSlotActions</slug>
        <title>SNM_TieResourceSlotActions</title>
        <functioncall prog_lang="cpp">void SNM_TieResourceSlotActions(int bookmarkId)</functioncall>
        <functioncall prog_lang="eel">extension_api("SNM_TieResourceSlotActions", int bookmarkId)</functioncall>
        <functioncall prog_lang="lua">reaper.SNM_TieResourceSlotActions(integer bookmarkId)</functioncall>
        <functioncall prog_lang="python">SNM_TieResourceSlotActions(Int bookmarkId)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            [S&M] Attach Resources slot actions to a given bookmark.
        </description>
        <parameters>
            integer bookmarkId - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SN_FocusMIDIEditor</slug>
        <title>SN_FocusMIDIEditor</title>
        <functioncall prog_lang="cpp">void SN_FocusMIDIEditor()</functioncall>
        <functioncall prog_lang="eel">extension_api("SN_FocusMIDIEditor")</functioncall>
        <functioncall prog_lang="lua">reaper.SN_FocusMIDIEditor()</functioncall>
        <functioncall prog_lang="python">SN_FocusMIDIEditor()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description prog_lang="*">
            Focuses the active/open MIDI editor.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws, userinterface, midi, editor, open, active</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ULT_GetMediaItemNote</slug>
        <title>ULT_GetMediaItemNote</title>
        <functioncall prog_lang="cpp">const char* ULT_GetMediaItemNote(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ULT_GetMediaItemNote", #retval, MediaItem item)</functioncall>
        <functioncall prog_lang="lua">string str = reaper.ULT_GetMediaItemNote(MediaItem item)</functioncall>
        <functioncall prog_lang="python">String retval = ULT_GetMediaItemNote(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.12.1.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" prog_lang="*">
            Deprecated

            [ULT] Deprecated, see [GetSetMediaItemInfo\_String](#GetSetMediaItemInfo_String) (v5.95+). Get item notes.
        </description>
        <deprecated since_when="SWS 2.12.1.1" alternative="GetSetMediaItemInfo_String(available since at least Reaper 5.95)"/>
        <retvals>
            string str - the notes, as stored in the MediaItem. If no notes exist, it will return ""
        </retvals>
        <parameters>
            MediaItem item - the MediaItem from which to get the notes from
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>sws, trackmanagement, get, notes, sws, mediaitem</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ULT_SetMediaItemNote</slug>
        <title>ULT_SetMediaItemNote</title>
        <functioncall prog_lang="cpp">void ULT_SetMediaItemNote(MediaItem* item, const char* note)</functioncall>
        <functioncall prog_lang="eel">extension_api("ULT_SetMediaItemNote", MediaItem item, "note")</functioncall>
        <functioncall prog_lang="lua">reaper.ULT_SetMediaItemNote(MediaItem item, string note)</functioncall>
        <functioncall prog_lang="python">ULT_SetMediaItemNote(MediaItem item, String note)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" prog_lang="*">
            [ULT] Deprecated, see [GetSetMediaItemInfo\_String](#GetSetMediaItemInfo_String) (v5.95+). Set item notes.
        </description>
        <deprecated since_when="SWS 2.9.7" alternative="GetSetMediaItemInfo_String(available since at least Reaper 5.95)"/>
        <parameters>
            MediaItem item - the MediaItem in which to add the Notes
            string note - the notes to be added. Newlines are allowed. Long strings may slow down Reaper!
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Item States
        </chapter_context>
        <tags>sws, mediaitemmanagement, set, mediaitem, notes, sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Actions_CountShortcuts</slug>
        <title>JS_Actions_CountShortcuts</title>
        <functioncall prog_lang="cpp">int JS_Actions_CountShortcuts(int section, int cmdID)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Actions_CountShortcuts", int section, int cmdID)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Actions_CountShortcuts(integer section, integer cmdID)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Actions_CountShortcuts(Int section, Int cmdID)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.220
        </requires>
        <description>
            Counts the shortcuts available for a specific action within a section.
        </description>
        <retvals>
           integer retval - the number of shortcuts available
        </retvals>
        <parameters>
           integer section - the section of the action:
                           - 0, Main
                           - 100, Main (alt recording)
                           - 32060, MIDI Editor
                           - 32061, MIDI Event List Editor
                           - 32062, MIDI Inline Editor
                           - 32063, Media Explorer
           integer cmdID - the command-id of the action, whose shortcuts you want to count
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            JS_Plugin
            Shortcuts
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Actions_DeleteShortcut</slug>
        <title>JS_Actions_DeleteShortcut</title>
        <functioncall prog_lang="cpp">bool JS_Actions_DeleteShortcut(int section, int cmdID, int shortcutidx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Actions_DeleteShortcut", int section, int cmdID, int shortcutidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Actions_DeleteShortcut(integer section, integer cmdID, integer shortcutidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Actions_DeleteShortcut(Int section, Int cmdID, Int shortcutidx)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.220
        </requires>
        <description>
            Deletes a shortcut of a specific action within a section.

        </description>
        <retvals>
           boolean retval - true, deleting was successful; false, deleting was unsuccessful
        </retvals>
        <parameters>
           integer section - the section of the action:
                           - 0, Main
                           - 100, Main (alt recording)
                           - 32060, MIDI Editor
                           - 32061, MIDI Event List Editor
                           - 32062, MIDI Inline Editor
                           - 32063, Media Explorer
           integer cmdID - the command-id of the action, whose shortcut you want to delete
           integer shortcutidx - the shortcut that you want to delete; 0-based
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            JS_Plugin
            Shortcuts
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Actions_DoShortcutDialog</slug>
        <title>JS_Actions_DoShortcutDialog</title>
        <functioncall prog_lang="cpp">bool JS_Actions_DoShortcutDialog(int section, int cmdID, int shortcutidx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Actions_DoShortcutDialog", int section, int cmdID, int shortcutidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Actions_DoShortcutDialog(integer section, integer cmdID, integer shortcutidx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Actions_DoShortcutDialog(Int section, Int cmdID, Int shortcutidx)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.220
        </requires>
        <description>
            Opens the do-shortcut-dialog, which allows you setting a shortcut for a specific action.

            If the shortcut index is higher than the current number of shortcuts, it will add a new shortcut.
        </description>
        <retvals>
           boolean retval - true, setting was successful; false, setting was unsuccessful
        </retvals>
        <parameters>
           integer section - the section of the action:
                           - 0, Main
                           - 100, Main (alt recording)
                           - 32060, MIDI Editor
                           - 32061, MIDI Event List Editor
                           - 32062, MIDI Inline Editor
                           - 32063, Media Explorer
           integer cmdID - the command-id of the action, whose shortcut you want to set
           integer shortcutidx - the shortcut that you want to set; 0-based
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            JS_Plugin
            Shortcuts
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Actions_GetShortcutDesc</slug>
        <title>JS_Actions_GetShortcutDesc</title>
        <functioncall prog_lang="cpp">bool JS_Actions_GetShortcutDesc(int section, int cmdID, int shortcutidx, char* descOut, int descOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Actions_GetShortcutDesc", int section, int cmdID, int shortcutidx, #desc)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string desc = reaper.JS_Actions_GetShortcutDesc(integer section, integer cmdID, integer shortcutidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int section, Int cmdID, Int shortcutidx, String descOut, Int descOut_sz) = JS_Actions_GetShortcutDesc(section, cmdID, shortcutidx, descOut, descOut_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.220
        </requires>
        <description>
            returns the description of a shortcut, as stored for a specific action within a section.

            This will be the shown representation of the shortcut as seen in the actionlist. That means, it is localized!
        </description>
        <retvals>
           boolean retval - true, getting was successful; false, getting was unsuccessful
           string desc - the description of the shortcut; "", if shortcut is not available
        </retvals>
        <parameters>
           integer section - the section of the action:
                           - 0, Main
                           - 100, Main (alt recording)
                           - 32060, MIDI Editor
                           - 32061, MIDI Event List Editor
                           - 32062, MIDI Inline Editor
                           - 32063, Media Explorer
           integer cmdID - the command-id of the action, whose shortcut-description you want to get
           integer shortcutidx - the shortcut whose description you want to get; 0-based
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            JS_Plugin
            Shortcuts
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

  <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Byte</slug>
        <title>JS_Byte</title>
        <functioncall prog_lang="cpp">void JS_Byte(void* pointer, int offset, int* byteOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Byte", void* pointer, int offset, int &byte)</functioncall>
        <functioncall prog_lang="lua">integer byte = reaper.JS_Byte(identifier pointer, integer offset)</functioncall>
        <functioncall prog_lang="python">(void pointer, Int offset, Int byteOut) = JS_Byte(pointer, offset, byteOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.971
        </requires>
        <description>
            Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.
        </description>
        <retvals>
           integer byte - 
        </retvals>
        <parameters>
           identifier address - 
           integer offset - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Composite</slug>
        <title>JS_Composite</title>
        <functioncall prog_lang="cpp">int JS_Composite(void* windowHWND, int dstx, int dsty, int dstw, int dsth, void* sysBitmap, int srcx, int srcy, int srcw, int srch, bool* autoUpdateOptional)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Composite", void* windowHWND, int dstx, int dsty, int dstw, int dsth, void* sysBitmap, int srcx, int srcy, int srcw, int srch, optional boolean autoUpdateOptional)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Composite(identifier windowHWND, integer dstx, integer dsty, integer dstw, integer dsth, identifier sysBitmap, integer srcx, integer srcy, integer srcw, integer srch, optional boolean autoUpdate)</functioncall>
        <functioncall prog_lang="python">(Int retval, void windowHWND, Int dstx, Int dsty, Int dstw, Int dsth, void sysBitmap, Int srcx, Int srcy, Int srcw, Int srch, Boolean autoUpdateOptional) = JS_Composite(windowHWND, dstx, dsty, dstw, dsth, sysBitmap, srcx, srcy, srcw, srch, autoUpdateOptional)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.215
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Composites a LICE bitmap with a REAPER window. Each time that the window is re-drawn, the bitmap will be blitted over the window's client area (with per-pixel alpha blending).

            \* If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.

            \* autoUpdate is an optional parameter that is false by default. If true, JS\_Composite will automatically invalidate and re-draw the part of the window that covers the current position of the bitmap, and if the bitmap is being moved, also the previous position. (If only one or a handful of bitmaps are being moved across the screen, autoUpdate should result in smoother animation on WindowsOS; if numerous bitmaps are spread over the entire window, it may be faster to disable autoUpdate and instead call [JS\_Window\_InvalidateRect](#JS_Window_InvalidateRect) explicitly once all bitmaps have been moved.)

            \* InvalidateRect should also be called whenever the contents of the bitmap contents have been changed, but not the position, to trigger a window update.

            \* On WindowsOS, the key to reducing flickering is to slow down the frequency at which the window is re-drawn. InvalidateRect should only be called when absolutely necessary, preferably not more than 20 times per second. (Also refer to the [JS\_Composite\_Delay](#JS_Composite_Delay) function.)

            \* On WindowsOS, flickering can further be reduced by keeping the invalidated area as small as possible, covering only the bitmaps that have been edited or moved. However, if numerous bitmaps are spread over the entire window, it may be faster to simply invalidate the entire client area.

            \* This function should not be applied directly to top-level windows, but rather to child windows.

            \* Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.

            \* On WindowsOS, GDI blitting does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either [LICE\_Blit](#LICE_Blit) or [LICE\_ProcessRect](#LICE_ProcessRect).

            Returns:
            1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC, -7 = Error when subclassing to new window process.
        </description>
        <retvals>
           integer retval - 1 if successful
                          - -1 = windowHWND is not a window
                          - -3 = Could not obtain the original window process
                          - -4 = sysBitmap is not a LICE bitmap
                          - -5 = sysBitmap is not a system bitmap
                          - -6 = Could not obtain the window HDC
                          - -7 = Error when subclassing to new window process.
        </retvals>
        <parameters>
           identifier windowHWND - 
           integer dstx - 
           integer dsty - 
           integer dstw - 
           integer dsth - 
           identifier sysBitmap - 
           integer srcx - 
           integer srcy - 
           integer srcw - 
           integer srch - 
           optional boolean autoUpdate - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Composite_Delay</slug>
        <title>JS_Composite_Delay</title>
        <functioncall prog_lang="cpp">int JS_Composite_Delay(void* windowHWND, double minTime, double maxTime, int numBitmapsWhenMax, double* prevMinTimeOut, double* prevMaxTimeOut, int* prevBitmapsOut)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Composite_Delay", void* windowHWND, minTime, maxTime, int numBitmapsWhenMax, &prevMinTime, &prevMaxTime, int &prevBitmaps)</functioncall>
        <functioncall prog_lang="lua">integer retval, number prevMinTime, number prevMaxTime, integer prevBitmaps = reaper.JS_Composite_Delay(identifier windowHWND, number minTime, number maxTime, integer numBitmapsWhenMax)</functioncall>
        <functioncall prog_lang="python">(Int retval, void windowHWND, Float minTime, Float maxTime, Int numBitmapsWhenMax, Float prevMinTimeOut, Float prevMaxTimeOut, Int prevBitmapsOut) = JS_Composite_Delay(windowHWND, minTime, maxTime, numBitmapsWhenMax, prevMinTimeOut, prevMaxTimeOut, prevBitmapsOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.010
        </requires>
        <description>
            On WindowsOS, flickering of composited images can be improved considerably by slowing the refresh rate of the window. The optimal refresh rate may depend on the number of composited bitmaps.

            minTime is the minimum refresh delay, in seconds, when only one bitmap is composited onto the window. The delay time will increase linearly with the number of bitmaps, up to a maximum of maxTime when numBitmapsWhenMax is reached.

            If both minTime and maxTime are 0, all delay settings for the window are cleared.

            Returns:
            * retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).
            * If delay times have not previously been set for this window, prev time values are 0.
        </description>
        <retvals>
           integer retval - 
           number prevMinTime - 
           number prevMaxTime - 
           integer prevBitmaps - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           number minTime - 
           number maxTime - 
           integer numBitmapsWhenMax - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Composite_ListBitmaps</slug>
        <title>JS_Composite_ListBitmaps</title>
        <functioncall prog_lang="cpp">int JS_Composite_ListBitmaps(void* windowHWND, char* listOutNeedBig, int listOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Composite_ListBitmaps", void* windowHWND, #list)</functioncall>
        <functioncall prog_lang="lua">integer retval, string list = reaper.JS_Composite_ListBitmaps(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">(Int retval, void windowHWND, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Composite_ListBitmaps(windowHWND, listOutNeedBig, listOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.980
        </requires>
        <description markup_type="markdown" markup_version="1.0.1">
            Returns all bitmaps composited to the given window.

            The list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap\* pointer.

            retval is the number of linked bitmaps found, or negative if an error occured.

        </description>
        <retvals>
           integer retval - 
           string list - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Composite_Unlink</slug>
        <title>JS_Composite_Unlink</title>
        <functioncall prog_lang="cpp">void JS_Composite_Unlink(void* windowHWND, void* bitmapOptional, bool* autoUpdateOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Composite_Unlink", void* windowHWND, void* bitmap, boolean autoUpdateOptional)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Composite_Unlink(identifier windowHWND, identifier bitmap, boolean autoUpdate)</functioncall>
        <functioncall prog_lang="python">(void windowHWND, void bitmapOptional, Boolean autoUpdateOptional) = JS_Composite_Unlink(windowHWND, bitmapOptional, autoUpdateOptional)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.002
        </requires>
        <description>
            Unlinks the window and bitmap.

            * autoUpdate is an optional parameter. If unlinking a single bitmap and autoUpdate is true, the function will automatically re-draw the window to remove the blitted image.

            If no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.
        </description>
        <parameters>
           identifier windowHWND - 
           identifier bitmap - 
           boolean autoUpdate - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Double</slug>
        <title>JS_Double</title>
        <functioncall prog_lang="cpp">void JS_Double(void* pointer, int offset, double* doubleOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Double", void* pointer, int offset, &double)</functioncall>
        <functioncall prog_lang="lua">number double = reaper.JS_Double(identifier address, integer pointer)</functioncall>
        <functioncall prog_lang="python">(void pointer, Int offset, Float doubleOut) = JS_Double(pointer, offset, doubleOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.971
        </requires>
        <description>
            Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.
        </description>
        <retvals>
           number double   - 
        </retvals>
        <parameters>
           identifier address - 
           integer offset - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
  <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_File_Stat</slug>
        <title>JS_File_Stat</title>
        <functioncall prog_lang="cpp">int JS_File_Stat(const char* filePath, double* sizeOut, char* accessedTimeOut, char* modifiedTimeOut, char* cTimeOut, int* deviceIDOut, int* deviceSpecialIDOut, int* inodeOut, int* modeOut, int* numLinksOut, int* ownerUserIDOut, int* ownerGroupIDOut)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_File_Stat", "filePath", &size, #accessedTime, #modifiedTime, #cTime, int &deviceID, int &deviceSpecialID, int &inode, int &mode, int &numLinks, int &ownerUserID, int &ownerGroupID)</functioncall>
        <functioncall prog_lang="lua">integer retval, number size, string accessedTime, string modifiedTime, string cTime, integer deviceID, integer deviceSpecialID, integer inode, integer mode, integer numLinks, integer ownerUserID, integer ownerGroupID = reaper.JS_File_Stat(string filePath)</functioncall>
        <functioncall prog_lang="python">(Int retval, String filePath, Float sizeOut, String accessedTimeOut, String modifiedTimeOut, String cTimeOut, Int deviceIDOut, Int deviceSpecialIDOut, Int inodeOut, Int modeOut, Int numLinksOut, Int ownerUserIDOut, Int ownerGroupIDOut) = JS_File_Stat(filePath, sizeOut, accessedTimeOut, modifiedTimeOut, cTimeOut, deviceIDOut, deviceSpecialIDOut, inodeOut, modeOut, numLinksOut, ownerUserIDOut, ownerGroupIDOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.217
        </requires>
        <description>
            Returns information about a file.

            cTime is not implemented on all systems. If it does return a time, the value may differ depending on the OS: on WindowsOS, it may refer to the time that the file was either created or copied, whereas on Linux and macOS, it may refer to the time of last status change.

            retval is 0 if successful, negative if not.
        </description>
        <retvals>
           integer retval - negative, if not retrievable; 0, if retrieving was successful
           number size - the size of the file in bytes
           string accessedTime - the last time the file was accessed
           string modifiedTime - the last time the file was modified
           string cTime - the time the file was created(Windows) or the last time its status had changed(Mac and Linux)
           integer deviceID - the ID of the device
           integer deviceSpecialID - the special ID of the file
           integer inode - the inode
           integer mode - the attributes set
           integer numLinks - the number of links
           integer ownerUserID - ID of the user the file belongs to
           integer ownerGroupID - ID of the group the file belongs to
        </retvals>
        <parameters>
           string filePath - the file, whose file-stats you want to get
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_Blit</slug>
        <title>JS_GDI_Blit</title>
        <functioncall prog_lang="cpp">void JS_GDI_Blit(void* destHDC, int dstx, int dsty, void* sourceHDC, int srcx, int srxy, int width, int height, const char* modeOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_Blit", void* destHDC, int dstx, int dsty, void* sourceHDC, int srcx, int srxy, int width, int height, optional "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_Blit(identifier destHDC, integer dstx, integer dsty, identifier sourceHDC, integer srcx, integer srxy, integer width, integer height, optional string mode)</functioncall>
        <functioncall prog_lang="python">JS_GDI_Blit(void destHDC, Int dstx, Int dsty, void sourceHDC, Int srcx, Int srxy, Int width, Int height, String modeOptional)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.002
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Blits between two device contexts, which may include LICE "system bitmaps".

            mode: Optional parameter. "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.

            WARNING: On WindowsOS, GDI\_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE\_Blit or LICE\_ProcessRect.
        </description>
        <parameters>
           identifier destHDC - 
           integer dstx - 
           integer dsty - 
           identifier sourceHDC - 
           integer srcx - 
           integer srxy - 
           integer width - 
           integer height - 
           optional string mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_CreateFillBrush</slug>
        <title>JS_GDI_CreateFillBrush</title>
        <functioncall prog_lang="cpp">void* JS_GDI_CreateFillBrush(int color)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_GDI_CreateFillBrush", int color)</functioncall>
        <functioncall prog_lang="lua">identifier font = reaper.JS_GDI_CreateFillBrush(integer color)</functioncall>
        <functioncall prog_lang="python">identifier font = JS_GDI_CreateFillBrush(Int color)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           identifier font - 
        </retvals>
        <parameters>
           integer color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_CreateFont</slug>
        <title>JS_GDI_CreateFont</title>
        <functioncall prog_lang="cpp">void* JS_GDI_CreateFont(int height, int weight, int angle, bool italic, bool underline, bool strikeOut, const char* fontName)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_GDI_CreateFont", int height, int weight, int angle, bool italic, bool underline, bool strike, "fontName")</functioncall>
        <functioncall prog_lang="lua">identifier font = reaper.JS_GDI_CreateFont(integer height, integer weight, integer angle, boolean italic, boolean underline, boolean strike, string fontName)</functioncall>
        <functioncall prog_lang="python">identifier font = JS_GDI_CreateFont(Int height, Int weight, Int angle, Boolean italic, Boolean underline, Boolean strikeOut, String fontName)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Parameters:

            * weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.

            * angle: the angle, in tenths of degrees, between the text and the x-axis of the device.

            * fontName: If empty string "", uses first font that matches the other specified attributes.



           Note: Text color must be set separately.

        </description>
        <retvals>
           identifier font - 
        </retvals>
        <parameters>
           integer height - 
           integer weight - 
           integer angle - 
           boolean italic - 
           boolean underline - 
           boolean strike - 
           string fontName - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_CreatePen</slug>
        <title>JS_GDI_CreatePen</title>
        <functioncall prog_lang="cpp">void* JS_GDI_CreatePen(int width, int color)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_GDI_CreatePen", int width, int color)</functioncall>
        <functioncall prog_lang="lua">identifier pen = reaper.JS_GDI_CreatePen(integer width, integer color)</functioncall>
        <functioncall prog_lang="python">identifier pen = JS_GDI_CreatePen(Int width, Int color)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           identifier pen - 
        </retvals>
        <parameters>
           integer width - 
           integer color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_DeleteObject</slug>
        <title>JS_GDI_DeleteObject</title>
        <functioncall prog_lang="cpp">void JS_GDI_DeleteObject(void* GDIObject)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_DeleteObject", void* GDIObject)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_DeleteObject(identifier GDIObject)</functioncall>
        <functioncall prog_lang="python">JS_GDI_DeleteObject(void GDIObject)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier GDIObject - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_DrawText</slug>
        <title>JS_GDI_DrawText</title>
        <functioncall prog_lang="cpp">int JS_GDI_DrawText(void* deviceHDC, const char* text, int len, int left, int top, int right, int bottom, const char* align))</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_GDI_DrawText", void* deviceHDC, "text", int len, int left, int top, int right, int bottom, "align)")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_GDI_DrawText(identifier deviceHDC, string text, integer len, integer left, integer top, integer right, integer bottom, string align))</functioncall>
        <functioncall prog_lang="python">Int retval = JS_GDI_DrawText(void deviceHDC, String text, Int len, Int left, Int top, Int right, Int bottom, String align))</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Parameters:

            * align: Combination of: "TOP", "VCENTER", "LEFT", "HCENTER", "RIGHT", "BOTTOM", "WORDBREAK", "SINGLELINE", "NOCLIP", "CALCRECT", "NOPREFIX" or "ELLIPSIS"

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier deviceHDC - 
           string text - 
           integer len - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
           string align - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_FillEllipse</slug>
        <title>JS_GDI_FillEllipse</title>
        <functioncall prog_lang="cpp">void JS_GDI_FillEllipse(void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_FillEllipse", void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_FillEllipse(identifier deviceHDC, integer left, integer top, integer right, integer bottom)</functioncall>
        <functioncall prog_lang="python">JS_GDI_FillEllipse(void deviceHDC, Int left, Int top, Int right, Int bottom)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <parameters>
           identifier deviceHDC - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_FillPolygon</slug>
        <title>JS_GDI_FillPolygon</title>
        <functioncall prog_lang="cpp">void JS_GDI_FillPolygon(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_FillPolygon", void* deviceHDC, "packedX", "packedY", int numPoints)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_FillPolygon(identifier deviceHDC, string packedX, string packedY, integer numPoints)</functioncall>
        <functioncall prog_lang="python">JS_GDI_FillPolygon(void deviceHDC, String packedX, String packedY, Int numPoints)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            packedX and packedY are strings of points, each packed as "<i4".

        </description>

        <parameters>
           identifier deviceHDC - 
           string packedX - 
           string packedY - 
           integer numPoints - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_FillRect</slug>
        <title>JS_GDI_FillRect</title>
        <functioncall prog_lang="cpp">void JS_GDI_FillRect(void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_FillRect", void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_FillRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom)</functioncall>
        <functioncall prog_lang="python">JS_GDI_FillRect(void deviceHDC, Int left, Int top, Int right, Int bottom)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <parameters>
           identifier deviceHDC - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_FillRoundRect</slug>
        <title>JS_GDI_FillRoundRect</title>
        <functioncall prog_lang="cpp">void JS_GDI_FillRoundRect(void* deviceHDC, int left, int top, int right, int bottom, int xrnd, int yrnd)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_FillRoundRect", void* deviceHDC, int left, int top, int right, int bottom, int xrnd, int yrnd)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_FillRoundRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom, integer xrnd, integer yrnd)</functioncall>
        <functioncall prog_lang="python">JS_GDI_FillRoundRect(void deviceHDC, Int left, Int top, Int right, Int bottom, Int xrnd, Int yrnd)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier deviceHDC - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
           integer xrnd - 
           integer yrnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_GetClientDC</slug>
        <title>JS_GDI_GetClientDC</title>
        <functioncall prog_lang="cpp">void* JS_GDI_GetClientDC(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_GDI_GetClientDC", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">identifier device_context = reaper.JS_GDI_GetClientDC(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">identifier device_context = JS_GDI_GetClientDC(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Returns the device context for the client area of the specified window.

        </description>
        <retvals>
           identifier device_context - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_GetScreenDC</slug>
        <title>JS_GDI_GetScreenDC</title>
        <functioncall prog_lang="cpp">void* JS_GDI_GetScreenDC()</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_GDI_GetScreenDC")</functioncall>
        <functioncall prog_lang="lua">identifier device_context = reaper.JS_GDI_GetScreenDC()</functioncall>
        <functioncall prog_lang="python">identifier device_context = JS_GDI_GetScreenDC()</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Returns a device context for the entire screen.



            WARNING: Only available on Windows, not Linux or MacOS.

        </description>
        <retvals>
           identifier device_context - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_GetSysColor</slug>
        <title>JS_GDI_GetSysColor</title>
        <functioncall prog_lang="cpp">int JS_GDI_GetSysColor(const char* GUIElement)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_GDI_GetSysColor", "GUIElement")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_GDI_GetSysColor(string GUIElement)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_GDI_GetSysColor(String GUIElement)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           string GUIElement - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_GetTextColor</slug>
        <title>JS_GDI_GetTextColor</title>
        <functioncall prog_lang="cpp">int JS_GDI_GetTextColor(void* deviceHDC)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_GDI_GetTextColor", void* deviceHDC)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_GDI_GetTextColor(identifier deviceHDC)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_GDI_GetTextColor(void deviceHDC)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier deviceHDC - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_GetWindowDC</slug>
        <title>JS_GDI_GetWindowDC</title>
        <functioncall prog_lang="cpp">void* JS_GDI_GetWindowDC(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_GDI_GetWindowDC", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">identifier device_context = reaper.JS_GDI_GetWindowDC(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">identifier device_context = JS_GDI_GetWindowDC(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Returns the device context for the entire window, including title bar and frame.

        </description>
        <retvals>
           identifier device_context - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_Line</slug>
        <title>JS_GDI_Line</title>
        <functioncall prog_lang="cpp">void JS_GDI_Line(void* deviceHDC, int x1, int y1, int x2, int y2)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_Line", void* deviceHDC, int x1, int y1, int x2, int y2)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_Line(identifier deviceHDC, integer x1, integer y1, integer x2, integer y2)</functioncall>
        <functioncall prog_lang="python">JS_GDI_Line(void deviceHDC, Int x1, Int y1, Int x2, Int y2)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <parameters>
           identifier deviceHDC - 
           integer x1 - 
           integer y1 - 
           integer x2 - 
           integer y2 - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_Polyline</slug>
        <title>JS_GDI_Polyline</title>
        <functioncall prog_lang="cpp">void JS_GDI_Polyline(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_Polyline", void* deviceHDC, "packedX", "packedY", int numPoints)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_Polyline(identifier deviceHDC, string packedX, string packedY, integer numPoints)</functioncall>
        <functioncall prog_lang="python">JS_GDI_Polyline(void deviceHDC, String packedX, String packedY, Int numPoints)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            packedX and packedY are strings of points, each packed as "<i4".

        </description>

        <parameters>
           identifier deviceHDC - 
           string packedX - 
           string packedY - 
           integer numPoints - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_ReleaseDC</slug>
        <title>JS_GDI_ReleaseDC</title>
        <functioncall prog_lang="cpp">void JS_GDI_ReleaseDC(void* windowHWND, void* deviceHDC)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_ReleaseDC", void* windowHWND, void* deviceHDC)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_ReleaseDC(identifier windowHWND, identifier deviceHDC)</functioncall>
        <functioncall prog_lang="python">JS_GDI_ReleaseDC(void windowHWND, void deviceHDC)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.999
        </requires>
        <description>
            To release a window HDC, both arguments must be supplied: the HWND as well as the HDC. To release a screen DC, only the HDC needs to be supplied.

            For compatibility with previous versions, the HWND and HDC can be supplied in any order.

            NOTE: Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle.
        </description>
        <parameters>
           identifier windowHWND - 
           identifier deviceHDC - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_SelectObject</slug>
        <title>JS_GDI_SelectObject</title>
        <functioncall prog_lang="cpp">void* JS_GDI_SelectObject(void* deviceHDC, void* GDIObject)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_GDI_SelectObject", void* deviceHDC, void* GDIObject)</functioncall>
        <functioncall prog_lang="lua">identifier object = reaper.JS_GDI_SelectObject(identifier deviceHDC, identifier GDIObject)</functioncall>
        <functioncall prog_lang="python">identifier object = JS_GDI_SelectObject(void deviceHDC, void GDIObject)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Activates a font, pen, or fill brush for subsequent drawing in the specified device context.

        </description>
        <retvals>
           identifier object - 
        </retvals>
        <parameters>
           identifier deviceHDC - 
           identifier GDIObject - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_SetPixel</slug>
        <title>JS_GDI_SetPixel</title>
        <functioncall prog_lang="cpp">void JS_GDI_SetPixel(void* deviceHDC, int x, int y, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_SetPixel", void* deviceHDC, int x, int y, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_SetPixel(identifier deviceHDC, integer x, integer y, integer color)</functioncall>
        <functioncall prog_lang="python">JS_GDI_SetPixel(void deviceHDC, Int x, Int y, Int color)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier deviceHDC - 
           integer x - 
           integer y - 
           integer color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_SetTextBkColor</slug>
        <title>JS_GDI_SetTextBkColor</title>
        <functioncall prog_lang="cpp">void JS_GDI_SetTextBkColor(void* deviceHDC, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_SetTextBkColor", void* deviceHDC, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_SetTextBkColor(identifier deviceHDC, integer color)</functioncall>
        <functioncall prog_lang="python">JS_GDI_SetTextBkColor(void deviceHDC, Int color)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier deviceHDC - 
           integer color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_SetTextBkMode</slug>
        <title>JS_GDI_SetTextBkMode</title>
        <functioncall prog_lang="cpp">void JS_GDI_SetTextBkMode(void* deviceHDC, int mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_SetTextBkMode", void* deviceHDC, int mode)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_SetTextBkMode(identifier deviceHDC, integer mode)</functioncall>
        <functioncall prog_lang="python">JS_GDI_SetTextBkMode(void deviceHDC, Int mode)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier deviceHDC - 
           integer mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_SetTextColor</slug>
        <title>JS_GDI_SetTextColor</title>
        <functioncall prog_lang="cpp">void JS_GDI_SetTextColor(void* deviceHDC, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_SetTextColor", void* deviceHDC, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_SetTextColor(identifier deviceHDC, integer color)</functioncall>
        <functioncall prog_lang="python">JS_GDI_SetTextColor(void deviceHDC, Int color)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier deviceHDC - 
           integer color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_StretchBlit</slug>
        <title>JS_GDI_StretchBlit</title>
        <functioncall prog_lang="cpp">void JS_GDI_StretchBlit(void* destHDC, int dstx, int dsty, int dstw, int dsth, void* sourceHDC, int srcx, int srxy, int srcw, int srch, const char* modeOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_StretchBlit", void* destHDC, int dstx, int dsty, int dstw, int dsth, void* sourceHDC, int srcx, int srxy, int srcw, int srch, optional "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_StretchBlit(identifier destHDC, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceHDC, integer srcx, integer srxy, integer srcw, integer srch, optional string mode)</functioncall>
        <functioncall prog_lang="python">JS_GDI_StretchBlit(void destHDC, Int dstx, Int dsty, Int dstw, Int dsth, void sourceHDC, Int srcx, Int srxy, Int srcw, Int srch, String modeOptional)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.002
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Blits between two device contexts, which may include LICE "system bitmaps".

            modeOptional: "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.

            WARNING: On WindowsOS, GDI\_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE\_Blit or LICE\_ProcessRect.
        </description>
        <parameters>
           identifier destHDC - 
           integer dstx - 
           integer dsty - 
           integer dstw - 
           integer dsth - 
           identifier sourceHDC - 
           integer srcx - 
           integer srxy - 
           integer srcw - 
           integer srch - 
           optional string mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Header_GetItemCount</slug>
        <title>JS_Header_GetItemCount</title>
        <functioncall prog_lang="cpp">int count = JS_Header_GetItemCount(void* headerHWND)</functioncall>
        <functioncall prog_lang="eel">int count = extension_api("JS_Header_GetItemCount", void* headerHWND)</functioncall>
        <functioncall prog_lang="lua">integer count = reaper.JS_Header_GetItemCount(identifier headerHWND)</functioncall>
        <functioncall prog_lang="python">Int count = JS_Header_GetItemCount(void headerHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.310
        </requires>
        <description>
            returns the number of item of the listview
        </description>
        <parameters>
           identifier headerHWND - 
        </parameters>
        <retvals>
            integer count - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Int</slug>
        <title>JS_Int</title>
        <functioncall prog_lang="cpp">void JS_Int(void* pointer, int offset, int* intOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Int", void* pointer, int offset, int &int)</functioncall>
        <functioncall prog_lang="lua">integer int = reaper.JS_Int(identifier pointer, integer offset)</functioncall>
        <functioncall prog_lang="python">(void pointer, Int offset, Int intOut) = JS_Int(pointer, offset, intOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.971
        </requires>
        <description>
            Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.
        </description>
        <retvals>
           integer int - 
        </retvals>
        <parameters>
           identifier address - 
           integer offset - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_AlterBitmapHSV</slug>
        <title>JS_LICE_AlterBitmapHSV</title>
        <functioncall prog_lang="cpp">void JS_LICE_AlterBitmapHSV(void* bitmap, double hue, double saturation, double value)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_AlterBitmapHSV", void* bitmap, hue, saturation, value)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_AlterBitmapHSV(identifier bitmap, number hue, number saturation, number value)</functioncall>
        <functioncall prog_lang="python">(JS_LICE_AlterBitmapHSV(void bitmap, Float hue, Float saturation, Float value)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.988
        </requires>
        <description>
            Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)
        </description>
        <parameters>
           identifier bitmap - 
           number hue - 
           number saturation - 
           number value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_AlterRectHSV</slug>
        <title>JS_LICE_AlterRectHSV</title>
        <functioncall prog_lang="cpp">void JS_LICE_AlterRectHSV(void* bitmap, int x, int y, int w, int h, double hue, double saturation, double value)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_AlterRectHSV", void* bitmap, int x, int y, int w, int h, hue, saturation, value)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_AlterRectHSV(identifier bitmap, integer x, integer y, integer w, integer h, number hue, number saturation, number value)</functioncall>
        <functioncall prog_lang="python">JS_LICE_AlterRectHSV(void bitmap, Int x, Int y, Int w, Int h, Float hue, Float saturation, Float value)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.988
        </requires>
        <description>
            Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)
        </description>
        <parameters>
           identifier bitmap - 
           integer x - 
           integer y - 
           integer w - 
           integer h - 
           number hue - 
           number saturation - 
           number value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Arc</slug>
        <title>JS_LICE_Arc</title>
        <functioncall prog_lang="cpp">void JS_LICE_Arc(void* bitmap, double cx, double cy, double r, double minAngle, double maxAngle, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Arc", void* bitmap, cx, cy, r, minAngle, maxAngle, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Arc(identifier bitmap, number cx, number cy, number r, number minAngle, number maxAngle, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Arc(void bitmap, Float cx, Float cy, Float r, Float minAngle, Float maxAngle, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.000
        </requires>
        <description>
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

            LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
        </description>
        <parameters>
           identifier bitmap - 
           number cx - 
           number cy - 
           number r - 
           number minAngle - 
           number maxAngle - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_ArrayAllBitmaps</slug>
        <title>JS_LICE_ArrayAllBitmaps</title>
        <functioncall prog_lang="cpp">int JS_LICE_ArrayAllBitmaps(void* reaperarray)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_LICE_ArrayAllBitmaps", void* reaperarray)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_LICE_ArrayAllBitmaps(identifier reaperarray)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_LICE_ArrayAllBitmaps(void reaperarray)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.215
        </requires>
        <description>

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
           identifier reaperarray - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Bezier</slug>
        <title>JS_LICE_Bezier</title>
        <functioncall prog_lang="cpp">void JS_LICE_Bezier(void* bitmap, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, double tol, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Bezier", void* bitmap, xstart, ystart, xctl1, yctl1, xctl2, yctl2, xend, yend, tol, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Bezier(identifier bitmap, number xstart, number ystart, number xctl1, number yctl1, number xctl2, number yctl2, number xend, number yend, number tol, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Bezier(void bitmap, Float xstart, Float ystart, Float xctl1, Float yctl1, Float xctl2, Float yctl2, Float xend, Float yend, Float tol, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.986
        </requires>
        <description>
           LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.

           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
        </description>
        <parameters>
           identifier bitmap - 
           number xstart - 
           number ystart - 
           number xctl1 - 
           number yctl1 - 
           number xctl2 - 
           number yctl2 - 
           number xend - 
           number yend - 
           number tol - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Blit</slug>
        <title>JS_LICE_Blit</title>
        <functioncall prog_lang="cpp">void JS_LICE_Blit(void* destBitmap, int dstx, int dsty, void* sourceBitmap, int srcx, int srcy, int width, int height, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Blit", void* destBitmap, int dstx, int dsty, void* sourceBitmap, int srcx, int srcy, int width, int height, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Blit(identifier destBitmap, integer dstx, integer dsty, identifier sourceBitmap, integer srcx, integer srcy, integer width, integer height, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Blit(void destBitmap, Int dstx, Int dsty, void sourceBitmap, Int srcx, Int srcy, Int width, Int height, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.988
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Standard LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.

            In addition to the standard LICE modes, LICE\_Blit also offers:
            \* "CHANCOPY\_XTOY", with X and Y any of the four channels, A, R, G or B. (CHANCOPY\_ATOA is similar to MASK mode.)
            \* "BLUR"
            \* "ALPHAMUL", which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with "COPY,ALPHA".)
        </description>
        <parameters>
           identifier destBitmap - 
           integer dstx - 
           integer dsty - 
           identifier sourceBitmap - 
           integer srcx - 
           integer srcy - 
           integer width - 
           integer height - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Circle</slug>
        <title>JS_LICE_Circle</title>
        <functioncall prog_lang="cpp">void JS_LICE_Circle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Circle", void* bitmap, cx, cy, r, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Circle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Circle(void bitmap, Float cx, Float cy, Float r, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
           LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".


           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>
        <parameters>
           identifier bitmap - 
           number cx - 
           number cy - 
           number r - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Clear</slug>
        <title>JS_LICE_Clear</title>
        <functioncall prog_lang="cpp">void JS_LICE_Clear(void* bitmap, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Clear", void* bitmap, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Clear(identifier bitmap, integer color)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Clear(void bitmap, Int color)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier bitmap - 
           integer color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_CreateBitmap</slug>
        <title>JS_LICE_CreateBitmap</title>
        <functioncall prog_lang="cpp">void* JS_LICE_CreateBitmap(bool isSysBitmap, int width, int height)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_LICE_CreateBitmap", bool isSysBitmap, int width, int height)</functioncall>
        <functioncall prog_lang="lua">identifier bitmap = reaper.JS_LICE_CreateBitmap(boolean isSysBitmap, integer width, integer height)</functioncall>
        <functioncall prog_lang="python">identifier bitmap = JS_LICE_CreateBitmap(Boolean isSysBitmap, Int width, Int height)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           identifier bitmap - 
        </retvals>
        <parameters>
           boolean isSysBitmap - 
           integer width - 
           integer height - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_CreateFont</slug>
        <title>JS_LICE_CreateFont</title>
        <functioncall prog_lang="cpp">void* JS_LICE_CreateFont()</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_LICE_CreateFont")</functioncall>
        <functioncall prog_lang="lua">identifier font = reaper.JS_LICE_CreateFont()</functioncall>
        <functioncall prog_lang="python">identifier font = JS_LICE_CreateFont()</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           identifier font - 
        </retvals>

        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_DestroyBitmap</slug>
        <title>JS_LICE_DestroyBitmap</title>
        <functioncall prog_lang="cpp">void JS_LICE_DestroyBitmap(void* bitmap)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_DestroyBitmap", void* bitmap)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_DestroyBitmap(identifier bitmap)</functioncall>
        <functioncall prog_lang="python">JS_LICE_DestroyBitmap(void bitmap)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.000
        </requires>
        <description>
            Deletes the bitmap, and also unlinks bitmap from any composited window.
        </description>
        <parameters>
           identifier bitmap - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_DestroyFont</slug>
        <title>JS_LICE_DestroyFont</title>
        <functioncall prog_lang="cpp">void JS_LICE_DestroyFont(void* LICEFont)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_DestroyFont", void* LICEFont)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_DestroyFont(identifier LICEFont)</functioncall>
        <functioncall prog_lang="python">JS_LICE_DestroyFont(void LICEFont)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier LICEFont - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_DrawChar</slug>
        <title>JS_LICE_DrawChar</title>
        <functioncall prog_lang="cpp">void JS_LICE_DrawChar(void* bitmap, int x, int y, char c, int color, double alpha, int mode))</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_DrawChar", void* bitmap, int x, int y, char c, int color, alpha, int mode))</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_DrawChar(identifier bitmap, integer x, integer y, integer c, integer color, number alpha, integer mode))</functioncall>
        <functioncall prog_lang="python">JS_LICE_DrawChar(void bitmap, Int x, Int y, Int c, Int color, Float alpha, Int mode))</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier bitmap - 
           integer x - 
           integer y - 
           integer c - 
           integer color - 
           number alpha - 
           integer mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_DrawText</slug>
        <title>JS_LICE_DrawText</title>
        <functioncall prog_lang="cpp">int JS_LICE_DrawText(void* bitmap, void* LICEFont, const char* text, int textLen, int x1, int y1, int x2, int y2)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_LICE_DrawText", void* bitmap, void* LICEFont, "text", int textLen, int x1, int y1, int x2, int y2)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_LICE_DrawText(identifier bitmap, identifier LICEFont, string text, integer textLen, integer x1, integer y1, integer x2, integer y2)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_LICE_DrawText(void bitmap, void LICEFont, String text, Int textLen, Int x1, Int y1, Int x2, Int y2)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier bitmap - 
           identifier LICEFont - 
           string text - 
           integer textLen - 
           integer x1 - 
           integer y1 - 
           integer x2 - 
           integer y2 - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_FillCircle</slug>
        <title>JS_LICE_FillCircle</title>
        <functioncall prog_lang="cpp">void JS_LICE_FillCircle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_FillCircle", void* bitmap, cx, cy, r, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_FillCircle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_FillCircle(void bitmap, Float cx, Float cy, Float r, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".



            LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>
        <parameters>
           identifier bitmap - 
           number cx - 
           number cy - 
           number r - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_FillPolygon</slug>
        <title>JS_LICE_FillPolygon</title>
        <functioncall prog_lang="cpp">void JS_LICE_FillPolygon(void* bitmap, const char* packedX, const char* packedY, int numPoints, int color, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_FillPolygon", void* bitmap, "packedX", "packedY", int numPoints, int color, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_FillPolygon(identifier bitmap, string packedX, string packedY, integer numPoints, integer color, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_FillPolygon(void bitmap, String packedX, String packedY, Int numPoints, Int color, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.986
        </requires>
        <description>
           packedX and packedY are two strings of coordinates, each packed as "<i4".

           LICE modes : "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.

           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
        </description>
        <parameters>
           identifier bitmap - 
           string packedX - 
           string packedY - 
           integer numPoints - 
           integer color - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_FillRect</slug>
        <title>JS_LICE_FillRect</title>
        <functioncall prog_lang="cpp">void JS_LICE_FillRect(void* bitmap, int x, int y, int w, int h, int color, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_FillRect", void* bitmap, int x, int y, int w, int h, int color, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_FillRect(identifier bitmap, integer x, integer y, integer w, integer h, integer color, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_FillRect(void bitmap, Int x, Int y, Int w, Int h, Int color, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".



            LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
        </description>
        <parameters>
           identifier bitmap - 
           integer x - 
           integer y - 
           integer w - 
           integer h - 
           integer color - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_FillTriangle</slug>
        <title>JS_LICE_FillTriangle</title>
        <functioncall prog_lang="cpp">void JS_LICE_FillTriangle(void* bitmap, int x1, int y1, int x2, int y2, int x3, int y3, int color, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_FillTriangle", void* bitmap, int x1, int y1, int x2, int y2, int x3, int y3, int color, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_FillTriangle(identifier bitmap, integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, integer color, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_FillTriangle(void bitmap, Int x1, Int y1, Int x2, Int y2, Int x3, Int y3, Int color, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".



            LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
        </description>
        <parameters>
           identifier bitmap - 
           integer x1 - 
           integer y1 - 
           integer x2 - 
           integer y2 - 
           integer x3 - 
           integer y3 - 
           integer color - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_GetDC</slug>
        <title>JS_LICE_GetDC</title>
        <functioncall prog_lang="cpp">void* JS_LICE_GetDC(void* bitmap)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_LICE_GetDC", void* bitmap)</functioncall>
        <functioncall prog_lang="lua">identifier device_context = reaper.JS_LICE_GetDC(identifier bitmap)</functioncall>
        <functioncall prog_lang="python">identifier device_context = JS_LICE_GetDC(void bitmap)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           identifier device_context - 
        </retvals>
        <parameters>
           identifier bitmap - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_GetHeight</slug>
        <title>JS_LICE_GetHeight</title>
        <functioncall prog_lang="cpp">int JS_LICE_GetHeight(void* bitmap)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_LICE_GetHeight", void* bitmap)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_LICE_GetHeight(identifier bitmap)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_LICE_GetHeight(void bitmap)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier bitmap - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_GetPixel</slug>
        <title>JS_LICE_GetPixel</title>
        <functioncall prog_lang="cpp">int JS_LICE_GetPixel(void* bitmap, int x, int y)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_LICE_GetPixel", void* bitmap, int x, int y)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_LICE_GetPixel(identifier bitmap, integer x, integer y)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_LICE_GetPixel(void bitmap, Int x, Int y)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Returns the color of the specified pixel.

        </description>
        <retvals>
           integer retval - 
        </retvals>
        <parameters>
           identifier bitmap - 
           integer x - 
           integer y - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_GetWidth</slug>
        <title>JS_LICE_GetWidth</title>
        <functioncall prog_lang="cpp">int JS_LICE_GetWidth(void* bitmap)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_LICE_GetWidth", void* bitmap)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_LICE_GetWidth(identifier bitmap)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_LICE_GetWidth(void bitmap)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier bitmap - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_GradRect</slug>
        <title>JS_LICE_GradRect</title>
        <functioncall prog_lang="cpp">void JS_LICE_GradRect(void* bitmap, int dstx, int dsty, int dstw, int dsth, double ir, double ig, double ib, double ia, double drdx, double dgdx, double dbdx, double dadx, double drdy, double dgdy, double dbdy, double dady, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_GradRect", void* bitmap, int dstx, int dsty, int dstw, int dsth, ir, ig, ib, ia, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_GradRect(identifier bitmap, integer dstx, integer dsty, integer dstw, integer dsth, number ir, number ig, number ib, number ia, number drdx, number dgdx, number dbdx, number dadx, number drdy, number dgdy, number dbdy, number dady, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_GradRect(void bitmap, Int dstx, Int dsty, Int dstw, Int dsth, Float ir, Float ig, Float ib, Float ia, Float drdx, Float dgdx, Float dbdx, Float dadx, Float drdy, Float dgdy, Float dbdy, Float dady, String mode)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier bitmap - 
           integer dstx - 
           integer dsty - 
           integer dstw - 
           integer dsth - 
           number ir - 
           number ig - 
           number ib - 
           number ia - 
           number drdx - 
           number dgdx - 
           number dbdx - 
           number dadx - 
           number drdy - 
           number dgdy - 
           number dbdy - 
           number dady - 
           string mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_IsFlipped</slug>
        <title>JS_LICE_IsFlipped</title>
        <functioncall prog_lang="cpp">bool JS_LICE_IsFlipped(void* bitmap)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_LICE_IsFlipped", void* bitmap)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_LICE_IsFlipped(identifier bitmap)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_LICE_IsFlipped(void bitmap)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier bitmap - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Line</slug>
        <title>JS_LICE_Line</title>
        <functioncall prog_lang="cpp">void JS_LICE_Line(void* bitmap, double x1, double y1, double x2, double y2, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Line", void* bitmap, x1, y1, x2, y2, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Line(identifier bitmap, number x1, number y1, number x2, number y2, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Line(void bitmap, Float x1, Float y1, Float x2, Float y2, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".



            LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
        </description>
        <parameters>
           identifier bitmap - 
           number x1 - 
           number y1 - 
           number x2 - 
           number y2 - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_ListAllBitmaps</slug>
        <title>JS_LICE_ListAllBitmaps</title>
        <functioncall prog_lang="cpp">int JS_LICE_ListAllBitmaps(char* listOutNeedBig, int listOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_LICE_ListAllBitmaps", #list)</functioncall>
        <functioncall prog_lang="lua">integer retval, string list = reaper.JS_LICE_ListAllBitmaps()</functioncall>
        <functioncall prog_lang="python">(Int retval, String listOutNeedBig, Int listOutNeedBig_sz) = JS_LICE_ListAllBitmaps(listOutNeedBig, listOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.000
        </requires>
        <description>

        </description>
        <retvals>
           integer retval - 
           string list - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
  <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_LoadJPG</slug>
        <title>JS_LICE_LoadJPG</title>
        <functioncall prog_lang="cpp">void* JS_LICE_LoadJPG(const char* filename)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_LICE_LoadJPG", "filename")</functioncall>
        <functioncall prog_lang="lua">identifier image = reaper.JS_LICE_LoadJPG(string filename)</functioncall>
        <functioncall prog_lang="python">identifier image = JS_LICE_LoadJPG(String filename)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.215
        </requires>
        <description>
            Returns a system LICE bitmap containing the JPEG.
        </description>
        <retvals>
           identifier image - the bitmap, which holds the jpg
        </retvals>
        <parameters>
            string filename - the filename+path of the jpg-file to load
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Image Files
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_LoadJPGFromMemory</slug>
        <title>JS_LICE_LoadJPGFromMemory</title>
        <functioncall prog_lang="cpp">void* JS_LICE_LoadJPGFromMemory(const char* buffer, int bufsize)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_LICE_LoadJPGFromMemory", "buffer", int bufsize)</functioncall>
        <functioncall prog_lang="lua">identifier image = reaper.JS_LICE_LoadJPGFromMemory(string buffer, integer bufsize)</functioncall>
        <functioncall prog_lang="python">identifier image = JS_LICE_LoadJPGFromMemory(String buffer, Int bufsize)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.301
        </requires>
        <description>
            Returns a system LICE bitmap containing the JPEG.
        </description>
        <retvals>
           identifier image - the bitmap, which holds the jpg
        </retvals>
        <parameters>
            string buffer - the buffer which holds the jpg-file to load
            integer bufsize - the size of the buffer to read
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Image Files
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_LoadPNG</slug>
        <title>JS_LICE_LoadPNG</title>
        <functioncall prog_lang="cpp">void* JS_LICE_LoadPNG(const char* filename)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_LICE_LoadPNG", "filename")</functioncall>
        <functioncall prog_lang="lua">identifier bitmap = reaper.JS_LICE_LoadPNG(string filename)</functioncall>
        <functioncall prog_lang="python">identifier bitmap = JS_LICE_LoadPNG(String filename)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.980
        </requires>
        <description>
            Returns a system LICE bitmap containing the PNG.

        </description>
        <retvals>
           identifier bitmap - the bitmap, which holds the png
        </retvals>
        <parameters>
           string filename - the filename with path of the png filename to load
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Image Files
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_LoadPNGFromMemory</slug>
        <title>JS_LICE_LoadPNGFromMemory</title>
        <functioncall prog_lang="cpp">void* JS_LICE_LoadPNGFromMemory(const char* buffer, int bufsize)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_LICE_LoadPNGFromMemory", "buffer", int bufsize)</functioncall>
        <functioncall prog_lang="lua">identifier bitmap = reaper.JS_LICE_LoadPNGFromMemory(string buffer, integer bufsize)</functioncall>
        <functioncall prog_lang="python">identifier bitmap = JS_LICE_LoadPNGFromMemory(String buffer, Int bufsize)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.301
        </requires>
        <description>
            Returns a system LICE bitmap containing the PNG.
        </description>
        <retvals>
           identifier bitmap - the bitmap, which holds the png
        </retvals>
        <parameters>
           string buffer - the buffer of the png to load
           integer bufsize - the size of the buffer to load
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Image Files
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_MeasureText</slug>
        <title>JS_LICE_MeasureText</title>
        <functioncall prog_lang="cpp">void JS_LICE_MeasureText(const char* text, int* widthOut, int* HeightOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_MeasureText", "text", int &width, int &Height)</functioncall>
        <functioncall prog_lang="lua">integer width, integer Height = reaper.JS_LICE_MeasureText(string text)</functioncall>
        <functioncall prog_lang="python">(String text, Int widthOut, Int HeightOut) = JS_LICE_MeasureText(text, widthOut, HeightOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.986
        </requires>
        <description>

        </description>
        <retvals>
           integer width - 
           integer Height - 
        </retvals>
        <parameters>
           string text - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_ProcessRect</slug>
        <title>JS_LICE_ProcessRect</title>
        <functioncall prog_lang="cpp">bool JS_LICE_ProcessRect(void* bitmap, int x, int y, int w, int h, const char* mode, double operand)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_LICE_ProcessRect", void* bitmap, int x, int y, int w, int h, "mode", operand)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_LICE_ProcessRect(identifier bitmap, integer x, integer y, integer w, integer h, string mode, number operand)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_LICE_ProcessRect(void bitmap, Int x, Int y, Int w, Int h, String mode, Float operand)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.988
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Applies bitwise operations to each pixel in the target rectangle.

            operand: a color in 0xAARRGGBB format.

            modes:
            \* "XOR", "OR" or "AND".
            \* "SET\_XYZ", with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.)
            \* "ALPHAMUL": Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI\_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)

            NOTE:
            LICE\_Blit and LICE\_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:
            reaper.JS\_LICE\_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, "ADD").
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
           identifier bitmap - 
           integer x - 
           integer y - 
           integer w - 
           integer h - 
           string mode - 
           number operand - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_PutPixel</slug>
        <title>JS_LICE_PutPixel</title>
        <functioncall prog_lang="cpp">void JS_LICE_PutPixel(void* bitmap, int x, int y, int color, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_PutPixel", void* bitmap, int x, int y, int color, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_PutPixel(identifier bitmap, integer x, integer y, integer color, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_PutPixel(void bitmap, Int x, Int y, Int color, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

            LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
        </description>
        <parameters>
           identifier bitmap - 
           integer x - 
           integer y - 
           integer color - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Resize</slug>
        <title>JS_LICE_Resize</title>
        <functioncall prog_lang="cpp">void JS_LICE_Resize(void* bitmap, int width, int height)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Resize", void* bitmap, int width, int height)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Resize(identifier bitmap, integer width, integer height)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Resize(void bitmap, Int width, Int height)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier bitmap - 
           integer width - 
           integer height - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_RotatedBlit</slug>
        <title>JS_LICE_RotatedBlit</title>
        <functioncall prog_lang="cpp">void JS_LICE_RotatedBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* sourceBitmap, double srcx, double srcy, double srcw, double srch, double angle, double rotxcent, double rotycent, bool cliptosourcerect, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_RotatedBlit", void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* sourceBitmap, srcx, srcy, srcw, srch, angle, rotxcent, rotycent, bool cliptosourcerect, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_RotatedBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceBitmap, number srcx, number srcy, number srcw, number srch, number angle, number rotxcent, number rotycent, boolean cliptosourcerect, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_RotatedBlit(void destBitmap, Int dstx, Int dsty, Int dstw, Int dsth, void sourceBitmap, Float srcx, Float srcy, Float srcw, Float srch, Float angle, Float rotxcent, Float rotycent, Boolean cliptosourcerect, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.986
        </requires>
        <description>
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.
        </description>
        <parameters>
           identifier destBitmap - 
           integer dstx - 
           integer dsty - 
           integer dstw - 
           integer dsth - 
           identifier sourceBitmap - 
           number srcx - 
           number srcy - 
           number srcw - 
           number srch - 
           number angle - 
           number rotxcent - 
           number rotycent - 
           boolean cliptosourcerect - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_RoundRect</slug>
        <title>JS_LICE_RoundRect</title>
        <functioncall prog_lang="cpp">void JS_LICE_RoundRect(void* bitmap, double x, double y, double w, double h, int cornerradius, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_RoundRect", void* bitmap, x, y, w, h, int cornerradius, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_RoundRect(identifier bitmap, number x, number y, number w, number h, integer cornerradius, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_RoundRect(void bitmap, Float x, Float y, Float w, Float h, Int cornerradius, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

            LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>
        <parameters>
           identifier bitmap - 
           number x - 
           number y - 
           number w - 
           number h - 
           integer cornerradius - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_ScaledBlit</slug>
        <title>JS_LICE_ScaledBlit</title>
        <functioncall prog_lang="cpp">void JS_LICE_ScaledBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* srcBitmap, double srcx, double srcy, double srcw, double srch, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_ScaledBlit", void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* srcBitmap, srcx, srcy, srcw, srch, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_ScaledBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier srcBitmap, number srcx, number srcy, number srcw, number srch, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_ScaledBlit(void destBitmap, Int dstx, Int dsty, Int dstw, Int dsth, void srcBitmap, Float srcx, Float srcy, Float srcw, Float srch, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.986
        </requires>
        <description>
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.
        </description>
        <parameters>
           identifier destBitmap - 
           integer dstx - 
           integer dsty - 
           integer dstw - 
           integer dsth - 
           identifier srcBitmap - 
           number srcx - 
           number srcy - 
           number srcw - 
           number srch - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_SetAlphaFromColorMask</slug>
        <title>JS_LICE_SetAlphaFromColorMask</title>
        <functioncall prog_lang="cpp">void JS_LICE_SetAlphaFromColorMask(void* bitmap, int colorRGB)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_SetAlphaFromColorMask", void* bitmap, int colorRGB)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_SetAlphaFromColorMask(identifier bitmap, integer colorRGB)</functioncall>
        <functioncall prog_lang="python">JS_LICE_SetAlphaFromColorMask(void bitmap, Int colorRGB)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.988
        </requires>
        <description>
            Sets all pixels that match the given color's RGB values to fully transparent, and all other pixels to fully opaque. (All pixels' RGB values remain unchanged.)
        </description>
        <parameters>
           identifier bitmap - 
           integer colorRGB - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_SetFontBkColor</slug>
        <title>JS_LICE_SetFontBkColor</title>
        <functioncall prog_lang="cpp">void JS_LICE_SetFontBkColor(void* LICEFont, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_SetFontBkColor", void* LICEFont, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_SetFontBkColor(identifier LICEFont, integer color)</functioncall>
        <functioncall prog_lang="python">JS_LICE_SetFontBkColor(void LICEFont, Int color)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
           Sets the color of the font background.
        </description>
        <parameters>
           identifier LICEFont - 
           integer color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_SetFontColor</slug>
        <title>JS_LICE_SetFontColor</title>
        <functioncall prog_lang="cpp">void JS_LICE_SetFontColor(void* LICEFont, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_SetFontColor", void* LICEFont, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_SetFontColor(identifier LICEFont, integer color)</functioncall>
        <functioncall prog_lang="python">JS_LICE_SetFontColor(void LICEFont, Int color)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <parameters>
           identifier LICEFont - 
           integer color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_SetFontFXColor</slug>
        <title>JS_LICE_SetFontFXColor</title>
        <functioncall prog_lang="cpp">void JS_LICE_SetFontFXColor(void* LICEFont, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_SetFontFXColor", void* LICEFont, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_SetFontFXColor(identifier LICEFont, integer color)</functioncall>
        <functioncall prog_lang="python">JS_LICE_SetFontFXColor(void LICEFont, Int color)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.301
        </requires>
        <description>
            Sets the color of font FX such as shadow.
        </description>
        <parameters>
           identifier LICEFont - 
           integer color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_SetFontFromGDI</slug>
        <title>JS_LICE_SetFontFromGDI</title>
        <functioncall prog_lang="cpp">void JS_LICE_SetFontFromGDI(void* LICEFont, void* GDIFont, const char* moreFormats)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_SetFontFromGDI", void* LICEFont, void* GDIFont, "moreFormats")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_SetFontFromGDI(identifier LICEFont, identifier GDIFont, string moreFormats)</functioncall>
        <functioncall prog_lang="python">JS_LICE_SetFontFromGDI(void LICEFont, void GDIFont, String moreFormats)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Converts a GDI font into a LICE font.

            The font can be modified by the following flags, in a comma-separated list:

            "VERTICAL", "BOTTOMUP", "NATIVE", "BLUR", "INVERT", "MONO", "SHADOW" or "OUTLINE".
        </description>
        <parameters>
           identifier LICEFont - 
           identifier GDIFont - 
           string moreFormats - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Drawing in HWNDs
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_WriteJPG</slug>
        <title>JS_LICE_WriteJPG</title>
        <functioncall prog_lang="cpp">bool JS_LICE_WriteJPG(const char* filename, void* bitmap, int quality, bool* forceBaselineOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_LICE_WriteJPG", "filename", void* bitmap, int quality, unsupported forceBaselineOptional)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_LICE_WriteJPG(string filename, identifier bitmap, integer quality, unsupported forceBaseline)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String filename, void bitmap, Int quality, Boolean forceBaselineOptional) = JS_LICE_WriteJPG(filename, bitmap, quality, forceBaselineOptional)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.215
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Parameters:

            \* quality is an integer in the range 1..100.
            \* forceBaseline is an optional boolean parameter that ensures compatibility with all JPEG viewers by preventing too low quality, "cubist" settings. 
        </description>
        <retvals>
            boolean retval - true, writing was successful; false, writing was unsuccessful
        </retvals>
        <parameters>
           string filename - the filename+path of the jpg to write
           LICE_IBitmap bitmap - the bitmap, that you want to write as jpg-file
           integer quality - the quality-setting in percent, from 1(lowest quality) to 100(highest quality)
           optional boolean forceBaseline - true, ensure compatibility with all JPEG-viewers(prevent too low quality); nil or false, allow too low quality(possible compatibility-problems with some JPEG-viewers)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Image Files
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_WritePNG</slug>
        <title>JS_LICE_WritePNG</title>
        <functioncall prog_lang="cpp">bool JS_LICE_WritePNG(const char* filename, void* bitmap, bool wantAlpha)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_LICE_WritePNG", "filename", void* bitmap, bool wantAlpha)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_LICE_WritePNG(string filename, identifier bitmap, boolean wantAlpha)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_LICE_WritePNG(String filename, void bitmap, Boolean wantAlpha)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.215
        </requires>
        <description>
            Writes the contents of a LICE_IBitMap as png-file.
        </description>
        <retvals>
            boolean retval - true, writing was successful; false, writing was not successful
        </retvals>
        <parameters>
           string filename - the filename+path of the png-file to write
           LICE_IBitmap bitmap - the bitmap, whose contents shall be written as png-file
           boolean wantAlpha - true, store alpha; false, don't store alpha
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Image Files
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_EnsureVisible</slug>
        <title>JS_ListView_EnsureVisible</title>
        <functioncall prog_lang="cpp">void JS_ListView_EnsureVisible(void* listviewHWND, int index, bool partialOK)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_ListView_EnsureVisible", void* listviewHWND, int index, bool partialOK)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_ListView_EnsureVisible(identifier listviewHWND, integer index, boolean partialOK)</functioncall>
        <functioncall prog_lang="python">JS_ListView_EnsureVisible(void listviewHWND, Int index, Boolean partialOK)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.990
        </requires>
        <description>

        </description>
        <parameters>
           identifier listviewHWND - 
           integer index - 
           boolean partialOK - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Localize</slug>
        <title>JS_Localize</title>
        <functioncall prog_lang="cpp">void JS_Localize(const char* USEnglish, const char* LangPackSection, char* translationOut, int translationOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Localize", "USEnglish", "LangPackSection", #translation)</functioncall>
        <functioncall prog_lang="lua">string translation = reaper.JS_Localize(string USEnglish, string LangPackSection)</functioncall>
        <functioncall prog_lang="python">(String USEnglish, String LangPackSection, String translationOut, Int translationOut_sz) = JS_Localize(USEnglish, LangPackSection, translationOut, translationOut_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the translation of the given US English text, according to the currently loaded Language Pack.

            Parameters:
            \* LangPackSection: Language Packs are divided into sections such as "common" or "DLG\_102".
            \* In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.

            Example: reaper.JS\_Localize("Actions", "common", "", 20)
        </description>
        <parameters>
           string USEnglish - the original english string
           string LangPackSection - the section in the Reaper-language-pack-file, in which the string is locate
        </parameters>
        <retvals>
            string translation - the translated string, according to the currently used LangPack
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Localization
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_MIDIEditor_ArrayAll</slug>
        <title>JS_MIDIEditor_ArrayAll</title>
        <functioncall prog_lang="cpp">void JS_MIDIEditor_ArrayAll(void* reaperarray)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_MIDIEditor_ArrayAll", void* reaperarray)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_MIDIEditor_ArrayAll(identifier reaperarray)</functioncall>
        <functioncall prog_lang="python">JS_MIDIEditor_ArrayAll(void reaperarray)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the addresses of all open MIDI windows (whether docked or not).

            \* The addresses are stored in the provided reaper.array.

            \* Each address can be converted to a REAPER object (HWND) by the function JS\_Window\_HandleFromAddress.

        </description>

        <parameters>
           identifier reaperarray - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_MIDIEditor_ListAll</slug>
        <title>JS_MIDIEditor_ListAll</title>
        <functioncall prog_lang="cpp">void JS_MIDIEditor_ListAll(char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_MIDIEditor_ListAll", #buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.JS_MIDIEditor_ListAll(string buf)</functioncall>
        <functioncall prog_lang="python">(String buf, Int buf_sz) = JS_MIDIEditor_ListAll(buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns a list of HWNDs of all open MIDI windows (whether docked or not).

            \* The list is formatted as a comma-separated (and terminated) string of hexadecimal values.

            \* Each value is an address that can be converted to a HWND by the function JS\_Window\_HandleFromAddress.

        </description>
        <retvals>
           string buf   - 
        </retvals>
        <parameters>
           string buf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mem_Alloc</slug>
        <title>JS_Mem_Alloc</title>
        <functioncall prog_lang="cpp">void* JS_Mem_Alloc(int sizeBytes)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Mem_Alloc", int sizeBytes)</functioncall>
        <functioncall prog_lang="lua">identifier memory = reaper.JS_Mem_Alloc(integer sizeBytes)</functioncall>
        <functioncall prog_lang="python">identifier memory = JS_Mem_Alloc(Int sizeBytes)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.971
        </requires>
        <description>
            Allocates memory for general use by functions that require memory buffers.
        </description>
        <retvals>
           identifier memory - 
        </retvals>
        <parameters>
           integer sizeBytes - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mem_Free</slug>
        <title>JS_Mem_Free</title>
        <functioncall prog_lang="cpp">bool JS_Mem_Free(void* mallocPointer)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Mem_Free", void* mallocPointer)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Mem_Free(identifier mallocPointer)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Mem_Free(void mallocPointer)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.971
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Frees memory that was previously allocated by JS\_Mem\_Alloc.
        </description>
        <retvals>
           boolean retval - 
        </retvals>
        <parameters>
           identifier mallocPointer - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mem_FromString</slug>
        <title>JS_Mem_FromString</title>
        <functioncall prog_lang="cpp">bool JS_Mem_FromString(void* mallocPointer, int offset, const char* packedString, int stringLength)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Mem_FromString", void* mallocPointer, int offset, "packedString", int stringLength)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Mem_FromString(identifier mallocPointer, integer offset, string packedString, integer stringLength)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Mem_FromString(void mallocPointer, Int offset, String packedString, Int stringLength)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.971
        </requires>
        <description>
            Copies a packed string into a memory buffer.
        </description>
        <retvals>
           boolean retval - 
        </retvals>
        <parameters>
           identifier mallocPointer - 
           integer offset - 
           string packedString - 
           integer stringLength - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mouse_GetCursor</slug>
        <title>JS_Mouse_GetCursor</title>
        <functioncall prog_lang="cpp">void* JS_Mouse_GetCursor()</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Mouse_GetCursor")</functioncall>
        <functioncall prog_lang="lua">identifier mouse_cursor = reaper.JS_Mouse_GetCursor()</functioncall>
        <functioncall prog_lang="python">identifier mouse_cursor = JS_Mouse_GetCursor()</functioncall>
        <requires>
            Reaper=5.974
            JS=0.988
        </requires>
        <description>
            On Windows, retrieves a handle to the current mouse cursor.
            On Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.
        </description>
        <retvals>
           identifier mouse_cursor - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Mouse
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mouse_GetState</slug>
        <title>JS_Mouse_GetState</title>
        <functioncall prog_lang="cpp">int JS_Mouse_GetState(int flags)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Mouse_GetState", int flags)</functioncall>
        <functioncall prog_lang="lua">integer mouse_states = reaper.JS_Mouse_GetState(integer flags)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Mouse_GetState(Int flags)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Retrieves the states of mouse buttons and modifiers keys.

            Parameters:

            * flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. I.e., to get the states of the left mouse button and the ctrl key, use flags = 0b00000101.
            use -1 as flags to retrieve the states of all mouse-buttons and modifier
        </description>
        <retvals>
           integer mouse_states - 
        </retvals>
        <parameters>
           integer flags - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Mouse
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mouse_LoadCursor</slug>
        <title>JS_Mouse_LoadCursor</title>
        <functioncall prog_lang="cpp">void* JS_Mouse_LoadCursor(int cursorNumber)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Mouse_LoadCursor", int cursorNumber)</functioncall>
        <functioncall prog_lang="lua">identifier mouse_cursor = reaper.JS_Mouse_LoadCursor(integer cursorNumber)</functioncall>
        <functioncall prog_lang="python">identifier mouse_cursor = JS_Mouse_LoadCursor(Int cursorNumber)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.964
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
           Loads a cursor by number.

           cursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers > 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers < 2000). 

           If successful, returns a handle to the cursor, which can be used in [JS\_Mouse\_SetCursor](#JS_Mouse_SetCursor).

        </description>
        <retvals>
           identifier mouse_cursor - 
        </retvals>
        <parameters>
           integer cursorNumber - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Mouse
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mouse_LoadCursorFromFile</slug>
        <title>JS_Mouse_LoadCursorFromFile</title>
        <functioncall prog_lang="cpp">void* JS_Mouse_LoadCursorFromFile(const char* pathAndFileName, bool* forceNewLoad)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Mouse_LoadCursorFromFile", "pathAndFileName", boolean forceNewLoad)</functioncall>
        <functioncall prog_lang="lua">identifier mouse_cursor = reaper.JS_Mouse_LoadCursorFromFile(string pathAndFileName, optional boolean forceNewLoad)</functioncall>
        <functioncall prog_lang="python">identifier mouse_cursor = JS_Mouse_LoadCursorFromFile(String pathAndFileName, Boolean forceNewLoadOptional)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.310
        </requires>
        <description>
            Loads a cursor from a .cur file.

            forceNewLoad is an optional boolean parameter:
            * If omitted or false, and if the cursor file has already been loaded previously during the REAPER session by any script, the file will not be re-loaded, and the existing handle will be returned.
            * If true, the file will be re-loaded and a new handle will be returned.
            * WARNING: Each time that a cursor file is re-loaded, the number of GDI objects increases for the entire duration of the REAPER session.

            If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.
        </description>
        <retvals>
           identifier mouse_cursor - a handle for the mouse-cursor
        </retvals>
        <parameters>
           string pathAndFileName - the filename with path to the .cur-cursor-file
           optional boolean forceNewLoad - true, force reloading the cursor; false or nil, don't reload the cursor
        </parameters>
        <linked_to desc="see also:">
            JS:JS_Mouse_SetCursor
                   show the mouse-cursor you've loaded with JS_Mouse_LoadCursorFromFile
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Mouse
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mouse_SetCursor</slug>
        <title>JS_Mouse_SetCursor</title>
        <functioncall prog_lang="cpp">void JS_Mouse_SetCursor(void* cursorHandle)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Mouse_SetCursor", void* cursorHandle)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Mouse_SetCursor(identifier cursorHandle)</functioncall>
        <functioncall prog_lang="python">JS_Mouse_SetCursor(void cursorHandle)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Sets the mouse cursor.  (Only lasts while script is running, and for a single "defer" cycle.)

        </description>
        <parameters>
           identifier cursorHandle - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Mouse
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mouse_SetPosition</slug>
        <title>JS_Mouse_SetPosition</title>
        <functioncall prog_lang="cpp">bool JS_Mouse_SetPosition(int x, int y)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Mouse_SetPosition", int x, int y)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Mouse_SetPosition(integer x, integer y)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Mouse_SetPosition(Int x, Int y)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Moves the mouse cursor to the specified coordinates.

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           integer x - 
           integer y - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Mouse
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_PtrFromStr</slug>
        <title>JS_PtrFromStr</title>
        <functioncall prog_lang="cpp">void* JS_PtrFromStr(const char* s)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_PtrFromStr", "s")</functioncall>
        <functioncall prog_lang="lua">identifier ptr = reaper.JS_PtrFromStr(string s)</functioncall>
        <functioncall prog_lang="python">identifier ptr = JS_PtrFromStr(String s)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           identifier ptr - 
        </retvals>
        <parameters>
           string s - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ReaScriptAPI_Version</slug>
        <title>JS_ReaScriptAPI_Version</title>
        <functioncall prog_lang="cpp">void JS_ReaScriptAPI_Version(double* versionOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_ReaScriptAPI_Version", &version)</functioncall>
        <functioncall prog_lang="lua">number version = reaper.JS_ReaScriptAPI_Version()</functioncall>
        <functioncall prog_lang="python">(Float version) = JS_ReaScriptAPI_Version(versionOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Returns the version of the js_ReaScriptAPI extension.

        </description>
        <retvals>
           number version - 
        </retvals>

        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            JS_Plugin
            Misc
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_String</slug>
        <title>JS_String</title>
        <functioncall prog_lang="cpp">bool JS_String(void* pointer, int offset, int lengthChars, char* bufOutNeedBig, int bufOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_String", void* pointer, int offset, int lengthChars, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.JS_String(identifier pointer, integer offset, integer lengthChars)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void pointer, Int offset, Int lengthChars, String bufOutNeedBig, Int bufOutNeedBig_sz) = JS_String(pointer, offset, lengthChars, bufOutNeedBig, bufOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.971
        </requires>
        <description>
            Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.
        </description>
        <retvals>
           boolean retval - 
           string buf - 
        </retvals>
        <parameters>
            identifier pointer - 
            integer offset - 
            integer lengthChars - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_VKeys_GetDown</slug>
        <title>JS_VKeys_GetDown</title>
        <functioncall prog_lang="cpp">void JS_VKeys_GetDown(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_VKeys_GetDown", cutoffTime, #state)</functioncall>
        <functioncall prog_lang="lua">string state = reaper.JS_VKeys_GetDown(number cutoffTime)</functioncall>
        <functioncall prog_lang="python">(Float cutoffTime, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetDown(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.993
        </requires>
        <description markup_type="markdown" markup_version="1.0.1">
            Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.

            Notes:
            * Mouse buttons and modifier keys are not (currently) reliably detected, and JS\_Mouse\_GetState can be used instead.
            * Auto-repeated KEYDOWN messages are ignored.
        </description>
        <retvals>
           string state - 
        </retvals>
        <parameters>
            number cutoffTime - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Keyboard
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_VKeys_ClearHistory</slug>
        <title>JS_VKeys_ClearHistory</title>
        <functioncall prog_lang="cpp">void JS_VKeys_ClearHistory()</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_VKeys_ClearHistory")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_VKeys_ClearHistory()</functioncall>
        <functioncall prog_lang="python">JS_VKeys_ClearHistory()</functioncall>
        <requires>
            Reaper=5.974
            JS=0.980
        </requires>
        <description>
            deprecated
        </description>
        <deprecated since_when="JS 0.980" alternative="" removed="yes"/>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Keyboard
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_VKeys_GetHistory</slug>
        <title>JS_VKeys_GetHistory</title>
        <functioncall prog_lang="cpp">bool JS_VKeys_GetHistory(char* stateOutNeedBig, int* stateOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_VKeys_GetHistory", #state)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string state = reaper.JS_VKeys_GetHistory()</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetHistory(stateOutNeedBig, stateOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.980
        </requires>
        <description>
           deprecated
        </description>
        <deprecated since_when="JS 0.980" alternative="" removed="yes"/>
        <retvals>
           boolean retval - 
           string state - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Keyboard
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_VKeys_GetState</slug>
        <title>JS_VKeys_GetState</title>
        <functioncall prog_lang="cpp">void JS_VKeys_GetState(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_VKeys_GetState", cutoffTime, #state)</functioncall>
        <functioncall prog_lang="lua">string state, integer unknown = reaper.JS_VKeys_GetState(number cutoffTime)</functioncall>
        <functioncall prog_lang="python">(Float cutoffTime, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetState(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.993
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.

            cutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren't properly followed by KEYUP.) 
            If cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().
            If cutoffTime is negative, it is relative to the current time.

            Notes:
            Notes:
            * Mouse buttons and modifier keys are not (currently) reliably detected, and JS\_Mouse\_GetState can be used instead.
            * Auto-repeated KEYDOWN messages are ignored.
        </description>
        <retvals>
           string state - a 255-byte array, where each entry represents the key pressed. For instance, if A is pressed, the 65th byte=AsciiCode 1, else 65th byte=AsciiCode 0. The IDE-watchlist will probably truncate this string.
           integer unknown - unknown; probably cutofftime
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Keyboard
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_VKeys_GetUp</slug>
        <title>JS_VKeys_GetUp</title>
        <functioncall prog_lang="cpp">void JS_VKeys_GetUp(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_VKeys_GetUp", cutoffTime, #state)</functioncall>
        <functioncall prog_lang="lua">string state = reaper.JS_VKeys_GetUp(number cutoffTime)</functioncall>
        <functioncall prog_lang="python">(Float cutoffTime, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetUp(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.986
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.

            Note: Mouse buttons and modifier keys are not (currently) reliably detected, and [JS\_Mouse\_GetState](#JS_Mouse_GetState) can be used instead.
        </description>
        <retvals>
           string state - 
        </retvals>
        <parameters>
            number cutoffTime - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Keyboard
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_VKeys_Intercept</slug>
        <title>JS_VKeys_Intercept</title>
        <functioncall prog_lang="cpp">int JS_VKeys_Intercept(int keyCode, int intercept)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_VKeys_Intercept", int keyCode, int intercept)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_VKeys_Intercept(integer keyCode, integer intercept)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_VKeys_Intercept(Int keyCode, Int intercept)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.980
        </requires>
        <description>
            Intercepting (blocking) virtual keys work similar to the native function PreventUIRefresh: Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.

            keyCode: The virtual key code of the key, or -1 to change the state of all keys.

            intercept: A script can increase the intercept state by passing +1, or lower the state by passing -1. 
            Multiple scripts can block the same key, and the intercept state may reach up to 255. 
            If zero is passed, the intercept state is not changed, but the current state is returned.

            Returns: If keyCode refers to a single key, the intercept state of that key is returned. If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned.
        </description>
        <retvals>
           integer retval - 
        </retvals>
        <parameters>
            integer keyCode - 
            integer intercept - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Input/Output Devices
            Keyboard
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_Intercept</slug>
        <title>JS_WindowMessage_Intercept</title>
        <functioncall prog_lang="cpp">int JS_WindowMessage_Intercept(void* windowHWND, const char* messages, bool passThrough)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_WindowMessage_Intercept", void* windowHWND, "messages", bool passThrough)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_WindowMessage_Intercept(identifier windowHWND, string messages, boolean passThrough)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_WindowMessage_Intercept(void windowHWND, String messages, Boolean passThrough)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.980
        </requires>
        <description>
           Intercepts window messages to specified window.

           Parameters:

            * message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example "WM_SETCURSOR" or "0x0020".

            * passThrough: Whether message should be blocked (false) or passed through (true) to the window.

               For more information on message codes, refer to the Win32 C++ API documentation.

               For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.



           Returns:

            * 1: Success.

            * 0: The message type is already being intercepted by another script.

            * -2: message string could not be parsed.

            * -3: Failure getting original window process / window not valid.

            * -6: Could not obtain the window client HDC.


           Notes:

            * Intercepted messages can be polled using JS_WindowMessage_Peek.

            * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.

            * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.

            * Mouse events are typically received by the child window under the mouse, not the parent window.

            Keyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.
        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string messages - 
           boolean passThrough - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_InterceptList</slug>
        <title>JS_WindowMessage_InterceptList</title>
        <functioncall prog_lang="cpp">int JS_WindowMessage_InterceptList(void* windowHWND, const char* messages)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_WindowMessage_InterceptList", void* windowHWND, "messages")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_WindowMessage_InterceptList(identifier windowHWND, string messages)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_WindowMessage_InterceptList(void windowHWND, String messages)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.980
        </requires>
        <description>
            Intercepts window messages to specified window.



           Parameters:

            * messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a "block" or "passthrough" modifier to specify whether the message should be blocked or passed through to the window. For example "WM_SETCURSOR:block, 0x0201:passthrough".

               For more information on message codes, refer to the Win32 C++ API documentation.

               For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.



           Returns:

            * 1: Success.

            * 0: The message type is already being intercepted by another script.

            * -1: windowHWND is not a valid window.

            * -2: message string could not be parsed.

            * -3: Failure getting original window process.

            * -6: Could not obtain the window client HDC.

           Notes:

            * Intercepted messages can be polled using JS_WindowMessage_Peek.

            * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.

            * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string messages - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_ListIntercepts</slug>
        <title>JS_WindowMessage_ListIntercepts</title>
        <functioncall prog_lang="cpp">bool JS_WindowMessage_ListIntercepts(void* windowHWND, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_WindowMessage_ListIntercepts", void* windowHWND, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.JS_WindowMessage_ListIntercepts(identifier windowHWND, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, String buf, Int buf_sz) = JS_WindowMessage_ListIntercepts(windowHWND, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Returns a string with a list of all message types currently being intercepted for the specified window.

        </description>
        <retvals>
           boolean retval - 
           string buf - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string buf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_PassThrough</slug>
        <title>JS_WindowMessage_PassThrough</title>
        <functioncall prog_lang="cpp">int JS_WindowMessage_PassThrough(void* windowHWND, const char* message, bool passThrough)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_WindowMessage_PassThrough", void* windowHWND, "message", bool passThrough)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_WindowMessage_PassThrough(identifier windowHWND, string message, boolean passThrough)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_WindowMessage_PassThrough(void windowHWND, String message, Boolean passThrough)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.998
        </requires>
        <description>
            Changes the passthrough setting of a message type that is already being intercepted.

            Returns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.
        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string message - 
           boolean passThrough - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_Peek</slug>
        <title>JS_WindowMessage_Peek</title>
        <functioncall prog_lang="cpp">bool JS_WindowMessage_Peek(void* windowHWND, const char* message, bool* passedThroughOut, double* timeOut, int* wParamLowOut, int* wParamHighOut, int* lParamLowOut, int* lParamHighOut)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_WindowMessage_Peek", void* windowHWND, "message", bool &passedThrough, &time, int &wParamLow, int &wParamHigh, int &lParamLow, int &lParamHigh)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean passedThrough, number time, integer wParamLow, integer wParamHigh, integer lParamLow, integer lParamHigh = reaper.JS_WindowMessage_Peek(identifier windowHWND, string message)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, String message, Boolean passedThroughOut, Float timeOut, Int wParamLowOut, Int wParamHighOut, Int lParamLowOut, Int lParamHighOut) = JS_WindowMessage_Peek(windowHWND, message, passedThroughOut, timeOut, wParamLowOut, wParamHighOut, lParamLowOut, lParamHighOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Polls the state of an intercepted message.



           Parameters:

            * message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".

            (For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.)



           Returns:

            * A retval of false indicates that the message type is not being intercepted in the specified window.

            * All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.

            * For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.

            * For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.

            * wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.

        </description>
        <retvals>
           boolean retval - 
           boolean passedThrough - 
           number time - 
           integer wParamLow - 
           integer wParamHigh - 
           integer lParamLow - 
           integer lParamHigh - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string message - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_Post</slug>
        <title>JS_WindowMessage_Post</title>
        <functioncall prog_lang="cpp">bool JS_WindowMessage_Post(void* windowHWND, const char* message, double wParam, int wParamHighWord, double lParam, int lParamHighWord)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_WindowMessage_Post", void* windowHWND, "message", wParam, int wParamHighWord, lParam, int lParamHighWord)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_WindowMessage_Post(identifier windowHWND, string message, number wParam, integer wParamHighWord, number lParam, integer lParamHighWord)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_WindowMessage_Post(void windowHWND, String message, Float wParam, Int wParamHighWord, Float lParam, Int lParamHighWord)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.998
        </requires>
        <description>
            If the specified window and message type are not currently being intercepted by a script, this function will post the message in the message queue of the specified window, and return without waiting.

            If the window and message type are currently being intercepted, the message will be sent directly to the original window process, similar to WindowMessage_Send, thereby skipping any intercepts.

            Parameters:
            * message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
            (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)
            * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
            (Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)

            Notes:
            * For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.
            * Messages should only be sent to windows that were created from the main thread.
            * Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
        </description>
        <retvals>
           boolean retval - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string message - 
           number wParam - 
           integer wParamHighWord - 
           number lParam - 
           integer lParamHighWord - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_Release</slug>
        <title>JS_WindowMessage_Release</title>
        <functioncall prog_lang="cpp">int JS_WindowMessage_Release(void* windowHWND, const char* messages)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_WindowMessage_Release", void* windowHWND, "messages")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_WindowMessage_Release(identifier windowHWND, string messages)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_WindowMessage_Release(void windowHWND, String messages)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Release intercepts of specified message types.

           Parameters:

            * messages: "WM_SETCURSOR,WM_MOUSEHWHEEL" or "0x0020,0x020E", for example.

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string messages - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_ReleaseAll</slug>
        <title>JS_WindowMessage_ReleaseAll</title>
        <functioncall prog_lang="cpp">void JS_WindowMessage_ReleaseAll()</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_WindowMessage_ReleaseAll")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_WindowMessage_ReleaseAll()</functioncall>
        <functioncall prog_lang="python">JS_WindowMessage_ReleaseAll()</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Release script intercepts of window messages for all windows.

        </description>


        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_ReleaseWindow</slug>
        <title>JS_WindowMessage_ReleaseWindow</title>
        <functioncall prog_lang="cpp">void JS_WindowMessage_ReleaseWindow(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_WindowMessage_ReleaseWindow", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_WindowMessage_ReleaseWindow(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_WindowMessage_ReleaseWindow(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Release script intercepts of window messages for specified window.

        </description>

        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_Send</slug>
        <title>JS_WindowMessage_Send</title>
        <functioncall prog_lang="cpp">int JS_WindowMessage_Send(void* windowHWND, const char* message, double wParam, int wParamHighWord, double lParam, int lParamHighWord)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_WindowMessage_Send", void* windowHWND, "message", wParam, int wParamHighWord, lParam, int lParamHighWord)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_WindowMessage_Send(identifier windowHWND, string message, number wParam, integer wParamHighWord, number lParam, integer lParamHighWord)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_WindowMessage_Send(void windowHWND, String message, Float wParam, Int wParamHighWord, Float lParam, Int lParamHighWord)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.998
        </requires>
        <description>
           Sends a message to the specified window by calling the window process directly, and only returns after the message has been processed. Any intercepts of the message by scripts will be skipped, and the message can therefore not be blocked.

           Parameters:
           * message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
           (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)
           * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
           (Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)

           Notes:
           * For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.
           * Messages should only be sent to windows that were created from the main thread.
           * Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string message - 
           number wParam - 
           integer wParamHighWord - 
           number lParam - 
           integer lParamHighWord - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_AddressFromHandle</slug>
        <title>JS_Window_AddressFromHandle</title>
        <functioncall prog_lang="cpp">void JS_Window_AddressFromHandle(void* handle, double* addressOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_AddressFromHandle", void* handle, &address)</functioncall>
        <functioncall prog_lang="lua">number address = reaper.JS_Window_AddressFromHandle(identifier handle)</functioncall>
        <functioncall prog_lang="python">(void handle, Float addressOut) = JS_Window_AddressFromHandle(handle, addressOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>
        <retvals>
           number address - 
        </retvals>
        <parameters>
           identifier handle - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ArrayAllChild</slug>
        <title>JS_Window_ArrayAllChild</title>
        <functioncall prog_lang="cpp">void JS_Window_ArrayAllChild(void* parentHWND, void* reaperarray)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ArrayAllChild", void* parentHWND, void* reaperarray)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_ArrayAllChild(identifier parentHWND, identifier reaperarray)</functioncall>
        <functioncall prog_lang="python">JS_Window_ArrayAllChild(void parentHWND, void reaperarray)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Returns all child windows of the specified parent.



           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.

        </description>

        <parameters>
           identifier parentHWND - 
           identifier reaperarray - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ArrayAllTop</slug>
        <title>JS_Window_ArrayAllTop</title>
        <functioncall prog_lang="cpp">void JS_Window_ArrayAllTop(void* reaperarray)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ArrayAllTop", void* reaperarray)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_ArrayAllTop(identifier reaperarray)</functioncall>
        <functioncall prog_lang="python">JS_Window_ArrayAllTop(void reaperarray)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Returns all top-level windows.



           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.

        </description>

        <parameters>
           identifier reaperarray - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ArrayFind</slug>
        <title>JS_Window_ArrayFind</title>
        <functioncall prog_lang="cpp">void JS_Window_ArrayFind(const char* title, bool exact, void* reaperarray)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ArrayFind", "title", bool exact, void* reaperarray)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_ArrayFind(string title, boolean exact, identifier reaperarray)</functioncall>
        <functioncall prog_lang="python">JS_Window_ArrayFind(String title, Boolean exact, void reaperarray)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Returns all windows, whether top-level or child, whose titles match the specified string.



           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.



           Parameters: * exact: Match entire title exactly, or match substring of title.

        </description>

        <parameters>
           string title - 
           boolean exact - 
           identifier reaperarray - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_AttachResizeGrip</slug>
        <title>JS_Window_AttachResizeGrip</title>
        <functioncall prog_lang="cpp">void JS_Window_AttachResizeGrip(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_AttachResizeGrip", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_AttachResizeGrip(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_Window_AttachResizeGrip(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>

        </description>

        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_AttachTopmostPin</slug>
        <title>JS_Window_AttachTopmostPin</title>
        <functioncall prog_lang="cpp">void* JS_Window_AttachTopmostPin(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">void extension_api("JS_Window_AttachTopmostPin", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">identifier HWND = reaper.JS_Window_AttachTopmostPin(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">identifier HWND = JS_Window_AttachTopmostPin(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.988
        </requires>
        <description>
            Attaches a "pin on top" button to the window frame. The button should remember its state when closing and re-opening the window.

            WARNING: This function does not yet work on Linux.
        </description>
        <retvals>
            identifier HWND - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ClientToScreen</slug>
        <title>JS_Window_ClientToScreen</title>
        <functioncall prog_lang="cpp">void JS_Window_ClientToScreen(void* windowHWND, int x, int y, int* xOut, int* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ClientToScreen", void* windowHWND, int x, int y, int &x, int &y)</functioncall>
        <functioncall prog_lang="lua">integer x, integer y = reaper.JS_Window_ClientToScreen(identifier windowHWND, integer x, integer y)</functioncall>
        <functioncall prog_lang="python">(void windowHWND, Int x, Int y, Int xOut, Int yOut) = JS_Window_ClientToScreen(windowHWND, x, y, xOut, yOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Converts the client-area coordinates of a specified point to screen coordinates.

        </description>
        <retvals>
           integer x - 
           integer y - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           integer x - 
           integer y - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Create</slug>
        <title>JS_Window_Create</title>
        <functioncall prog_lang="cpp">void* JS_Window_Create(const char* title, const char* className, int x, int y, int w, int h, char* styleOptional, void* ownerHWNDOptional)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_Create", "title", "className", int x, int y, int w, int h, optional #style, void* ownerHWND)</functioncall>
        <functioncall prog_lang="lua">identifier retval, optional string style = reaper.JS_Window_Create(string title, string className, integer x, integer y, integer w, integer h, optional string style, identifier ownerHWND)</functioncall>
        <functioncall prog_lang="python">(void retval, String title, String className, Int x, Int y, Int w, Int h, String styleOptional, void ownerHWNDOptional) = JS_Window_Create(title, className, x, y, w, h, styleOptional, ownerHWNDOptional)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.995
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Creates a modeless window with WS\_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS\_Window\_InvalidateRect to trigger re-painting).

            style: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as "POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a standard framed window.

            On Linux and macOS, "MAXIMIZE" has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.

            className: On Windows, only standard ANSI characters are supported.

            ownerHWND: Optional parameter, only available on WindowsOS. Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.

            NOTE: On Linux and macOS, the window contents are only updated \*between\* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle.
        </description>
        <retvals>
            identifier retval - 
            optional string style - 
        </retvals>
        <parameters>
           string title - 
           string className - 
           integer x - 
           integer y - 
           integer w - 
           integer h - 
           optional string style - 
           identifier ownerHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Destroy</slug>
        <title>JS_Window_Destroy</title>
        <functioncall prog_lang="cpp">void JS_Window_Destroy(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_Destroy", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_Destroy(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_Window_Destroy(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Destroys the specified window.

        </description>

        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Enable</slug>
        <title>JS_Window_Enable</title>
        <functioncall prog_lang="cpp">void JS_Window_Enable(void* windowHWND, bool enable)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_Enable", void* windowHWND, bool enable)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_Enable(identifier windowHWND, boolean enable)</functioncall>
        <functioncall prog_lang="python">JS_Window_Enable(void windowHWND, Boolean enable)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Enables or disables mouse and keyboard input to the specified window or control.

        </description>

        <parameters>
           identifier windowHWND - 
           boolean enable - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_EnableMetal</slug>
        <title>JS_Window_EnableMetal</title>
        <functioncall prog_lang="cpp">int retval = JS_Window_EnableMetal(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">int retval = extension_api("JS_Window_EnableMetal", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Window_EnableMetal(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Window_EnableMetal(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.000
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            On macOS, returns the Metal graphics setting:
            2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).
            1 = Metal enabled.
            0 = N/A (Windows and Linux).
            -1 = non-metal async layered mode.
            -2 = non-metal non-async layered mode.

            WARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the source bitmap persist. If it is resized after Blit it could cause crashes.
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Find</slug>
        <title>JS_Window_Find</title>
        <functioncall prog_lang="cpp">void* JS_Window_Find(const char* title, bool exact)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_Find", "title", bool exact)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.JS_Window_Find(string title, boolean exact)</functioncall>
        <functioncall prog_lang="python">identifier hwnd = JS_Window_Find(String title, Boolean exact)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.989
        </requires>
        <description>
            Returns a HWND to a window whose title matches the specified string.
            * Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state.
            * In addition, the function can optionally match substrings of the title.
            * Matching is not case sensitive.

            Parameters:
            * exact: Match entire title, or match substring of title.
        </description>
        <retvals>
           identifier hwnd - the identifier of the found window, or nil
        </retvals>
        <parameters>
           string title - the title of the window to find
           boolean exact - true, title must match exactly the name of the window; false, title can only partially match the windowtitle 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_FindChild</slug>
        <title>JS_Window_FindChild</title>
        <functioncall prog_lang="cpp">void* JS_Window_FindChild(void* parentHWND, const char* title, bool exact)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_FindChild", void* parentHWND, "title", bool exact)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.JS_Window_FindChild(identifier parentHWND, string title, boolean exact)</functioncall>
        <functioncall prog_lang="python">identifier hwnd = JS_Window_FindChild(void parentHWND, String title, Boolean exact)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.990
        </requires>
        <description>
           Returns a HWND to a child window whose title matches the specified string.

           Parameters:

            * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.

        </description>
        <retvals>
           identifier hwnd - the identifier for the window found; nil, if no such window found
        </retvals>
        <parameters>
           identifier parentHWND - the identifier of the parent window to the child-window
           string title - the title of the child-window to find
           boolean exact - true, title must match exactly the name of the window; false, title can only partially match the windowtitle 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_FindChildByID</slug>
        <title>JS_Window_FindChildByID</title>
        <functioncall prog_lang="cpp">void* JS_Window_FindChildByID(void* parentHWND, int ID)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_FindChildByID", void* parentHWND, int ID)</functioncall>
        <functioncall prog_lang="lua">identifier HWND = reaper.JS_Window_FindChildByID(identifier parentHWND, integer ID)</functioncall>
        <functioncall prog_lang="python">identifier HWND = JS_Window_FindChildByID(void parentHWND, Int ID)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.

            (The ID of a window may be retrieved by JS\_Window\_GetLongPtr.)

            For instance: with Reaper's [MainHWND](#GetMainHwnd), you can get:
                0: Transport(Windows)/MainHWND(Mac)
                999: project-tabs(if existing, otherwise will be nil)
                1000: trackview
                1005: timeline
                1259: Mouse editing help in the area beneath the track control panels
        </description>
        <parameters>
           identifier parentHWND - the parent HWND, whose child-HWNDs you want to search through
           integer ID - the ID of the childHWND
        </parameters>
        <retvals>
            identifier HWND - the HWND of the window, that the function found
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_FindEx</slug>
        <title>JS_Window_FindEx</title>
        <functioncall prog_lang="cpp">void* JS_Window_FindEx(void* parentHWND, void* childHWND, const char* className, const char* title)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_FindEx", void* parentHWND, void* childHWND, "className", "title")</functioncall>
        <functioncall prog_lang="lua">identifier HWND = reaper.JS_Window_FindEx(identifier parentHWND, identifier childHWND, string className, string title)</functioncall>
        <functioncall prog_lang="python">identifier HWND = JS_Window_FindEx(void parentHWND, void childHWND, String className, String title)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.964
        </requires>
        <description>
            Returns a handle to a child window whose class and title match the specified strings.

            Parameters: * childWindow: The function searches child windows, beginning with the window *after* the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND.
            * title: An empty string, "", will match all windows. (Search is not case sensitive.)
        </description>
        <parameters>
           identifier parentHWND - the parent hwnd of the child-window to find
           identifier childHWND - the parent child-window of the window to find; set it to parentHWND to search beginning with the first childhwnd of the parenthwnd
           string className - the name of the class of the child-window, that you want to find
           string title - the title of the child-window to find
        </parameters>
        <retvals>
            identifier HWND - the found window; nil, if no window has been found
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_FindTop</slug>
        <title>JS_Window_FindTop</title>
        <functioncall prog_lang="cpp">void* JS_Window_FindTop(const char* title, bool exact)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_FindTop", "title", bool exact)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.JS_Window_FindTop(string title, boolean exact)</functioncall>
        <functioncall prog_lang="python">identifier hwnd = JS_Window_FindTop(String title, Boolean exact)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.989
        </requires>
        <description>
            Returns a HWND to a top-level window whose title matches the specified string.

            Parameters:
            * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.
        </description>
        <parameters>
           string title - the title of the top-level window to find
           boolean exact - true, title must match exactly the name of the window; false, title can only partially match the windowtitle 
        </parameters>
        <retvals>
            identifier hwnd - the found identifier of the window; nil, if not found
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_FromPoint</slug>
        <title>JS_Window_FromPoint</title>
        <functioncall prog_lang="cpp">void* JS_Window_FromPoint(int x, int y)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_FromPoint", int x, int y)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.JS_Window_FromPoint(integer x, integer y)</functioncall>
        <functioncall prog_lang="python">identifier hwnd = JS_Window_FromPoint(Int x, Int y)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Retrieves a HWND to the window that contains the specified point.

        </description>
        <retvals>
           identifier hwnd - the window found at the coordinates
        </retvals>
        <parameters>
           integer x - the x-position in pixels, at which to find the window
           integer y - the y-position in pixels, at which to find the window
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetClassName</slug>
        <title>JS_Window_GetClassName</title>
        <functioncall prog_lang="cpp">void JS_Window_GetClassName(void* windowHWND, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_GetClassName", void* windowHWND, #buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.JS_Window_GetClassName(identifier windowHWND, string buf)</functioncall>
        <functioncall prog_lang="python">(void windowHWND, String buf, Int buf_sz) = JS_Window_GetClassName(windowHWND, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            WARNING: May not be fully implemented on MacOS and Linux.

        </description>
        <retvals>
           string buf - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string buf - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetClientRect</slug>
        <title>JS_Window_GetClientRect</title>
        <functioncall prog_lang="cpp">bool JS_Window_GetClientRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_GetClientRect", void* windowHWND, int &left, int &top, int &right, int &bottom)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer left, integer top, integer right, integer bottom = reaper.JS_Window_GetClientRect(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetClientRect(windowHWND, leftOut, topOut, rightOut, bottomOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Retrieves the coordinates of the client area rectangle of the specified window. The dimensions are given in screen coordinates relative to the upper-left corner of the screen.

            NOTE 1: Unlike the C++ function GetClientRect, this function returns the actual coordinates, not the width and height.

            NOTE 2: The pixel at (right, bottom) lies immediately outside the rectangle.
        </description>
        <retvals>
           boolean retval - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetClientSize</slug>
        <title>JS_Window_GetClientSize</title>
        <functioncall prog_lang="cpp">bool JS_Window_GetClientSize(void* windowHWND, int* widthOut, int* heightOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Window_GetClientSize", void* windowHWND, int &width, int &height)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer width, integer height = reaper.JS_Window_GetClientSize(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, Int widthOut, Int heightOut) = JS_Window_GetClientSize(windowHWND, widthOut, heightOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.215
        </requires>
        <description>
            Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.

        </description>
        <retvals>
           boolean retval - 
           integer width - 
           integer height - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetFocus</slug>
        <title>JS_Window_GetFocus</title>
        <functioncall prog_lang="cpp">void* JS_Window_GetFocus()</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_GetFocus")</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.JS_Window_GetFocus()</functioncall>
        <functioncall prog_lang="python">identifier hwnd = JS_Window_GetFocus()</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.

        </description>
        <retvals>
           identifier hwnd - 
        </retvals>

        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetForeground</slug>
        <title>JS_Window_GetForeground</title>
        <functioncall prog_lang="cpp">void* JS_Window_GetForeground()</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_GetForeground")</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.JS_Window_GetForeground()</functioncall>
        <functioncall prog_lang="python">identifier hwnd = JS_Window_GetForeground()</functioncall>
        <requires>
            Reaper=5.974
            JS=1.002
        </requires>
        <description>
            Retrieves a HWND to the top-level foreground window (the window with which the user is currently working).
        </description>
        <retvals>
           identifier hwnd - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetLong</slug>
        <title>JS_Window_GetLong</title>
        <functioncall prog_lang="cpp">void JS_Window_GetLong(void* windowHWND, const char* info, double* retvalOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_GetLong", void* windowHWND, "info", &retval)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.JS_Window_GetLong(identifier windowHWND, string info)</functioncall>
        <functioncall prog_lang="python">(void windowHWND, String info, Float retvalOut) = JS_Window_GetLong(windowHWND, info, retvalOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.010
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
           In the case of "DLGPROC" and "WNDPROC", the return values can be converted to pointers by [JS\_Window\_HandleFromAddress](#JS_Window_HandleFromAddress).

           If the function fails, the return value is 0.
        </description>
        <retvals>
           number retval - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string info - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetLongPtr</slug>
        <title>JS_Window_GetLongPtr</title>
        <functioncall prog_lang="cpp">void* JS_Window_GetLongPtr(void* windowHWND, const char* info)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_GetLongPtr", void* windowHWND, "info")</functioncall>
        <functioncall prog_lang="lua">identifier long_ptr = reaper.JS_Window_GetLongPtr(identifier windowHWND, string info)</functioncall>
        <functioncall prog_lang="python">identifier long_ptr = JS_Window_GetLongPtr(void windowHWND, String info)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.010
        </requires>
        <description>
           Returns information about the specified window.



           info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE".



           For documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.
           The values returned by "DLGPROC" and "WNDPROC" are typically used as-is, as pointers, whereas the others should first be converted to integers.

        </description>
        <retvals>
           identifier long_ptr - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string info - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetParent</slug>
        <title>JS_Window_GetParent</title>
        <functioncall prog_lang="cpp">void* JS_Window_GetParent(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_GetParent", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.JS_Window_GetParent(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">identifier hwnd = JS_Window_GetParent(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Retrieves a HWND to the specified window's parent or owner.

            Returns NULL if the window is unowned or if the function otherwise fails.
        </description>
        <retvals>
           identifier hwnd - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetRect</slug>
        <title>JS_Window_GetRect</title>
        <functioncall prog_lang="cpp">bool JS_Window_GetRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_GetRect", void* windowHWND, int &left, int &top, int &right, int &bottom)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer left, integer top, integer right, integer bottom = reaper.JS_Window_GetRect(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetRect(windowHWND, leftOut, topOut, rightOut, bottomOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Retrieves the coordinates of the bounding rectangle of the specified window. The dimensions are given in screen coordinates relative to the upper-left corner of the screen.

            NOTE: The pixel at (right, bottom) lies immediately outside the rectangle.
        </description>
        <retvals>
           boolean retval - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetRelated</slug>
        <title>JS_Window_GetRelated</title>
        <functioncall prog_lang="cpp">void* JS_Window_GetRelated(void* windowHWND, const char* relation)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_GetRelated", void* windowHWND, "relation")</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.JS_Window_GetRelated(identifier windowHWND, string relation)</functioncall>
        <functioncall prog_lang="python">identifier hwnd = JS_Window_GetRelated(void windowHWND, String relation)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.

            relation: "LAST", "NEXT", "PREV", "OWNER" or "CHILD".

            (Refer to documentation for Win32 C++ function GetWindow.)
        </description>
        <retvals>
           identifier hwnd - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string relation - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetScrollInfo</slug>
        <title>JS_Window_GetScrollInfo</title>
        <functioncall prog_lang="cpp">bool JS_Window_GetScrollInfo(void* windowHWND, const char* scrollbar, int* positionOut, int* pageSizeOut, int* minOut, int* maxOut, int* trackPosOut)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_GetScrollInfo", void* windowHWND, "scrollbar", int &position, int &pageSize, int &min, int &max, int &trackPos)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer position, integer pageSize, integer min, integer max, integer trackPos = reaper.JS_Window_GetScrollInfo(identifier windowHWND, string scrollbar)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, String scrollbar, Int positionOut, Int pageSizeOut, Int minOut, Int maxOut, Int trackPosOut) = JS_Window_GetScrollInfo(windowHWND, scrollbar, positionOut, pageSizeOut, minOut, maxOut, trackPosOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Retrieves the scroll information of a window.

            Parameters:
            * scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.

            Returns:
            * Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position.

        </description>
        <retvals>
           boolean retval - 
           integer position - 
           integer pageSize - 
           integer min - 
           integer max - 
           integer trackPos - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string scrollbar - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetTitle</slug>
        <title>JS_Window_GetTitle</title>
        <functioncall prog_lang="cpp">void JS_Window_GetTitle(void* windowHWND, char* titleOut, int titleOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_GetTitle", void* windowHWND, #title)</functioncall>
        <functioncall prog_lang="lua">string title = reaper.JS_Window_GetTitle(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">(void windowHWND, String titleOut, Int titleOut_sz) = JS_Window_GetTitle(windowHWND, titleOut, titleOut_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.992
        </requires>
        <description>
            Returns the title (if any) of the specified window.

        </description>
        <retvals>
           string title - the title of the window
        </retvals>
        <parameters>
           identifier windowHWND - the hwnd of the window, whose title you want to retrieve
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetViewportFromRect</slug>
        <title>JS_Window_GetViewportFromRect</title>
        <functioncall prog_lang="cpp">void JS_Window_GetViewportFromRect(int x1, int y1, int x2, int y2, bool wantWork, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_GetViewportFromRect", int x1, int y1, int x2, int y2, bool wantWork, int &left, int &top, int &right, int &bottom)</functioncall>
        <functioncall prog_lang="lua">integer left, integer top, integer right, integer bottom = reaper.JS_Window_GetViewportFromRect(integer x1, integer y1, integer x2, integer y2, boolean wantWork)</functioncall>
        <functioncall prog_lang="python">(Int x1, Int y1, Int x2, Int y2, Boolean wantWork, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetViewportFromRect(x1, y1, x2, y2, wantWork, leftOut, topOut, rightOut, bottomOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.980
        </requires>
        <description>
            Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.

            If the monitor is not the primary display, some of the rectangle's coordinates may be negative.

            wantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.
        </description>
        <retvals>
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
        </retvals>
        <parameters>
           integer x1 - 
           integer y1 - 
           integer x2 - 
           integer y2 - 
           boolean wantWork - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_HandleFromAddress</slug>
        <title>JS_Window_HandleFromAddress</title>
        <functioncall prog_lang="cpp">void* JS_Window_HandleFromAddress(double address)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_HandleFromAddress", address)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.JS_Window_HandleFromAddress(number address)</functioncall>
        <functioncall prog_lang="python">identifier hwnd = JS_Window_HandleFromAddress(Float address)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.

        </description>
        <retvals>
           identifier hwnd - 
        </retvals>
        <parameters>
           number address - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_InvalidateRect</slug>
        <title>JS_Window_InvalidateRect</title>
        <functioncall prog_lang="cpp">bool JS_Window_InvalidateRect(void* windowHWND, int left, int top, int right, int bottom, bool eraseBackground)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Window_InvalidateRect", void* windowHWND, int left, int top, int right, int bottom, bool eraseBackground)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_InvalidateRect(identifier windowHWND, integer left, integer top, integer right, integer bottom, boolean eraseBackground)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Window_InvalidateRect(void windowHWND, Int left, Int top, Int right, Int bottom, Boolean eraseBackground)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.980
        </requires>
        <description>
            Similar to the Win32 function InvalidateRect.

        </description>
        <retvals>
           boolean retval  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
           boolean eraseBackground - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_IsChild</slug>
        <title>JS_Window_IsChild</title>
        <functioncall prog_lang="cpp">bool JS_Window_IsChild(void* parentHWND, void* childHWND)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_IsChild", void* parentHWND, void* childHWND)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_IsChild(identifier parentHWND, identifier childHWND)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Window_IsChild(void parentHWND, void childHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Determines whether a window is a child window or descendant window of a specified parent window.

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier parentHWND - 
           identifier childHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_IsVisible</slug>
        <title>JS_Window_IsVisible</title>
        <functioncall prog_lang="cpp">bool JS_Window_IsVisible(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_IsVisible", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_IsVisible(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Window_IsVisible(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Determines the visibility state of the window.

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_IsWindow</slug>
        <title>JS_Window_IsWindow</title>
        <functioncall prog_lang="cpp">bool JS_Window_IsWindow(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_IsWindow", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_IsWindow(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Window_IsWindow(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.999
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Determines whether the specified window handle identifies an existing window.

            On macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).

            NOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, "HWND").
        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ListAllChild</slug>
        <title>JS_Window_ListAllChild</title>
        <functioncall prog_lang="cpp">int JS_Window_ListAllChild(void* parentHWND, char* listOutNeedBig, int listOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Window_ListAllChild", void* parentHWND, #list)</functioncall>
        <functioncall prog_lang="lua">integer retval, string list = reaper.JS_Window_ListAllChild(identifier parentHWND)</functioncall>
        <functioncall prog_lang="python">(Int retval, void parentHWND, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListAllChild(parentHWND, listOutNeedBig, listOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Finds all child windows of the specified parent.

            Returns:
            \* retval: The number of windows found; negative if an error occurred.
            \* list: A comma-separated string of hexadecimal values.
            Each value is an address that can be converted to a HWND by the function JS\_Window\_HandleFromAddress.
        </description>
        <retvals>
            integer retval - 
            string list - 
        </retvals>
        <parameters>
           identifier parentHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ListAllTop</slug>
        <title>JS_Window_ListAllTop</title>
        <functioncall prog_lang="cpp">int JS_Window_ListAllTop(char* listOutNeedBig, int listOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Window_ListAllTop", #list)</functioncall>
        <functioncall prog_lang="lua">integer retval, string list = reaper.JS_Window_ListAllTop()</functioncall>
        <functioncall prog_lang="python">(Int retval, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListAllTop(listOutNeedBig, listOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Finds all top-level windows.

            Returns:
            \* retval: The number of windows found; negative if an error occurred.
            \* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function JS\_Window\_HandleFromAddress.
        </description>
        <retvals>
           integer retval - 
           string list - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ListFind</slug>
        <title>JS_Window_ListFind</title>
        <functioncall prog_lang="cpp">int JS_Window_ListFind(const char* title, bool exact, char* listOutNeedBig, int listOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Window_ListFind", "title", bool exact, #list)</functioncall>
        <functioncall prog_lang="lua">integer retval, string list = reaper.JS_Window_ListFind(string title, boolean exact)</functioncall>
        <functioncall prog_lang="python">(Int retval, String title, Boolean exact, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListFind(title, exact, listOutNeedBig, listOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Finds all windows (whether top-level or child) whose titles match the specified string.

            Returns:
            \* retval: The number of windows found; negative if an error occurred.
            \* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function JS\_Window\_HandleFromAddress.

            Parameters:
            \* exact: Match entire title exactly, or match substring of title.
        </description>
        <retvals>
            integer retval - 
            string list - 
        </retvals>
        <parameters>
           string title - 
           boolean exact - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_MonitorFromRect</slug>
        <title>JS_Window_MonitorFromRect</title>
        <functioncall prog_lang="cpp">void JS_Window_MonitorFromRect(int x1, int y1, int x2, int y2, bool wantWork, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_MonitorFromRect", int x1, int y1, int x2, int y2, bool wantWork, int &left, int &top, int &right, int &bottom)</functioncall>
        <functioncall prog_lang="lua">integer left, integer top, integer right, integer bottom = reaper.JS_Window_MonitorFromRect(integer x1, integer y1, integer x2, integer y2, boolean wantWork)</functioncall>
        <functioncall prog_lang="python">(Int x1, Int y1, Int x2, Int y2, Boolean wantWork, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_MonitorFromRect(x1, y1, x2, y2, wantWork, leftOut, topOut, rightOut, bottomOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Deprecated - use [GetViewportFromRect](#GetViewportFromRect) instead.
        </description>
        <deprecated since_when="JS 0.963" alternative="GetViewportFromRect(available since at least JS 0.980)"/>
        <retvals>
            integer left - 
            integer top - 
            integer right - 
            integer bottom - 
        </retvals>
        <parameters>
           integer x1 - 
           integer y1 - 
           integer x2 - 
           integer y2 - 
           boolean wantWork - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Move</slug>
        <title>JS_Window_Move</title>
        <functioncall prog_lang="cpp">void JS_Window_Move(void* windowHWND, int left, int top)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_Move", void* windowHWND, int left, int top)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_Move(identifier windowHWND, integer left, integer top)</functioncall>
        <functioncall prog_lang="python">JS_Window_Move(void windowHWND, Int left, Int top)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.993
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Changes the position of the specified window, keeping its size constant.

            NOTES:
            * For top-level windows, position is relative to the primary display.
            * On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward.
            * On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward.
            * For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.
            * Equivalent to calling [JS\_Window\_SetPosition](#JS_Window_SetPosition) with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.
        </description>
        <parameters>
           identifier windowHWND - 
           integer left - 
           integer top - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_OnCommand</slug>
        <title>JS_Window_OnCommand</title>
        <functioncall prog_lang="cpp">bool JS_Window_OnCommand(void* windowHWND, int commandID)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Window_OnCommand", void* windowHWND, int commandID)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_OnCommand(identifier windowHWND, integer commandID)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Window_OnCommand(void windowHWND, Int commandID)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Sends a "WM\_COMMAND" message to the specified window, which simulates a user selecting a command in the window menu.

            This function is similar to Main\_OnCommand and MIDIEditor\_OnCommand, but can send commands to any window that has a menu.

            In the case of windows that are listed among the Action list's contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used.
        </description>
        <parameters>
           identifier windowHWND - 
           integer commandID - 
        </parameters>
        <retvals>
            boolean retval - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_RemoveXPStyle</slug>
        <title>JS_Window_RemoveXPStyle</title>
        <functioncall prog_lang="cpp">bool JS_Window_RemoveXPStyle(void* windowHWND, bool remove)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_RemoveXPStyle", void* windowHWND, bool remove)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_RemoveXPStyle(identifier windowHWND, boolean remove)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Window_RemoveXPStyle(void windowHWND, Boolean remove)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            deprecated, removed from JS_0.952 and later
        </description>
        <deprecated since_when="JS 0.951" alternative="" removed="yes"/>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           boolean remove - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Resize</slug>
        <title>JS_Window_Resize</title>
        <functioncall prog_lang="cpp">void JS_Window_Resize(void* windowHWND, int width, int height)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_Resize", void* windowHWND, int width, int height)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_Resize(identifier windowHWND, integer width, integer height)</functioncall>
        <functioncall prog_lang="python">JS_Window_Resize(void windowHWND, Int width, Int height)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.993
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Changes the dimensions of the specified window, keeping the top left corner position constant.

            * If resizing script GUIs, call gfx.update() after resizing.

            * Equivalent to calling [JS\_Window\_SetPosition](#JS_Window_SetPosition) with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.
        </description>

        <parameters>
           identifier windowHWND - 
           integer width - 
           integer height - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ScreenToClient</slug>
        <title>JS_Window_ScreenToClient</title>
        <functioncall prog_lang="cpp">void JS_Window_ScreenToClient(void* windowHWND, int x, int y, int* xOut, int* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ScreenToClient", void* windowHWND, int x, int y, int &x, int &y)</functioncall>
        <functioncall prog_lang="lua">integer x, integer y = reaper.JS_Window_ScreenToClient(identifier windowHWND, integer x, integer y)</functioncall>
        <functioncall prog_lang="python">(void windowHWND, Int x, Int y, Int xOut, Int yOut) = JS_Window_ScreenToClient(windowHWND, x, y, xOut, yOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Converts the screen coordinates of a specified point on the screen to client-area coordinates.

        </description>
        <retvals>
           integer x - 
           integer y - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           integer x - 
           integer y - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetFocus</slug>
        <title>JS_Window_SetFocus</title>
        <functioncall prog_lang="cpp">void JS_Window_SetFocus(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_SetFocus", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_SetFocus(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_Window_SetFocus(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Sets the keyboard focus to the specified window.

        </description>

        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetForeground</slug>
        <title>JS_Window_SetForeground</title>
        <functioncall prog_lang="cpp">void JS_Window_SetForeground(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_SetForeground", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_SetForeground(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_Window_SetForeground(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Brings the specified window into the foreground, activates the window, and directs keyboard input to it.

        </description>

        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetLong</slug>
        <title>JS_Window_SetLong</title>
        <functioncall prog_lang="cpp">void JS_Window_SetLong(void* windowHWND, const char* info, double value, double* retvalOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_SetLong", void* windowHWND, "info", value, &retval)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.JS_Window_SetLong(identifier windowHWND, string info, number value)</functioncall>
        <functioncall prog_lang="python">(void windowHWND, String info, Float value, Float retvalOut) = JS_Window_SetLong(windowHWND, info, value, retvalOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.990
        </requires>
        <description>
            Similar to the Win32 function SetWindowLongPtr. 

            info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE", and only on WindowOS, "INSTANCE" and "PARENT".
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string info - 
           number value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetOpacity</slug>
        <title>JS_Window_SetOpacity</title>
        <functioncall prog_lang="cpp">bool JS_Window_SetOpacity(void* windowHWND, const char* mode, double value)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Window_SetOpacity", void* windowHWND, "mode", value)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_SetOpacity(identifier windowHWND, string mode, number value)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Window_SetOpacity(void windowHWND, String mode, Float value)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.990
        </requires>
        <description>
            Sets the window opacity.

            Parameters:  
            mode: either "ALPHA" or "COLOR".  
            value: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included.  
            If COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).  

            WARNING: COLOR mode is only available in Windows, not Linux or macOS.

            Transparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent.  
        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string mode - 
           number value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetParent</slug>
        <title>JS_Window_SetParent</title>
        <functioncall prog_lang="cpp">void* JS_Window_SetParent(void* childHWND, void* parentHWNDOptional)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Window_SetParent", void* childHWND, void* parentHWND)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.JS_Window_SetParent(identifier childHWND, identifier parentHWND)</functioncall>
        <functioncall prog_lang="python">identifier hwnd = JS_Window_SetParent(void childHWND, void parentHWNDOptional)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.220
        </requires>
        <description>
            If successful, returns a handle to the previous parent window.

            Only on WindowsOS: If parentHWND is not specified, the desktop window becomes the new parent window.
        </description>
        <retvals>
           identifier hwnd  - 
        </retvals>
        <parameters>
           identifier childHWND - 
           identifier parentHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetPosition</slug>
        <title>JS_Window_SetPosition</title>
        <functioncall prog_lang="cpp">bool JS_Window_SetPosition(void* windowHWND, int left, int top, int width, int height, char* ZOrderOptional, char* flagsOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Window_SetPosition", void* windowHWND, int left, int top, int width, int height, optional #ZOrder, optional #flags)</functioncall>
        <functioncall prog_lang="lua">boolean retval, optional string ZOrder, optional string flags = reaper.JS_Window_SetPosition(identifier windowHWND, integer left, integer top, integer width, integer height, optional string ZOrder, optional string flags)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, Int left, Int top, Int width, Int height, String ZOrderOptional, String flagsOptional) = JS_Window_SetPosition(windowHWND, left, top, width, height, ZOrderOptional, flagsOptional)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.991
        </requires>
        <description>
            Interface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.

            ZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set.
            * ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP" or a window HWND converted to a string, for example by the Lua function tostring.
            * flags: Any combination of the standard flags, of which "NOMOVE", "NOSIZE", "NOZORDER", "NOACTIVATE", "SHOWWINDOW", "FRAMECHANGED" and "NOCOPYBITS" should be valid cross-platform.
        </description>
        <retvals>
           boolean retval - 
           optional string ZOrder - 
           optional string flags - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           integer left - 
           integer top - 
           integer width - 
           integer height - 
           optional string ZOrder - 
           optional string flags - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetScrollPos</slug>
        <title>JS_Window_SetScrollPos</title>
        <functioncall prog_lang="cpp">bool JS_Window_SetScrollPos(void* windowHWND, const char* scrollbar, int position)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Window_SetScrollPos", void* windowHWND, "scrollbar", int position)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_SetScrollPos(identifier windowHWND, string scrollbar, integer position)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Window_SetScrollPos(void windowHWND, String scrollbar, Int position)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Parameters:

            * scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.



           NOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as "View: Zoom to one loop iteration".

        </description>
        <retvals>
           boolean retval - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string scrollbar - 
           integer position - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
      <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetStyle</slug>
        <title>JS_Window_SetStyle</title>
        <functioncall prog_lang="cpp">bool JS_Window_SetStyle(void* windowHWND, char* style)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Window_SetStyle", void* windowHWND, #style)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string style = reaper.JS_Window_SetStyle(identifier windowHWND, string style)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, String style) = JS_Window_SetStyle(windowHWND, style)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.991
        </requires>
        <description>
            Sets and applies a window style.

            style may include any combination of standard window styles, such as "POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a standard framed window.

            On Linux and macOS, "MAXIMIZE" has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts.
        </description>
        <retvals>
           boolean retval - 
           string style - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string style - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetTitle</slug>
        <title>JS_Window_SetTitle</title>
        <functioncall prog_lang="cpp">bool JS_Window_SetTitle(void* windowHWND, const char* title)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Window_SetTitle", void* windowHWND, "title")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_SetTitle(identifier windowHWND, string title)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Window_SetTitle(void windowHWND, String title)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Changes the title of the specified window. Returns true if successful.

        </description>
        <retvals>
           boolean retval - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string title - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetZOrder</slug>
        <title>JS_Window_SetZOrder</title>
        <functioncall prog_lang="cpp">bool JS_Window_SetZOrder(void* windowHWND, const char* ZOrder, void* insertAfterHWND)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_Window_SetZOrder", void* windowHWND, "ZOrder", void* insertAfterHWND)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_SetZOrder(identifier windowHWND, string ZOrder, identifier insertAfterHWND)</functioncall>
        <functioncall prog_lang="python">Boolean retval = JS_Window_SetZOrder(void windowHWND, String ZOrder, void insertAfterHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.991
        </requires>
        <description>
            Sets the window Z order.
            * Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.
            * Not all the Z orders have been implemented in Linux yet.

            Parameters:
            * ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP", or a window HWND converted to a string, for example by the Lua function tostring.

            * InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is "INSERTAFTER", insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND).
        </description>
        <retvals>
           boolean retval - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string ZOrder - 
           identifier insertAfterHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Show</slug>
        <title>JS_Window_Show</title>
        <functioncall prog_lang="cpp">void JS_Window_Show(void* windowHWND, const char* state)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_Show", void* windowHWND, "state")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_Show(identifier windowHWND, string state)</functioncall>
        <functioncall prog_lang="python">JS_Window_Show(void windowHWND, String state)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.991
        </requires>
        <description>
            Sets the specified window's show state.

            Parameters:
            * state: One of the following options: "SHOW", "SHOWNA" (or "SHOWNOACTIVATE"), "SHOWMINIMIZED", "HIDE", "NORMAL", "SHOWNORMAL", "SHOWMAXIMIZED", "SHOWDEFAULT" or "RESTORE".

            On Linux and macOS, only the first four options are fully implemented.

        </description>
        <parameters>
           identifier windowHWND - 
           string state - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Update</slug>
        <title>JS_Window_Update</title>
        <functioncall prog_lang="cpp">void JS_Window_Update(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_Update", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_Update(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_Window_Update(void windowHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.980
        </requires>
        <description>
           Similar to the Win32 function UpdateWindow.
        </description>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_Close</slug>
        <title>JS_Zip_Close</title>
        <functioncall prog_lang="cpp">int JS_Zip_Close(const char* zipFile, void* zipHandleOptional)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_Close", "zipFile", void* zipHandle)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Zip_Close(string zipFile, identifier zipHandle)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_Close(const char* zipFile, void* zipHandleOptional)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Closes the zip archive, using either the file name or the zip handle. Finalizes entries and releases resources.
        </description>        
        <retvals>
            integer retval -
        </retvals>        
        <parameters>
            string zipFile - 
            identifier zipHandle -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_CountEntries</slug>
        <title>JS_Zip_CountEntries</title>
        <functioncall prog_lang="cpp">int JS_Zip_CountEntries(void* zipHandle)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_CountEntries", void* zipHandle)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Zip_CountEntries(identifier zipHandle)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_CountEntries(void* zipHandle)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
        </description>        
        <retvals>
            integer retval -
        </retvals>        
        <parameters>
            identifier zipHandle -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_DeleteEntries</slug>
        <title>JS_Zip_DeleteEntries</title>
        <functioncall prog_lang="cpp">int JS_Zip_DeleteEntries(void* zipHandle, const char* entryNames, int entryNamesStrLen)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_DeleteEntries", void* zipHandle, "entryNames", int entryNamesStrLen)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Zip_DeleteEntries(identifier zipHandle, string entryNames, integer entryNamesStrLen)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_DeleteEntries(void* zipHandle, const char* entryNames, int entryNamesStrLen)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Deletes the specified entries from an existing Zip file.
            
            entryNames is zero-separated and double-zero-terminated.
            
            Returns the number of deleted entries on success, negative number (< 0) on error.
        </description>        
        <retvals>
            integer retval -
        </retvals>        
        <parameters>
            identifier zipHandle - 
            string entryNames - 
            integer entryNamesStrLen -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_Entry_Close</slug>
        <title>JS_Zip_Entry_Close</title>
        <functioncall prog_lang="cpp">int JS_Zip_Entry_Close(void* zipHandle)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_Entry_Close", void* zipHandle)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Zip_Entry_Close(identifier zipHandle)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_Entry_Close(void* zipHandle)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Closes a zip entry, flushes buffer and releases resources. In WRITE mode, entries must be closed in order to apply and save changes.
            
            Returns 0 on success, negative number (< 0) on error.
        </description>        
        <retvals>
            integer retval -
        </retvals>        
        <parameters>
            identifier zipHandle -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_Entry_CompressFile</slug>
        <title>JS_Zip_Entry_CompressFile</title>
        <functioncall prog_lang="cpp">int JS_Zip_Entry_CompressFile(void* zipHandle, const char* inputFile)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_Entry_CompressFile", void* zipHandle, "inputFile")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Zip_Entry_CompressFile(identifier zipHandle, string inputFile)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_Entry_CompressFile(void* zipHandle, const char* inputFile)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Compresses the specified file into the zip archive's open entry.
            
            Returns 0 on success, negative number (< 0) on error.
        </description>        
        <retvals>
            integer retval -
        </retvals>        
        <parameters>
            identifier zipHandle - 
            string inputFile -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_Entry_CompressMemory</slug>
        <title>JS_Zip_Entry_CompressMemory</title>
        <functioncall prog_lang="cpp">int JS_Zip_Entry_CompressMemory(void* zipHandle, const char* buf, int buf_size)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_Entry_CompressMemory", void* zipHandle, "buf", int buf_size)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Zip_Entry_CompressMemory(identifier zipHandle, string buf, integer buf_size)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_Entry_CompressMemory(void* zipHandle, const char* buf, int buf_size)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Compresses the specified memory buffer into the zip archive's open entry.
            
            Returns 0 on success, negative number (< 0) on error.
        </description>        
        <retvals>
            integer retval -
        </retvals>        
        <parameters>
            identifier zipHandle - 
            string buf - 
            integer buf_size -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_Entry_ExtractToFile</slug>
        <title>JS_Zip_Entry_ExtractToFile</title>
        <functioncall prog_lang="cpp">int JS_Zip_Entry_ExtractToFile(void* zipHandle, const char* outputFile)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_Entry_ExtractToFile", void* zipHandle, "outputFile")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Zip_Entry_ExtractToFile(identifier zipHandle, string outputFile)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_Entry_ExtractToFile(void* zipHandle, const char* outputFile)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Extracts the zip archive's open entry.
            
            Returns 0 on success, negative number (< 0) on error.
        </description>        
        <retvals>
            integer retval -
        </retvals>        
        <parameters>
            identifier zipHandle - 
            string outputFile -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_Entry_ExtractToMemory</slug>
        <title>JS_Zip_Entry_ExtractToMemory</title>
        <functioncall prog_lang="cpp">int JS_Zip_Entry_ExtractToMemory(void* zipHandle, char* contentsOutNeedBig, int contentsOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_Entry_ExtractToMemory", void* zipHandle, #contents)</functioncall>
        <functioncall prog_lang="lua">integer retval, string contents = reaper.JS_Zip_Entry_ExtractToMemory(identifier zipHandle)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_Entry_ExtractToMemory(void* zipHandle, char* contentsOutNeedBig, int contentsOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Extracts and returns the zip archive's open entry.
            
            Returns the number of bytes extracted on success, negative number (< 0) on error.
        </description>        
        <retvals>
            integer retval - 
            string contents -
        </retvals>        
        <parameters>
            identifier zipHandle -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_Entry_Info</slug>
        <title>JS_Zip_Entry_Info</title>
        <functioncall prog_lang="cpp">int JS_Zip_Entry_Info(void* zipHandle, char* nameOutNeedBig, int nameOutNeedBig_sz, int* indexOut, int* isFolderOut, double* sizeOut, double* crc32Out)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_Entry_Info", void* zipHandle, #name, int &index, int &isFolder, &size, &crc32)</functioncall>
        <functioncall prog_lang="lua">integer retval, string name, integer index, integer isFolder, number size, number crc32 = reaper.JS_Zip_Entry_Info(identifier zipHandle)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_Entry_Info(void* zipHandle, char* nameOutNeedBig, int nameOutNeedBig_sz, int* indexOut, int* isFolderOut, double* sizeOut, double* crc32Out)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Returns information about the zip archive's open entry.
        </description>        
        <retvals>
            integer retval - 
            string name - 
            integer index - 
            integer isFolder - 
            number size - 
            number crc32 -
        </retvals>        
        <parameters>
            identifier zipHandle -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_Entry_OpenByIndex</slug>
        <title>JS_Zip_Entry_OpenByIndex</title>
        <functioncall prog_lang="cpp">int JS_Zip_Entry_OpenByIndex(void* zipHandle, int index)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_Entry_OpenByIndex", void* zipHandle, int index)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Zip_Entry_OpenByIndex(identifier zipHandle, integer index)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_Entry_OpenByIndex(void* zipHandle, int index)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Opens a new entry by index in the zip archive.
            
            This function is only valid if zip archive was opened in 'r' (readonly) mode.
            
            Returns 0 on success, negative number on error.
        </description>        
        <retvals>
            integer retval -
        </retvals>        
        <parameters>
            identifier zipHandle - 
            integer index -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_Entry_OpenByName</slug>
        <title>JS_Zip_Entry_OpenByName</title>
        <functioncall prog_lang="cpp">int JS_Zip_Entry_OpenByName(void* zipHandle, const char* entryName)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_Entry_OpenByName", void* zipHandle, "entryName")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Zip_Entry_OpenByName(identifier zipHandle, string entryName)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_Entry_OpenByName(void* zipHandle, const char* entryName)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Opens an entry by name in the zip archive.
            
            For zip archive opened in 'w' or 'a' mode the function will append a new entry. In readonly mode the function tries to locate an existing entry.
            
            Returns 0 on success, negative number (< 0) on error.
        </description>        
        <retvals>
            integer retval -
        </retvals>        
        <parameters>
            identifier zipHandle - 
            string entryName -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_ErrorString</slug>
        <title>JS_Zip_ErrorString</title>
        <functioncall prog_lang="cpp">void JS_Zip_ErrorString(int errorNum, char* errorStrOut, int errorStrOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Zip_ErrorString", int errorNum, #errorStr)</functioncall>
        <functioncall prog_lang="lua">string errorStr = reaper.JS_Zip_ErrorString(integer errorNum)</functioncall>
        <functioncall prog_lang="python">void void = JS_Zip_ErrorString(int errorNum, char* errorStrOut, int errorStrOut_sz)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Returns a descriptive string for the given error code.
        </description>        
        <retvals>
            string errorStr -
        </retvals>        
        <parameters>
            integer errorNum -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_Extract</slug>
        <title>JS_Zip_Extract</title>
        <functioncall prog_lang="cpp">int JS_Zip_Extract(const char* zipFile, const char* outputFolder)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_Extract", "zipFile", "outputFolder")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_Zip_Extract(string zipFile, string outputFolder)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_Extract(const char* zipFile, const char* outputFolder)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Extracts an existing Zip file to the specified folder.
            
            Returns the number of extracted files on success, negative number (< 0) on error.
        </description>        
        <retvals>
            integer retval -
        </retvals>        
        <parameters>
            string zipFile - 
            string outputFolder -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_ListAllEntries</slug>
        <title>JS_Zip_ListAllEntries</title>
        <functioncall prog_lang="cpp">int JS_Zip_ListAllEntries(void* zipHandle, char* listOutNeedBig, int listOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Zip_ListAllEntries", void* zipHandle, #list)</functioncall>
        <functioncall prog_lang="lua">integer retval, string list = reaper.JS_Zip_ListAllEntries(identifier zipHandle)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_Zip_ListAllEntries(void* zipHandle, char* listOutNeedBig, int listOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            Returns the number of entries and a zero-separated and double-zero-terminated string of entry names.
            
            On error, returns a negative number (< 0).
        </description>        
        <retvals>
            integer retval - 
            string list -
        </retvals>        
        <parameters>
            identifier zipHandle -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>JS_Zip_Open</slug>
        <title>JS_Zip_Open</title>
        <functioncall prog_lang="cpp">void* JS_Zip_Open(const char* zipFile, const char* mode, int compressionLevel, int* retvalOut)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_Zip_Open", "zipFile", "mode", int compressionLevel, int &retval)</functioncall>
        <functioncall prog_lang="lua">identifier retval, integer retval = reaper.JS_Zip_Open(string zipFile, string mode, integer compressionLevel)</functioncall>
        <functioncall prog_lang="python">void* void = JS_Zip_Open(const char* zipFile, const char* mode, int compressionLevel, int* retvalOut)</functioncall>
        <requires>
            Reaper=6.23
            JS=1.301
        </requires>
        <description>            
            
        </description>        
        <retvals>
            identifier retval - 
            integer retval -
        </retvals>        
        <parameters>
            string zipFile - 
            string mode - 
            integer compressionLevel -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            File Management
            Zip Files
        </chapter_context>
        <tags>js-extension, zip</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Dialog_BrowseForFolder</slug>
        <title>JS_Dialog_BrowseForFolder</title>
        <functioncall prog_lang="cpp">int JS_Dialog_BrowseForFolder(const char* caption, const char* initialFolder, char* folderOutNeedBig, int folderOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Dialog_BrowseForFolder", "caption", "initialFolder", #folder)</functioncall>
        <functioncall prog_lang="lua">integer retval, string folder = reaper.JS_Dialog_BrowseForFolder(string caption, string initialFolder)</functioncall>
        <functioncall prog_lang="python">(Int retval, String caption, String initialFolder, String folderOutNeedBig, Int folderOutNeedBig_sz) = JS_Dialog_BrowseForFolder(caption, initialFolder, folderOutNeedBig, folderOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.962
        </requires>
        <description>
            retval is 1 if a folder was selected, 0 if the user canceled the dialog, and -1 if an error occurred.
        </description>
        <retvals>
            integer retval - 0, no folder was selected(user hit cancel-button); 1, folder was selected; -1, in case of an error
            string folder - the path to the folder that was selected
        </retvals>
        <parameters>
           string caption - the captiontext for the folder-selection dialog
           string initialFolder - the path to the folder, which shall be highlighted initially
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags>js-extension, select, folder, dialog</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Dialog_BrowseForOpenFiles</slug>
        <title>JS_Dialog_BrowseForOpenFiles</title>
        <functioncall prog_lang="cpp">int JS_Dialog_BrowseForOpenFiles(const char* windowTitle, const char* initialFolder, const char* initialFile, const char* extensionList, bool allowMultiple, char* fileNamesOutNeedBig, int fileNamesOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Dialog_BrowseForOpenFiles", "windowTitle", "initialFolder", "initialFile", "extensionList", bool allowMultiple, #fileNames)</functioncall>
        <functioncall prog_lang="lua">integer retval, string fileNames = reaper.JS_Dialog_BrowseForOpenFiles(string windowTitle, string initialFolder, string initialFile, string extensionList, boolean allowMultiple)</functioncall>
        <functioncall prog_lang="python">(Int retval, String windowTitle, String initialFolder, String initialFile, String extensionList, Boolean allowMultiple, String fileNamesOutNeedBig, Int fileNamesOutNeedBig_sz) = JS_Dialog_BrowseForOpenFiles(windowTitle, initialFolder, initialFile, extensionList, allowMultiple, fileNamesOutNeedBig, fileNamesOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.986
        </requires>
        <description>
            If allowMultiple is true, multiple files may be selected. The returned string is \0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.
            * On macOS, the first substring may be empty, and each file name will then contain its entire path.
            * This function only allows selection of existing files, and does not allow creation of new files.

            extensionList is a string containing pairs of \0-terminated substrings. The last substring must be terminated by two \0 characters. Each pair defines one filter pattern:
            * The first substring in each pair describes the filter in user-readable form (for example, "Lua script files (*.lua)") and will be displayed in the dialog box.
            * The second substring specifies the filter that the operating system must use to search for the files (for example, "*.txt"; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, "*.lua;*.eel").

            An example of an extensionList string:
            "ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0".

            On macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as "All files\0*.*\0\0"), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default "All files (*.*)" filter.

            retval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.

            Displaying \0-separated strings:
            * REAPER's IDE and ShowConsoleMsg only display strings up to the first \0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \0 byte as usual.
        </description>
        <retvals>
            integer retval - 1, file was selected; 0, no file selected; -1, in case of an error
            string fileNames - the selected filenames.
                             - when parameter allowMultiple=false, this returnvalue holds filename with path
                             - when parameter allowMultiple=true, this returnvalue holds the path and all selected files, separated by \0
                             -      path\0filename1\0filename2\0filename3
        </retvals>
        <parameters>
           string windowTitle - the title of the file-selection-window
           string initialFolder - the initial folder opened in the file-chooser-dialog
           string initialFile - the default-filename already entered in the filename-entrybox
           string extensionList - a list of extensions that can be selected in the selection-list.
                                - the list has the following structure(separate the entries with a \0): 
                                -       "description of type1\0type1\0description of type 2\0type2\0"
                                - the description of type can be anything that describes the type(s), 
                                - to define one type, write: *.ext 
                                - to define multiple types, write: *.ext;*.ext2;*.ext3
                                - the extensionList must end with a \0
           boolean allowMultiple - true, allows selection of multiple files; false, allows only selection of one file
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags>js-extension, select, select, file, filenames, path, dialog</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Dialog_BrowseForSaveFile</slug>
        <title>JS_Dialog_BrowseForSaveFile</title>
        <functioncall prog_lang="cpp">int JS_Dialog_BrowseForSaveFile(const char* windowTitle, const char* initialFolder, const char* initialFile, const char* extensionList, char* fileNameOutNeedBig, int fileNameOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_Dialog_BrowseForSaveFile", "windowTitle", "initialFolder", "initialFile", "extensionList", #fileName)</functioncall>
        <functioncall prog_lang="lua">integer retval, string fileName = reaper.JS_Dialog_BrowseForSaveFile(string windowTitle, string initialFolder, string initialFile, string extensionList)</functioncall>
        <functioncall prog_lang="python">(Int retval, String windowTitle, String initialFolder, String initialFile, String extensionList, String fileNameOutNeedBig, Int fileNameOutNeedBig_sz) = JS_Dialog_BrowseForSaveFile(windowTitle, initialFolder, initialFile, extensionList, fileNameOutNeedBig, fileNameOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.986
        </requires>
        <description>
            Opens a file-chooser-dialog for saving operations.

            retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.

            extensionList is a string containing pairs of 0-terminated substrings. The last substring must be terminated by two 0 characters. Each pair defines one filter pattern:
            * The first substring in each pair describes the filter in user-readable form (for example, "Lua script files (*.lua)") and will be displayed in the dialog box.
            * The second substring specifies the filter that the operating system must use to search for the files (for example, "*.txt"; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, "*.lua;*.eel").

            An example of an extensionList string:
            "ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0".

            If the extensionList string is empty, it will display the default "All files (*.*)" filter.
        </description>
        <retvals>
            integer retval - 1, file was selected; 0, no file selected; -1, in case of an error
            string fileNames - the selected filename.
        </retvals>
        <parameters>
           string windowTitle - the title of the file-selection-window
           string initialFolder - the initial folder opened in the file-chooser-dialog
           string initialFile - the default-filename already entered in the filename-entrybox
           string extensionList - a list of extensions that can be selected in the selection-list.
                                - the list has the following structure(separate the entries with a \0): 
                                -       "description of type1\0type1\0description of type 2\0type2\0"
                                - the description of type can be anything that describes the type(s), 
                                - to define one type, write: *.ext 
                                - to define multiple types, write: *.ext;*.ext2;*.ext3
                                - the extensionList must end with a \0
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Dialogs
        </chapter_context>
        <tags>js-extension, select, select, file, filenames, path, dialog, save</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_EnumSelItems</slug>
        <title>JS_ListView_EnumSelItems</title>
        <functioncall prog_lang="cpp">int JS_ListView_EnumSelItems(void* listviewHWND, int index)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_ListView_EnumSelItems", void* listviewHWND, int index)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_ListView_EnumSelItems(identifier listviewHWND, integer index)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_ListView_EnumSelItems(void listviewHWND, Int index)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.962
        </requires>
        <description>
            Returns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left.
        </description>
        <retvals>
            integer retval - the index of the next selected list item
        </retvals>
        <parameters>
            identifier listviewHWND - the HWND of the window
            integer index - the index of the listitems before the next selected one
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension, listview, enumerate, selected, listview, items</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_GetFocusedItem</slug>
        <title>JS_ListView_GetFocusedItem</title>
        <functioncall prog_lang="cpp">int JS_ListView_GetFocusedItem(void* listviewHWND, char* textOut, int textOut_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_ListView_GetFocusedItem", void* listviewHWND, #text)</functioncall>
        <functioncall prog_lang="lua">integer retval, string text = reaper.JS_ListView_GetFocusedItem(identifier listviewHWND)</functioncall>
        <functioncall prog_lang="python">(Int retval, void listviewHWND, String textOut, Int textOut_sz) = JS_ListView_GetFocusedItem(listviewHWND, textOut, textOut_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description>
            Returns the index and text of the focused item, if any.
        </description>
        <parameters>
           identifier listviewHWND - 
        </parameters>
        <retvals>
           integer retval - 
           string text - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_GetHeader</slug>
        <title>JS_ListView_GetHeader</title>
        <functioncall prog_lang="cpp">void* JS_ListView_GetHeader(void* listviewHWND)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("JS_ListView_GetHeader", void* listviewHWND)</functioncall>
        <functioncall prog_lang="lua">identifier index = reaper.JS_ListView_GetHeader(identifier listviewHWND)</functioncall>
        <functioncall prog_lang="python">void JS_ListView_GetHeader(void listviewHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.310
        </requires>
        <description>
            Returns the index and text of the focused item, if any.
        </description>
        <parameters>
           identifier listviewHWND - 
        </parameters>
        <retvals>
           identifier index - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_GetItem</slug>
        <title>JS_ListView_GetItem</title>
        <functioncall prog_lang="cpp">void JS_ListView_GetItem(void* listviewHWND, int index, int subItem, char* textOut, int textOut_sz, int* stateOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_ListView_GetItem", void* listviewHWND, int index, int subItem, #text, int &state)</functioncall>
        <functioncall prog_lang="lua">string text, integer state = reaper.JS_ListView_GetItem(identifier listviewHWND, integer index, integer subItem)</functioncall>
        <functioncall prog_lang="python">(void listviewHWND, Int index, Int subItem, String textOut, Int textOut_sz, Int stateOut) = JS_ListView_GetItem(listviewHWND, index, subItem, textOut, textOut_sz, stateOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description>
            Returns the text and state of specified item.
        </description>
        <parameters>
           identifier listviewHWND - 
           integer index - 
           integer subItem - 
        </parameters>
        <retvals>
           string text - 
           integer state - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_GetItemCount</slug>
        <title>JS_ListView_GetItemCount</title>
        <functioncall prog_lang="cpp">int JS_ListView_GetItemCount(void* listviewHWND)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_ListView_GetItemCount", void* listviewHWND)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_ListView_GetItemCount(identifier listviewHWND)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_ListView_GetItemCount(void listviewHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description>

        </description>
        <parameters>
           identifier listviewHWND -
        </parameters>
        <retvals>
           integer retval - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_GetItemRect</slug>
        <title>JS_ListView_GetItemRect</title>
        <functioncall prog_lang="cpp">bool JS_ListView_GetItemRect(void* listviewHWND, int index, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("JS_ListView_GetItemRect", void* listviewHWND, int index, int &left, int &top, int &right, int &bottom)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer left, integer top, integer right, integer bottom = reaper.JS_ListView_GetItemRect(identifier listviewHWND, integer index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void listviewHWND, Int index, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_ListView_GetItemRect(listviewHWND, index, leftOut, topOut, rightOut, bottomOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.217
        </requires>
        <description>
            Returns client coordinates of the item.
        </description>
        <parameters>
           identifier listviewHWND - 
           integer index - 
        </parameters>
        <retvals>
           boolean retval - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>




    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_GetItemState</slug>
        <title>JS_ListView_GetItemState</title>
        <functioncall prog_lang="cpp">int JS_ListView_GetItemState(void* listviewHWND, int index)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_ListView_GetItemState", void* listviewHWND, int index)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_ListView_GetItemState(identifier listviewHWND, integer index)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_ListView_GetItemState(void listviewHWND, Int index)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.301
        </requires>
        <description>
            State is a bitmask:
            1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.

            Warning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.
        </description>
        <parameters>
           identifier listviewHWND - 
           integer index - 
        </parameters>
        <retvals>
           integer retval - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
            JS 1.301 - the bitmask-values 1 and 2 were switched in their meaning to focused(1) and selected(2); used to be the other way round
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_GetItemText</slug>
        <title>JS_ListView_GetItemText</title>
        <functioncall prog_lang="cpp">void JS_ListView_GetItemText(void* listviewHWND, int index, int subItem, char* textOut, int textOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_ListView_GetItemText", void* listviewHWND, int index, int subItem, #text)</functioncall>
        <functioncall prog_lang="lua">string text = reaper.JS_ListView_GetItemText(identifier listviewHWND, integer index, integer subItem)</functioncall>
        <functioncall prog_lang="python">(void listviewHWND, Int index, Int subItem, String textOut, Int textOut_sz) = JS_ListView_GetItemText(listviewHWND, index, subItem, textOut, textOut_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description>

        </description>
        <parameters>
           identifier listviewHWND - 
           integer index - 
           integer subItem -
        </parameters>
        <retvals>
           string text - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_GetSelectedCount</slug>
        <title>JS_ListView_GetSelectedCount</title>
        <functioncall prog_lang="cpp">int JS_ListView_GetSelectedCount(void* listviewHWND)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_ListView_GetSelectedCount", void* listviewHWND)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_ListView_GetSelectedCount(identifier listviewHWND)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_ListView_GetSelectedCount(void listviewHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description>

        </description>
        <parameters>
           identifier listviewHWND - 
        </parameters>
        <retvals>
           integer retval - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_GetTopIndex</slug>
        <title>JS_ListView_GetTopIndex</title>
        <functioncall prog_lang="cpp">int JS_ListView_GetTopIndex(void* listviewHWND)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_ListView_GetTopIndex", void* listviewHWND)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.JS_ListView_GetTopIndex(identifier listviewHWND)</functioncall>
        <functioncall prog_lang="python">Int retval = JS_ListView_GetTopIndex(void listviewHWND)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.217
        </requires>
        <description>

        </description>
        <parameters>
           identifier listviewHWND - 
        </parameters>
        <retvals>
           integer retval - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_HitTest</slug>
        <title>JS_ListView_HitTest</title>
        <functioncall prog_lang="cpp">void JS_ListView_HitTest(void* listviewHWND, int clientX, int clientY, int* indexOut, int* subItemOut, int* flagsOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_ListView_HitTest", void* listviewHWND, int clientX, int clientY, int &index, int &subItem, int &flags)</functioncall>
        <functioncall prog_lang="lua">integer index, integer subItem, integer flags = reaper.JS_ListView_HitTest(identifier listviewHWND, integer clientX, integer clientY)</functioncall>
        <functioncall prog_lang="python">(void listviewHWND, Int clientX, Int clientY, Int indexOut, Int subItemOut, Int flagsOut) = JS_ListView_HitTest(listviewHWND, clientX, clientY, indexOut, subItemOut, flagsOut)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.217
        </requires>
        <description>

        </description>
        <parameters>
           identifier listviewHWND - 
           integer clientX - 
           integer clientY - 
        </parameters>
        <retvals>
           integer index - 
           integer subItem - 
           integer flags - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_ListAllSelItems</slug>
        <title>JS_ListView_ListAllSelItems</title>
        <functioncall prog_lang="cpp">int JS_ListView_ListAllSelItems(void* listviewHWND, char* itemsOutNeedBig, int itemsOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("JS_ListView_ListAllSelItems", void* listviewHWND, #items)</functioncall>
        <functioncall prog_lang="lua">integer retval, string items = reaper.JS_ListView_ListAllSelItems(identifier listviewHWND)</functioncall>
        <functioncall prog_lang="python">(Int retval, void listviewHWND, String itemsOutNeedBig, Int itemsOutNeedBig_sz) = JS_ListView_ListAllSelItems(listviewHWND, itemsOutNeedBig, itemsOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.963
        </requires>
        <description>
            Returns the indices of all selected items as a comma-separated list.

            * retval: Number of selected items found; negative or zero if an error occured.
        </description>
        <parameters>
           identifier listviewHWND - 
        </parameters>
        <retvals>
           integer retval - 
           string items - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_SetItemState</slug>
        <title>JS_ListView_SetItemState</title>
        <functioncall prog_lang="cpp">void JS_ListView_SetItemState(void* listviewHWND, int index, int state, int mask)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_ListView_SetItemState", void* listviewHWND, int index, int state, int mask)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_ListView_SetItemState(identifier listviewHWND, integer index, integer state, integer mask)</functioncall>
        <functioncall prog_lang="python">JS_ListView_SetItemState(void listviewHWND, Int index, Int state, Int mask)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.301
        </requires>
        <description>
            The mask parameter specifies the state bits that must be set, and the state parameter specifies the new values for those bits.

            1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.

            Warning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.
        </description>
        <parameters>
           identifier listviewHWND - 
           integer index - 
           integer state - 
           integer mask - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
           JS 1.301 - the bitmask-values 1 and 2 were switched in their meaning to focused(1) and selected(2); used to be the other way round
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ListView_SetItemText</slug>
        <title>JS_ListView_SetItemText</title>
        <functioncall prog_lang="cpp">void JS_ListView_SetItemText(void* listviewHWND, int index, int subItem, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_ListView_SetItemText", void* listviewHWND, int index, int subItem, "text")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_ListView_SetItemText(identifier listviewHWND, integer index, integer subItem, string text)</functioncall>
        <functioncall prog_lang="python">JS_ListView_SetItemText(void listviewHWND, Int index, Int subItem, String text)</functioncall>
        <requires>
            Reaper=5.974
            JS=1.217
        </requires>
        <description>
            Currently, this function only accepts ASCII text.
        </description>
        <parameters>
           identifier listviewHWND - 
           integer index - 
           integer subItem - 
           string text - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            List Views
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>Xen_AudioWriter_Create</slug>
        <title>Xen_AudioWriter_Create</title>
        <functioncall prog_lang="cpp">AudioWriter* Xen_AudioWriter_Create(const char* filename, int numchans, int samplerate)</functioncall>
        <functioncall prog_lang="eel">AudioWriter extension_api("Xen_AudioWriter_Create", "filename", int numchans, int samplerate)</functioncall>
        <functioncall prog_lang="lua">AudioWriter writer = reaper.Xen_AudioWriter_Create(string filename, integer numchans, integer samplerate)</functioncall>
        <functioncall prog_lang="python">AudioWriter retval = Xen_AudioWriter_Create(String filename, Int numchans, Int samplerate)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Creates writer for 32 bit floating point WAV
        </description>
        <retvals>
           AudioWriter writer - 
        </retvals>
        <parameters>
           string filename - 
           integer numchans - 
           integer samplerate - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>Xen_AudioWriter_Destroy</slug>
        <title>Xen_AudioWriter_Destroy</title>
        <functioncall prog_lang="cpp">void Xen_AudioWriter_Destroy(AudioWriter* writer)</functioncall>
        <functioncall prog_lang="eel">extension_api("Xen_AudioWriter_Destroy", AudioWriter writer)</functioncall>
        <functioncall prog_lang="lua">reaper.Xen_AudioWriter_Destroy(AudioWriter writer)</functioncall>
        <functioncall prog_lang="python">Xen_AudioWriter_Destroy(AudioWriter writer)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Destroys writer
        </description>

        <parameters>
           AudioWriter writer - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>Xen_AudioWriter_Write</slug>
        <title>Xen_AudioWriter_Write</title>
        <functioncall prog_lang="cpp">int Xen_AudioWriter_Write(AudioWriter* writer, int numframes, void* data, int offset)</functioncall>
        <functioncall prog_lang="eel">int extension_api("Xen_AudioWriter_Write", AudioWriter writer, int numframes, void* data, int offset)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.Xen_AudioWriter_Write(AudioWriter writer, integer numframes, identifier data, integer offset)</functioncall>
        <functioncall prog_lang="python">Int retval = Xen_AudioWriter_Write(AudioWriter writer, Int numframes, void data, Int offset)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Write interleaved audio data to disk
        </description>
        <retvals>
           integer retval - 
        </retvals>
        <parameters>
           AudioWriter writer - 
           integer numframes - 
           identifier data - 
           integer offset - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>Xen_GetMediaSourceSamples</slug>
        <title>Xen_GetMediaSourceSamples</title>
        <functioncall prog_lang="cpp">int Xen_GetMediaSourceSamples(PCM_source* src, void* destbuf, int destbufoffset, int numframes, int numchans, double samplerate, double sourceposition)</functioncall>
        <functioncall prog_lang="eel">int extension_api("Xen_GetMediaSourceSamples", PCM_source src, void* destbuf, int destbufoffset, int numframes, int numchans, samplerate, sourceposition)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.Xen_GetMediaSourceSamples(PCM_source src, identifier destbuf, integer destbufoffset, integer numframes, integer numchans, number samplerate, number sourceposition)</functioncall>
        <functioncall prog_lang="python">Int retval = Xen_GetMediaSourceSamples(PCM_source src, void destbuf, Int destbufoffset, Int numframes, Int numchans, Float samplerate, Float sourceposition)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.951
        </requires>
        <description>
            Get interleaved audio data from media source
        </description>
        <retvals>
           integer retval - 
        </retvals>
        <parameters>
           PCM_source src - 
           identifier destbuf - 
           integer destbufoffset - 
           integer numframes - 
           integer numchans - 
           number samplerate - 
           number sourceposition - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>js-extension</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>Xen_StartSourcePreview</slug>
        <title>Xen_StartSourcePreview</title>
        <functioncall prog_lang="cpp">int Xen_StartSourcePreview(PCM_source* source, double gain, bool loop, int* outputchanindexInOptional)</functioncall>
        <functioncall prog_lang="eel">int extension_api("Xen_StartSourcePreview", PCM_source source, gain, bool loop, optional int outputchanindexIn)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.Xen_StartSourcePreview(PCM_source source, number gain, boolean loop, optional integer outputchanindexIn)</functioncall>
        <functioncall prog_lang="python">(Int retval, PCM_source source, Float gain, Boolean loop, Int outputchanindexInOptional) = Xen_StartSourcePreview(source, gain, loop, outputchanindexInOptional)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.991
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Start audio preview of a PCM\_source, which can be created using functions like [PCM\_Source\_CreateFromFile](#PCM_Source_CreateFromFile)

            Returns id of a preview handle that can be provided to [Xen\_StopSourcePreview](#Xen_StopSourcePreview).

            If the given PCM\_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped.

            You can preview more than one file at the same time.
        </description>
        <retvals>
           integer id - the id of this preview, which can be used to stop it again
        </retvals>
        <parameters>
           PCM_source source - a PCM_source-created using a mediafile/item 
           number gain - the volume of the previewed pcm_source; 0, no sound; 10, maximum volume
           boolean loop - true, loop the PCM_source; false, play only once
           optional integer outputchanindexIn - the output channel; for multichannel files, this is the first hardware-output-channel for e.g. left channel of a stereo file
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>js-extension, audio preview</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en">
        <slug>Xen_StopSourcePreview</slug>
        <title>Xen_StopSourcePreview</title>
        <functioncall prog_lang="cpp">int Xen_StopSourcePreview(int preview_id)</functioncall>
        <functioncall prog_lang="eel">int extension_api("Xen_StopSourcePreview", int preview_id)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.Xen_StopSourcePreview(integer preview_id)</functioncall>
        <functioncall prog_lang="python">Int retval = Xen_StopSourcePreview(Int preview_id)</functioncall>
        <requires>
            Reaper=5.974
            JS=0.986
        </requires>
        <description>
            Stop audio preview. 

            To stop all running previews, set id=-1
        </description>
        <retvals>
           integer retval - 
        </retvals>
        <parameters>
           integer preview_id - the id of the running preview; -1, stops all running previews
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>js-extension, audio preview</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Llm_Do</slug>
        <title>Llm_Do</title>
        <functioncall prog_lang="cpp">void Llm_Do(int* paramInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("Llm_Do", optional int paramIn)</functioncall>
        <functioncall prog_lang="lua">reaper.Llm_Do(optional integer paramIn)</functioncall>
        <functioncall prog_lang="python">Llm_Do(int* paramInOptional)</functioncall>
        <requires>
            Reaper=6.23
            ReaLlm=0.4.1
        </requires>
        <description>            
            Called with parameter value 1 executes one ReaLlm cycle. E.g. for running ReaLlm on custom timer, or deferred. 0 or nothing performs shutdown. Disarming/disabling all monitored inputs and calling with parameter value 1 equals to shutdown.
        </description>        
        <parameters>
            optional integer paramIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaLlm
        </chapter_context>
        <tags>ReaLlm</tags>
        <changelog>
          ReaLlm 0.3.0 - added as new function
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Llm_Get</slug>
        <title>Llm_Get</title>
        <functioncall prog_lang="cpp">void Llm_Get(const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz, MediaTrack* trInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("Llm_Get", "parmname", #buf, MediaTrack trIn)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.Llm_Get(string parmname, string buf, MediaTrack trIn)</functioncall>
        <functioncall prog_lang="python">void void = Llm_Get(const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz, MediaTrack* trInOptional)</functioncall>
        <requires>
            Reaper=6.23
            ReaLlm=0.4.1
        </requires>
        <description>            
            Get ReaLlm information string. Zero-based indices. Master track index -1. Optional MediaTrack* tr gets results relative to tr. Each line (newline '\n' separated) represents entry. Tracks are separated with ';'. FX are listed after ':' separated with ','.
            GRAPH : Mixer routings as network graph in format "node;neighborhood\n" where node is track, and neighborhood is group of tracks in format "track;tr#1;tr#2...\n". Or as "parent;children\n" where first field is parent and rest are children. Or as multiply linked list where first field is node and rest are links. E.g. "7;1;-1;\n" would mean "8th track is connected to 2nd track and Master track."
            PDCLATENCY : Latency in samples.
            PDCLIMIT : Limit in samples.
            REALLM or STATE : Current state of ReaLlm as approach vektors with disabled FX in format: "begin:disabled fx,...;next:fx,...;end:fx,...;\n." E.g. "3:1,2;0;-1:0\n" would be: 4th track, fx#2 and #3 disabled => 1st track, nofx disabled => Master track, fx#1 disabled.
            SAFE : 'Safed' plugins as "track#:fx#\n" pairs.
            VECTOR : Same as REALLM without FX information. Faster.
        </description>        
        <retvals>
            string buf - 
        </retvals>        
        <parameters>
            string parmname - 
            string buf - 
            MediaTrack trIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaLlm
        </chapter_context>
        <tags>ReaLlm</tags>
        <changelog>
          ReaLlm 0.3.0 - added as new function
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Llm_Set</slug>
        <title>Llm_Set</title>
        <functioncall prog_lang="cpp">void Llm_Set(const char* parmname, const char* bufIn)</functioncall>
        <functioncall prog_lang="eel">extension_api("Llm_Set", "parmname", "bufIn")</functioncall>
        <functioncall prog_lang="lua">reaper.Llm_Set(string parmname, string bufIn)</functioncall>
        <functioncall prog_lang="python">Llm_Set(const char* parmname, const char* bufIn)</functioncall>
        <requires>
            Reaper=6.23
            ReaLlm=0.4.1
        </requires>
        <description>            
            Set ReaLlm parameters.
            PDCLIMIT : PDC latency limit in audio blocks/buffers, e.g. "1.5".
            MONITORINGFX : Use any non-empty string to include Monitoring FX. E.g. "true".
            PARAMCHANGE : Instead of bypassing, changes FX parameter between val1 (low latency) and val2 (original). Use bufIn string format 'fx_name,param_index,val1,val2'.
        </description>        
        <parameters>
            string parmname - 
            string bufIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaLlm
        </chapter_context>
        <tags>ReaLlm</tags>
        <changelog>
          ReaLlm 0.3.0 - added as new function
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_CB_FindString</slug>
        <title>BR_Win32_CB_FindString</title>
        <functioncall prog_lang="cpp">int BR_Win32_CB_FindString(void* comboBoxHwnd, int startId, const char* string)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_CB_FindString", void* comboBoxHwnd, int startId, "string")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_CB_FindString(identifier comboBoxHwnd, integer startId, string string)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_CB_FindString(void comboBoxHwnd, Int startId, String string)</functioncall>
        <requires>
            Reaper=5.974
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API ComboBox_FindString().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            identifier comboBoxHwnd - 
            integer startId - 
            string string - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_CB_FindStringExact</slug>
        <title>BR_Win32_CB_FindStringExact</title>
        <functioncall prog_lang="cpp">int BR_Win32_CB_FindStringExact(void* comboBoxHwnd, int startId, const char* string)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_CB_FindStringExact", void* comboBoxHwnd, int startId, "string")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_CB_FindStringExact(identifier comboBoxHwnd, integer startId, string string)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_CB_FindStringExact(void comboBoxHwnd, Int startId, String string)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API ComboBox_FindStringExact().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            identifier comboBoxHwnd - 
            integer startId - 
            string string - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_ClientToScreen</slug>
        <title>BR_Win32_ClientToScreen</title>
        <functioncall prog_lang="cpp">void BR_Win32_ClientToScreen(void* hwnd, int xIn, int yIn, int* xOut, int* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_Win32_ClientToScreen", void* hwnd, int xIn, int yIn, int &x, int &y)</functioncall>
        <functioncall prog_lang="lua">integer x, integer y = reaper.BR_Win32_ClientToScreen(identifier hwnd, integer xIn, integer yIn)</functioncall>
        <functioncall prog_lang="python">(void hwnd, Int xIn, Int yIn, Int xOut, Int yOut) = BR_Win32_ClientToScreen(hwnd, xIn, yIn, xOut, yOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API ClientToScreen().
        </description>
        <retvals>
            integer x - 
            integer y -
        </retvals>
        <parameters>
            identifier hwnd - 
            integer xIn - 
            integer yIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_FindWindowEx</slug>
        <title>BR_Win32_FindWindowEx</title>
        <functioncall prog_lang="cpp">void* BR_Win32_FindWindowEx(const char* hwndParent, const char* hwndChildAfter, const char* className, const char* windowName, bool searchClass, bool searchName)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_Win32_FindWindowEx", "hwndParent", "hwndChildAfter", "className", "windowName", bool searchClass, bool searchName)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.BR_Win32_FindWindowEx(string hwndParent, string hwndChildAfter, string className, string windowName, boolean searchClass, boolean searchName)</functioncall>
        <functioncall prog_lang="python">identifier hwnd = BR_Win32_FindWindowEx(String hwndParent, String hwndChildAfter, String className, String windowName, Boolean searchClass, Boolean searchName)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't allow passing NULL (None in Python, nil in Lua etc...) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either "0" to signify NULL or as string obtained from [BR\_Win32_HwndToString](#BR_Win32_HwndToString).

        </description>
        <retvals>
            identifier hwnd - 
        </retvals>
        <parameters>
            string hwndParent - 
            string hwndChildAfter - 
            string className - 
            string windowName - 
            boolean searchClass - 
            boolean searchName - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GET_X_LPARAM</slug>
        <title>BR_Win32_GET_X_LPARAM</title>
        <functioncall prog_lang="cpp">int BR_Win32_GET_X_LPARAM(int lParam)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_GET_X_LPARAM", int lParam)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_GET_X_LPARAM(integer lParam)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_GET_X_LPARAM(Int lParam)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API GET_X_LPARAM().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer lParam - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GET_Y_LPARAM</slug>
        <title>BR_Win32_GET_Y_LPARAM</title>
        <functioncall prog_lang="cpp">int BR_Win32_GET_Y_LPARAM(int lParam)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_GET_Y_LPARAM", int lParam)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_GET_Y_LPARAM(integer lParam)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_GET_Y_LPARAM(Int lParam)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API GET_Y_LPARAM().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer lParam - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetConstant</slug>
        <title>BR_Win32_GetConstant</title>
        <functioncall prog_lang="cpp">int BR_Win32_GetConstant(const char* constantName)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_GetConstant", "constantName")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_GetConstant(string constantName)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_GetConstant(String constantName)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Returns various constants needed for BR_Win32 functions.
            Supported constants are:
            CB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL
            EM_SETSEL
            GW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER
            GWL_STYLE
            SW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL
            SWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER
            VK_DOWN, VK_UP
            WM_CLOSE, WM_KEYDOWN
            WS_MAXIMIZE, WS_OVERLAPPEDWINDOW

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            string constantName - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetCursorPos</slug>
        <title>BR_Win32_GetCursorPos</title>
        <functioncall prog_lang="cpp">bool BR_Win32_GetCursorPos(int* xOut, int* yOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_Win32_GetCursorPos", int &x, int &y)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer x, integer y = reaper.BR_Win32_GetCursorPos()</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int xOut, Int yOut) = BR_Win32_GetCursorPos(xOut, yOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API GetCursorPos().

        </description>
        <retvals>
            boolean retval - 
            integer x - 
            integer y - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetFocus</slug>
        <title>BR_Win32_GetFocus</title>
        <functioncall prog_lang="cpp">void* BR_Win32_GetFocus()</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_Win32_GetFocus")</functioncall>
        <functioncall prog_lang="lua">identifier hwnd_focus = reaper.BR_Win32_GetFocus()</functioncall>
        <functioncall prog_lang="python">identifier hwnd_focus = BR_Win32_GetFocus()</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API GetFocus().

        </description>
        <retvals>
            identifier hwnd_focus - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetForegroundWindow</slug>
        <title>BR_Win32_GetForegroundWindow</title>
        <functioncall prog_lang="cpp">void* BR_Win32_GetForegroundWindow()</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_Win32_GetForegroundWindow")</functioncall>
        <functioncall prog_lang="lua">identifier hwnd_foreground = reaper.BR_Win32_GetForegroundWindow()</functioncall>
        <functioncall prog_lang="python">identifier hwnd_foreground = BR_Win32_GetForegroundWindow()</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API GetForegroundWindow().

        </description>
        <retvals>
            identifier hwnd_foreground - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetMainHwnd</slug>
        <title>BR_Win32_GetMainHwnd</title>
        <functioncall prog_lang="cpp">void* BR_Win32_GetMainHwnd()</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_Win32_GetMainHwnd")</functioncall>
        <functioncall prog_lang="lua">identifier hwnd_main = reaper.BR_Win32_GetMainHwnd()</functioncall>
        <functioncall prog_lang="python">identifier hwnd_main = BR_Win32_GetMainHwnd()</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Alternative to [GetMainHwnd](#GetMainHwnd). REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type

        </description>
        <retvals>
            identifier hwnd_main - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetMixerHwnd</slug>
        <title>BR_Win32_GetMixerHwnd</title>
        <functioncall prog_lang="cpp">void* BR_Win32_GetMixerHwnd(bool* isDockedOut)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_Win32_GetMixerHwnd", bool &isDocked)</functioncall>
        <functioncall prog_lang="lua">identifier retval, boolean isDocked = reaper.BR_Win32_GetMixerHwnd()</functioncall>
        <functioncall prog_lang="python">(void retval, Boolean isDockedOut) = BR_Win32_GetMixerHwnd(isDockedOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked

        </description>
        <retvals>
            identifier retval - 
            boolean isDocked - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetMonitorRectFromRect</slug>
        <title>BR_Win32_GetMonitorRectFromRect</title>
        <functioncall prog_lang="cpp">void BR_Win32_GetMonitorRectFromRect(bool workingAreaOnly, int leftIn, int topIn, int rightIn, int bottomIn, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_Win32_GetMonitorRectFromRect", bool workingAreaOnly, int leftIn, int topIn, int rightIn, int bottomIn, int &left, int &top, int &right, int &bottom)</functioncall>
        <functioncall prog_lang="lua">integer left, integer top, integer right, integer bottom = reaper.BR_Win32_GetMonitorRectFromRect(boolean workingAreaOnly, integer leftIn, integer topIn, integer rightIn, integer bottomIn)</functioncall>
        <functioncall prog_lang="python">(Boolean workingAreaOnly, Int leftIn, Int topIn, Int rightIn, Int bottomIn, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = BR_Win32_GetMonitorRectFromRect(workingAreaOnly, leftIn, topIn, rightIn, bottomIn, leftOut, topOut, rightOut, bottomOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX).

        </description>
        <retvals>
            integer left - 
            integer top - 
            integer right - 
            integer bottom - 
        </retvals>
        <parameters>
            boolean workingAreaOnly - 
            integer leftIn - 
            integer topIn - 
            integer rightIn - 
            integer bottomIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetParent</slug>
        <title>BR_Win32_GetParent</title>
        <functioncall prog_lang="cpp">void* BR_Win32_GetParent(void* hwnd)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_Win32_GetParent", void* hwnd)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd_parent = reaper.BR_Win32_GetParent(identifier hwnd)</functioncall>
        <functioncall prog_lang="python">identifier hwnd_parent = BR_Win32_GetParent(void hwnd)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API GetParent().

        </description>
        <retvals>
            identifier hwnd_parent - 
        </retvals>
        <parameters>
            identifier hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetWindow</slug>
        <title>BR_Win32_GetWindow</title>
        <functioncall prog_lang="cpp">void* BR_Win32_GetWindow(void* hwnd, int cmd)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_Win32_GetWindow", void* hwnd, int cmd)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.BR_Win32_GetWindow(identifier hwnd, integer cmd)</functioncall>
        <functioncall prog_lang="python">identifier hwnd = BR_Win32_GetWindow(void hwnd, Int cmd)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API GetWindow().

        </description>
        <retvals>
            identifier hwnd - 
        </retvals>
        <parameters>
            identifier hwnd - 
            integer cmd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetWindowLong</slug>
        <title>BR_Win32_GetWindowLong</title>
        <functioncall prog_lang="cpp">int BR_Win32_GetWindowLong(void* hwnd, int index)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_GetWindowLong", void* hwnd, int index)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_GetWindowLong(identifier hwnd, integer index)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_GetWindowLong(void hwnd, Int index)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API GetWindowLong().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            identifier hwnd - 
            integer index - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetWindowRect</slug>
        <title>BR_Win32_GetWindowRect</title>
        <functioncall prog_lang="cpp">bool BR_Win32_GetWindowRect(void* hwnd, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_Win32_GetWindowRect", void* hwnd, int &left, int &top, int &right, int &bottom)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer left, integer top, integer right, integer bottom = reaper.BR_Win32_GetWindowRect(identifier hwnd)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void hwnd, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = BR_Win32_GetWindowRect(hwnd, leftOut, topOut, rightOut, bottomOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API GetWindowRect().

        </description>
        <retvals>
            boolean retval - 
            integer left - 
            integer top - 
            integer right - 
            integer bottom - 
        </retvals>
        <parameters>
            identifier hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetWindowText</slug>
        <title>BR_Win32_GetWindowText</title>
        <functioncall prog_lang="cpp">int BR_Win32_GetWindowText(void* hwnd, char* textOut, int textOut_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_GetWindowText", void* hwnd, #text)</functioncall>
        <functioncall prog_lang="lua">integer retval, string text = reaper.BR_Win32_GetWindowText(identifier hwnd)</functioncall>
        <functioncall prog_lang="python">(Int retval, void hwnd, String textOut, Int textOut_sz) = BR_Win32_GetWindowText(hwnd, textOut, textOut_sz)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API GetWindowText().

        </description>
        <retvals>
            integer retval - 
            string text - 
        </retvals>
        <parameters>
            identifier hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_HIBYTE</slug>
        <title>BR_Win32_HIBYTE</title>
        <functioncall prog_lang="cpp">int BR_Win32_HIBYTE(int value)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_HIBYTE", int value)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_HIBYTE(integer value)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_HIBYTE(Int value)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API HIBYTE().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_HIWORD</slug>
        <title>BR_Win32_HIWORD</title>
        <functioncall prog_lang="cpp">int BR_Win32_HIWORD(int value)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_HIWORD", int value)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_HIWORD(integer value)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_HIWORD(Int value)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API HIWORD().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_HwndToString</slug>
        <title>BR_Win32_HwndToString</title>
        <functioncall prog_lang="cpp">void BR_Win32_HwndToString(void* hwnd, char* stringOut, int stringOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_Win32_HwndToString", void* hwnd, #string)</functioncall>
        <functioncall prog_lang="lua">string hwndstring = reaper.BR_Win32_HwndToString(identifier hwnd)</functioncall>
        <functioncall prog_lang="python">(void hwnd, String stringOut, Int stringOut_sz) = BR_Win32_HwndToString(hwnd, stringOut, stringOut_sz)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Convert HWND to string. To convert string back to HWND, see [BR\_Win32_StringToHwnd](#BR_Win32_StringToHwnd).

            A way to share a hwnd via extstate, which only allows strings, not binary objects.
        </description>
        <retvals>
            string hwndstring - 
        </retvals>
        <parameters>
            identifier hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_IsWindow</slug>
        <title>BR_Win32_IsWindow</title>
        <functioncall prog_lang="cpp">bool BR_Win32_IsWindow(void* hwnd)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_Win32_IsWindow", void* hwnd)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_Win32_IsWindow(identifier hwnd)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_Win32_IsWindow(void hwnd)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API IsWindow().

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            identifier hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_IsWindowVisible</slug>
        <title>BR_Win32_IsWindowVisible</title>
        <functioncall prog_lang="cpp">bool BR_Win32_IsWindowVisible(void* hwnd)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_Win32_IsWindowVisible", void* hwnd)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_Win32_IsWindowVisible(identifier hwnd)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_Win32_IsWindowVisible(void hwnd)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API IsWindowVisible().

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            identifier hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_LOBYTE</slug>
        <title>BR_Win32_LOBYTE</title>
        <functioncall prog_lang="cpp">int BR_Win32_LOBYTE(int value)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_LOBYTE", int value)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_LOBYTE(integer value)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_LOBYTE(Int value)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API LOBYTE().


        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_LOWORD</slug>
        <title>BR_Win32_LOWORD</title>
        <functioncall prog_lang="cpp">int BR_Win32_LOWORD(int value)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_LOWORD", int value)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_LOWORD(integer value)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_LOWORD(Int value)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API LOWORD().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_MAKELONG</slug>
        <title>BR_Win32_MAKELONG</title>
        <functioncall prog_lang="cpp">int BR_Win32_MAKELONG(int low, int high)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_MAKELONG", int low, int high)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_MAKELONG(integer low, integer high)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_MAKELONG(Int low, Int high)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API MAKELONG().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer low - 
            integer high - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_MAKELPARAM</slug>
        <title>BR_Win32_MAKELPARAM</title>
        <functioncall prog_lang="cpp">int BR_Win32_MAKELPARAM(int low, int high)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_MAKELPARAM", int low, int high)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_MAKELPARAM(integer low, integer high)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_MAKELPARAM(Int low, Int high)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API MAKELPARAM().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer low - 
            integer high - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_MAKELRESULT</slug>
        <title>BR_Win32_MAKELRESULT</title>
        <functioncall prog_lang="cpp">int BR_Win32_MAKELRESULT(int low, int high)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_MAKELRESULT", int low, int high)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_MAKELRESULT(integer low, integer high)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_MAKELRESULT(Int low, Int high)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API MAKELRESULT().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer low - 
            integer high - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_MAKEWORD</slug>
        <title>BR_Win32_MAKEWORD</title>
        <functioncall prog_lang="cpp">int BR_Win32_MAKEWORD(int low, int high)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_MAKEWORD", int low, int high)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_MAKEWORD(integer low, integer high)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_MAKEWORD(Int low, Int high)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API MAKEWORD().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer low - 
            integer high - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_MAKEWPARAM</slug>
        <title>BR_Win32_MAKEWPARAM</title>
        <functioncall prog_lang="cpp">int BR_Win32_MAKEWPARAM(int low, int high)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_MAKEWPARAM", int low, int high)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_MAKEWPARAM(integer low, integer high)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_MAKEWPARAM(Int low, Int high)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API MAKEWPARAM().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer low - 
            integer high - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Address/Datatype Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_MIDIEditor_GetActive</slug>
        <title>BR_Win32_MIDIEditor_GetActive</title>
        <functioncall prog_lang="cpp">void* BR_Win32_MIDIEditor_GetActive()</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_Win32_MIDIEditor_GetActive")</functioncall>
        <functioncall prog_lang="lua">identifier hwnd_active_midi_ed = reaper.BR_Win32_MIDIEditor_GetActive()</functioncall>
        <functioncall prog_lang="python">identifier hwnd_active_midi_ed = BR_Win32_MIDIEditor_GetActive()</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Alternative to [MIDIEditor\_GetActive](#MIDIEditor_GetActive). REAPER seems to have problems with extensions using HWND type for exported functions so all BR\_Win32 functions use void* instead of HWND type.

        </description>
        <retvals>
            identifier hwnd_active_midi_ed - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_ScreenToClient</slug>
        <title>BR_Win32_ScreenToClient</title>
        <functioncall prog_lang="cpp">void BR_Win32_ScreenToClient(void* hwnd, int xIn, int yIn, int* xOut, int* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_Win32_ScreenToClient", void* hwnd, int xIn, int yIn, int &x, int &y)</functioncall>
        <functioncall prog_lang="lua">integer x, integer y = reaper.BR_Win32_ScreenToClient(identifier hwnd, integer xIn, integer yIn)</functioncall>
        <functioncall prog_lang="python">(void hwnd, Int xIn, Int yIn, Int xOut, Int yOut) = BR_Win32_ScreenToClient(hwnd, xIn, yIn, xOut, yOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API ClientToScreen().

        </description>
        <retvals>
            integer x - 
            integer y - 
        </retvals>
        <parameters>
            identifier hwnd - 
            integer xIn - 
            integer yIn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_SendMessage</slug>
        <title>BR_Win32_SendMessage</title>
        <functioncall prog_lang="cpp">int BR_Win32_SendMessage(void* hwnd, int msg, int lParam, int wParam)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_SendMessage", void* hwnd, int msg, int lParam, int wParam)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_SendMessage(identifier hwnd, integer msg, integer lParam, integer wParam)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_SendMessage(void hwnd, Int msg, Int lParam, Int wParam)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API SendMessage().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            identifier hwnd - 
            integer msg - 
            integer lParam - 
            integer wParam - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_SetFocus</slug>
        <title>BR_Win32_SetFocus</title>
        <functioncall prog_lang="cpp">void* BR_Win32_SetFocus(void* hwnd)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_Win32_SetFocus", void* hwnd)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd_focus = reaper.BR_Win32_SetFocus(identifier hwnd)</functioncall>
        <functioncall prog_lang="python">identifier hwnd_focus = BR_Win32_SetFocus(void hwnd)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API SetFocus().

        </description>
        <retvals>
            identifier hwnd_focus - 
        </retvals>
        <parameters>
            identifier hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_SetForegroundWindow</slug>
        <title>BR_Win32_SetForegroundWindow</title>
        <functioncall prog_lang="cpp">int BR_Win32_SetForegroundWindow(void* hwnd)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_SetForegroundWindow", void* hwnd)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_SetForegroundWindow(identifier hwnd)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_SetForegroundWindow(void hwnd)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API SetForegroundWindow().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            identifier hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_SetWindowLong</slug>
        <title>BR_Win32_SetWindowLong</title>
        <functioncall prog_lang="cpp">int BR_Win32_SetWindowLong(void* hwnd, int index, int newLong)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_SetWindowLong", void* hwnd, int index, int newLong)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.BR_Win32_SetWindowLong(identifier hwnd, integer index, integer newLong)</functioncall>
        <functioncall prog_lang="python">Int retval = BR_Win32_SetWindowLong(void hwnd, Int index, Int newLong)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API SetWindowLong().

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            identifier hwnd - 
            integer index - 
            integer newLong - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_SetWindowPos</slug>
        <title>BR_Win32_SetWindowPos</title>
        <functioncall prog_lang="cpp">bool BR_Win32_SetWindowPos(void* hwnd, const char* hwndInsertAfter, int x, int y, int width, int height, int flags)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_Win32_SetWindowPos", void* hwnd, "hwndInsertAfter", int x, int y, int width, int height, int flags)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_Win32_SetWindowPos(identifier hwnd, string hwndInsertAfter, integer x, integer y, integer width, integer height, integer flags)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_Win32_SetWindowPos(void hwnd, String hwndInsertAfter, Int x, Int y, Int width, Int height, Int flags)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Equivalent to win32 API SetWindowPos().
            hwndInsertAfter may be a string: "HWND\_BOTTOM", "HWND\_NOTOPMOST", "HWND\_TOP", "HWND\_TOPMOST" or a string obtained with [BR\_Win32_HwndToString](#BR_Win32_HwndToString).

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            identifier hwnd - 
            string hwndInsertAfter - 
            integer x - 
            integer y - 
            integer width - 
            integer height - 
            integer flags - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_ShowWindow</slug>
        <title>BR_Win32_ShowWindow</title>
        <functioncall prog_lang="cpp">bool BR_Win32_ShowWindow(void* hwnd, int cmdShow)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_Win32_ShowWindow", void* hwnd, int cmdShow)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.BR_Win32_ShowWindow(identifier hwnd, integer cmdShow)</functioncall>
        <functioncall prog_lang="python">Boolean retval = BR_Win32_ShowWindow(void hwnd, Int cmdShow)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API ShowWindow().

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            identifier hwnd - 
            integer cmdShow - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_StringToHwnd</slug>
        <title>BR_Win32_StringToHwnd</title>
        <functioncall prog_lang="cpp">void* BR_Win32_StringToHwnd(const char* string)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_Win32_StringToHwnd", "string")</functioncall>
        <functioncall prog_lang="lua">identifier hwnd = reaper.BR_Win32_StringToHwnd(string string)</functioncall>
        <functioncall prog_lang="python">identifier hwnd = BR_Win32_StringToHwnd(String string)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            [BR] Convert string to HWND. To convert HWND back to string, see [BR\_Win32\_HwndToString](BR_Win32_HwndToString).
            
            A way to share a hwnd via extstate, which only allows strings, not binary objects.
        </description>
        <retvals>
            identifier hwnd - 
        </retvals>
        <parameters>
            string string - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_WindowFromPoint</slug>
        <title>BR_Win32_WindowFromPoint</title>
        <functioncall prog_lang="cpp">void* BR_Win32_WindowFromPoint(int x, int y)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_Win32_WindowFromPoint", int x, int y)</functioncall>
        <functioncall prog_lang="lua">identifier hwnd_point = reaper.BR_Win32_WindowFromPoint(integer x, integer y)</functioncall>
        <functioncall prog_lang="python">identifier hwnd_point = BR_Win32_WindowFromPoint(Int x, Int y)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            [BR] Equivalent to win32 API WindowFromPoint().
        </description>
        <retvals>
            identifier hwnd_point - the hwnd at x and y-coordinates
        </retvals>
        <parameters>
            integer x - x-coordinate of the point to look for possible hwnd
            integer y - y-coordinate of the point to look for possible hwnd
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_CreatePreview</slug>
        <title>CF_CreatePreview</title>
        <functioncall prog_lang="cpp">CF_Preview* CF_CreatePreview(PCM_source* source)</functioncall>
        <functioncall prog_lang="eel">CF_Preview extension_api("CF_CreatePreview", PCM_source source)</functioncall>
        <functioncall prog_lang="lua">CF_Preview retval = reaper.CF_CreatePreview(PCM_source source)</functioncall>
        <functioncall prog_lang="python">CF_Preview CF_CreatePreview(PCM_source source)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description prog_lang="*">
            Create a new preview object. Does not take ownership of the source (don't forget to destroy it unless it came from a take!). See CF_Preview_Play and the others CF_Preview_* functions.

            The preview object is automatically destroyed at the end of a defer cycle if at least one of these conditions are met:
            - playback finished
            - playback was not started using CF_Preview_Play
            - the output track no longer exists
        </description>
        <retvals>
            CF_Preview retval - 
        </retvals>
        <parameters>
            PCM_source src - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>sws, audio preview</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_EnumMediaSourceCues</slug>
        <title>CF_EnumMediaSourceCues</title>
        <functioncall prog_lang="cpp">int CF_EnumMediaSourceCues(PCM_source* src, int index, double* timeOut, double* endTimeOut, bool* isRegionOut, char* nameOut, int nameOut_sz, bool* isChapterOut)</functioncall>
        <functioncall prog_lang="eel">int extension_api("CF_EnumMediaSourceCues", PCM_source src, int index, &time, &endTime, bool &isRegion, #name, bool &isChapter)</functioncall>
        <functioncall prog_lang="lua">integer retval, number time, number endTime, boolean isRegion, string name, boolean isChapter = reaper.CF_EnumMediaSourceCues(PCM_source src, integer index)</functioncall>
        <functioncall prog_lang="python">(Int retval, PCM_source src, Int index, Float timeOut, Float endTimeOut, Boolean isRegionOut, String nameOut, Int nameOut_sz, Boolean isChapterOut) = CF_EnumMediaSourceCues(src, index, timeOut, endTimeOut, isRegionOut, nameOut, nameOut_sz, isChapterOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.0.0
        </requires>
        <description prog_lang="*">
            Enumerate the source's media cues. Returns the next index or 0 when finished.
        </description>
        <retvals>
            integer retval - 
            number time - 
            number endTime - 
            boolean isRegion - 
            string name - 
            boolean isChapter - 
        </retvals>
        <parameters>
            PCM_source src - 
            integer index - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.0.0 - added new retval isChapter(Lua and EEL) or isChapterOut(CPP and Python)
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_EnumSelectedFX</slug>
        <title>CF_EnumSelectedFX</title>
        <functioncall prog_lang="cpp">int CF_EnumSelectedFX(FxChain* hwnd, int index)</functioncall>
        <functioncall prog_lang="eel">int extension_api("CF_EnumSelectedFX", FxChain hwnd, int index)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.CF_EnumSelectedFX(FxChain hwnd, integer index)</functioncall>
        <functioncall prog_lang="python">Int retval = CF_EnumSelectedFX(FxChain hwnd, Int index)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            Return the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects.

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            FxChain hwnd - 
            integer index - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_EnumerateActions</slug>
        <title>CF_EnumerateActions</title>
        <functioncall prog_lang="cpp">int CF_EnumerateActions(int section, int index, char* nameOut, int nameOut_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("CF_EnumerateActions", int section, int index, #name)</functioncall>
        <functioncall prog_lang="lua">integer retval, string name = reaper.CF_EnumerateActions(integer section, integer index)</functioncall>
        <functioncall prog_lang="python">(Int retval, Int section, Int index, String nameOut, Int nameOut_sz) = CF_EnumerateActions(section, index, nameOut, nameOut_sz)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description prog_lang="*">
            Deprecated, see kbd_enumerateActions (v6.71+). 
            
            Wrapper for the unexposed kbd_enumerateActions API function.
            Main=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063
        </description>
        <deprecated since_when="SWS 2.13.2.0" alternative="kbd_enumerateActions"/>
        <retvals>
            integer retval - 
            string name - 
        </retvals>
        <parameters>
            integer section - 
            integer index - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_ExportMediaSource</slug>
        <title>CF_ExportMediaSource</title>
        <functioncall prog_lang="cpp">bool CF_ExportMediaSource(PCM_source* src, const char* fn)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_ExportMediaSource", PCM_source src, "fn")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CF_ExportMediaSource(PCM_source src, string fn)</functioncall>
        <functioncall prog_lang="python">Boolean retval = CF_ExportMediaSource(PCM_source src, String fn)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            Export the source to the given file (MIDI only).

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            PCM_source src - 
            string fn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetCommandText</slug>
        <title>CF_GetCommandText</title>
        <functioncall prog_lang="cpp">const char* CF_GetCommandText(int section, int command)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_GetCommandText", #retval, int section, int command)</functioncall>
        <functioncall prog_lang="lua">string str = reaper.CF_GetCommandText(integer section, integer command)</functioncall>
        <functioncall prog_lang="python">String retval = CF_GetCommandText(Int section, Int command)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Deprecated, see kbd_getTextFromCmd (v6.71+). 
            
            Wrapper for the unexposed kbd_getTextFromCmd API function. 
            
            See CF_EnumerateActions for common section IDs.
        </description>
        <deprecated since_when="SWS 2.13.2.0" alternative="kbd_getTextFromCmd"/>
        <retvals>
            string str - 
        </retvals>
        <parameters>
            integer section - 
            integer command - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Actions
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetFocusedFXChain</slug>
        <title>CF_GetFocusedFXChain</title>
        <functioncall prog_lang="cpp">FxChain* CF_GetFocusedFXChain()</functioncall>
        <functioncall prog_lang="eel">FxChain extension_api("CF_GetFocusedFXChain")</functioncall>
        <functioncall prog_lang="lua">FxChain hwnd = reaper.CF_GetFocusedFXChain()</functioncall>
        <functioncall prog_lang="python">FXChain retval = CF_GetFocusedFXChain()</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            Return a handle to the currently focused FX chain window.

        </description>
        <retvals>
            FxChain hwnd - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetMediaSourceBitDepth</slug>
        <title>CF_GetMediaSourceBitDepth</title>
        <functioncall prog_lang="cpp">int CF_GetMediaSourceBitDepth(PCM_source* src)</functioncall>
        <functioncall prog_lang="eel">int extension_api("CF_GetMediaSourceBitDepth", PCM_source src)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.CF_GetMediaSourceBitDepth(PCM_source src)</functioncall>
        <functioncall prog_lang="python">Int retval = CF_GetMediaSourceBitDepth(PCM_source src)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            Returns the bit depth if available (0 otherwise).

        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            PCM_source src - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetMediaSourceBitRate</slug>
        <title>CF_GetMediaSourceBitRate</title>
        <functioncall prog_lang="cpp">double CF_GetMediaSourceBitRate(PCM_source* src)</functioncall>
        <functioncall prog_lang="eel">double extension_api("CF_GetMediaSourceBitRate", PCM_source src)</functioncall>
        <functioncall prog_lang="lua">number bitrate = reaper.CF_GetMediaSourceBitRate(PCM_source src)</functioncall>
        <functioncall prog_lang="python">Float retval = CF_GetMediaSourceBitRate(PCM_source src)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.0.0
        </requires>
        <description prog_lang="*">
            Returns the bit rate for WAVE (wav, aif) and streaming/variable formats (mp3, ogg, opus). 
            
            REAPER v6.19 or later is required for non-WAVE formats.
        </description>
        <retvals>
            number bitrate - the bitrate of the pcm-source
        </retvals>
        <parameters>
            PCM_source src - the PCM-source, whose bitrate you want to query
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetMediaSourceMetadata</slug>
        <title>CF_GetMediaSourceMetadata</title>
        <functioncall prog_lang="cpp">bool CF_GetMediaSourceMetadata(PCM_source* src, const char* name, char* out, int out_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_GetMediaSourceMetadata", PCM_source src, "name", #out)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string out = reaper.CF_GetMediaSourceMetadata(PCM_source src, string name, string out)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, PCM_source src, String name, String out, Int out_sz) = CF_GetMediaSourceMetadata(src, name, out, out_sz)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).
        </description>
        <retvals>
            boolean retval - 
            string out - 
        </retvals>
        <parameters>
            PCM_source src - 
            string name - 
            string out - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetMediaSourceOnline</slug>
        <title>CF_GetMediaSourceOnline</title>
        <functioncall prog_lang="cpp">bool CF_GetMediaSourceOnline(PCM_source* src)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_GetMediaSourceOnline", PCM_source src)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CF_GetMediaSourceOnline(PCM_source src)</functioncall>
        <functioncall prog_lang="python">Boolean retval = CF_GetMediaSourceOnline(PCM_source src)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            Returns the online/offline status of the given source.

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            PCM_source src - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetMediaSourceRPP</slug>
        <title>CF_GetMediaSourceRPP</title>
        <functioncall prog_lang="cpp">bool CF_GetMediaSourceRPP(PCM_source* src, char* fnOut, int fnOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_GetMediaSourceRPP", PCM_source src, #fn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string fn = reaper.CF_GetMediaSourceRPP(PCM_source src)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, PCM_source src, String fnOut, Int fnOut_sz) = CF_GetMediaSourceRPP(src, fnOut, fnOut_sz)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.12.1.1
        </requires>
        <description prog_lang="*">
            Get the project associated with this source (BWF, subproject...).

        </description>
        <retvals>
            boolean retval - 
            string fn - 
        </retvals>
        <parameters>
            PCM_source src - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetSWSVersion</slug>
        <title>CF_GetSWSVersion</title>
        <functioncall prog_lang="cpp">void CF_GetSWSVersion(char* versionOut, int versionOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("CF_GetSWSVersion", #version)</functioncall>
        <functioncall prog_lang="lua">string version = reaper.CF_GetSWSVersion()</functioncall>
        <functioncall prog_lang="python">(String versionOut, Int versionOut_sz) = CF_GetSWSVersion(versionOut, versionOut_sz)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.12.0
        </requires>
        <description prog_lang="*">
            Return the current SWS version number.
        </description>
        <retvals>
            string version - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetTakeFXChain</slug>
        <title>CF_GetTakeFXChain</title>
        <functioncall prog_lang="cpp">FxChain* CF_GetTakeFXChain(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">FxChain extension_api("CF_GetTakeFXChain", MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">FxChain hwnd = reaper.CF_GetTakeFXChain(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">FXChain retval = CF_GetTakeFXChain(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            Return a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes.
        </description>
        <retvals>
            FxChain hwnd - the hwnd-window-handler of the FX-chain of the item
        </retvals>
        <parameters>
            MediaItem_Take take - the take, whose FXChain-window-handler you want to get
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetTrackFXChain</slug>
        <title>CF_GetTrackFXChain</title>
        <functioncall prog_lang="cpp">FxChain* CF_GetTrackFXChain(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">FxChain extension_api("CF_GetTrackFXChain", MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">FxChain hwnd = reaper.CF_GetTrackFXChain(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">FXChain retval = CF_GetTrackFXChain(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            Return a handle to the given track FX chain window.
        </description>
        <retvals>
            FxChain hwnd - the hwnd-window-handler of the FX-chain of the track
        </retvals>
        <parameters>
            MediaTrack track - the track, whose FXChain-window-handler you want to get
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetTrackFXChainEx</slug>
        <title>CF_GetTrackFXChainEx</title>
        <functioncall prog_lang="cpp">FxChain* CF_GetTrackFXChainEx(ReaProject* project, MediaTrack* track, bool wantInputChain)</functioncall>
        <functioncall prog_lang="eel">FxChain extension_api("CF_GetTrackFXChainEx", ReaProject project, MediaTrack track, bool wantInputChain)</functioncall>
        <functioncall prog_lang="lua">FxChain fxchain = reaper.CF_GetTrackFXChainEx(ReaProject project, MediaTrack track, boolean wantInputChain)</functioncall>
        <functioncall prog_lang="python">FXChain retval = CF_GetTrackFXChainEx(ReaProject project, MediaTrack track, Boolean wantInputChain)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.0.0
        </requires>
        <description prog_lang="*">
            Return a handle to the given track FX chain window. Set wantInputChain to get the track's input/monitoring FX chain.
        </description>
        <retvals>
            FxChain fxchain - the fxchain you requested
        </retvals>
        <parameters>
            ReaProject project - the project, whose fxchain you want to get
            MediaTrack track - the track, whose fxchain you want to get
            boolean wantInputChain - true, get the fxchain of the monitoring fx; false, get the fxchain of a track
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_LocateInExplorer</slug>
        <title>CF_LocateInExplorer</title>
        <functioncall prog_lang="cpp">bool CF_LocateInExplorer(const char* file)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_LocateInExplorer", "file")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CF_LocateInExplorer(string file)</functioncall>
        <functioncall prog_lang="python">Boolean retval = CF_LocateInExplorer(String file)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description>
            Select the given file in explorer/finder.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            string file - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_PCM_Source_SetSectionInfo</slug>
        <title>CF_PCM_Source_SetSectionInfo</title>
        <functioncall prog_lang="cpp">bool CF_PCM_Source_SetSectionInfo(PCM_source* section, PCM_source* source, double offset, double length, bool reverse)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_PCM_Source_SetSectionInfo", PCM_source section, PCM_source source, offset, length, bool reverse)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CF_PCM_Source_SetSectionInfo(PCM_source section, PCM_source source, number offset, number length, boolean reverse)</functioncall>
        <functioncall prog_lang="python">Boolean CF_PCM_Source_SetSectionInfo(PCM_source section, PCM_source source, Float offset, Float length, Boolean reverse)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description>
            Give a section source created using PCM_Source_CreateFromType("SECTION"). Offset and length are ignored if 0. Negative length to subtract from the total length of the source.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            PCM_source section - 
            PCM_source source - 
            number offset - 
            number length - 
            boolean reverse - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_Preview_GetPeak</slug>
        <title>CF_Preview_GetPeak</title>
        <functioncall prog_lang="cpp">bool CF_Preview_GetPeak(CF_Preview* preview, int channel, double* peakvolOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_Preview_GetPeak", CF_Preview preview, int channel, &peakvol)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number peakvol = reaper.CF_Preview_GetPeak(CF_Preview preview, integer channel)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, CF_Preview preview, Int channel, Float peakvolOut) = CF_Preview_GetPeak(preview, channel, peakvolOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description>
            Read peak volume for channel 0 or 1. Only available when outputting to a hardware output (not through a track).
        </description>
        <retvals>
            boolean retval - 
            number peakvol - 
        </retvals>
        <parameters>
            CF_Preview preview - 
            integer channel - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_Preview_GetValue</slug>
        <title>CF_Preview_GetValue</title>
        <functioncall prog_lang="cpp">bool CF_Preview_GetValue(CF_Preview* preview, const char* name, double* valueOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_Preview_GetValue", CF_Preview preview, "name", &value)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number value = reaper.CF_Preview_GetValue(CF_Preview preview, string name)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, CF_Preview preview, String name, Float valueOut) = CF_Preview_GetValue(preview, name, valueOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description>
            Supported attributes:

            B_LOOP seek to the beginning when reaching the end of the source
            B_PPITCH preserve pitch when changing playback rate
            D_FADEINLEN lenght in seconds of playback fade in
            D_FADEOUTLEN lenght in seconds of playback fade out
            D_LENGTH (read only) length of the source * playback rate
            D_MEASUREALIGN >0 = wait until the next bar before starting playback (note: this causes playback to silently continue when project is paused and previewing through a track)
            D_PAN playback pan
            D_PITCH pitch adjustment in semitones
            D_PLAYRATE playback rate
            D_POSITION current playback position
            D_VOLUME playback volume
            I_OUTCHAN first hardware output channel (&1024=mono, reads -1 when playing through a track, see CF_Preview_SetOutputTrack)
            I_PITCHMODE highest 16 bits=pitch shift mode (see EnumPitchShiftModes), lower 16 bits=pitch shift submode (see EnumPitchShiftSubModes)
        </description>
        <retvals>
            boolean retval - 
            number peakvol - 
        </retvals>
        <parameters>
            CF_Preview preview - 
            integer channel - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_Preview_Play</slug>
        <title>CF_Preview_Play</title>
        <functioncall prog_lang="cpp">bool CF_Preview_Play(CF_Preview preview)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_Preview_Play", CF_Preview preview)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CF_Preview_Play(CF_Preview preview)</functioncall>
        <functioncall prog_lang="python">Boolean CF_Preview_Play(CF_Preview preview)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description>
           Start playback of the configured preview object.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            CF_Preview preview - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_Preview_SetOutputTrack</slug>
        <title>CF_Preview_SetOutputTrack</title>
        <functioncall prog_lang="cpp">bool CF_Preview_SetOutputTrack(CF_Preview* preview, ReaProject* project, MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_Preview_SetOutputTrack", CF_Preview preview, ReaProject project, MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CF_Preview_SetOutputTrack(CF_Preview preview, ReaProject project, MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Boolean CF_Preview_SetOutputTrack(CF_Preview preview, ReaProject project, MediaTrack track)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description>
           
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            CF_Preview preview - 
            ReaProject project - 
            MediaTrack track - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_Preview_SetValue</slug>
        <title>CF_Preview_SetValue</title>
        <functioncall prog_lang="cpp">bool CF_Preview_SetValue(CF_Preview* preview, const char* name, double newValue)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_Preview_SetValue", CF_Preview preview, "name", newValue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CF_Preview_SetValue(CF_Preview preview, string name, number newValue)</functioncall>
        <functioncall prog_lang="python">Boolean CF_Preview_SetValue(CF_Preview preview, String name, Float newValue)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description>
           See CF_Preview_GetValue.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            CF_Preview preview - 
            string name - 
            number newValue - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>   

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_Preview_Stop</slug>
        <title>CF_Preview_Stop</title>
        <functioncall prog_lang="cpp">bool CF_Preview_Stop(CF_Preview* preview)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_Preview_Stop", CF_Preview preview)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CF_Preview_Stop(CF_Preview preview)</functioncall>
        <functioncall prog_lang="python">Boolean CF_Preview_Stop(CF_Preview preview)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description>
           Stop and destroy a preview object.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            CF_Preview preview - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>   

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_Preview_StopAll</slug>
        <title>CF_Preview_StopAll</title>
        <functioncall prog_lang="cpp">void CF_Preview_StopAll()</functioncall>
        <functioncall prog_lang="eel">extension_api("CF_Preview_StopAll")</functioncall>
        <functioncall prog_lang="lua">reaper.CF_Preview_StopAll()</functioncall>
        <functioncall prog_lang="python">CF_Preview_StopAll()</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.13.2.0
        </requires>
        <description>
           Stop and destroy all currently active preview objects.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
            SWS 2.13.2.0 - added to SWS
        </changelog>
    </US_DocBloc>  
  
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_SelectTrackFX</slug>
        <title>CF_SelectTrackFX</title>
        <functioncall prog_lang="cpp">bool CF_SelectTrackFX(MediaTrack* track, int index)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_SelectTrackFX", MediaTrack track, int index)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CF_SelectTrackFX(MediaTrack track, integer index)</functioncall>
        <functioncall prog_lang="python">Boolean retval = CF_SelectTrackFX(MediaTrack track, Int index)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.12.0
        </requires>
        <description prog_lang="*">
            Set which track effect is active in the track's FX chain. The FX chain window does not have to be open.

        </description>
        <retvals>
            boolean retval - true, setting was successful; false, setting was unsuccessful
        </retvals>
        <parameters>
            MediaTrack track - the track, whose active trackfx you want to set
            integer index - the index of the fx, which you want to activate
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Track FX
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_SetMediaSourceOnline</slug>
        <title>CF_SetMediaSourceOnline</title>
        <functioncall prog_lang="cpp">void CF_SetMediaSourceOnline(PCM_source* src, bool set)</functioncall>
        <functioncall prog_lang="eel">extension_api("CF_SetMediaSourceOnline", PCM_source src, bool set)</functioncall>
        <functioncall prog_lang="lua">reaper.CF_SetMediaSourceOnline(PCM_source src, boolean set)</functioncall>
        <functioncall prog_lang="python">CF_SetMediaSourceOnline(PCM_source src, Boolean set)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            Set the online/offline status of the given source (closes files when set=false).

        </description>
        <parameters>
            PCM_source src - 
            boolean set - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Audio Management
            Source Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_ShellExecute</slug>
        <title>CF_ShellExecute</title>
        <functioncall prog_lang="cpp">bool CF_ShellExecute(const char* file)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_ShellExecute", "file")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CF_ShellExecute(string file)</functioncall>
        <functioncall prog_lang="python">Boolean retval = CF_ShellExecute(String file)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Open the given file or URL in the default application. See also [CF\_LocateInExplorer](#CF_LocateInExplorer).

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            string file - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Api-Helper-Functions
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_AnalyzeMediaItemPeakAndRMS</slug>
        <title>NF_AnalyzeMediaItemPeakAndRMS</title>
        <functioncall prog_lang="cpp">bool NF_AnalyzeMediaItemPeakAndRMS(MediaItem* item, double windowSize, void* reaper.array_peaks, void* reaper.array_peakpositions, void* reaper.array_RMSs, void* reaper.array_RMSpositions)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_AnalyzeMediaItemPeakAndRMS", MediaItem item, windowSize, void* reaper.array_peaks, void* reaper.array_peakpositions, void* reaper.array_RMSs, void* reaper.array_RMSpositions)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.NF_AnalyzeMediaItemPeakAndRMS(MediaItem item, number windowSize, identifier reaper.array_peaks, identifier reaper.array_peakpositions, identifier reaper.array_RMSs, identifier reaper.array_RMSpositions)</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_AnalyzeMediaItemPeakAndRMS(MediaItem item, Float windowSize, void reaper.array_peaks, void reaper.array_peakpositions, void reaper.array_RMSs, void reaper.array_RMSpositions)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            This function combines all other NF\_Peak/RMS functions in a single one and additionally returns peak RMS positions.  

            [Lua example code here](https://forum.cockos.com/showpost.php?p=2050961&postcount=6). 

            Note: It's recommended to use this function with ReaScript/Lua as it provides reaper.array objects. 
            If using this function with other scripting languages, you must provide arrays in the [reaper.array format](https://forum.cockos.com/showpost.php?p=2039829&postcount=2).

        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem item - 
            number windowSize - 
            identifier reaper.array_peaks - 
            identifier reaper.array_peakpositions - 
            identifier reaper.array_RMSs - 
            identifier reaper.array_RMSpositions - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Normalizing/Loudness
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetMediaItemMaxPeakAndMaxPeakPos</slug>
        <title>NF_GetMediaItemMaxPeakAndMaxPeakPos</title>
        <functioncall prog_lang="cpp">double NF_GetMediaItemMaxPeakAndMaxPeakPos(MediaItem* item, double* maxPeakPosOut)</functioncall>
        <functioncall prog_lang="eel">double extension_api("NF_GetMediaItemMaxPeakAndMaxPeakPos", MediaItem item, &maxPeakPos)</functioncall>
        <functioncall prog_lang="lua">number retval, number maxPeakPos = reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos(MediaItem item)</functioncall>
        <functioncall prog_lang="python">(Float retval, MediaItem item, Float maxPeakPosOut) = NF_GetMediaItemMaxPeakAndMaxPeakPos(item, maxPeakPosOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [NF\_GetMediaItemMaxPeak](#NF_GetMediaItemMaxPeak), additionally returns maxPeakPos (relative to item position).

        </description>
        <retvals>
            number retval - 
            number maxPeakPos - 
        </retvals>
        <parameters>
            MediaItem item - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Mediaitem Management
            Normalizing/Loudness
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetSWSMarkerRegionSub</slug>
        <title>NF_GetSWSMarkerRegionSub</title>
        <functioncall prog_lang="cpp">const char* NF_GetSWSMarkerRegionSub(int markerRegionIdx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_GetSWSMarkerRegionSub", #retval, int markerRegionIdx)</functioncall>
        <functioncall prog_lang="lua">string subtitle = reaper.NF_GetSWSMarkerRegionSub(integer markerRegionIdx)</functioncall>
        <functioncall prog_lang="python">String retval = NF_GetSWSMarkerRegionSub(Int markerRegionIdx)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to [EnumProjectMarkers](#EnumProjectMarkers) (not displayed marker/region index).  
            Returns empty string if marker/region with specified index not found or marker/region subtitle not set.  

            [Lua code example can be found here](https://github.com/ReaTeam/ReaScripts-Templates/blob/master/Markers%20and%20Regions/NF_Get%20SWS%20markers%20and%20regions%20notes.lua)
        </description>
        <retvals>
            string subtitle - 
        </retvals>
        <parameters>
            integer markerRegionIdx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetSWSTrackNotes</slug>
        <title>NF_GetSWSTrackNotes</title>
        <functioncall prog_lang="cpp">const char* NF_GetSWSTrackNotes(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_GetSWSTrackNotes", #retval, MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">string tracknotes = reaper.NF_GetSWSTrackNotes(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">String retval = NF_GetSWSTrackNotes(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">
            Get the SWS tracknotes.
        </description>
        <retvals>
            string tracknotes - the stored notes
        </retvals>
        <parameters>
            MediaTrack track - the track, whose SWS-tracknotes you want to get
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetSWS_RMSoptions</slug>
        <title>NF_GetSWS_RMSoptions</title>
        <functioncall prog_lang="cpp">void NF_GetSWS_RMSoptions(double* targetOut, double* windowSizeOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("NF_GetSWS_RMSoptions", &target, &windowSize)</functioncall>
        <functioncall prog_lang="lua">number target, number windowSize = reaper.NF_GetSWS_RMSoptions()</functioncall>
        <functioncall prog_lang="python">(Float targetOut, Float windowSizeOut) = NF_GetSWS_RMSoptions(targetOut, windowSizeOut)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.12.0
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Get SWS analysis/normalize options. See [NF\_SetSWS\_RMSoptions](#NF_SetSWS_RMSoptions).
        </description>
        <retvals>
            number target - 
            number windowSize - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Configuration Settings
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_SetSWSMarkerRegionSub</slug>
        <title>NF_SetSWSMarkerRegionSub</title>
        <functioncall prog_lang="cpp">bool NF_SetSWSMarkerRegionSub(const char* markerRegionSub, int markerRegionIdx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_SetSWSMarkerRegionSub", "markerRegionSub", int markerRegionIdx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.NF_SetSWSMarkerRegionSub(string markerRegionSub, integer markerRegionIdx)</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_SetSWSMarkerRegionSub(String markerRegionSub, Int markerRegionIdx)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to [EnumProjectMarkers](#EnumProjectMarkers)(not displayed marker/region index).  
            Returns true if subtitle is set successfully (i.e. marker/region with specified index is present in project). 

            [Lua code example can be found here](https://github.com/ReaTeam/ReaScripts-Templates/blob/master/Markers%20and%20Regions/NF_Get%20SWS%20markers%20and%20regions%20notes.lua")
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            string markerRegionSub - 
            integer markerRegionIdx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Marker Management
            Project Markers
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_SetSWSTrackNotes</slug>
        <title>NF_SetSWSTrackNotes</title>
        <functioncall prog_lang="cpp">void NF_SetSWSTrackNotes(MediaTrack* track, const char* str)</functioncall>
        <functioncall prog_lang="eel">extension_api("NF_SetSWSTrackNotes", MediaTrack track, "str")</functioncall>
        <functioncall prog_lang="lua">reaper.NF_SetSWSTrackNotes(MediaTrack track, string str)</functioncall>
        <functioncall prog_lang="python">NF_SetSWSTrackNotes(MediaTrack track, String str)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description prog_lang="*">

        </description>
        <parameters>
            MediaTrack track - 
            string str - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Track Management
            Track States
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_SetSWS_RMSoptions</slug>
        <title>NF_SetSWS_RMSoptions</title>
        <functioncall prog_lang="cpp">bool NF_SetSWS_RMSoptions(double targetLevel, double windowSize)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_SetSWS_RMSoptions", targetLevel, windowSize)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.NF_SetSWS_RMSoptions(number targetLevel, number windowSize)</functioncall>
        <functioncall prog_lang="python">Boolean retval = NF_SetSWS_RMSoptions(Float targetLevel, Float windowSize)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.12.0
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Set SWS analysis/normalize options (same as running action 'SWS: Set RMS analysis/normalize options'). targetLevel: target RMS normalize level (dB), windowSize: window size for peak RMS (sec.)

            See [NF\_GetSWS\_RMSoptions](#NF_GetSWS_RMSoptions).
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            number targetLevel - 
            number windowSize - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Configuration Settings
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_TakeFX_GetModuleName</slug>
        <title>NF_TakeFX_GetModuleName</title>
        <functioncall prog_lang="cpp">bool NF_TakeFX_GetModuleName(MediaItem* item, int fx, char* nameOut, int nameOutSz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_TakeFX_GetModuleName", MediaItem item, int fx, # name, int name)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string name = reaper.NF_TakeFX_GetModuleName(MediaItem item, integer fx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, Int fx, String nameOut, Int nameOutSz) = NF_TakeFX_GetModuleName(item, fx, nameOut, nameOutSz)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.11.0
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Deprecated.
            Retrieves the name of the module of a takefx from a MediaItem.

            See [BR\_TrackFX\_GetFXModuleName](#BR_TrackFX_GetFXModuleName). fx: counted consecutively across all takes (zero-based).
        </description>
        <deprecated since_when="SWS 2.11.0" alternative="BR_TrackFX_GetFXModuleName"/>
        <retvals>
            boolean retval - true, modulename could be retrieved; false, modulename couldn't be retrieved(e.g. no such fx)
            string name - the name of the module
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose modulename of an effect you want to receive
            integer fx - the index of the fx(with 0 for the first), whose modulename you want to receive
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            FX Management
            Take FX
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_UpdateSWSMarkerRegionSubWindow</slug>
        <title>NF_UpdateSWSMarkerRegionSubWindow</title>
        <functioncall prog_lang="cpp">void NF_UpdateSWSMarkerRegionSubWindow()</functioncall>
        <functioncall prog_lang="eel">extension_api("NF_UpdateSWSMarkerRegionSubWindow")</functioncall>
        <functioncall prog_lang="lua">reaper.NF_UpdateSWSMarkerRegionSubWindow()</functioncall>
        <functioncall prog_lang="python">NF_UpdateSWSMarkerRegionSubWindow()</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.10.0.1
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Redraw the Notes window (call if you've changed a subtitle via [NF\_SetSWSMarkerRegionSub](#NF_SetSWSMarkerRegionSub) which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Window Management
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
 
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_Win32_GetSystemMetrics</slug>
        <title>NF_Win32_GetSystemMetrics</title>
        <functioncall prog_lang="cpp">int NF_Win32_GetSystemMetrics(int nIndex)</functioncall>
        <functioncall prog_lang="eel">int extension_api("NF_Win32_GetSystemMetrics", int nIndex)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.NF_Win32_GetSystemMetrics(integer nIndex)</functioncall>
        <functioncall prog_lang="python">Int retval = NF_Win32_GetSystemMetrics(Int nIndex)</functioncall>
        <requires>
            Reaper=5.965
            SWS=2.12.0
        </requires>
        <description>
            Equivalent to win32 API GetSystemMetrics(). 
            
            Note: Only SM_C[XY]SCREEN, SM_C[XY][HV]SCROLL and SM_CYMENU are currently supported on macOS and Linux as of REAPER 6.68. 
            
            Check the SWELL source code for up-to-date support information (swell-wnd.mm, swell-wnd-generic.cpp).
            
            see: https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getsystemmetrics.
        </description>
        <retvals>
            integer retval - the returned value
        </retvals>
        <parameters>
            integer nIndex - the value to query, i.e.:
                           - 5, width of window-borders
                           - 7, thickness of a frame around the perimeter of a window with caption but not resizeable
                           - 10, width of "thumb box" in a horizontal scroll bar
                           - 11, default icon width
                           - 13, width of the cursor in pixels
                           - 16, x-width of fullscreen
                           - 21, width of arrow of the horizontal-scrollbar
                           - 36, width of the rectangle, within double-clicks are detected
                           - 43, number of mousebuttons or zero, if no mouse is installed
                           - 45, width of a 3d-border
                           - 56, flags how system arranges minimized windows
                           - 67, (0, normal boot; 1, Fail-safe boot; 2, Fail-safe with network boot)
                           - 68, the width of the area, that detects a mouse-drag
                           - 80, number of display monitors
                           - 83, width of left and right edges of focus rectangle drawn by DrawFocusRect-Win32-function
                           - 0x2003, slate state of laptop; 0, slate mode; non-zero, otherwise
                           - etc.
        </parameters>
        <linked_to desc="see also:">
            www:https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getsystemmetrics
                more information about, which metrics you can get with this function
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            User Interface
            Misc
        </chapter_context>
        <tags>sws</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_abs</slug>
        <title>abs</title>
        <functioncall prog_lang="eel">float abs_value = abs(float value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the absolute value of the parameter.
        </description>
        <parameters>
            float abs_value - the absolute-value of value
        </parameters>
        <parameters>
            float value - the value, that you want to convert to absolute
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_acos</slug>
        <title>acos</title>
        <functioncall prog_lang="eel">float arc_cos = acos(float value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="eel">
            Returns the arc cosine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.
        </description>
        <retvals>
            float arc_cos - the arc-cosine-value in radians
        </retvals>
        <parameters>
            float value - the value, that you want to convert into arc-cosine
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_asin</slug>
        <title>asin</title>
        <functioncall prog_lang="eel">float arc_sine = asin(float value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the arc sine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.
        </description>
        <retvals>
            float arc_sine - the arc-sine-value in radians of value
        </retvals>
        <parameters>
            float value - the value, that you want to convert to arc-sine
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_atan</slug>
        <title>atan</title>
        <functioncall prog_lang="eel">float arc_tan = atan(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the arc tangent of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.
        </description>
        <retvals>
            float arc_tan - the arc-tan-value in radians of value
        </retvals>
        <parameters>
            float value - the value, that you want to convert to arc-tan
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_atan2</slug>
        <title>atan2</title>
        <functioncall prog_lang="eel">atan2(numerator,denominator)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the arc tangent of the numerator divided by the denominator, allowing the denominator to be 0, and using their signs to produce a more meaningful result.
        </description>
        <retvals>
            float arc_tangent - the arc-tangent 
        </retvals>
        <parameters>
            float numerator - the numerator to calculate the arc-tangent
            float denominator - the denominator to calculate the arc-tangent
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_atexit</slug>
        <title>atexit</title>
        <functioncall prog_lang="eel">float retval = atexit(string code)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.
        </description>
        <retval>
            float retval - 0, nothing to run; 1, code was run
        </retval>
        <parameters>
            string code - the code to be run. You can also add a regular functioncall into this string, like "main()", if there's a main-function in the script
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, exit code</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_ceil</slug>
        <title>ceil</title>
        <functioncall prog_lang="eel">float round_val = ceil(float value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the value rounded to the next highest integer (ceil(3.1)==4, ceil(-3.9)==-3).
        </description>
        <retvals>
            float round_val - the rounded value to the next highest integer
        </retvals>
        <parameters>
            float value - the value to round
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_convolve_c</slug>
        <title>convolve_c</title>
        <functioncall prog_lang="eel">float convolved_val = convolve_c(float dest, float src, float size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Multiplies each of size complex pairs in dest by the complex pairs in src. Often used for convolution.
        </description>
        <retvals>
            float convolved_val - 
        </retvals>
        <parameters>
            float dest - 
            float src - 
            float size -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_cos</slug>
        <title>cos</title>
        <functioncall prog_lang="eel">float cos = cos(float angle)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="eel">
            Returns the cosine of the angle specified (specified in radians).
        </description>
        <retvals>
            float cos - the cosine value in radians
        </retvals>
        <parameters>
            float angle - the angle to convert into cosine
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_defer</slug>
        <title>defer</title>
        <functioncall prog_lang="eel">defer(string "code")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().
            Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.

            Each function called by defer can only be deferred once per defer-cycle(unlike in Lua, where you can have one function deferred multiple times).

            Unlike "normal" loops, defer allows looped code to run in the background without blocking Reaper's user interface.
            That way, scripts, who need longer time to run, can be made possible.

            Example:
            the following example allows adding a to variable A with each defer-cycle.
            <pre><code>
            function main()(
              A=A+1;
              defer("main()");
            );

            main();
            </code></pre>
        </description>
        <parameters>
            string code - the code to be run. You can also add a regular functioncall into this string, like "main()", if there's a main-function in the script
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, defer, background script</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_eval</slug>
        <title>eval</title>
        <functioncall prog_lang="eel">eval(code)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="eel">
            Executes code passed in. Code can use functions, but functions created in code can't be used elsewhere.
            
            Allows loading code from files and executing it
        </description>
        <parameters>
            string code - the code to be executed
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, eval code, load code, files</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_exp</slug>
        <title>exp</title>
        <functioncall prog_lang="eel">float e_pow = exp(float exponent)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="eel">
            Returns the number e ($e, approximately 2.718) raised to the parameter-th power. This function is significantly faster than pow() or the ^ operator.
        </description>
        <retvals>
            float e_pow - the number e raised to parameter-th power
        </retvals>
        <parameters>
            float exponent - the exponent to use for raise
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_extension_api</slug>
        <title>extension_api</title>
        <functioncall prog_lang="eel">various retval = extension_api(string function_name[,...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Used to call functions exported by extension plugins. The first parameter must be the exported function name, then its own parameters (as if the function was called directly).
            
            Will return the returnvalue of the function called.
        </description>
        <retvals>
            various retval - the return value of functionname, can be of numerous datatypes, refer to the docs of functionname
        </retvals>
        <parameters>
            string functionname - the name of the function to run
            various parameters... - the parameters used by functionname
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, call, extension, function</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fclose</slug>
        <title>fclose</title>
        <functioncall prog_lang="eel">integer retval = fclose(filehandler fp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Closes a file previously opened with fopen().
        </description>
        <retvals>
            integer retval - 0, closing was successful; -1, closing was unsuccessful
        </retvals>
        <parameters>
            filehandler fp - the handler of the opened file
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            File Management
        </chapter_context>
        <tags>eel, file management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_feof</slug>
        <title>feof</title>
        <functioncall prog_lang="eel">integer retval = feof(filehandler fp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns nonzero if the file fp is at the end of file.
        </description>
        <retvals>
            integer rteval - 0, file is not at the end of a file; nonzero, it is at the end of the file
        </retvals>
        <parameters>
            filehandler fp - the handler of the opened file
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            File Management
        </chapter_context>
        <tags>eel, file management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fflush</slug>
        <title>fflush</title>
        <functioncall prog_lang="eel">integer retval = fflush(filehandler fp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            If file fp is open for writing, flushes out any buffered data to disk.
        </description>
        <retvals>
            integer retval - -1, couldn't flush file; 0, flushing was successful
        </retvals>
        <parameters>
            filehandler fp - the handler of the file
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            File Management
        </chapter_context>
        <tags>eel, file management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fft</slug>
        <title>fft</title>
        <functioncall prog_lang="eel">float retval = fft(data buffer, integer size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Performs a FFT on the data in the local memory buffer at the offset specified by the first parameter. The size of the FFT is specified by the second parameter, which must be 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The outputs are permuted, so if you plan to use them in-order, call fft_permute(buffer, size) before and fft_ipermute(buffer,size) after your in-order use. Your inputs or outputs will need to be scaled down by 1/size, if used.
            Note that fft()/ifft() require real / imaginary input pairs, so a 256 point FFT actually works with 512 items.
            Note that fft()/ifft() must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.
        </description>
        <retvals>
            float retval - 
        </retvals>
        <parameters>
            data buffer - 
            integer size -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fft_ipermute</slug>
        <title>fft_ipermute</title>
        <functioncall prog_lang="eel">float retval = fft_ipermute(data buffer, integer size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Permute the input for ifft(), taking bands from in-order to the order ifft() requires. See [fft()](#eel_fft) for more information.
        </description>
        <retvals>
            float retval - 
        </retvals>
        <parameters>
            data buffer - 
            integer size - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fft_permute</slug>
        <title>fft_permute</title>
        <functioncall prog_lang="eel">float retval = fft_permute(data buffer, integer size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Permute the output of fft() to have bands in-order. See [fft()](#eel_fft) for more information.
        </description>
        <retvals>
            float retval - 
        </retvals>
        <parameters>
            data buffer - 
            integer size - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math, permutation, permute</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fft_real</slug>
        <title>fft_real</title>
        <functioncall prog_lang="eel">fft_real(data buffer, integer size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Performs an FFT, but takes size input samples and produces size/2 complex output pairs. Usually used along with fft_permute(size/2). Inputs/outputs will need to be scaled by 0.5/size.
        </description>
        <parameters>
            data buffer - 
            integer size - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math, fft, fourier transformation</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fgetc</slug>
        <title>fgetc</title>
        <functioncall prog_lang="eel">integer character = fgetc(filehandler fp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Reads a character from file fp, returns -1 if EOF.
        </description>
        <retvals>
            integer character - a character read from the file; -1, if end of file
        </retvals>
        <parameters>
            filehandler fp - the handler to the file 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            File Management
        </chapter_context>
        <tags>eel, file management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fgets</slug>
        <title>fgets</title>
        <functioncall prog_lang="eel">integer length = fgets(filehandler fp, string #str)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Reads a line from file fp into #str. Returns length of #str read.
        </description>
        <retvals>
            integer length - the length of the line read from file.
        </retvals>
        <parameters>
            filehandler fp - the handler of the file
            string #str - the returned string 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            File Management
        </chapter_context>
        <tags>eel, file management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_floor</slug>
        <title>floor</title>
        <functioncall prog_lang="eel">integer rounded_value = floor(float value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the value rounded to the next lowest integer (floor(3.9)==3, floor(-3.1)==-4).
        </description>
        <retvals>
            integer rounded_value - the rounded value to the next lowest integer
        </retvals>
        <parameters>
            float value - the value to be rounded
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fopen</slug>
        <title>fopen</title>
        <functioncall prog_lang="eel">filehandler fp = fopen(string fn, string mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Opens a file "fn" with mode "mode". For read, use "r" or "rb", write "w" or "wb". Returns a positive integer on success.
        </description>
        <retvals>
            filehandler fp - the filehandler of the opened file; 0, if file couldn't be opened
        </retvals>
        <parameters>
            string fn - the filename to be opened
            string mode - the opening mode
                        - "r" read,
                        - "rb", read binary
                        - "w", write
                        - "wb", write binary
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            File Management
        </chapter_context>
        <tags>eel, file management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fprintf</slug>
        <title>fprintf</title>
        <functioncall prog_lang="eel">integer length = fprintf(filehandler fp, string format[, various ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1">
            Formats a string and writes it to file fp. For more information on format specifiers, see [sprintf()](#eel_sprintf). Returns bytes written to file.

              * %% = %  
              * %s = string from parameter  
              * %d = parameter as integer  
              * %i = parameter as integer  
              * %u = parameter as unsigned integer  
              * %x = parameter as hex (lowercase) integer  
              * %X = parameter as hex (uppercase) integer  
              * %c = parameter as character  
              * %f = parameter as floating point  
              * %e = parameter as floating point (scientific notation, lowercase)  
              * %E = parameter as floating point (scientific notation, uppercase)  
              * %g = parameter as floating point (shortest representation, lowercase)  
              * %G = parameter as floating point (shortest representation, uppercase)  

            Many standard C printf() modifiers can be used, including:

              * %.10s = string, but only print up to 10 characters  
              * %-10s = string, left justified to 10 characters  
              * %10s = string, right justified to 10 characters  
              * %+f = floating point, always show sign  
              * %.4f = floating point, minimum of 4 digits after decimal point  
              * %10d = integer, minimum of 10 digits (space padded)  
              * %010f = integer, minimum of 10 digits (zero padded)  

            Values for format specifiers can be specified as additional parameters to fprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).
        </description>
        <retvals>
            integer length - the length of the written string
        </retvals>
        <parameters>
            filehandler fp - 
            string format - a string to format
            various [...] - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            File Management
        </chapter_context>
        <tags>eel, file management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fread</slug>
        <title>fread</title>
        <functioncall prog_lang="eel">integer read_length = fread(filehandler fp, string #str, integer length)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Reads from file fp into #str, up to length bytes. Returns actual length read, or negative if error.
        </description>
        <retvals>
            integer read_length - the length of the returned string(might be less than parameter length)
        </retvals>
        <parameters>
            filehandler fp - the handler of the file
            string #str - the string read from the file
            integer length - the length you want to read from the file
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            File Management
        </chapter_context>
        <tags>eel, file management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_freembuf</slug>
        <title>freembuf</title>
        <functioncall prog_lang="eel">float retval = freembuf(float address)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Hints the runtime that memory above the address specified may no longer be used. The runtime may, at its leisure, choose to lose the contents of memory above the address specified.
        </description>
        <retvals>
            float retval - 
        </retvals>
        <parameters>
            float address - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Memory Management
        </chapter_context>
        <tags>eel, memory management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fseek</slug>
        <title>fseek</title>
        <functioncall prog_lang="eel">integer retval = fseek(filehandler fp, integer offset, integer whence)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Seeks file fp, offset bytes from whence reference. Whence negative specifies start of file, positive whence specifies end of file, and zero whence specifies current file position.
        </description>
        <retvals>
            integer retval - -1, if seek isn't possible;
        </retvals>
        <parameters>
            filehandler fp - 
            integer offset - 
            integer whence - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            File Management
        </chapter_context>
        <tags>eel, file management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_ftell</slug>
        <title>ftell</title>
        <functioncall prog_lang="eel">integer fposition = ftell(filehandler fp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the current file position.
        </description>
        <retvals>
            integer fposition - the current position within the opened file
        </retvals>
        <parameters>
            filehandler fp - the handler of the file
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            File Management
        </chapter_context>
        <tags>eel, file management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fwrite</slug>
        <title>fwrite</title>
        <functioncall prog_lang="eel">integer length = fwrite(filehandler fp, string #str, integer len)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Writes up to len characters of #str to file fp. If len is less than 1, the full contents of #str will be written. Returns the number of bytes written to file.
            
            Use fflush(fp) to write all data from the cache into the file.
        </description>
        <retvals>
            integer length - the number of written bytes
        </retvals>
        <parameters>
            filehandler fp - the handler of the file
            string #str - the string to write into the file
            integer len - the number of bytes to write to the file; 0, to write entire string
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            File Management
        </chapter_context>
        <tags>eel, file management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_get_action_context</slug>
        <title>get_action_context</title>
        <functioncall prog_lang="eel">get_action_context(string #filename, integer sectionID, integer cmdID, integer mode, integer resolution, integer val, string contextstr)</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description indent="default">
            Queries contextual information about the script, typically MIDI/OSC input values.
            Returns true if a new value has been updated.
            val will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.
            Notes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.

            For relative mode bindings, calling get_action_context() will return the accumulated relative value in decoded form (not 65 or 63, but +1/-1 etc), and clear the internal state. So if you call it multiple times, the first one will return the accumulated value, and the second will always return 0.
            
            contextstr may be empty or one of:

            midi:XX[:YY] (one or two bytes hex)
            [wheel|hwheel|mtvert|mthorz|mtzoom|mtrot|mediakbd]:flags
            key:flags:keycode
            osc:/msg[:f=FloatValue|:s=StringValue]
            KBD_OnMainActionEx
            (flags may include V=virtkey, S=shift, A=alt/option, C=control/command, W=win/control)
        </description>
        <parameters>
            string #filename - the filename plus path of the script
            integer sectionID - the section 
                              - 0, Main
                              - 100, Main (alt recording) 
                              - 32060, MIDI Editor
                              - 32061, MIDI Event List Editor
                              - 32062, MIDI Inline Editor
                              - 32063, Media Explorer
            integer cmdID - the command id of the script
            integer mode - -1, if script isn't run by shortcut; 55953, if script is run by shortcut
            integer resolution - -1, if script isn't run by shortcut; resolution of OSC(14 bit)/MIDI(7 bit)
            integer val - the value sent by MIDI or OSC
            string contextstr - the shortcut, that ran this action, more info in the description
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, get action context, midi value, osc, section, filename, scriptfilename, commandid</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_variables</slug>
        <title>gfx_variables</title>
        <functioncall prog_lang="eel">gfx VARIABLES</functioncall>
        <requires>
            Reaper=6.43
        </requires>
        <description>
            The following global variables are special and will be used by the graphics system:

               * gfx_r - current red component (0..1) used by drawing operations.
               * gfx_g - current green component (0..1) used by drawing operations.
               * gfx_b - current blue component (0..1) used by drawing operations.
               * gfx_a2 - current alpha component (0..1) used by drawing operations when writing solid colors (normally ignored but useful when creating transparent images).
               * gfx_a - alpha for drawing (1=normal).
               * gfx_mode - blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx_a to negative and use gfx_mode as additive). Add 2.0 to disable source alpha for gfx_blit(). Add 4.0 to disable filtering for gfx_blit().
               * gfx_w - width of the UI framebuffer.
               * gfx_h - height of the UI framebuffer.
               * gfx_x - current graphics position X. Some drawing functions use as start position and update.
               * gfx_y - current graphics position Y. Some drawing functions use as start position and update.
               * gfx_clear - if greater than -1.0, framebuffer will be cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black).
               * gfx_dest - destination for drawing operations, -1 is main framebuffer, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).
               * gfx_texth - the (READ-ONLY) height of a line of text in the current font. Do not modify this variable.
               * gfx_ext_retina - to support hidpi/retina, callers should set to 1.0 on initialization, this value will be updated to value greater than 1.0 (such as 2.0) if retina/hidpi. On macOS gfx_w/gfx_h/etc will be doubled, but on other systems gfx_w/gfx_h will remain the same and gfx_ext_retina is a scaling hint for drawing.
               * mouse_x - current X coordinate of the mouse relative to the graphics window.
               * mouse_y - current Y coordinate of the mouse relative to the graphics window.
               * mouse_wheel - wheel position, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
               * mouse_hwheel - horizontal wheel positions, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
               * mouse_cap - a bitfield of mouse and keyboard modifier state:
                    1: left mouse button
                    2: right mouse button
                    4: Control key
                    8: Shift key
                    16: Alt key
                    32: Windows key
                    64: middle mouse button

                Note: Mousebuttons will be returned after gfx_init(), the other keyboard-modifier only when using gfx_getchar()!
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions, variables, gfx-variables</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_arc</slug>
        <title>gfx_arc</title>
        <functioncall prog_lang="eel">integer retval = gfx_arc(integer x, integer y, integer r, float ang1, float ang2[, optional float antialias])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.
        </description>
        <retvals>
            integer retval - usually 0
        </retvals>
        <parameters>
            integer x - x position of the center of the circle
            integer y - y position of the center of the circle
            integer r - the radius of the circle
            float ang1 - the beginning of the circle in radians; meant for partial circles; 0-6.28
            float ang2 - the end of the circle in radians; meant for partial circles; 0-6.28
            optional float antialias - <=0.5, antialias off; >0.5, antialias on
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_blit</slug>
        <title>gfx_blit</title>
        <functioncall prog_lang="eel">integer src = gfx_blit(integer source, float scale, float rotation[, optional float srcx, optional float srcy, optional float srcw, optional float srch, optional integer destx, optional integer desty, optional integer destw, optional integer desth, optional float rotxoffs, optional float rotyoffs])</functioncall>
        <requires>
            Reaper=6.46
        </requires>
        <description indent="default">
            Copies from source (-1 = main framebuffer, or an image from gfx_loadimg() etc), using current opacity and copy mode (set with gfx_a, gfx_mode).

            If destx/desty are not specified, gfx_x/gfx_y will be used as the destination position.

            scale (1.0 is unscaled) will be used only if destw/desth are not specified.

            rotation is an angle in radians

            srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size)

            destx/desty/destw/desth specify destination rectangle (if not specified destw/desth default to srcw/srch * scale).
        </description>
        <retvals>
            integer src - the blitted source
        </retvals>
        <parameters>
            integer source - the source-image/framebuffer to blit; -1 to 1023; -1 for the currently displayed framebuffer.
            float scale - the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger
                        - has no effect, when destx, desty, destw, desth are given
            float rotation - the rotation-factor; 0 to 6.28; 3.14 for 180 degrees.
            optional float srcx - the x-coordinate-offset in the source-image
            optional float srcy - the y-coordinate-offset in the source-image
            optional float srcw - the width-offset in the source-image
            optional float srch - the height-offset in the source-image
            optional integer destx - the x-coordinate of the blitting destination
            optional integer desty - the y-coordinate of the blitting destination
            optional integer destw - the width of the blitting destination; may lead to stretched images
            optional integer desth - the height of the blitting destination; may lead to stretched images
            optional float rotxoffs - influences rotation
            optional float rotyoffs - influences rotation
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_blitext</slug>
        <title>gfx_blitext</title>
        <functioncall prog_lang="eel">gfx_blitext(integer source, array coordinatelist, integer rotation)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Deprecated, use gfx_blit instead.
            
            Note: the naming of the function might be misleading, as it has nothing to do with blitting of text, but rather is called Blit Ext.
        </description>
        <deprecated since_when="Reaper 5.62" alternative="gfx_blit"/>
        <parameters>
            integer source - 
            array coordinatelist - 
            float rotation - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_blurto</slug>
        <title>gfx_blurto</title>
        <functioncall prog_lang="eel">gfx_blurto(integer x, integer y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Blurs the region of the screen between gfx_x,gfx_y and x,y, and updates gfx_x,gfx_y to x,y.
        </description>
        <parameters>
            integer x - x position of the other edge of the blur-region
            integer y - y position of the other edge of the blur-region
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_circle</slug>
        <title>gfx_circle</title>
        <functioncall prog_lang="eel">gfx_circle(integer x, integer y, float r[, float fill, float antialias])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a circle, optionally filling/antialiasing
        </description>
        <parameters>
            integer x - x position of center of the circle
            integer y - y position of center of the circle
            float r - radius of the circle
            float fill - <=0.5, circle is not filled; >0.5, circle is filled
            float antialias - <=0.5, circle is not antialiased; >0.5, circle is antialiased
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_clienttoscreen</slug>
        <title>gfx_clienttoscreen</title>
        <functioncall prog_lang="eel">gfx_clienttoscreen(integer x, integer y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Converts client coordinates x,y to screen coordinates.
            
            Use variables for x and y, as the returned values will be put back into them:
            <pre><code>
                gfx_init(""); // open window
                x=10; // the client x-coordinate
                y=20; // the client y-coordinate

                gfx_clienttoscreen(x,y); // x and y hold now the converted screen-coordinates
            </code></pre>
        </description>
        <parameters>
            integer x - the x coordinate within(!) the gfx_init()-window, that shall be converted to screen-coordinates
            integer y - the y coordinate within(!) the gfx_init()-window, that shall be converted to screen-coordinates 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_deltablit</slug>
        <title>gfx_deltablit</title>
        <functioncall prog_lang="eel">gfx_deltablit(integer srcimg, integer srcs, integer srct, integer srcw, integer srch, float destx, float desty, float destw, float desth, float dsdx, float dtdx, float dsdy, float dtdy, float dsdxdy, float dtdxdy[,optional integer usecliprect=1])</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description indent="default">
            Blits from srcimg(srcs,srct,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.

            This function allows you to manipulate the image, which you want to blit, by transforming, moving or cropping it.

            To do rotation, you can manipulate dtdx and dsdy together.
        </description>
        <parameters>
            integer srcimg - image - the image to blit
            integer srcs - positiondeltaX - the delta of the x-position of the image within the blitted area in pixels(useful default: 0)
            integer srct - positiondeltaY - the delta of the y-position of the image within the blitted area in pixels(useful default: 0)
            integer srcw - unknown - (useful default: 0)
            integer srch - unknown - (useful default: 0)
            float destx - positiondeltaX - the delta of the x-position of the blitted area in pixels(useful default: 0)
            float desty - positiondeltaY - the delta of the y-position of the blitted area in pixels(useful default: 0)
            float destw - blitsizeX - the x-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: width of the image)
            float desth - blitsizeY - the y-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: height of the image)
            float dsdx - stretchfactorX, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeX(useful default: 1)
            float dtdx - deltaY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta is linear(useful default: 0)
            float dsdy - deltaX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta is linear(useful default: 0)
            float dtdy - stretchfactorY, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeY(useful default: 1)
            float dsdxdy - deltacurvedY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta "curves" the delta via a bezier(useful default: 0)
            float dtdxdy - deltacurvedX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta "curves" the delta via a bezier(useful default: 0)
            optional float usecliprect - can be set to 0 or 1(useful default: 0)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_dock</slug>
        <title>gfx_dock</title>
        <functioncall prog_lang="eel">integer dockstate = gfx_dock(integer v[, optional integer wx, optional integer wy, optional integer ww, optional integer wh])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh are specified, they will be filled with the undocked window position/size
        </description>
        <description indent="default">
            Queries or sets the docking-state of the gfx_init()-window.
            Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &1 if docked, second byte is docker index (or last docker index if undocked). 
            If wx-wh specified, additional values will be returned with the undocked window position/size
        </description>
        <retvals>
            integer dockstate - the new/queried dockstate
        </retvals>
        <parameters>
            integer v - -1, query only docking-state; 0 and higher, set state of the window to docked
            optional integer wx - will hold window-x-position
            optional integer wy - will hold window-y-position
            optional integer ww - will hold window-width            
            optional integer wh - will hold window-height
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_drawchar</slug>
        <title>gfx_drawchar</title>
        <functioncall prog_lang="eel">integer retval = gfx_drawchar(integer char)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws the character (can be a numeric ASCII code as well), to gfx_x, gfx_y, and moves gfx_x over by the size of the character.
        </description>
        <retvals>
            integer retval - the ASCII-representation of the shown character
        </retvals>
        <parameters>
            integer char - the numeric ASCII-representation of the character to be drawn
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_drawnumber</slug>
        <title>gfx_drawnumber</title>
        <functioncall prog_lang="eel">double retval = gfx_drawnumber(double n, double n_digits)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws the number n with ndigits of precision to gfx_x, gfx_y, and updates gfx_x to the right side of the drawing. The text height is gfx_texth.
        </description>
        <retvals>
            double retval - the number of parameter n
        </retvals>
        <parameters>
            double n - the number to draw
            double n_digits - the number of shown digits; double values will be rounded
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_drawstr</slug>
        <title>gfx_drawstr</title>
        <functioncall prog_lang="eel">integer retval = gfx_drawstr(string str, optional integer flags, optional integer right, optional integer bottom)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Draws a string at gfx\_x, gfx\_y, and updates gfx\_x/gfx\_y so that subsequent draws will occur in a similar place.

            \* If flags, right ,bottom passed in:
            \* flags&1: center horizontally
            \* flags&2: right justify
            \* flags&4: center vertically
            \* flags&8: bottom justify
            \* flags&256: ignore right/bottom, otherwise text is clipped to (gfx\_x, gfx\_y, right, bottom)
        </description>
        <retvals>
            integer retval - 2000000, no string is drawn; 2000001, string is drawn
        </retvals>
        <parameters>
            string str - the string to draw
            optional integer flags - the flags to adjust the text-alignement
            optional integer right - clip text at x-pixels from gfx_x
            optional integer bottom - clip text at y-pixels from gfx_y 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_getchar</slug>
        <title>gfx_getchar</title>
        <functioncall prog_lang="eel">integer typed_character = gfx_getchar(optional integer char, optional integer unicode_char)</functioncall>
        <requires>
            Reaper=6.74
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.

            Common values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. 

            Shortcuts with scope "Global + textfields" will still run the associated action, scope of "Normal" or "Global" will not.

            Modified and special keys can also be returned, including:

            \* Ctrl/Cmd+A..Ctrl+Z as 1..26
            \* Ctrl/Cmd+Alt+A..Z as 257..282
            \* Alt+A..Z as 'A'+256..'Z'+256
            \* 27 for ESC
            \* 13 for Enter
            \* ' ' for space
            
            If the user typed in multiple characters, the character queue will hold them. So calling gfx_getchar multiple times, until it returns 0 or -1 will give you all typed keys.
            
            Typed characters between 256 and 1024(maybe higher?) seem to hint at multibyte-unicode characters. That means, you need to take the next character-value in the character-queue into consideration as well to get the current unicode-character!
            
            If unichar is specified, it will be set to the unicode value of the key if available (and the return value may be the unicode value or a raw key value as described above, depending). If unichar is not specified, unicode codepoints greater than 255 will be returned as 'u'<<24 + value
            
            Note that calling gfx\_getchar() at least once causes mouse\_cap to reflect keyboard modifiers even when the mouse is not captured.
        </description>
        <retvals>
            integer typed_character - the character that has been typed; -1, if no window is open
        </retvals>
        <parameters>
            integer char - if you want to get only a certain character-key, pass the ASCII-code for the character into this parameter
            integer unicode_char - the unicode-charactercode
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
          Reaper 6.74 - added support for unicode
          Reaper 6.72 - improved handling of the Alt-Gr-modifier key
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_getfont</slug>
        <title>gfx_getfont</title>
        <functioncall prog_lang="eel">integer font_index = gfx_getfont(optional string #str)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns current font index. If a string is passed, it will receive the actual font face used by this font, if available.
        </description>
        <retvals>
            integer font_index - the index of the currently used font
        </retvals>
        <parameters>
            optional string #str - this variable will hold the font-face after calling gfx_getfont
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_getimgdim</slug>
        <title>gfx_getimgdim</title>
        <functioncall prog_lang="eel">integer retval = gfx_getimgdim(integer image, integer w, integer h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Retrieves the dimensions of image (representing a filename: index number) into w and h. Sets these values to 0 if an image failed loading (or if the filename index is invalid).
        </description>
        <retvals>
            integer retval - the image-index
        </retvals>
        <parameters>
            integer image - the image, whose dimensions you want to retrieve
            integer w - will hold the width of the image
            integer h - will hold the height of the image
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_getpixel</slug>
        <title>gfx_getpixel</title>
        <functioncall prog_lang="eel">integer red_value = gfx_getpixel(integer r, integer g, integer b)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Gets the value of the pixel at gfx_x,gfx_y into r,g,b. 
        </description>
            integer red_value - the red-value of the pixel at gfx_x,gfx_y
        <parameters>
            integer r - will hold the red-color-value, a value between 0 to 1
            integer g - will hold the green-color-value, a value between 0 to 1
            integer b - will hold the blue-color-value, a value between 0 to 1
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_gradrect</slug>
        <title>gfx_gradrect</title>
        <functioncall prog_lang="eel">integer retval = gfx_gradrect(integer x, integer y, integer w, integer h, double r, double g, double b, double a, optional double drdx, optional double dgdx, optional double dbdx, optional double dadx, optional double drdy, optional double dgdy, optional double dbdy, optional double dady)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            integer x -
            integer y - 
            integer w - 
            integer h -
            double r - 
            double g - 
            double b - 
            double a - 
            optional double drdx - 
            optional double dgdx - 
            optional double dbdx - 
            optional double dadx - 
            optional double drdy - 
            optional double dgdy - 
            optional double dbdy - 
            optional double dady - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_init</slug>
        <title>gfx_init</title>
        <functioncall prog_lang="eel">integer retval = gfx_init(string name, optional integer width, optional integer height, optional integer dockstate, optional integer xpos, optional integer ypos)</functioncall>
        <requires>
            Reaper=6.40
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
        Initializes the graphics window with title name. Suggested width and height can be specified.

        Once the graphics window is open, [gfx\_update()](#eel_gfx_update) should be called periodically. 

        To resize/reposition the window, call gfx_init again and pass an empty string as name-parameter.
        
        To retitle the window, run gfx_init again with the new title as parameter name.

        To get the current window-states, dimensions, etc, you can use [gfx_dock](#eel_gfx_dock).
        </description>
        <parameters>
            string name - the name of the window; "" to alter position/size of already opened window
            optional integer width - the width of the window(default=640)
            optional integer height - the height of the window(default=400)
            optional integer dockstate - the dockstate of the window; 1, docked; 0, undocked(default undocked=0)
            optional integer xpos - the x-position of the window(default: 0)
            optional integer ypos - the y-position of the window(default: 0)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_line</slug>
        <title>gfx_line</title>
        <functioncall prog_lang="eel">gfx_line(integer x, integer y, integer x2, integer y2, optional float aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.
        </description>
        <parameters>
            integer x - the x-position of starting-point
            integer y - the y-position of starting-point
            integer x2 - the x-position of ending-point
            integer y2 - the y-position of ending-point
            optional float aa - 0.5 and higher or not specified, antialias; lower than 0.5, not antialiased
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_lineto</slug>
        <title>gfx_lineto</title>
        <functioncall prog_lang="eel">gfx_lineto(x,y[,aa])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a line from gfx_x,gfx_y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx_x and gfx_y to x,y.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <parameters>
            x - 
            y - 
            aa - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_loadimg</slug>
        <title>gfx_loadimg</title>
        <functioncall prog_lang="eel">gfx_loadimg(image,filename)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. 
        </description>
        <parameters>
            image - 
            filename - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_measurechar</slug>
        <title>gfx_measurechar</title>
        <functioncall prog_lang="eel">gfx_measurechar(character,&w,&h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Measures the drawing dimensions of a character with the current font (as set by [gfx.setfont](#lua_gfx.setfont)). Returns width and height of character.
        </description>
        <parameters>
            character - a character, whose dimensions you want to know
            w - the width of this character
            h - the height if this character
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_measurestr</slug>
        <title>gfx_measurestr</title>
        <functioncall prog_lang="eel">gfx_measurestr(str,&w,&h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Measures the drawing dimensions of a string with the current font (as set by gfx_setfont). 
        </description>
        <parameters>
            str - 
            w - 
            h - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions, </tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_muladdrect</slug>
        <title>gfx_muladdrect</title>
        <functioncall prog_lang="eel">gfx_muladdrect(x,y,w,h,mul_r,mul_g,mul_b[,mul_a,add_r,add_g,add_b,add_a])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.
        </description>
        <parameters>
            x - 
            y - 
            w - 
            h - 
            mul_r - 
            mul_g - 
            mul_b - 
            mul_a - 
            add_r - 
            add_g - 
            add_b - 
            add_a - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_printf</slug>
        <title>gfx_printf</title>
        <functioncall prog_lang="eel">gfx_printf(format[, ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Formats and draws a string at gfx\_x, gfx\_y, and updates gfx\_x/gfx\_y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see [sprintf()](#eel_sprintf)

              * %% = %  
              * %s = string from parameter  
              * %d = parameter as integer  
              * %i = parameter as integer  
              * %u = parameter as unsigned integer  
              * %x = parameter as hex (lowercase) integer  
              * %X = parameter as hex (uppercase) integer  
              * %c = parameter as character  
              * %f = parameter as floating point  
              * %e = parameter as floating point (scientific notation, lowercase)  
              * %E = parameter as floating point (scientific notation, uppercase)  
              * %g = parameter as floating point (shortest representation, lowercase)  
              * %G = parameter as floating point (shortest representation, uppercase)  

            Many standard C printf() modifiers can be used, including:

              * %.10s = string, but only print up to 10 characters  
              * %-10s = string, left justified to 10 characters  
              * %10s = string, right justified to 10 characters  
              * %+f = floating point, always show sign  
              * %.4f = floating point, minimum of 4 digits after decimal point  
              * %10d = integer, minimum of 10 digits (space padded)  
              * %010f = integer, minimum of 10 digits (zero padded)  

            Values for format specifiers can be specified as additional parameters to gfx_printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).
        </description>
        <parameters>
            format - 
            ... - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_quit</slug>
        <title>gfx_quit</title>
        <functioncall prog_lang="eel">gfx_quit()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Closes the graphics window.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_rect</slug>
        <title>gfx_rect</title>
        <functioncall prog_lang="eel">gfx_rect(x,y,w,h[,filled])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Fills a rectangle at x,y,w,h pixels in dimension, filled by default. 
        </description>
        <parameters>
            x - 
            y - 
            w - 
            h - 
            filled - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_rectto</slug>
        <title>gfx_rectto</title>
        <functioncall prog_lang="eel">gfx_rectto(x,y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Fills a rectangle from gfx_x,gfx_y to x,y. Updates gfx_x,gfx_y to x,y. 
        </description>
        <parameters>
            x - 
            y - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_roundrect</slug>
        <title>gfx_roundrect</title>
        <functioncall prog_lang="eel">gfx_roundrect(x,y,w,h,radius[,antialias])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a rectangle with rounded corners. 
        </description>
        <parameters>
            x - 
            y - 
            w - 
            h - 
            radius - 
            antialias - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_screentoclient</slug>
        <title>gfx_screentoclient</title>
        <functioncall prog_lang="eel">gfx_screentoclient(x,y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Converts screen coordinates x,y to client coordinates.
        </description>
        <parameters>
            x - 
            y - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_set</slug>
        <title>gfx_set</title>
        <functioncall prog_lang="eel">gfx_set(r[,g,b,a2,mode,dest])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets gfx_r/gfx_g/gfx_b/gfx_a2/gfx_mode, sets gfx_dest if final parameter specified
        </description>
        <parameters>
            r - 
            g - 
            b - 
            a - 
            mode - 
            dest - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_setcursor</slug>
        <title>gfx_setcursor</title>
        <functioncall prog_lang="eel">gfx_setcursor(resource_id,custom_cursor_name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like "arrow" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.
        </description>
        <parameters>
            resource_id - 
            custom_cursor_name - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_getdropfile</slug>
        <title>eel_getdropfile</title>
        <functioncall prog_lang="eel">integer retval = gfx_getdropfile(integer idx[, string #filename])</functioncall>
        <requires>
            Reaper=6.69
        </requires>
        <description indent="default">
            Returns filenames, drag'n'dropped into a window created by gfx_init().
            Use idx to get a specific filename, that has been dropped into the gfx_init()-window.
            
            When returned filename starts with @fx: it is an fx dropped.

            Does NOT support mediaitems/takes or other Reaper-objects!

            It MUST be called BEFORE calling gfx_update, as gfx_update flushes the filelist accessible with gfx_getdropfile.
        </description>
        <retvals>
            integer retval - 0, if droppped-filename with indexnumber idx doesn't exist; 1, if it exists; hints, if you already read all dropped filenames.
            string filename - the filename of dropped-file with indexnumber idx; when starting with @fx: it is an fx dropped
        </retvals>
        <parameters>
            integer idx - the indexnumber for a filename, that has been dropped into a gfx_init()-window.
                        - 0, the first file; 1, the second file; 2, the third file, etc.
                        - -1, clears the filelist.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>dragndrop, drop, file, filename, window, gfx, window, eel</tags>
        <changelog>
          Reaper 6.69 - added possibility to for drag/drop from FX browser to gfx windows with send filenames are @fx:fx_ident
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_setfont</slug>
        <title>gfx_setfont</title>
        <functioncall prog_lang="eel">gfx_setfont(idx[,fontface, sz, flags])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Can select a font and optionally configure it. 

            After calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.
        </description>
        <parameters>
            idx - the font-id; idx=0 for default bitmapped font, no configuration is possible for this font.
                - idx=1..16 for a configurable font
            fontface - the name of the font, like "arial"
            sz - the size of the font (8-100)
            flags - flags, how to render the text; values are repeating every 256 numbers
                  - a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. 
                  - These flags may or may not be supported depending on the font and OS. 
                  - 66 and 98, Bold (B), (b)
                  - 73 and 105, italic (I), (i)
                  - 79 and 111, white outline (O), (o)
                  - 82 and 114, reduced(halfbright) (R), (r)
                  - 83 and 115, sharpen (S), (s)
                  - 85 and 117, underline (U), (u)
                  - 86 and 118, inVerse (V), (v)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_setimgdim</slug>
        <title>gfx_setimgdim</title>
        <functioncall prog_lang="eel">gfx_setimgdim(image,w,h)</functioncall>
        <requires>
            Reaper=6.14
        </requires>
        <description indent="default">
            Resize image referenced by index 0..1024-1, width and height must be 0-8192. The contents of the image will be undefined after the resize.
        </description>
        <parameters>
            image - 
            w - 
            h -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_setpixel</slug>
        <title>gfx_setpixel</title>
        <functioncall prog_lang="eel">gfx_setpixel(r,g,b)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Writes a pixel of r,g,b to gfx_x,gfx_y.
        </description>
        <parameters>
            r - 
            g - 
            b - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_showmenu</slug>
        <title>gfx_showmenu</title>
        <functioncall prog_lang="eel">gfx_showmenu(menu_string)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Shows a popup menu at gfx_x,gfx_y. 
            str is a list of fields separated by | characters. Each field represents a menu item.
            Fields can start with special characters:

            # : grayed out
            ! : checked
            > : this menu item shows a submenu
            < : last item in the current submenu
            & : before a character makes it underlined as the quick-access-character for this menu-item

            An empty field will appear as a separator in the menu. gfx_showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.
            Example:

            gfx_showmenu("first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu")
            Note: It skips submenus and separators in the selection-number, so a if menu_string="Entry1||<Entry two|Entry three" will only return 1 for entry1 and 2 for Entry three but nothing for <Entry and ||.
        </description>
        <parameters>
            menu_string - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
          Reaper 6.82 - on Windows: can now be used without opening a window with gfx.init first()
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_transformblit</slug>
        <title>gfx_transformblit</title>
        <functioncall prog_lang="eel">gfx_transformblit(srcimg,destx,desty,destw,desth,div_w,div_h,table)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (this table must not cross a 65536 item boundary). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.
        </description>
        <parameters>
            srcimg - 
            destx - 
            desty - 
            destw - 
            desth - 
            div_w - 
            div_h - 
            table -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_triangle</slug>
        <title>gfx_triangle</title>
        <functioncall prog_lang="eel">gfx_triangle(x1,y1,x2,y2,x3,y3[x4,y4...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a filled triangle, or any convex polygon. 
        </description>
        <parameters>
            x1 - 
            y1 - 
            x2 - 
            y2 - 
            x3 - 
            y3 - 
            x4 -
            y4 - 
            ... - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_update</slug>
        <title>gfx_update</title>
        <functioncall prog_lang="eel">gfx_update()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Updates the graphics display, if opened.
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            GFX-functions
        </chapter_context>
        <tags>eel, gfx functions</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_ifft</slug>
        <title>ifft</title>
        <functioncall prog_lang="eel">ifft(buffer,size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Perform an inverse FFT. For more information see fft()
        </description>
        <parameters>
            buffer - 
            size - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:eel_fft
                   perform a FFT
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_ifft_real</slug>
        <title>ifft_real</title>
        <functioncall prog_lang="eel">ifft_real(buffer,size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Performs an inverse FFT, but takes size/2 complex input pairs and produces size real output values. Usually used along with fft_ipermute(size/2).
        </description>
        <parameters>
            buffer - 
            size - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_invsqrt</slug>
        <title>invsqrt</title>
        <functioncall prog_lang="eel">invsqrt(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_log</slug>
        <title>log</title>
        <functioncall prog_lang="eel">log(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the natural logarithm (base e) of the parameter. If the value is not greater than 0, the return value is undefined.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_log10</slug>
        <title>log10</title>
        <functioncall prog_lang="eel">log10(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the base-10 logarithm of the parameter. If the value is not greater than 0, the return value is undefined.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_loop</slug>
        <title>loop</title>
        <functioncall prog_lang="eel">loop(count,expression)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Evaluates count once, and then executes expression count, but not more than 1048576, times.
        </description>
        <parameters>
            count - 
            expression - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, loop, expression, execute</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_match</slug>
        <title>match</title>
        <functioncall prog_lang="eel">match(needle,haystack[, ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Searches for the first parameter in the second parameter, using a simplified regular expression syntax.

            * * = match 0 or more characters
            * *? = match 0 or more characters, lazy
            * + = match 1 or more characters
            * +? = match 1 or more characters, lazy
            * ? = match one character

            You can also use format specifiers to match certain types of data, and optionally put that into a variable:

            * %s means 1 or more chars
            * %0s means 0 or more chars
            * %5s means exactly 5 chars
            * %5-s means 5 or more chars
            * %-10s means 1-10 chars
            * %3-5s means 3-5 chars
            * %0-5s means 0-5 chars
            * %x, %d, %u, and %f are available for use similarly
            * %c can be used, but can't take any length modifiers
            * Use uppercase (%S, %D, etc) for lazy matching

            See also sprintf() for other notes, including specifying direct variable references via {}.
        </description>
        <parameters>
            needle - 
            haystack - 
            ... - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, string functions, match</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_matchi</slug>
        <title>matchi</title>
        <functioncall prog_lang="eel">matchi(needle,haystack[, ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Case-insensitive version of match().
        </description>
        <parameters>
            needle - 
            haystack - 
            ... - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:eel_match
                   case-sensitive version of match
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, string functions, match</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_max</slug>
        <title>max</title>
        <functioncall prog_lang="eel">max(&value,&value2)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns (by reference) the maximum value of the two parameters. Since max() returns by reference, expressions such as max(x,y) = 5 are possible.
        </description>
        <parameters>
            value - 
            value2 - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, maximum of two values</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_mem_get_values</slug>
        <title>mem_get_values</title>
        <functioncall prog_lang="eel">mem_get_values(offset, ...)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Reads values from memory starting at offset into variables specified. Slower than regular memory reads for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.
        </description>
        <parameters>
            offset - 
            ... - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Memory Management
        </chapter_context>
        <tags>eel, memory management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_mem_insert_shuffle</slug>
        <title>mem_insert_shuffle</title>
        <functioncall prog_lang="eel">mem_insert_shuffle(buf,len,value)</functioncall>
        <requires>
            Reaper=6.74
        </requires>
        <description indent="default">
            Shuffles contents of buf right by 1, inserts value at buf[0], returns previous buf[len-1].
        </description>
        <parameters>
            buf - 
            len - 
            value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Memory Management
        </chapter_context>
        <tags>eel, memory management</tags>
        <changelog>
          Reaper 6.74 - added function to Reaper
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_mem_multiply_sum</slug>
        <title>mem_multiply_sum</title>
        <functioncall prog_lang="eel">mem_multiply_sum(src1,src2,length)</functioncall>
        <requires>
            Reaper=6.74
        </requires>
        <description indent="default">
            Calculates the sum of the products of values pointed to by src1 and src2. If src2 is -1, then calculates the sum of squares of src1, if -2, the sum of the absolute values of src, if -3, calculates the sum of the values of src1. Other negative values are undefined.
        </description>
        <parameters>
            src1 - 
            src2 - 
            length - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Memory Management
        </chapter_context>
        <tags>eel, memory management</tags>
        <changelog>
          Reaper 6.74 - added function to Reaper
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_mem_set_values</slug>
        <title>mem_set_values</title>
        <functioncall prog_lang="eel">mem_set_values(offset, ...)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Writes values to memory starting at offset from variables specified. Slower than regular memory writes for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.
        </description>
        <parameters>
            offset - 
            ... - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Memory Management
        </chapter_context>
        <tags>eel, memory management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_memcpy</slug>
        <title>memcpy</title>
        <functioncall prog_lang="eel">memcpy(dest,src,length)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Copies length items of memory from src to dest. Regions are permitted to overlap.
        </description>
        <parameters>
            dest - 
            src - 
            length - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Memory Management
        </chapter_context>
        <tags>eel, memory management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_memset</slug>
        <title>memset</title>
        <functioncall prog_lang="eel">memset(offset,value,length)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets length items of memory at offset to value.
        </description>
        <parameters>
            offset - 
            value - 
            length - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Memory Management
        </chapter_context>
        <tags>eel, memory management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_min</slug>
        <title>min</title>
        <functioncall prog_lang="eel">min(&value,&value2)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns (by reference) the minimum value of the two parameters. Since min() returns by reference, expressions such as min(x,y) = 5 are possible.
        </description>
        <parameters>
            value - 
            value2 - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, minimum of two parameters</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_printf</slug>
        <title>printf</title>
        <functioncall prog_lang="eel">printf(format[, ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Output formatted string to system-specific destination, see [sprintf\(\)](#eel_sprintf) for more information

              * %% = %  
              * %s = string from parameter  
              * %d = parameter as integer  
              * %i = parameter as integer  
              * %u = parameter as unsigned integer  
              * %x = parameter as hex (lowercase) integer  
              * %X = parameter as hex (uppercase) integer  
              * %c = parameter as character  
              * %f = parameter as floating point  
              * %e = parameter as floating point (scientific notation, lowercase)  
              * %E = parameter as floating point (scientific notation, uppercase)  
              * %g = parameter as floating point (shortest representation, lowercase)  
              * %G = parameter as floating point (shortest representation, uppercase)  

            Many standard C printf() modifiers can be used, including:

              * %.10s = string, but only print up to 10 characters  
              * %-10s = string, left justified to 10 characters  
              * %10s = string, right justified to 10 characters  
              * %+f = floating point, always show sign  
              * %.4f = floating point, minimum of 4 digits after decimal point  
              * %10d = integer, minimum of 10 digits (space padded)  
              * %010f = integer, minimum of 10 digits (zero padded)  

            Values for format specifiers can be specified as additional parameters to printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).
        </description>
        <parameters>
            format - 
            ... - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, string management, print, system</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_rand</slug>
        <title>rand</title>
        <functioncall prog_lang="eel">rand([max])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns a pseudorandom real number between 0 and the parameter, inclusive. If the parameter is omitted or less than 1.0, 1.0 is used as a maximum instead.
        </description>
        <parameters>
            max - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_runloop</slug>
        <title>runloop</title>
        <functioncall prog_lang="eel">runloop(string code)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().

            Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.

            Each function called by runloop can only be deferred once per runloop-cycle(unlike in Lua, where you can have one function deferred multiple times).

            Unlike "normal" loops, runloop allows looped code to run in the background without blocking Reaper's user interface.
            That way, scripts, who need longer time to run, can be made possible.

            Example:
            the following example allows adding a to variable A with each runloop-cycle.
            <pre><code>
            function main()(
              A=A+1;
              runloop("main()");
            );

            main();
            </code></pre>
        </description>
        <parameters>
            string code - the code to be run. You can also add a regular functioncall into this string, like "main()", if there's a main-function in the script
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, code, defer, run loop, background scripts</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sign</slug>
        <title>sign</title>
        <functioncall prog_lang="eel">sign(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns 1.0 if the parameter is greater than 0, -1.0 if the parameter is less than 0, or 0 if the parameter is 0.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, sign</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sin</slug>
        <title>sin</title>
        <functioncall prog_lang="eel">sin(angle)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the sine of the angle specified (specified in radians -- to convert from degrees to radians, multiply by $pi/180, or 0.017453).
        </description>
        <parameters>
            angle - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sleep</slug>
        <title>sleep</title>
        <functioncall prog_lang="eel">sleep(ms)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Yields the CPU for the millisecond count specified, calling Sleep() on Windows or usleep() on other platforms.
        </description>
        <parameters>
            ms - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, sleep</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sprintf</slug>
        <title>sprintf</title>
        <functioncall prog_lang="eel">sprintf(#dest,format[, ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Formats a string and stores it in #dest. Format specifiers begin with %, and may include:

                * %% = %
                * %s = string from parameter
                * %d = parameter as integer
                * %i = parameter as integer
                * %u = parameter as unsigned integer
                * %x = parameter as hex (lowercase) integer
                * %X = parameter as hex (uppercase) integer
                * %c = parameter as character
                * %f = parameter as floating point
                * %e = parameter as floating point (scientific notation, lowercase)
                * %E = parameter as floating point (scientific notation, uppercase)
                * %g = parameter as floating point (shortest representation, lowercase)
                * %G = parameter as floating point (shortest representation, uppercase)

            Many standard C printf() modifiers can be used, including:

                * %.10s = string, but only print up to 10 characters
                * %-10s = string, left justified to 10 characters
                * %10s = string, right justified to 10 characters
                * %+f = floating point, always show sign
                * %.4f = floating point, minimum of 4 digits after decimal point
                * %10d = integer, minimum of 10 digits (space padded)
                * %010f = integer, minimum of 10 digits (zero padded)

            Values for format specifiers can be specified as additional parameters to sprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).
        </description>
        <parameters>
            #dest - 
            format - 
            ... - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, string management, format string, printf</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sqr</slug>
        <title>sqr</title>
        <functioncall prog_lang="eel">sqr(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the square of the parameter (similar to value*value, but only evaluating value once).
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sqrt</slug>
        <title>sqrt</title>
        <functioncall prog_lang="eel">sqrt(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the square root of the parameter. If the parameter is negative, the return value is undefined.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_stack_exch</slug>
        <title>stack_exch</title>
        <functioncall prog_lang="eel">stack_exch(&value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Exchanges a value with the top of the stack, and returns a reference to the parameter (with the new value).
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Stack Management
        </chapter_context>
        <tags>eel, stack management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_stack_peek</slug>
        <title>stack_peek</title>
        <functioncall prog_lang="eel">stack_peek(index)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns a reference to the item on the top of the stack (if index is 0), or to the Nth item on the stack if index is greater than 0. 
        </description>
        <parameters>
            index - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Stack Management
        </chapter_context>
        <tags>eel, stack management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_stack_pop</slug>
        <title>stack_pop</title>
        <functioncall prog_lang="eel">stack_pop(&value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Pops a value from the user stack into value, or into a temporary buffer if value is not specified, and returns a reference to where the stack was popped. Note that no checking is done to determine if the stack is empty, and as such stack_pop() will never fail.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Stack Management
        </chapter_context>
        <tags>eel, stack management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_stack_push</slug>
        <title>stack_push</title>
        <functioncall prog_lang="eel">stack_push(&value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Pushes value onto the user stack, returns a reference to the parameter.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Stack Management
        </chapter_context>
        <tags>eel, stack management</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_str_delsub</slug>
        <title>str_delsub</title>
        <functioncall prog_lang="eel">str_delsub(#str,pos,len)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Deletes len characters at offset pos from #str, and returns #str.
        </description>
        <parameters>
            #str - 
            pos - 
            len - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, delete</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_str_getchar</slug>
        <title>str_getchar</title>
        <functioncall prog_lang="eel">str_getchar(str,offset[,type])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Returns the data at byte-offset offset of str. 
            If offset is negative, position is relative to end of string.type defaults to signed char, but can be specified to read raw binary data in other formats 
            (note the single quotes, these are single/multi-byte characters):

            * 'c' - signed char
            * 'cu' - unsigned char
            * 's' - signed short
            * 'S' - signed short, big endian
            * 'su' - unsigned short
            * 'Su' - unsigned short, big endian
            * 'i' - signed int
            * 'I' - signed int, big endian
            * 'iu' - unsigned int
            * 'Iu' - unsigned int, big endian
            * 'f' - float
            * 'F' - float, big endian
            * 'd' - double
            * 'D' - double, big endian
        </description>
        <parameters>
            str - 
            offset - 
            type - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, byte at offset</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_str_insert</slug>
        <title>str_insert</title>
        <functioncall prog_lang="eel">str_insert(#str,srcstr,pos)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Inserts srcstr into #str at offset pos. Returns #str.
        </description>
        <parameters>
            #str - 
            srcstr - 
            pos - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, insert</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_str_setchar</slug>
        <title>str_setchar</title>
        <functioncall prog_lang="eel">str_setchar(#str,offset,val[,type]))</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Sets value at offset offset, type optional. offset may be negative to refer to offset relative to end of string, or between 0 and length, inclusive, and if set to length it will lengthen string. See eel_str_getchar for more information on types.
        </description>
        <parameters>
            #str - 
            offset - 
            val - 
            type - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:eel_str_getchar
                   gets a character from the keyboard-queue, as input into a gfx-window
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, get character at offset</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_str_setlen</slug>
        <title>str_setlen</title>
        <functioncall prog_lang="eel">str_setlen(#str,len)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets length of #str (if increasing, will be space-padded), and returns #str.
        </description>
        <parameters>
            #str - 
            len - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, set length</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strcat</slug>
        <title>strcat</title>
        <functioncall prog_lang="eel">strcat(#str,srcstr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Appends srcstr to #str, and returns #str
        </description>
        <parameters>
            #str - 
            srcstr - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, append</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strcmp</slug>
        <title>strcmp</title>
        <functioncall prog_lang="eel">strcmp(str,str2)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Compares strings, returning 0 if equal
        </description>
        <parameters>
            str - 
            str2 - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, compare</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strcpy</slug>
        <title>strcpy</title>
        <functioncall prog_lang="eel">strcpy(#str,srcstr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Copies the contents of srcstr to #str, and returns #str
        </description>
        <parameters>
            #str - 
            srcstr - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, copy</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strcpy_from</slug>
        <title>strcpy_from</title>
        <functioncall prog_lang="eel">strcpy_from(#str,srcstr,offset)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Copies srcstr to #str, but starts reading srcstr at offset offset
        </description>
        <parameters>
            #str - 
            srcstr - 
            offset - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, copy, offset</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strcpy_substr</slug>
        <title>strcpy_substr</title>
        <functioncall prog_lang="eel">strcpy_substr(#str,srcstr,offs,ml))</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PHP-style (start at offs, offs<0 means from end, ml for maxlen, ml<0 = reduce length by this amt)
        </description>
        <parameters>
            #str - 
            srcstr - 
            offs - 
            ml - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, substring, php style</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_stricmp</slug>
        <title>stricmp</title>
        <functioncall prog_lang="eel">stricmp(str,str2)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Compares strings ignoring case, returning 0 if equal.
        </description>
        <parameters>
            str - 
            str2 - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, comparing, ignoring case</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strlen</slug>
        <title>strlen</title>
        <functioncall prog_lang="eel">strlen(str)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the length of the string passed as a parameter.
        </description>
        <parameters>
            str - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, get length</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strncat</slug>
        <title>strncat</title>
        <functioncall prog_lang="eel">strncat(#str,srcstr,maxlen)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Appends srcstr to #str, stopping after maxlen characters of srcstr. Returns #str.
        </description>
        <parameters>
            #str - 
            srcstr - 
            maxlen - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, concatenate, append</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strncmp</slug>
        <title>strncmp</title>
        <functioncall prog_lang="eel">strncmp(str,str2,maxlen)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Compares strings giving up after maxlen characters, returning 0 if equal.
        </description>
        <parameters>
            str - 
            str2 - 
            maxlen - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, compare</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strncpy</slug>
        <title>strncpy</title>
        <functioncall prog_lang="eel">strncpy(#str,srcstr,maxlen)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Copies srcstr to #str, stopping after maxlen characters. Returns #str.
        </description>
        <parameters>
            #str - 
            srcstr - 
            maxlen - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, copy</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strnicmp</slug>
        <title>strnicmp</title>
        <functioncall prog_lang="eel">strnicmp(str,str2,maxlen)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Compares strings giving up after maxlen characters, ignoring case, returning 0 if equal.
        </description>
        <parameters>
            str - 
            str2 - 
            maxlen - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Strings
        </chapter_context>
        <tags>eel, string management, compare</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tan</slug>
        <title>tan</title>
        <functioncall prog_lang="eel">double tangent = tan(double angle)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the tangent of the angle specified (specified in radians).
        </description>
        <retvals>
            double tangent - the tangent of the angle
        </retvals>
        <parameters>
            double angle - the angle in radians
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Math
        </chapter_context>
        <tags>eel, math</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_close</slug>
        <title>tcp_close</title>
        <functioncall prog_lang="eel">integer retval = tcp_close(tcp_handler connection)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Closes a TCP connection created by tcp_listen() or tcp_connect().
        </description>
        <retvals>
            integer retval - 1, closing was successful; 0, closing was unsuccessful
        </retvals>
        <parameters>
            tcp_handler connection - the handler to the tcp-connection
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Network
        </chapter_context>
        <tags>eel, network</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_connect</slug>
        <title>tcp_connect</title>
        <functioncall prog_lang="eel">tcp_handler connection = tcp_connect(string address, integer port[, optional integer block])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Create a new TCP connection to address:port. If block is specified and 0, connection will be made nonblocking. Returns TCP connection ID greater than 0 on success.
        </description>
        <retvals>
            tcp_handler connection - the handler to the tcp-connection
        </retvals>
        <parameters>
            string address - the tcp-address of the connection
            integer port - the port of the connection
            optional integer block - 0, non-blocking connection; unspecified, blocking connection
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Network
        </chapter_context>
        <tags>eel, network</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_listen</slug>
        <title>tcp_listen</title>
        <functioncall prog_lang="eel">tcp_listen(integer port[, optional string interface, optional string #ip_out])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Listens on port specified. Returns less than 0 if could not listen, 0 if no new connection available, or greater than 0 (as a TCP connection ID) if a new connection was made. If a connection made and #ip_out specified, it will be set to the remote IP. interface can be empty for all interfaces, otherwise an interface IP as a string.
        </description>
        <parameters>
            integer port - 
            optional string interface - 
            optional string #ip_out - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Network
        </chapter_context>
        <tags>eel, network</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_listen_end</slug>
        <title>tcp_listen_end</title>
        <functioncall prog_lang="eel">tcp_listen_end(integer port)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Ends listening on port specified.
        </description>
        <parameters>
            integer port - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Network
        </chapter_context>
        <tags>eel, network</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_recv</slug>
        <title>tcp_recv</title>
        <functioncall prog_lang="eel">integer retval = tcp_recv(tcp_handler connection, string #str[, integer maxlen])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Receives data from a connection to #str. If maxlen is specified, no more than maxlen bytes will be received. If non-blocking, 0 will be returned if would block. Returns less than 0 if error.
        </description>
        <retvals>
            integer retval - 0, receiving works; -1, receiving doesn't work
        </retvals>
        <parameters>
            tcp_handler connection - 
            string #str - 
            integer maxlen - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Network
        </chapter_context>
        <tags>eel, network</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_send</slug>
        <title>tcp_send</title>
        <functioncall prog_lang="eel">tcp_send(tcp_handler connection, string str[, optional integer len])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sends a string to connection. Returns -1 on error, 0 if connection is non-blocking and would block, otherwise returns length sent. If len is specified and not less than 1, only the first len bytes of the string parameter will be sent.
        </description>
        <parameters>
            tcp_handler connection - 
            string str - 
            optional integer len - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Network
        </chapter_context>
        <tags>eel, network</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_set_block</slug>
        <title>tcp_set_block</title>
        <functioncall prog_lang="eel">integer retval = tcp_set_block(connection,block)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets whether a connection blocks.
        </description>
        <retvals>
            integer retval - the new block-state
        </retvals>
        <parameters>
            tcp_handlerconnection - the handler to the tcp-connection
            integer block - 0, keep block unblocked
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Network
        </chapter_context>
        <tags>eel, network</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_time</slug>
        <title>time</title>
        <functioncall prog_lang="eel">time([&val])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets the parameter (or a temporary buffer if omitted) to the number of seconds since January 1, 1970, and returns a reference to that value. The granularity of the value returned is 1 second.
        </description>
        <parameters>
            integer seconds - number of seconds since January 1, 1970
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, time, system time</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_time_precise</slug>
        <title>time_precise</title>
        <functioncall prog_lang="eel">float timestamp = time_precise([&timestamp])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets the parameter (or a temporary buffer if omitted) to a system-local timestamp in seconds, and returns a reference to that value. The granularity of the value returned is system defined (but generally significantly smaller than one second).
        </description>
        <retval>
            float time - the timestamp
        </retval>
        <parameters>
            float timestamp - the timestamp
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, precise time</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_while</slug>
        <title>while</title>
        <functioncall prog_lang="eel">integer retval = while(code expression)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Executes expression until expression evaluates to zero, or until 1048576 iterations occur. An alternate and more useful syntax is while (expression) ( statements ), which evaluates statements after every non-zero evaluation of expression.
            <pre><code>
                A=0; // set A to 0

                // while A is still less than 10, add 1 to A
                while(A < 10)(
                  A=A+1;
                );
            </code></pre>
        </description>
        <retvals>
            integer retval - 0
        </retvals>
        <parameters>
            code expression - the expression that needs to return true or false
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            EEL-only functions
            Misc
        </chapter_context>
        <tags>eel, misc, while</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_atexit</slug>
        <title>atexit</title>
        <functioncall prog_lang="lua">reaper.atexit(function function)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.

            You can't defer this atexit-function, when it is run as exit-function, though, when it is run regularily before exiting the script.

            You can define more than one atexit-function. They will be run in the order they've been registered as atexit-functions.
            For example:

                reaper.atexit(exit1)
                reaper.atexit(exit2)
                reaper.atexit(exit3)

            will run exit1, exit2 and then exit3, when exiting the script.

            You can have up to 1024 atexit-functions set in one script, no matter if its different or the same function.
        </description>
        <parameters>
            function function - the function, with which the script shall finish
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Misc
        </chapter_context>
        <tags>lua, misc, atexit, exit code</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
Mespotine
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_defer</slug>
        <title>defer</title>
        <functioncall prog_lang="lua">boolean retval = reaper.defer(function function)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.

            There can be 1024 defer-nodes running at the same time in one script, no matter if it's different functions or the same one.
        </description>
        <retvals>
            boolean retval - true, node could be created; false, you tried to add more than 1024 defer-nodes in the script
        </retvals>
        <parameters>
            function function - the function to be called, when the current defer/runloop-run has ended
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_get_action_context</slug>
        <title>get_action_context</title>
        <functioncall prog_lang="lua">boolean is_new_value, string filename_with_path, integer sectionID, integer cmdID, integer mode, integer resolution, integer val, string contextstr = reaper.get_action_context()</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description indent="default">
            Returns contextual information about the script, typically MIDI/OSC input values.val will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.Notes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.

            For relative mode bindings, calling get_action_context() will return the accumulated relative value in decoded form (not 65 or 63, but +1/-1 etc), and clear the internal state. So if you call it multiple times, the first one will return the accumulated value, and the second will always return 0.
            
            contextstr may be empty or one of:
              midi:XX[:YY] (one or two bytes hex)
              [wheel|hwheel|mtvert|mthorz|mtzoom|mtrot|mediakbd]:flags
              key:flags:keycode
              osc:/msg[:f=FloatValue|:s=StringValue]
              KBD_OnMainActionEx
              (flags may include V=virtkey, S=shift, A=alt/option, C=control/command, W=win/control)
        </description>
        <retvals>
            boolean is_new_value - unknown
            string filename_with_path - the script's own filename with path
            integer sectionID - the section, in which this script was called
            integer cmdID - the command-id associated with this script
            integer mode - -1, if script isn't run by shortcut; 55953, if script is run by shortcut
            integer resolution - -1, if script isn't run by shortcut; resolution of OSC(14 bit)/MIDI(7 bit)-shortcut
            integer val - -1, if script isn't run by shortcut; the value sent by OSC or MIDI
            string contextstr - the shortcut, that ran this action, more info in the description
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx_variables</slug>
        <title>gfx_variables</title>
        <functioncall prog_lang="lua">gfx VARIABLES</functioncall>
        <requires>
            Reaper=6.30
        </requires>
        <description indent="default">
            The following global variables are special and will be used by the graphics system:

              * gfx.r - current red component (0..1) used by drawing operations.
              * gfx.g - current green component (0..1) used by drawing operations.
              * gfx.b - current blue component (0..1) used by drawing operations.
              * gfx.a2 - current alpha component (0..1) used by drawing operations when writing solid colors (normally ignored but useful when creating transparent images).
              * gfx.a - alpha for drawing (1=normal).
              * gfx.mode - blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit().
              * gfx.w - width of the UI framebuffer.
              * gfx.h - height of the UI framebuffer.
              * gfx.x - current graphics position X. Some drawing functions use as start position and update.
              * gfx.y - current graphics position Y. Some drawing functions use as start position and update.
              * gfx.clear - if greater than -1.0, framebuffer will be cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black).
              * gfx.dest - destination for drawing operations, -1 is main framebuffer, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).
              * gfx.texth - the (READ-ONLY) height of a line of text in the current font. Do not modify this variable.
              * gfx.ext_retina - to support hidpi/retina, callers should set to 1.0 on initialization, this value will be updated to value greater than 1.0 (such as 2.0) if retina/hidpi. On macOS gfx.w/gfx.h/etc will be doubled, but on other systems gfx.w/gfx.h will remain the same and gfx.ext_retina is a scaling hint for drawing.
              * gfx.mouse_x - current X coordinate of the mouse relative to the graphics window.
              * gfx.mouse_y - current Y coordinate of the mouse relative to the graphics window.
              * gfx.mouse_wheel - wheel position, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
              * gfx.mouse_hwheel - horizontal wheel positions, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
              * gfx.mouse_cap - a bitfield of mouse and keyboard modifier state:
                    1: left mouse button
                    2: right mouse button
                    4: Control key
                    8: Shift key
                    16: Alt key
                    32: Windows key
                    64: middle mouse button
                    
            Note: Mousebuttons will be returned after gfx_init(), the other keyboard-modifier only when using gfx_getchar()!
                    
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.arc</slug>
        <title>gfx.arc</title>
        <functioncall prog_lang="lua">gfx.arc(integer x, integer y, integer r, number ang1, number ang2, optional number antialias)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.
        </description>
        <parameters>
            integer x - x position of the center of the circle
            integer y - y position of the center of the circle
            integer r - the radius of the circle
            number ang1 - the beginning of the circle in radians; meant for partial circles; 0-6.28
            number ang2 - the end of the circle in radians; meant for partial circles; 0-6.28
            optional number antialias - <=0.5, antialias off; >0.5, antialias on
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.blit</slug>
        <title>gfx.blit</title>
        <functioncall prog_lang="lua">integer source = gfx.blit(integer source, number scale, number rotation, optional number srcx, optional number srcy, optional number srcw, optional number srch, optional integer destx, optional integer desty, optional integer destw, optional integer desth, optional integer rotxoffs,  optional integer rotyoffs)</functioncall>
        <requires>
            Reaper=6.46
        </requires>
        <description indent="default">
            Blits(draws) the content of source-image to another source-image or an opened window.
            
            Copies from source (-1 = main framebuffer, or an image from gfx.loadimg() etc), using current opacity and copy mode (set with gfx.a, gfx.mode).

            If destx/desty are not specified, gfx.x/gfx.y will be used as the destination position.
            
            scale (1.0 is unscaled) will be used only if destw/desth are not specified.
            
            rotation is an angle in radians
            
            srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size)
            
            destx/desty/destw/desth specify destination rectangle (if not specified destw/desth default to srcw/srch * scale).
        </description>
        <parameters>
           integer source - the source-image/framebuffer to blit; -1 to 1023; -1 for the currently displayed framebuffer.
           number scale - the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger
                        - has no effect, when destx, desty, destw, desth are given
           number rotation - the rotation-factor; 0 to 6.28; 3.14 for 180 degrees.
           optional number srcx - the x-coordinate-offset in the source-image
           optional number srcy - the y-coordinate-offset in the source-image
           optional number srcw - the width-offset in the source-image
           optional number srch - the height-offset in the source-image
           optional integer destx - the x-coordinate of the blitting destination
           optional integer desty - the y-coordinate of the blitting destination
           optional integer destw - the width of the blitting destination; may lead to stretched images
           optional integer desth - the height of the blitting destination; may lead to stretched images
           optional number rotxoffs - influences rotation
           optional number rotyoffs - influences rotation
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.blitext</slug>
        <title>gfx.blitext</title>
        <functioncall prog_lang="lua">number retval = gfx.blitext(source,coordinatelist,rotation)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Deprecated, use gfx.blit instead.
            
            Note: the naming of the function might be misleading, as it has nothing to do with blitting of text, but rather is called Blit Ext.
        </description>
        <deprecated since_when="Reaper 5.62" alternative="gfx_blit"/>
        <retvals>
            number retval - the index of the source that got blitted
        </retvals>
        <parameters>
            integer source - the source of the blitted image
            table coordinatelist - 
            number rotation - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.blurto</slug>
        <title>gfx.blurto</title>
        <functioncall prog_lang="lua">gfx.blurto(integer x, integer y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y.
        </description>
        <parameters>
            integer x - x position of the other edge of the blur-region
            integer y - y position of the other edge of the blur-region
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.circle</slug>
        <title>gfx.circle</title>
        <functioncall prog_lang="lua">gfx.circle(integer x, integer y, integer r, optional number fill, optional number antialias)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a circle, optionally filling/antialiasing. 
        </description>
        <parameters>
            integer x - x position of center of the circle
            integer y - y position of center of the circle
            integer r - radius of the circle
            optional number fill - <=0.5, circle is not filled; >0.5, circle is filled
            optional number antialias - <=0.5, circle is not antialiased; >0.5, circle is antialiased
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.clienttoscreen</slug>
        <title>gfx.clienttoscreen</title>
        <functioncall prog_lang="lua">int convx, int convy = gfx.clienttoscreen(integer x, integer y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Converts the coordinates x,y to screen coordinates, returns those values.
        </description>
        <retvals>
            integer convx - the converted coordinate in relation of the screen-viewport
            integer convy - the converted coordinate in relation of the screen-viewport
        </retvals>
        <parameters>
            integer x - the x coordinate within(!) the gfx.init()-window, that shall be converted to screen-coordinates
            integer y - the y coordinate within(!) the gfx.init()-window, that shall be converted to screen-coordinates 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.deltablit</slug>
        <title>gfx.deltablit</title>
        <functioncall prog_lang="lua">number retval = gfx.deltablit(integer srcimg, integer srcs, integer srct, integer srcw, integer srch, number destx, number desty, number destw, number desth, number dsdx, number dtdx, number dsdy, number dtdy, number dsdxdy, number dtdxdy,optional integer usecliprect)</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description indent="default">
            Blits from srcimg(srcs,srct,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.

            This function allows you to manipulate the image, which you want to blit, by transforming, moving or cropping it.

            To do rotation, you can manipulate dtdx and dsdy together.
        </description>
        <retvals>
            number retval - unknown, usually 0
        </retvals>
        <parameters>
            integer srcimg - image - the image to blit
            integer srcs - positiondeltaX - the delta of the x-position of the image within the blitted area in pixels(useful default: 0)
            integer srct - positiondeltaY - the delta of the y-position of the image within the blitted area in pixels(useful default: 0)
            integer srcw - unknown - (useful default: 0)
            integer srch - unknown - (useful default: 0)
            number destx - positiondeltaX - the delta of the x-position of the blitted area in pixels(useful default: 0)
            number desty - positiondeltaY - the delta of the y-position of the blitted area in pixels(useful default: 0)
            number destw - blitsizeX - the x-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: width of the image)
            number desth - blitsizeY - the y-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: height of the image)
            number dsdx - stretchfactorX, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeX(useful default: 1)
            number dtdx - deltaY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta is linear(useful default: 0)
            number dsdy - deltaX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta is linear(useful default: 0)
            number dtdy - stretchfactorY, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeY(useful default: 1)
            number dsdxdy - deltacurvedY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta "curves" the delta via a bezier(useful default: 0)
            number dtdxdy - deltacurvedX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta "curves" the delta via a bezier(useful default: 0)
            optional integer usecliprect - can be set to 0 or 1(useful default: 0)
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.dock</slug>
        <title>gfx.dock</title>
        <functioncall prog_lang="lua">number querystate, optional integer window_x_position, optional integer window_y_position, optional integer window_width, optional integer window_height = gfx.dock(integer v, optional integer wx, optional integer wy, optional integer ww, optional integer wh)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Queries or sets the docking-state of the gfx.init()-window.
            Call with v=-1 to query docked state, otherwise v>=0 to set docked state. 
            State is &1 if docked, second byte is docker index (or last docker index if undocked). 

            If you pass numbers to wx-wh, you can query window size and position additionally to the dock-state

            A specific docking index does not necessarily represent a specific docker, means, you can not query/set left docker top, but rather all dockers that exist in the current screenset.
            So the first queried/set docker can be top-left-docker or the top docker or even one of the bottom dockers.
            The order doesn't seem to make any sense. Especially with more than 16 windows docked in the current screenset.
        </description>
        <retvals>
            integer querystate - 0 if not docked; &1 if docked;  the bits &256, &512, &1024, &2048 get the docker-index
            integer window_x_position - the x position of the window in pixels; only if wx~=nil
            integer window_y_position - the y position of the window in pixels; only if wy~=nil
            integer window_width - the width of the window in pixels; only if ww~=nil
            integer window_height - the height of the window in pixels ; only if wh~=nil
        </retvals>
        <parameters>
            integer v - -1, query docking-state; 0 and higher, set state of the window to docked; the bits &256, &512, &1024, &2048 set the docker-index
            optional integer wx - set to a number to query current-windowx-position
            optional integer wy - set to a number to query current-windowy-position
            optional integer ww - set to a number to query current-window-width
            optional integer wh - set to a number to query current-window-height
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.drawchar</slug>
        <title>gfx.drawchar</title>
        <functioncall prog_lang="lua">integer char = gfx.drawchar(integer char)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character.
        </description>
        <retvals>
            integer char - the character drawn; 0, if invalid(like strings or characters passed as parameter)
        </retvals>
        <parameters>
            integer char - the numeric ASCII-representation of the character to be drawn
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.drawnumber</slug>
        <title>gfx.drawnumber</title>
        <functioncall prog_lang="lua">gfx.drawnumber(number n, integer ndigits)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth.
        </description>
        <parameters>
            number n - the number to be drawn
            integer ndigits - the number of digits for the precision
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.drawstr</slug>
        <title>gfx.drawstr</title>
        <functioncall prog_lang="lua">gfx.drawstr(string str, optional integer flags, optional integer right, optional integer bottom)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.

            You can optionally set a clipping area for the text, if you set parameter flags&256 and the parameters right and bottom.

            On Windows, fonts with a size > 255 may have trouble of being displayed correctly, due problems with the font-rendering and the alpha-channel. <a href="https://forum.cockos.com/showpost.php?p=2311977&postcount=7">Justin's post about this.</a>
            To overcome this, try this to disable the alpha-channel: 
            By default, gfx.blit() blits with alpha channel. You can disable this behavior by setting "gfx.mode=2" before calling gfx.blit().
        </description>
        <parameters>
            string str - the string to be drawn into the gfx.init-window
            optional integer flags -influence, how the text shall be drawn
                                   - flags&1: center horizontally
                                   - flags&2: right justify
                                   - flags&4: center vertically
                                   - flags&8: bottom justify
                                   - flags&256: ignore right/bottom, otherwise text is clipped to (gfx.x, gfx.y, right, bottom)
            optional integer right - if flags&256 is set, this parameter clips text on the right side in pixels
            optional integer bottom - if flags&256 is set, this parameter clips text on the bottom side in pixels 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.getchar</slug>
        <title>gfx.getchar</title>
        <functioncall prog_lang="lua">integer charactercode = gfx.getchar(optional integer character, optional integer unicode_char)</functioncall>
        <requires>
            Reaper=6.74
        </requires>
        <description>
            If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. 

            If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.
            Common values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, 
            including 'home', 'up', 'down', 'left', 'right', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. 

            Shortcuts with scope "Global + textfields" will still run the associated action, scope of "Normal" or "Global" will not.

            Modified and special keys can also be returned, including:  

            - Ctrl/Cmd+A..Ctrl+Z as 1..26  
            - Ctrl/Cmd+Alt+A..Z as 257..282  
            - Alt+A..Z as 'A'+256..'Z'+256  
            - 27 for ESC  
            - 13 for Enter  
            - ' ' for space  
            -
            - use 65536 as parameter charactercode to query special flags, returns: &1 (supported in this script), &2=window has focus, &4=window is visible  

            If the user typed in multiple characters, the character queue will hold them. So calling gfx.getchar multiple times, until it returns 0 or -1 will give you all typed keys.

            Typed characters between 256 and 1024(maybe higher?) seem to hint at multibyte-unicode characters. 
            That means, you need to take the next character-value in the character-queue into consideration as well to get the current unicode-character!
            
            If unichar is specified, it will be set to the unicode value of the key if available (and the return value may be the unicode value or a raw key value as described above, depending). If unichar is not specified, unicode codepoints greater than 255 will be returned as 'u'<<24 + value
            
            Note that calling gfx.getchar() at least once causes gfx.mouse_cap to reflect keyboard modifiers even when the mouse is not captured.

        </description>
        <retvals>
            integer charactercode - either the charactercode or 0 if nothing is pressed
                                  - -1, if the gfx.init-window is closed
                                  - 
                                  - When the parameter character is given and not 0, charactercode is either 
                                  - 0, nothing is pressed, or
                                  - >0, the character you want to check for is pressed.
            integer unicode_charactercode - the charactercode of the character encoded as utf8-unicode
        </retvals>
        <parameters>
            optional integer character - the character to check for; use 65536 to check window-state(visible, focus)
                                       -    &1 (supported in this script), &2=window has focus, &4=window is visible
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.74 - added retval for unicode-characters
          Reaper 6.72 - improved handling of the Alt-Gr-modifier key
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.getdropfile</slug>
        <title>gfx.getdropfile</title>
        <functioncall prog_lang="lua">integer retval, string filename = gfx.getdropfile(integer idx)</functioncall>
        <requires>
            Reaper=6.69
        </requires>
        <description indent="default">
            Returns filenames, drag'n'dropped into a window created by gfx.init().
            Use idx to get a specific filename, that has been dropped into the gfx.init()-window.

            When returned filename starts with @fx: it is an fx dropped.
      
            Does NOT support mediaitems/takes or other Reaper-objects!

            It MUST be called BEFORE calling gfx.update, as gfx.update flushes the filelist accessible with gfx.getdropfile.
        </description>
        <retvals>
            integer retval - 0, if droppped-filename with indexnumber idx doesn't exist; 1, if it exists; hints, if you already reached the last filename dropped.
            string filename - the filename of dropped-file with indexnumber idx; if filename starts with @fx: then the filename is a dropped fx
        </retvals>
        <parameters>
            integer idx - the indexnumber for a filename, that has been dropped into a gfx.init()-window.
                        - 0, the first file; 1, the second file; 2, the third file, etc.
                        - -1, clears the filelist.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Misc
        </chapter_context>
        <tags>dragndrop, drop, file, filename, window, gfx, window, lua</tags>
        <changelog>
          Reaper 6.69 - added possibility to for drag/drop from FX browser to gfx windows with send filenames are @fx:fx_ident
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.getfont</slug>
        <title>gfx.getfont</title>
        <functioncall prog_lang="lua">integer fontindex, string fontface = gfx.getfont()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Returns current font index, and the actual font face used by this font (if available).

            Use gfx.setfont to set a font for a specific index.
        </description>
        <retvals>
            integer fontindex - the index of the font used. 
            string fontface - the font-face(fontname) of the currently used font
        </retvals>
        <linked_to desc="see also:">
            Reaper:lua_gfx.setfont
                   sets a font, used by the gfx-functions
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.getimgdim</slug>
        <title>gfx.getimgdim</title>
        <functioncall prog_lang="lua">integer w, integer h = gfx.getimgdim(integer handle)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Retrieves the dimensions of an image specified by handle, returns w, h pair.
            Handle is basically a frame-buffer.
        </description>
        <retvals>
            integer w - the width of the image-handle in pixels
            integer h - the height of the image-handle in pixels
        </retvals>
        <parameters>
            integer handle - the index of the image-handle/framebuffer to retrieve the dimensions from;-1 to 1023; -1 for the currently displayed framebuffer.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.getpixel</slug>
        <title>gfx.getpixel</title>
        <functioncall prog_lang="lua">integer r, integer g, integer b = gfx.getpixel()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)
        </description>
        <retvals>
            integer r - the red-color-value, a value between 0 to 1
            integer g - the green-color-value, a value between 0 to 1
            integer b - the blue-color-value, a value between 0 to 1
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.gradrect</slug>
        <title>gfx.gradrect</title>
        <functioncall prog_lang="lua">gfx.gradrect(number x, number y, number w, number h, number r, number g, number b, number a[, optional number drdx, optional number dgdx, optional number dbdx, optional number dadx, optional number drdy, optional number dgdy, optional number dbdy, optional number dady])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.
        </description>
        <parameters>
            number x - 
            number y - 
            number w - 
            number h - 
            number r -
            number g -
            number b - 
            number a -
            optional number drdx -
            optional number dgdx - 
            optional number dbdx -
            optional number dadx -
            optional number drdy - 
            optional number dgdy - 
            optional number dbdy - 
            optional number dady - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.init</slug>
        <title>gfx.init</title>
        <functioncall prog_lang="lua">integer retval = gfx.init(string name, optional integer width, optional integer height, optional integer dockstate, optional integer xpos, optional integer ypos)</functioncall>
        <requires>
            Reaper=6.40
        </requires>
        <description>
            Initializes the graphics window with title name. Suggested width and height can be specified.Once the graphics window is open, gfx.update() should be called periodically. 

            Only one graphics-window can be opened per script! Calling gfx.ini after a window has been opened has no effect.

            To resize/reposition the window, call gfx.init again and pass an empty string as name-parameter.
            
            To retitle the window, run gfx.init again with the new title as parameter name.

            To get the current window-states, dimensions, etc, you can use gfx.dock).
        </description>
        <retvals>
            number retval - 1.0, if window is opened
        </retvals>
        <parameters>
            string name - the name of the window, which will be shown in the title of the window
            optional integer width - the width of the window; minmum is 50
            optional integer height - the height of the window; minimum is 16
            optional integer dockstate - &1=0, undocked; &1=1, docked
            optional integer xpos - x-position of the window in pixels; minimum is -80
            optional integer ypos - y-position of the window in pixels; minimum is -15
        </parameters>
        <linked_to desc="see also:">
            Reaper:lua_gfx.update
                   updates the gfx-window
            Reaper:lua_gfx.dock
                   docks the gfx-window
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.line</slug>
        <title>gfx.line</title>
        <functioncall prog_lang="lua">gfx.line(integer x, integer y, integer x2, integer y2, optional number aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased. 
        </description>
        <parameters>
            integer x - x-position of start of the line in pixels
            integer y - y-position of start of the line in pixels
            integer x2 - x-position of the end of the line in pixels
            integer y2 - y-position of the end of the line in pixels
            optional number aa - <0.5, no antialias; >=0.5, antialias
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.lineto</slug>
        <title>gfx.lineto</title>
        <functioncall prog_lang="lua">gfx.lineto(integer x, integer y, number aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y.
        </description>
        <parameters>
            integer x - x-position of the end of the line in pixels
            integer y - y-position of the end of the line in pixels
            optional number aa - <0.5, no antialias; >=0.5, antialias
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.loadimg</slug>
        <title>gfx.loadimg</title>
        <functioncall prog_lang="lua">integer retval = gfx.loadimg(integer image, string filename)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. 
        </description>
        <retvals>
            integer retval - the image-index in case of successful loading; -1 if loading failed
        </retvals>
        <parameters>
            integer image - the buffer-index(0 - 1023), in which to load the image
            string filename - the path+filename of the image to be loaded
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.measurechar</slug>
        <title>gfx.measurechar</title>
        <functioncall prog_lang="lua">integer width, integer height = gfx.measurechar(integer char)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Measures the drawing dimensions of a character with the current font (as set by gfx.setfont). 
            
            Returns width and height of character.
        </description>
        <retvals>
            integer width - the width of the character in pixels
            integer height - the height of the character in pixels
        </retvals>
        <parameters>
            integer char - ASCII-Code of the character to measure
        </parameters>
        <linked_to desc="see also:">
            Reaper:lua_gfx.setfont
                   sets a font, used by the gfx-functions
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.measurestr</slug>
        <title>gfx.measurestr</title>
        <functioncall prog_lang="lua">integer width, integer height = gfx.measurestr(string str)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Measures the drawing dimensions of a string with the current font (as set by gfx.setfont). 
            
            Returns width and height of string.
        </description>
        <retvals>
            integer width - the width of the drawing dimensions of str in pixels
            integer height - the height of the drawing dimensions of str in pixels
        </retvals>
        <parameters>
            string str - the string, whose drawing dimensions you want to know
        </parameters>
        <linked_to desc="see also:">
            Reaper:lua_gfx.setfont
                   sets a font, used by the gfx-functions
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.muladdrect</slug>
        <title>gfx.muladdrect</title>
        <functioncall prog_lang="lua">integer retval = gfx.muladdrect(integer x, integer y, integer w, integer h, number mul_r, number mul_g, number mul_b, optional number mul_a, optional number add_r, optional number add_g, optional number add_b, optional number add_a)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Multiplies each pixel within the given rectangle(x,y,w,h) by the mul_*-parameters and optionally adds add_*-parameters, and updates in-place. Useful for changing brightness/contrast, or other effects.

            The multiplied values usually affect only pixels, that are not black(0,0,0,0), while the added values affect all pixels.
        </description>
        <retvals>
            integer retval - unknown
        </retvals>
        <parameters>
            integer x - the x-position of the rectangle in pixels, in which you want to multiply/add colorvalues to
            integer y - the y-position of the rectangle in pixels, in which you want to multiply/add colorvalues to
            integer w - the width of the rectangle in pixels, in which you want to multiply/add colorvalues to
            integer h - the height of the rectangle in pixels, in which you want to multiply/add colorvalues to
            number mul_r - the red-value to multiply by within the rectangle; 0 to 1
            number mul_g - the green-value to multiply by within the rectangle; 0 to 1
            number mul_b - the blue-value to multiply by within the rectangle; 0 to 1
            optional number mul_a - the alpha-value to multiply by within the rectangle; 0 to 1
            optional number add_r - the red-value to add by within the rectangle; 0 to 1
            optional number add_g - the green-value to add by within the rectangle; 0 to 1
            optional number add_b - the blue-value to add by within the rectangle; 0 to 1
            optional number add_a - the alpha-value to add by within the rectangle; 0 to 1
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.printf</slug>
        <title>gfx.printf</title>
        <functioncall prog_lang="lua">number retval = gfx.printf(string format[, various ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()

                * %% = %
                * %s = string from parameter
                * %d = parameter as integer
                * %i = parameter as integer
                * %u = parameter as unsigned integer
                * %x = parameter as hex (lowercase) integer
                * %X = parameter as hex (uppercase) integer
                * %c = parameter as character
                * %f = parameter as floating point
                * %e = parameter as floating point (scientific notation, lowercase)
                * %E = parameter as floating point (scientific notation, uppercase)
                * %g = parameter as floating point (shortest representation, lowercase)
                * %G = parameter as floating point (shortest representation, uppercase)

            Many standard C printf() modifiers can be used, including:

                * %.10s = string, but only print up to 10 characters
                * %-10s = string, left justified to 10 characters
                * %10s = string, right justified to 10 characters
                * %+f = floating point, always show sign
                * %.4f = floating point, minimum of 4 digits after decimal point
                * %10d = integer, minimum of 10 digits (space padded)
                * %010f = integer, minimum of 10 digits (zero padded)

            Values for format specifiers can be specified as additional parameters to gfx.printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).
        </description>
        <retvals>
            number retval - always 0
        </retvals>
        <parameters>
            string format - the format, as which the string shall be printed(refer to the description)
            various ... - the value to be shown, canbe of various datatypes
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.quit</slug>
        <title>gfx.quit</title>
        <functioncall prog_lang="lua">integer retval = gfx.quit()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Closes the graphics window.
        </description>
        <retvals>
            integer retval - unknown, usually 0
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.rect</slug>
        <title>gfx.rect</title>
        <functioncall prog_lang="lua">integer retval = gfx.rect(integer x, integer y, integer w, integer h, optional integer filled)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Fills a rectangle at x,y, w,h pixels in dimension, filled by default. 
        </description>
        <retvals>
            integer retval - unknown; usually 0
        </retvals>
        <parameters>
            integer x - the x-position of the upper left corner
            integer y - the y-position of the upper left corner
            integer w - the width of the rectangle; must be positive
            integer h - the height of the rectangle; must be positive
            optional integer filled - 0, unfilled; 1, filled; omitted/nil, filled
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.rectto</slug>
        <title>gfx.rectto</title>
        <functioncall prog_lang="lua">integer x_coordinate = gfx.rectto(integer x, integer y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y. 
        </description>
        <retvals>
            integer x_coordinate - the x-coordinate given as x-parameter; the purpose is unknown
        </retvals>
        <parameters>
            integer x - the x-coordinate, to which the rectangle shall be drawn to
            integer y - the y-coordinate, to which the rectangle shall be drawn to
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.roundrect</slug>
        <title>gfx.roundrect</title>
        <functioncall prog_lang="lua">integer retval = gfx.roundrect(integer x, integer y, integer w, integer h, number radius, optional integer antialias)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a rectangle with rounded corners. 
        </description>
        <retvals>
            integer retval - unknown
        </retvals>
        <parameters>
            integer x - the x-coordinate of the upper-left corner of the rectangle in pixels
            integer y - the y-coordinate of the upper-left corner of the rectangle in pixels
            integer w - the width of the rectangle in pixels
            integer h - the height of the rectangle in pixels
            number radius - the radius of the rounded corners of the rectangle; 0, for a normal rectangle; 
            number antialias - 0, no antialias; 1 and higher, apply antialias to the rectangle
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.screentoclient</slug>
        <title>gfx.screentoclient</title>
        <functioncall prog_lang="lua">integer convx, integer convy = gfx.screentoclient(integer x, integer y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Converts the screen coordinates x,y to client coordinates, returns those values.
        </description>
        <retvals>
            integer convx - the x-client-coordinate, as converted from the x-screen-coordinate, in pixels
            integer convy - the y-client-coordinate, as converted from the y-screen-coordinate, in pixels
        </retvals>
        <parameters>
            integer x - the x-screen-coordinate that shall be converted, in pixels
            integer y - the y-screen-coordinate that shall be converted, in pixels
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.set</slug>
        <title>gfx.set</title>
        <functioncall prog_lang="lua">integer retval = gfx.set(number r, optional number g, optional number b, optional number a2, optional integer mode, optional integer dest)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description indent="default">
            Sets color, drawing mode and optionally the drawing-image-source-destination.
            If sets the corresponding gfx-variables.
            Sets gfx.r/gfx.g/gfx.b/gfx.a2/gfx.mode sets gfx.dest if final parameter specified
        </description>
        <retvals>
            integer retval - unknown
        </retvals>
        <parameters>
            number r - the red-value; 0 to 1; if only parameter r is given, it's value will be used for g, b as well
            optional number g - the green-value; 0 to 1
            optional number b - the blue-value; 0 to 1
            optional number a2 - the alpha-value; 0 to 1
            optional integer mode - the drawing-mode; 
                                 -  Set to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). 
                                 -  Add 2.0 to disable source alpha for gfx.blit(). 
                                 -  Add 4.0 to disable filtering for gfx.blit(). 
            optional integer dest - the source-image/framebuffer to draw to; -1 to 1023; -1 for the currently displayed framebuffer.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.setcursor</slug>
        <title>gfx.setcursor</title>
        <functioncall prog_lang="lua">number retval = gfx.setcursor(optional integer resource_id, optional string custom_cursor_name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like "arrow" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.
            
            examples for resource_id:
                101, enter text
                102, hourglass
                103, cross
                104, arrow up
                105, arrows to left up AND right down
                106, arrows to left down AND right up
                107, arrows to left AND right
                108, arrows to up AND down
                109, arrows to up, down, left and right
                110, stop sign
                111, arrow with hourglass
                112, arrow with question mark
                113, a pen
                114, hand with index finger pointing
                115, a square
                116, arrow with cd
                
            works only with gfx-window opened.
        </description>
        <retvals>
            number retval - 0.0, gfx-window not opened; 1.0, gfx-window opened
        </retvals>
        <parameters>
            optional integer resource_id - the index of the mousecursor to be used
            optional string custom_cursor_name - a name of the mousecursor to be used
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.setfont</slug>
        <title>gfx.setfont</title>
        <functioncall prog_lang="lua">gfx.setfont(integer idx,optional string fontface, optional integer sz, optional integer flags)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Can select a font and optionally configure it. 

            After calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.
        </description>
        <parameters>
            integer idx - the font-id; idx=0 for default bitmapped font, no configuration is possible for this font.
                - idx=1..16 for a configurable font
            optional string fontface - the name of the font, like "arial"
            optional integer sz - the size of the font (8-100)
            optional integer flags - flags, how to render the text; up to 4 flags can be passed at the same time
                  - a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. 
                  - These flags may or may not be supported depending on the font and OS. 
                  -   66 and 98, Bold (B), (b)
                  -   73 and 105, italic (I), (i)
                  -   79 and 111, white outline (O), (o)
                  -   82 and 114, blurred (R), (r)
                  -   83 and 115, sharpen (S), (s)
                  -   85 and 117, underline (U), (u)
                  -   86 and 118, inVerse (V), (v)
                  - 
                  - To create such a multibyte-character, assume this flag-value as a 32-bit-value.
                  - The first 8 bits are the first flag, the next 8 bits are the second flag, 
                  - the next 8 bits are the third flag and the last 8 bits are the second flag.
                  - The flagvalue(each dot is a bit): .... ....   .... ....   .... ....   .... ....
                  - If you want to set it to Bold(B) and Italic(I), you use the ASCII-Codes of both(66 and 73 respectively),
                  - take them apart into bits and set them in this 32-bitfield.
                  - The first 8 bits will be set by the bits of ASCII-value 66(B), the second 8 bits will be set by the bits of ASCII-Value 73(I).
                  - The resulting flagvalue is: 0100 0010   1001 0010   0000 0000   0000 0000
                  - which is a binary representation of the integer value 18754, which combines 66 and 73 in it.




        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.setimgdim</slug>
        <title>gfx.setimgdim</title>
        <functioncall prog_lang="lua">integer retval = gfx.setimgdim(integer image, integer w, integer h)</functioncall>
        <requires>
            Reaper=6.14
        </requires>
        <description indent="default">
            Resize image referenced by index 0..1024-1, width and height must be 0-8192. The contents of the image will be undefined after the resize.
        </description>
        <retvals>
            integer retval - 0, if image couldn't be set(e.g. no such handle exists); 1, if setting new dimensions was successful
        </retvals>
        <parameters>
            integer image - the image-handle/framebuffer, whose dimensions you want to set
            integer w - the new width of the image-handle
            integer h - the new height of the image-handle
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.setpixel</slug>
        <title>gfx.setpixel</title>
        <functioncall prog_lang="lua">integer retval = gfx.setpixel(number r, number g, number b)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Writes a pixel of r,g,b to gfx.x,gfx.y.
        </description>
        <retvals>
            integer retval - 1, if writing that pixel was successful; -1, is not
        </retvals>
        <parameters>
            number r - the red-color-value of the pixel; 0-1
            number g - the green-color-value of the pixel; 0-1
            number b - the blue-color-value of the pixel; 0-1
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.showmenu</slug>
        <title>gfx.showmenu</title>
        <functioncall prog_lang="lua">integer selection = gfx.showmenu(string menu_string)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Shows a popup menu at gfx_x,gfx_y. 
            str is a list of fields separated by | characters. Each field represents a menu item.
            Fields can start with special characters:

            # : grayed out
            ! : checked
            > : this menu item shows a submenu
            < : last item in the current submenu
            & : before a character makes it underlined as the quick-access-character for this menu-item
            
            An empty field || will appear as a separator in the menu. 

            Example: selection = gfx.showmenu("first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|>second and last item in submenu|fourth item in top menu")

            gfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.
            Note: It skips submenus and separators in the selection-number, so a if menu_string="Entry1||<Entry two|Entry three" will only return 1 for entry1 and 2 for Entry three but nothing for <Entry and ||.
        </description>
        <retvals>
            integer selection - the menu-entry the user selected, with 1 for the first, 2 for the second, etc; 0, nothing was selected
        </retvals>
        <parameters>
            string menu_string - a string with the menu-entries; separate the entrynames with a |
                               -   Each menu-entry can start with special characters that influence the appearance of that entry: 
                               -   #, item is grayed out; !, item is checked; >, this menu item shows a submenu;<, last item in the current submenu. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
          Reaper 6.82 - on Windows: can now be used without opening a window with gfx.init first()
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.transformblit</slug>
        <title>gfx.transformblit</title>
        <functioncall prog_lang="lua">number retval = gfx.transformblit(integer srcimg, integer destx, integer desty, integer destw, integer desth, integer div_w, integer div_h, table table)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a reaper.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.

        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            integer srcimg - the image-index (1 to 1024) that you want to blit into the screenbuffer -1
            integer destx - x position of the blit picture
            integer desty - y position of the blit picture
            integer destw - width of the blit picture
            integer desth - height of the blit picture
            integer div_w - unknown, 2 to 64; probably related to parameter table
            integer div_h - unknown, 2 to 64; probably related to parameter table
            table table - a table of the texture coordinates, with each entry being set to a pair of value, eg: 1, 0. Will be read from left to right and from top to bottom.
                        - table[1]=1,2
                        - table[2]=2,3
                        - table[3]=3,1
                        - How these values work needs more research...
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.triangle</slug>
        <title>gfx.triangle</title>
        <functioncall prog_lang="lua">gfx.triangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, [optional integer x4, optional integer y4, ...)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a filled triangle, or any convex polygon. 
        </description>
        <parameters>
            integer x1 - the x-position of the first point of the polygon
            integer y1 - the y-position of the first point of the polygon
            integer x2 - the x-position of the second point of the polygon
            integer y2 - the y-position of the second point of the polygon
            integer x3 - the x-position of the third point of the polygon
            integer y3 - the y-position of the third point of the polygon
            optional integer x4 - the x-position of the fourth point of the polygon
            optional integer y4 - the y-position of the fourth point of the polygon
              ...               - ...
              ...               - ...
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gmem_attach</slug>
        <title>gmem_attach</title>
        <functioncall prog_lang="lua">string former_attached_gmemname = reaper.gmem_attach(string sharedMemoryName)</functioncall>
        <requires>
            Reaper=6.20
        </requires>
        <description indent="default">
            Causes gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment named by parameter. Set to empty string to detach. 6.20+: returns previous shared memory segment name.

            Must be called, before you can use a specific gmem-variable-index with gmem_write!
        </description>
        <retvals>
            string former_attached_gmemname - if you change the attached-gmem from one to a new one, this will hold the name of the previous attached shared memory(gmem)
        </retvals>
        <parameters>
            string sharedMemoryName - the name of the shared memory
        </parameters>
        <linked_to desc="see also:">
            Reaper:lua_gmem_read
                   reads values from a global shared memory(gmem)
            Reaper:lua_gmem_write
                   writes values from a global shared memory(gmem) that can be accessed
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Global Shared Memory
        </chapter_context>
        <tags>lua, shared memory, video processor, eel2, jsfx</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gmem_read</slug>
        <title>gmem_read</title>
        <functioncall prog_lang="lua">number retval = reaper.gmem_read(integer index)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description indent="default">
            Read (number) value from shared memory attached-to by gmem_attach(). index can be [0..1<<25).

            returns nil if not available
        </description>
        <retvals>
            number retval - the stored number-value stored in gmem-variable with index
        </retvals>
        <parameters>
            integer index - the index of the memory-variable to read from; index must be 0 and higher
        </parameters>
        <linked_to desc="see also:">
            Reaper:lua_gmem_attach
                   attaches a global shared memory(gmem) that can be accessed
            Reaper:lua_gmem_write
                   writes values from a global shared memory(gmem) that can be accessed
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Global Shared Memory
        </chapter_context>
        <tags>lua, shared memory, read, video processor, eel2, jsfx</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gmem_write</slug>
        <title>gmem_write</title>
        <functioncall prog_lang="lua">reaper.gmem_write(integer index, number value)</functioncall>
        <requires>
            Reaper=5.97
        </requires>
        <description>
            Write (number) value to shared memory attached-to by gmem_attach(). index can be [0..1<<25).

            Before you can write into a currently unused variable with index "index", you must call gmem_attach first!
        </description>
        <parameters>
            integer index - the index of the memory-variable to write to; index must be 0 and higher
            number value - a number, either integer or float
        </parameters>
        <linked_to desc="see also:">
            Reaper:lua_gmem_attach
                   attaches a global shared memory(gmem) that can be accessed
            Reaper:lua_gmem_read
                   reads values from a global shared memory(gmem)
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Global Shared Memory
        </chapter_context>
        <tags>lua, shared memory, write, video processor, eel2, jsfx</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.update</slug>
        <title>gfx.update</title>
        <functioncall prog_lang="lua">gfx.update()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Updates the graphics display, if opened
        </description>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            GFX-functions
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_new_array</slug>
        <title>new_array</title>
        <functioncall prog_lang="lua">ReaperArray reaper_array = reaper.new_array([table|array values], [integer size])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Creates a new reaper.array object of maximum and initial size size, if specified, or from the size/values of a table/array. Both size and table/array can be specified, the size parameter will override the table/array size.
        </description>
        <retvals>
            ReaperArray reaper_array - 
        </retvals>
        <parameters>
            table|array values - 
            integer size - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_runloop</slug>
        <title>runloop</title>
        <functioncall prog_lang="lua">boolean retval = reaper.runloop(function function)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
        </description>
        <retvals>
            int retval - true, if succeded
        </retvals>
        <parameters>
            function function - the function to be called
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Misc
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.clear</slug>
        <title>{reaper.array}.clear</title>
        <functioncall prog_lang="lua">boolean retval = {reaper.array}.clear([number|string value, integer offset, integer size])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set.
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            number|string value - 
            integer offset - 
            integer size - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.convolve</slug>
        <title>{reaper.array}.convolve</title>
        <functioncall prog_lang="lua">integer retval = {reaper.array}.convolve([reaper.array src, integer srcoffs, integer size, integer destoffs])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Convolves complex value pairs from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            reaper.array src - 
            integer scroffs - 
            integer size - 
            integer destoffs - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.copy</slug>
        <title>{reaper.array}.copy</title>
        <functioncall prog_lang="lua">integer retval = {reaper.array}.copy([reaper.array src, integer srcoffs, integer size, integer destoffs])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs.
        </description>
        <retvals>
            integer retval - 
        </retvals>
        <parameters>
            reaper.array src - 
            integer srcoffs - 
            integer size - 
            integer destoffs - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.fft</slug>
        <title>{reaper.array}.fft</title>
        <functioncall prog_lang="lua">boolean retval = {reaper.array}.fft(integer size[, boolean permute, integer offset])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Performs a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.
        </description>
        <retvals>
            boolean retval - true, fft was successful; false, fft was unsuccessful
        </retvals>
        <parameters>
            integer size - 
            boolean premute - 
            integer offset - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.fft_real</slug>
        <title>{reaper.array}.fft_real</title>
        <functioncall prog_lang="lua">boolean retval = {reaper.array}.fft_real(integer size[, boolean permute, integer offset])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Performs a forward real->complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.
        </description>
        <retvals>
            boolean retval - true, fft was successful; false, fft was unsuccessful
        </retvals>
        <parameters>
            integer size - 
            boolean premute - 
            integer offset - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.get_alloc</slug>
        <title>{reaper.array}.get_alloc</title>
        <functioncall prog_lang="lua">integer size = {reaper.array}.get_alloc()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the maximum (allocated) size of the array.
        </description>
        <retvals>
            integer size - 
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.ifft</slug>
        <title>{reaper.array}.ifft</title>
        <functioncall prog_lang="lua">boolean retval = {reaper.array}.ifft(integer size[, boolean permute, integer offset])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Performs a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.
        </description>
        <retvals>
            boolean retval - true, fft was successful; false, fft was unsuccessful
        </retvals>
        <parameters>
            integer size - 
            boolean permute - 
            integer offset - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.ifft_real</slug>
        <title>{reaper.array}.ifft_real</title>
        <functioncall prog_lang="lua">boolean retval = {reaper.array}.ifft_real(integer size[, boolean permute, integer offset])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Performs a backwards complex->real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.
        </description>
        <retvals>
            boolean retval - true, fft was successful; false, fft was unsuccessful
        </retvals>
        <parameters>
            integer size - 
            boolean permute - 
            integer offset - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.multiply</slug>
        <title>{reaper.array}.multiply</title>
        <functioncall prog_lang="lua">integer retvals = {reaper.array}.multiply([{reaper.array} src, integer srcoffs, integer size, number destoffs])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs.
        </description>
        <retvals>
            integer retvals - 
        </retvals>
        <parameters>
            {reaper.array} src - 
            integer srcoffs - 
            integer size - 
            number destoff - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.resize</slug>
        <title>{reaper.array}.resize</title>
        <functioncall prog_lang="lua">boolean retval = {reaper.array}.resize(size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Resizes an array object to size. size must be [0..max_size].
        </description>
        <retvals>
            boolean retval - true, changing size was successful; false, changing was unsuccessful
        </retvals>
        <parameters>
            integer size - the new size of the table
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.table</slug>
        <title>{reaper.array}.table</title>
        <functioncall prog_lang="lua">table new_table = {reaper.array}.table([integer offset, integer size])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used.
        </description>
        <retvals>
            table new_table - a table with the entries from the reaper.array
        </retvals>
        <parameters>
            integer offset - the first entry of the reaper.array to be included into the table
            integer size - the number of entries to include into the table
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Lua-only functions
            Reaper Arrays
        </chapter_context>
        <tags></tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="python">
        <slug>python_atexit</slug>
        <title>atexit</title>
        <functioncall prog_lang="python">RPR_atexit(String code)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.
        </description>
        <parameters>
            String code - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Python-only functions
        </chapter_context>
        <tags>python, atexit, code at exit</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="python">
        <slug>python_defer</slug>
        <title>defer</title>
        <functioncall prog_lang="python">RPR_defer(String code)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().
            Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
        </description>
        <parameters>
           String code - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Python-only functions
        </chapter_context>
        <tags>python, defer, background code, background scripts</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="python">
        <slug>python_runloop</slug>
        <title>runloop</title>
        <functioncall prog_lang="python">RPR_runloop(String code)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().
            Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
        </description>
        <parameters>
            String code - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Python-only functions
        </chapter_context>
        <tags>python, run loop, defer, background script, background scripts</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>__mergesort</slug>
        <title>__mergesort</title>
        <functioncall prog_lang="cpp">void (*__mergesort)(void* base, size_t nmemb, size_t size, int (*cmpfunc)(const void*,const void*), void* tmpspace)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            is a stable sorting function with an API similar to qsort().
            HOWEVER, it requires some temporary space, equal to the size of the data being sorted, so you can pass it as the last parameter,
            or NULL and it will allocate and free space internally. 
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            void* base - 
            size_t nmemb - 
            size_t size - 
            int *cmpfunc... - 
            void* tmpspace - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, sort, qsort</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>AddCustomizableMenu</slug>
        <title>AddCustomizableMenu</title>
        <functioncall prog_lang="cpp">bool retval = (*AddCustomizableMenu)(const char* menuidstr, const char* menuname, const char* kbdsecname, bool addtomainmenu)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds customizable menu.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            bool retval -
        </retvals>
        <parameters>
            const char* menuidstr - is some unique identifying string
            const char* menuname - is for main menus only (displayed in a menu bar somewhere), NULL otherwise 
            const char* kbdsecname - is the name of the KbdSectionInfo registered by this plugin, or NULL for the main actions section
            bool addtomainmenu - true, add to main menu; false, don't add to main menu
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Menus
        </chapter_context>
        <tags>cpp, add, customizable, menu</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>AddExtensionsMainMenu</slug>
        <title>AddExtensionsMainMenu</title>
        <functioncall prog_lang="cpp">bool retval = (*AddExtensionsMainMenu)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Add an Extensions main menu, which the extension can populate/modify with plugin_register("hookcustommenu")
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            bool retval -
        </retvals>
        <linked_to desc="see also:">
            Reaper:plugin_register
                   hook a menu using plugin_register("hookcustommenu")
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Menus
        </chapter_context>
        <tags>cpp, extension, menu, add</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>plugin_register</slug>
        <title>plugin_register</title>
        <functioncall prog_lang="cpp">int retval = (*plugin_register)(const char* name, void* infostruct)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
             like rec->Register

             if you have a function called myfunction(..) that you want to expose to other extensions or plug-ins, use register("API_myfunction",funcaddress), and "-API_myfunction" to remove.          Other extensions then use GetFunc("myfunction") to get the function pointer.

             REAPER will also export the function address to ReaScript, so your extension could supply a Python module that provides a wrapper called RPR_myfunction(..). 
             register("APIdef_myfunction",defstring) will include your function declaration and help in the auto-generated REAPER API header and ReaScript documentation.

             defstring is four null-separated fields: return type, argument types, argument names, and help.

                Example: double myfunction(char* str, int flag) would have defstring="double\0char*,int\0str,flag\0help text for myfunction"

             another thing you can register is "hookcommand", which you pass a callback:

                NON_API: bool runCommand(int command, int flag);
                         register("hookcommand",runCommand);

             which returns TRUE to eat (process) the command.

             flag is usually 0 but can sometimes have useful info depending on the message.

             note: it's OK to call Main_OnCommand() within your runCommand, however you MUST check for recursion if doing so!
             in fact, any use of this hook should benefit from a simple reentrancy test...

             to get notified when an action of the main section is performed, you can register "hookpostcommand", which you pass a callback:

                NON_API: void postCommand(int command, int flag);
                         register("hookpostcommand",postCommand);

             you can also register "hookcommand2", which you pass a callback:

                NON_API: bool onAction(KbdSectionInfo *sec, int command, int val, int valhw, int relmode, HWND hwnd);
                         register("hookcommand2",onAction);

             which returns TRUE to eat (process) the command.

             val/valhw are used for actions learned with MIDI/OSC.
             val = [0..127] and valhw = -1 for MIDI CC, 
             valhw >=0 for MIDI pitch or OSC with value = (valhw|val<<7)/16383.0, 
             relmode absolute(0) or 1/2/3 for relative adjust modes

             you can also register command IDs for actions, register with "command_id", parameter is a unique string with only A-Z, 0-9, returns command ID (or 0 if not supported/out of actions)

             register("command_id_lookup", unique_string) will look up the integer ID of the named action without registering the string if it doesn't already exist.
             
             Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            const char* name - 
            void* infostruct - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, plugin, register, command, actioncommandid</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>Audio_RegHardwareHook</slug>
        <title>Audio_RegHardwareHook</title>
        <functioncall prog_lang="cpp">int retval = (*Audio_RegHardwareHook)(bool isAdd, audio_hook_register_t* reg)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Registers Audio Hardware-Hook.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            bool isAdd - 
            audio_hook_register_t* reg - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, register, hardware, hook</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CalculatePeaks</slug>
        <title>CalculatePeaks</title>
        <functioncall prog_lang="cpp">int retval = (*CalculatePeaks)(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Calculates Peaks.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            PCM_source_transfer_t* srcBlock - 
            PCM_source_peaktransfer_t* pksBlock - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, calculate, peaks</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CalculatePeaksFloatSrcPtr</slug>
        <title>CalculatePeaksFloatSrcPtr</title>
        <functioncall prog_lang="cpp">int retval = (*CalculatePeaksFloatSrcPtr)(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Calculates Peaks.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            PCM_source_transfer_t* srcBlock - 
            PCM_source_peaktransfer_t* pksBlock - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, calculate, peaks</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CreateLocalOscHandler</slug>
        <title>CreateLocalOscHandler</title>
        <functioncall prog_lang="cpp">void* (*CreateLocalOscHandler)(void* obj, void* callback)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            callback is a function pointer: void (*callback)(void* obj, const char* msg, int msglen), which handles OSC messages sent from REAPER. 
            
            The function return is a local osc handler. 
            
            See SendLocalOscMessage, DestroyOscHandler.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            void* obj - 
            void* callback - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:SendLocalOscMessage
                   sends a osc message to a local osc-handler
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            OSC
        </chapter_context>
        <tags>cpp, create, osc, handler, local</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CreateMIDIInput</slug>
        <title>CreateMIDIInput</title>
        <functioncall prog_lang="cpp">midi_Input* retval = (*CreateMIDIInput)(int dev)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            midi_Input* retval - 
        </retvals>
        <parameters>
            int dev - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Midi
        </chapter_context>
        <tags>cpp, create, midi, input</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CreateMIDIOutput</slug>
        <title>CreateMIDIOutput</title>
        <functioncall prog_lang="cpp">midi_Output* retval = (*CreateMIDIOutput)(int dev, bool streamMode, int* msoffset100)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc. 
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            midi_Output* retval -
        </retvals>
        <parameters>
            int dev - 
            bool streamMode - true, msoffset points to a persistent variable(see msoffset100 for more details)
            int* msoffset100 - points to a persistent variable that can change and reflects added delay to output in 100ths of a millisecond. 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Midi
        </chapter_context>
        <tags>cpp, midi, output, create</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CSurf_OnOscControlMessage</slug>
        <title>CSurf_OnOscControlMessage</title>
        <functioncall prog_lang="cpp">void (*CSurf_OnOscControlMessage)(const char* msg, const float* arg)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            On OSC Control Message.
            
            Stored in reaper_plugin_functions.h
        </description>
        <parameters>
            const char* msg -  
            const float* arg - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            OSC
        </chapter_context>
        <tags>cpp, control, surface, osc, message</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CSurf_OnOscControlMessage2</slug>
        <title>CSurf_OnOscControlMessage2</title>
        <functioncall prog_lang="cpp">void (*CSurf_OnOscControlMessage2)(const char* msg, const float* arg, const char* argstr);</functioncall>
        <requires>
            Reaper=6.71
        </requires>
        <description indent="default">
            Stored in reaper_plugin_functions.h
        </description>
        <parameters>
            const char* msg - 
            const float* arg - 
            const char* argstr - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            OSC
        </chapter_context>
        <tags>cpp, control, surface, osc, message</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>DestroyLocalOscHandler</slug>
        <title>DestroyLocalOscHandler</title>
        <functioncall prog_lang="cpp">void (*DestroyLocalOscHandler)(void* local_osc_handler)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            See CreateLocalOscHandler, SendLocalOscMessage.
            
            Stored in reaper_plugin_functions.h
        </description>
        <parameters>
            void* local_osc_handler - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:CreateLocalOscHandler
                   create a local osc-handler
            Reaper:SendLocalOscMessage
                   send local osc-message
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            OSC
        </chapter_context>
        <tags>cpp, osc, destroy, local, handler</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>DuplicateCustomizableMenu</slug>
        <title>DuplicateCustomizableMenu</title>
        <functioncall prog_lang="cpp">bool retval = (*DuplicateCustomizableMenu)(void* srcmenu, void* destmenu)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Populate destmenu with all the entries and submenus found in srcmenu.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            bool retval -
        </retvals>
        <parameters>
            void* srcmenu - 
            void* destmenu - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Menus
        </chapter_context>
        <tags>cpp, menu, duplicate, customizeable</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>FreeHeapPtr</slug>
        <title>FreeHeapPtr</title>
        <functioncall prog_lang="cpp">void (*FreeHeapPtr)(void* ptr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            free heap memory returned from a Reaper API function
            
            Stored in reaper_plugin_functions.h
        </description>
        <parameters>
            void* ptr - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, pointer, free, heap</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>get_config_var</slug>
        <title>get_config_var</title>
        <functioncall prog_lang="cpp">void* (*get_config_var)(const char* name, int* szOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            gets config var

            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            const char* name - 
            int* szOut - 
        </parameters>
        <linked_to desc="see also:">
            www:Reaper_Config_Variables.html
                all config-variables documented
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Config Vars
        </chapter_context>
        <tags>cpp, config, var, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>get_midi_config_var</slug>
        <title>get_midi_config_var</title>
        <functioncall prog_lang="cpp">void* (*get_midi_config_var)(const char* name, int* szOut);</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Deprecated.
            
            Stored in reaper_plugin_functions.h
        </description>
        <deprecated since_when="Reaper 5.62"/>
        <retvals>
            void* -
        </retvals>
        <parameters>
            const char* name - 
            int* szOut - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Config Vars
        </chapter_context>
        <tags>cpp, get, midi, config, var</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetColorTheme</slug>
        <title>GetColorTheme</title>
        <functioncall prog_lang="cpp">INT_PTR retval = (*GetColorTheme)(int idx, int defval)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Deprecated, see GetColorThemeStruct().
            
            Stored in reaper_plugin_functions.h
        </description>
        <deprecated since_when="Reaper 5.62" alternative="GetColorThemeStruct(available since at least Reaper 5.62)"/>
        <retvals>
            INT_PTR retval -
        </retvals>
        <parameters>
            int idx - 
            int defval - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:GetColorThemeStruct
                   returns the color theme
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Theme
        </chapter_context>
        <tags>cpp, color, theme, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetColorThemeStruct</slug>
        <title>GetColorThemeStruct</title>
        <functioncall prog_lang="cpp">void* (*GetColorThemeStruct)(int* szOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            returns the whole color theme (icontheme.h) and the size
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            int* szOut - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Theme
        </chapter_context>
        <tags>cpp, get, color, theme, struct</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetContextMenu</slug>
        <title>GetContextMenu</title>
        <functioncall prog_lang="cpp">HMENU retval = (*GetContextMenu)(int idx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            gets context menus. submenu 0:trackctl, 1:mediaitems, 2:ruler, 3:empty track area 
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            HMENU retval -
        </retvals>
        <parameters>
            int idx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Menus
        </chapter_context>
        <tags>cpp, get, context, menu</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetIconThemePointer</slug>
        <title>GetIconThemePointer</title>
        <functioncall prog_lang="cpp">void* (*GetIconThemePointer)(const char* name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            returns a named icontheme entry
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            const char* name - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Theme
        </chapter_context>
        <tags>cpp, get, icon, theme, pointer</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetIconThemePointerForDPI</slug>
        <title>GetIconThemePointerForDPI</title>
        <functioncall prog_lang="cpp">void* (*GetIconThemePointerForDPI)(const char* name, int dpisc);</functioncall>
        <requires>
            Reaper=6.02
        </requires>
        <description indent="default">
            returns a named icontheme entry for a given DPI-scaling (256=1:1). 

            Note: the return value should not be stored, it should be queried at each paint! 
            Querying name=NULL returns the start of the structure
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            const char* name - 
            int dpisc - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Theme
        </chapter_context>
        <tags>cpp, get, icon, theme, pointer, dpi</tags>
        <changelog>
        </changelog>
    </US_DocBloc>



    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetIconThemeStruct</slug>
        <title>GetIconThemeStruct</title>
        <functioncall prog_lang="cpp">void* (*GetIconThemeStruct)(int* szOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            returns a pointer to the icon theme (icontheme.h) and the size of that struct.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            int* szOut - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Theme
        </chapter_context>
        <tags>cpp, get, icon, theme, struct</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetPeaksBitmap</slug>
        <title>GetPeaksBitmap</title>
        <functioncall prog_lang="cpp">void* (*GetPeaksBitmap)(PCM_source_peaktransfer_t* pks, double maxamp, int w, int h, LICE_IBitmap* bmp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            See note in reaper_plugin.h about PCM_source_peaktransfer_t::samplerate
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            PCM_source_peaktransfer_t* pks - 
            double maxamp - 
            int w - 
            int h - 
            LICE_IBitmap* bmp - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, peaks, bitmap</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetPreferredDiskReadMode</slug>
        <title>GetPreferredDiskReadMode</title>
        <functioncall prog_lang="cpp">void (*GetPreferredDiskReadMode)(int* mode, int* nb, int* bs)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Gets user configured preferred disk read mode. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            int* mode - 
            int* nb - 
            int* bs -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Files
        </chapter_context>
        <tags>cpp, get, preferred, diskread, mode</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetPreferredDiskReadModePeak</slug>
        <title>GetPreferredDiskReadModePeak</title>
        <functioncall prog_lang="cpp">void (*GetPreferredDiskReadModePeak)(int* mode, int* nb, int* bs)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Gets user configured preferred disk read mode for use when building peaks. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            int* mode - 
            int* nb - 
            int* bs -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Files
        </chapter_context>
        <tags>cpp, get, preferred, diskread, mode, peak</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetPreferredDiskWriteMode</slug>
        <title>GetPreferredDiskWriteMode</title>
        <functioncall prog_lang="cpp">void (*GetPreferredDiskWriteMode)(int* mode, int* nb, int* bs)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Gets user configured preferred disk write mode. nb will receive two values, the initial and maximum write buffer counts. mode/nb/bs are all parameters that should be passed to WDL_FileWrite, see for more information.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            int* mode - 
            int* nb - 
            int* bs -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Files
        </chapter_context>
        <tags>cpp, get, preferred, diskwrite, mode</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetMediaItemTakeInfo</slug>
        <title>GetSetMediaItemTakeInfo</title>
        <functioncall prog_lang="cpp">void* (*GetSetMediaItemTakeInfo)(MediaItem_Take* tk, const char* parmname, void* setNewValue)</functioncall>
        <requires>
            Reaper=6.34
        </requires>
        <description indent="default">
            Gets/Sets Media Item Take-parameters. Works like GetMediaItemTakeInfo_Value and SetMediaItemTakeInfo_Value but has more parameters.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            MediaItek_Take* tk - a MediaItem_Take-object, that shall be altered
            const char* parmname - the name of the parameter to be changed
                         -P_TRACK : pointer to MediaTrack (read-only)
                         -P_ITEM : pointer to MediaItem (read-only)
                         -P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.
                         -GUID : GUID * : 16-byte GUID, can query or update
                         -P_NAME : char * to take name
                         -D_STARTOFFS : double *, start offset in take of item
                         -D_VOL : double *, take volume
                         -D_PAN : double *, take pan
                         -D_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)
                         -D_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)
                         -D_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)
                         -B_PPITCH, bool *, preserve pitch when changing rate
                         -I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
                         -I_LASTH : int * : height in pixels (read-only)
                         -I_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)
                         -I_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter
                         -I_CUSTOMCOLOR : int *, custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used (though will store the color anyway).
                         -IP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)
            void* setNewValue - the new value to be set to the parameter. See the description of parmname above for more details.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            MediaItem Take
        </chapter_context>
        <tags>cpp, get, set, mediaitem, take, info</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetMediaTrackInfo</slug>
        <title>GetSetMediaTrackInfo</title>
        <functioncall prog_lang="cpp">void* (*GetSetMediaTrackInfo)(MediaTrack* tr, const char* parmname, void* setNewValue)</functioncall>
        <requires>
            Reaper=6.65
        </requires>
        <description indent="default">
            Gets/Sets MediaTrack-parameters. Works like GetMediaTrackInfo_Value and SetMediaTrackInfo_Value but has more parameters.

                 -P_PARTRACK : MediaTrack * : parent track (read-only)
                 -P_PROJECT : ReaProject * : parent project (read-only)
                 -P_NAME : char * : track name (on master returns NULL)
                 -P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)
                 -P_MCP_LAYOUT : const char * : layout name
                 -P_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.
                   -Example: "0.00 1.00 \"\" 0.00 1.00 "{xyz-...}"
                 -P_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional envelope GUID string, optional fixed/fipm top y-position, optional fixed/fipm bottom y-position(fipm means fixed item positioning).
                  - Example: "0.0 1.0,0.0 1.0 "{xyz-...}",1.0 2.0 "" 0.25 0.5"
                 -P_TCP_LAYOUT : const char * : layout name
                 -P_EXT:xyz : char * : extension-specific persistent data
                 -P_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).
                 -GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
                 -B_MUTE : bool * : muted
                 -B_PHASE : bool * : track phase inverted
                 -B_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)
                 -IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
                 -I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
                 -I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
                 -I_RECARM : int * : record armed, 0=not record armed, 1=record armed
                 -I_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.
                 -I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace
                 -I_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)
                 -I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
                 -I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
                 -I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
                 -I_NCHAN : int * : number of track channels, 2-64, even numbers only
                 -I_SELECTED : int * : track selected, 0=unselected, 1=selected
                 -I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
                 -I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
                 -I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
                 -I_MCPX : int * : current MCP X-position in pixels relative to mixer container
                 -I_MCPY : int * : current MCP Y-position in pixels relative to mixer container
                 -I_MCPW : int * : current MCP width in pixels
                 -I_MCPH : int * : current MCP height in pixels
                 -I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc
                 -I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
                 -I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)
                 -I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
                 -I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
                 -I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
                 -B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
                 -D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
                 -D_PAN : double * : trim pan of track, -1..1
                 -D_WIDTH : double * : width of track, -1..1
                 -D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
                 -D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
                 -I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
                 -D_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc
                 -I_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper
                 -P_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope*, read only. chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.
                 -B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
                 -B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
                 -B_MAINSEND : bool * : track sends audio to parent
                 -C_MAINSEND_OFFS : char * : channel offset of track send to parent
                 -I_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)
                 -C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)
                 -F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
                 -F_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)
                 -F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)
                 -F_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)
                 -I_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)
                 -D_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG
                 
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            MediaTrack* tr - the Mediatrack-object, that shall be modified
            const char* parmname - the parameter to be gotten or set
            void* setNewValue - the new value. See the description of parmname above for more details
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Media Track
        </chapter_context>
        <tags>cpp, get, set, track, parameters, info</tags>
        <changelog>
          Reaper 6.65 - attribute "I_PANLAW_FLAGS" added
          Reaper 6.60 - attribute "I_RECMODE_FLAGS" added
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetObjectState</slug>
        <title>GetSetObjectState</title>
        <functioncall prog_lang="cpp">char* retval = (*GetSetObjectState)(void* obj, const char* str)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            get or set the state of a {track,item,envelope} as an RPPXML chunk
            str="" to get the chunk string returned (must call FreeHeapPtr when done)
            supply str to set the state (returns zero)
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            char* retval -
        </retvals>
        <parameters>
            void* obj - the object, to be modified. Can be MediaItem, TrackEnvelope, MediaTrack.
            const char* str - supply str to set the state (returns zero); str="" to get the chunk string returned 
        </parameters>
        <linked_to desc="see also:">
            Reaper:FreeHeapPtr
                   free heap-memory returned from an API-function
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, get, set, object, state, rppxml, statechunk</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetObjectState2</slug>
        <title>GetSetObjectState2</title>
        <functioncall prog_lang="cpp">char* retval = (*GetSetObjectState2)(void* obj, const char* str, bool isundo)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            get or set the state of a {track,item,envelope} as an RPPXML chunk
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            char* retval -
        </retvals>
        <parameters>
            void* obj - the object, to be modified. Can be MediaItem, TrackEnvelope, MediaTrack.
            const char* str - supply str to set the state (returns zero); str="" to get the chunk string returned (must call FreeHeapPtr when done)
            bool isundo - set, if the state will be used for undo purposes (which may allow REAPER to get the state more efficiently
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, get, set, object, state, rppxml, statechunk</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetTrackMIDISupportFile</slug>
        <title>GetSetTrackMIDISupportFile</title>
        <functioncall prog_lang="cpp">const char* retval = (*GetSetTrackMIDISupportFile)(ReaProject* proj, MediaTrack* track, int which, const char* filename)</functioncall>
        <requires>
            Reaper=6.02
        </requires>
        <description indent="default">
            Get or set the filename for storage of the MIDI bank/program select file. 
            "which" must be 1. 

            If fn != NULL, a new track MIDI storage file will be set; otherwise the existing track MIDI storage file will be returned. 
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            const char* retval -
        </retvals>
        <parameters>
            ReaProject* proj - the project-number. 0 for the current project. 
            MediaTrack* track - the MediaTrack-object of the track to be treated
            int which - which MIDI-file to use
                        -0, MIDI colormap image file, 
                        -1, MIDI bank/program select file, 
                        -2, MIDI text string file, 
                        -3, MIDI note mapping file. 
            const char* filename - If fn != NULL, a new track MIDI storage file will be set; otherwise the existing track MIDI storage file will be returned.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Midi
        </chapter_context>
        <tags>cpp, get, set, midi, support, file</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetTrackSendInfo</slug>
        <title>GetSetTrackSendInfo</title>
        <functioncall prog_lang="cpp">void* (*GetSetTrackSendInfo)(MediaTrack* tr, int category, int sendidx, const char* parmname, void* setNewValue)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Get or set send/receive/hardware output attributes.

            For ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            MediaTrack* tr - the MediaTrack object for the track to be gotten or set
            int category - <0 for receives, 0=sends, >0 for hardware outputs 
            int sendidx - 0..n (to enumerate, iterate over sendidx until it returns NULL) 
            const char* parmname - the parameter to get/set
                 -P_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs
                 -P_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs
                 -P_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc
                 -B_MUTE : returns bool *
                 -B_PHASE : returns bool *, true to flip phase
                 -B_MONO : returns bool *
                 -D_VOL : returns double *, 1.0 = +0dB etc
                 -D_PAN : returns double *, -1..+1
                 -D_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
                 -I_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
                 -I_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
                 -I_SRCCHAN : returns int *, index,&1024=mono, -1 for none
                 -I_DSTCHAN : returns int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
                 -I_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan
            void* setNewValue - the new value to be set
        </parameters>
        <linked_to desc="see also:">
            Reaper:CreateTrackSend
                   creates a track-send
            Reaper:GetTrackNumSends
                   get number of send of a track
            Reaper:GetSetTrackSendInfo_String
                   gets sets additional string-attributes for metadata of track-sends
            Reaper:GetTrackSendInfo_Value
                   gets attributes of a track-send
            Reaper:RemoveTrackSend
                   removes a track-send
            Reaper:SetTrackSendInfo_Value
                   sets attributes of a track-send
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Routing
        </chapter_context>
        <tags>cpp, get, set, send, receive, hardware, output</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetToggleCommandStateThroughHooks</slug>
        <title>GetToggleCommandStateThroughHooks</title>
        <functioncall prog_lang="cpp">int retval = (*GetToggleCommandStateThroughHooks)(KbdSectionInfo* section, int command_id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the state of an action via extension plugins' hooks.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            MediaTrack* section - the section, in which the action appears in
                                -0, Main
                                -100, Main (alt recording)
                                -32060, MIDI Editor
                                -32061, MIDI Event List Editor
                                -32062, MIDI Inline Editor
                                -32063, Media Explorer
            int command_id - the command-id of the action, whose state you want
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Actions
        </chapter_context>
        <tags>cpp, get, set, toggle, comand, state, hooks</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>HiresPeaksFromSource</slug>
        <title>HiresPeaksFromSource</title>
        <functioncall prog_lang="cpp">void (*HiresPeaksFromSource)(PCM_source* src, PCM_source_peaktransfer_t* block)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Hires peaks from source.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            PCM_source* src - 
            PCM_source_peaktransfer_t* block - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, hires, peaks, source</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>IsInRealTimeAudio</slug>
        <title>IsInRealTimeAudio</title>
        <functioncall prog_lang="cpp">int retval = (*IsInRealTimeAudio)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Are we in a realtime audio thread (between OnAudioBuffer calls,not in some worker/anticipative FX thread)? threadsafe
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, realtime, audio, thread</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>IsItemTakeActiveForPlayback</slug>
        <title>IsItemTakeActiveForPlayback</title>
        <functioncall prog_lang="cpp">bool retval = (*IsItemTakeActiveForPlayback)(MediaItem* item, MediaItem_Take* take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            get whether a take will be played (active take, unmuted, etc)
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            bool retval - 
        </retvals>
        <parameters>
            MediaItem* item - MediaItem in which the take is to be checked
            MediaItem_Take* take - the MediaItem_Take to be checked
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            MediaItem Take
        </chapter_context>
        <tags>cpp, mediaitem, take, check, played, active, unmute</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>IsREAPER</slug>
        <title>IsREAPER</title>
        <functioncall prog_lang="cpp">bool retval = (*IsREAPER)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns true if dealing with REAPER, returns false for ReaMote, etc
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            bool retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, reaper, reamote, check</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_formatKeyName</slug>
        <title>kbd_formatKeyName</title>
        <functioncall prog_lang="cpp">void (*kbd_formatKeyName)(ACCEL* ac, char* s)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Format keyname
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            ACCEL* ac - 
            char* s - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, keyname, format</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_getCommandName</slug>
        <title>kbd_getCommandName</title>
        <functioncall prog_lang="cpp">void (*kbd_getCommandName)(int cmd, char* s, KbdSectionInfo* section)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Get the string of a key assigned to command "cmd" in a section.
            This function is poorly named as it doesn't return the command's name, see kbd_getTextFromCmd.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            int cmd - commandid of the action
            char* s - 
            KbdSectionInfo* section - the section, in which the action exists
                                    -0, Main
                                    -100, Main (alt recording)
                                    -32060, MIDI Editor
                                    -32061, MIDI Event List Editor
                                    -32062, MIDI Inline Editor
                                    -32063, Media Explorer
        </parameters>
        <linked_to desc="see also:">
            Reaper:kbd_getTextFromCmd
                   get text from a command
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Actions
        </chapter_context>
        <tags>cpp, get, key, assigned, command</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_getTextFromCmd</slug>
        <title>kbd_getTextFromCmd</title>
        <functioncall prog_lang="cpp">const char* retval = (*kbd_getTextFromCmd)(int cmd, KbdSectionInfo* section)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Get text from Command
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            const char* -
        </retvals>
        <parameters>
            int cmd - 
            KbdSectionInfo* section - the section, in which the action exists
                                    -0, Main
                                    -100, Main (alt recording)
                                    -32060, MIDI Editor
                                    -32061, MIDI Event List Editor
                                    -32062, MIDI Inline Editor
                                    -32063, Media Explorer
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Actions
        </chapter_context>
        <tags>cpp, get, text, command</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_OnMidiEvent</slug>
        <title>kbd_OnMidiEvent</title>
        <functioncall prog_lang="cpp">void (*kbd_OnMidiEvent)(MIDI_event_t* evt, int dev_index)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            On Midi Event. Can be called from anywhere (threadsafe)
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            MIDI_event_t* evt - the MIDI-event
            int dev_index - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Midi
        </chapter_context>
        <tags>cpp, on, midi, event</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_OnMidiList</slug>
        <title>kbd_OnMidiList</title>
        <functioncall prog_lang="cpp">void (*kbd_OnMidiList)(MIDI_eventlist* list, int dev_index)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            On MIDI List. Can be called from anywhere (threadsafe)
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void - 
        </retvals>
        <parameters>
            MIDI_eventlist* list - 
            int dev_index - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Midi
        </chapter_context>
        <tags>cpp, on, midi, list</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_ProcessActionsMenu</slug>
        <title>kbd_ProcessActionsMenu</title>
        <functioncall prog_lang="cpp">void (*kbd_ProcessActionsMenu)(HMENU menu, KbdSectionInfo* section)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Process actions-menu.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            HMENU menu - 
            KbdSectionInfo* section - the section, in which the action exists
            -0, Main
            -100, Main (alt recording)
            -32060, MIDI Editor
            -32061, MIDI Event List Editor
            -32062, MIDI Inline Editor
            -32063, Media Explorer
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Menus
        </chapter_context>
        <tags>cpp, process, actions, menu</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_processMidiEventActionEx</slug>
        <title>kbd_processMidiEventActionEx</title>
        <functioncall prog_lang="cpp">bool retval = (*kbd_processMidiEventActionEx)(MIDI_event_t* evt, KbdSectionInfo* section, HWND hwndCtx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Process Midi Event Action
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            bool retval -
        </retvals>
        <parameters>
            MIDI_event_t* evt - 
            KbdSectionInfo* section - the section, in which the action exists
                                    -0, Main
                                    -100, Main (alt recording)
                                    -32060, MIDI Editor
                                    -32061, MIDI Event List Editor
                                    -32062, MIDI Inline Editor
                                    -32063, Media Explorer
            HWND hwndCtx - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Actions
        </chapter_context>
        <tags>cpp, process, midi, event, action, ex</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_reprocessMenu</slug>
        <title>kbd_reprocessMenu</title>
        <functioncall prog_lang="cpp">void (*kbd_reprocessMenu)(HMENU menu, KbdSectionInfo* section)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Reprocess a menu recursively, setting key assignments to what their command IDs are mapped to.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            HMENU menu - 
            KbdSectionInfo* section - the section, in which the action exists
                                    -0, Main
                                    -100, Main (alt recording)
                                    -32060, MIDI Editor
                                    -32061, MIDI Event List Editor
                                    -32062, MIDI Inline Editor
                                    -32063, Media Explorer
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Menus
        </chapter_context>
        <tags>cpp, reprocess, menu</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_RunCommandThroughHooks</slug>
        <title>kbd_RunCommandThroughHooks</title>
        <functioncall prog_lang="cpp">bool retval = (*kbd_RunCommandThroughHooks)(KbdSectionInfo* section, int* actionCommandID, int* val, int* valhw, int* relmode, HWND hwnd)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Run command through hooks. actioncommandID may get modified.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            bool retval -
        </retvals>
        <parameters>
            KbdSectionInfo* section - the section, in which the action exists
                                    -0, Main
                                    -100, Main (alt recording)
                                    -32060, MIDI Editor
                                    -32061, MIDI Event List Editor
                                    -32062, MIDI Inline Editor
                                    -32063, Media Explorer
            int* actionCommandID - the commandid-number of the action you want to run.
            int* val - 
            int* valhw - 
            int* relmode - 
            HWND hwnd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Actions
        </chapter_context>
        <tags>cpp, run, command, hooks, action, commandid, section</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_translateAccelerator</slug>
        <title>kbd_translateAccelerator</title>
        <functioncall prog_lang="cpp">int retval = (*kbd_translateAccelerator)(HWND hwnd, MSG* msg, KbdSectionInfo* section)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Pass in the HWND to receive commands, a MSG of a key command, and a valid section,
            and kbd_translateAccelerator() will process it looking for any keys bound to it, and send the messages off.
            Returns 1 if processed, 0 if no key binding found.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            HWND hwnd - 
            MSG* msg - 
            KbdSectionInfo* section - the section, in which the action exists
                                    -0, Main
                                    -100, Main (alt recording)
                                    -32060, MIDI Editor
                                    -32061, MIDI Event List Editor
                                    -32062, MIDI Inline Editor
                                    -32063, Media Explorer
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Actions
        </chapter_context>
        <tags>cpp, translate, accelerator, message, key, section, keybinding</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_translateMouse</slug>
        <title>kbd_translateMouse</title>
        <functioncall prog_lang="cpp">bool retval = (*kbd_translateMouse)(void* winmsg, unsigned char* midimsg)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            removed from API!
            
            Translate mouse.
            
            Stored in reaper_plugin_functions.h
        </description>
        <deprecated since_when="Reaper 6.76" alternative="" removed="yes"/>
        <retvals>
            bool retval -
        </retvals>
        <parameters>
            void* winmsg - 
            unsigned char* midimsg - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, translate, mouse, midi, message, windows</tags>
        <changelog>
          Reaper 6.76 - removed from API
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__Destroy</slug>
        <title>LICE__Destroy</title>
        <functioncall prog_lang="cpp">void (*LICE__Destroy)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE destroy.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, destroy</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__DestroyFont</slug>
        <title>LICE__DestroyFont</title>
        <functioncall prog_lang="cpp">void (*LICE__DestroyFont)(LICE_IFont* font);</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE destroy-font.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IFont* font - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, font, destroy</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__DrawText</slug>
        <title>LICE__DrawText</title>
        <functioncall prog_lang="cpp">int retval = (*LICE__DrawText)(LICE_IFont* font, LICE_IBitmap* bm, const char* str, int strcnt, RECT* rect, UINT dtFlags)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE draw text.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            LICE_IFont* font -
            LICE_IBitmap* bm - 
            const char* str - 
            int strcnt - 
            RECT* rect - 
            UINT dtFlags - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, draw, text</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__GetBits</slug>
        <title>LICE__GetBits</title>
        <functioncall prog_lang="cpp">void* (*LICE__GetBits)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE get bits.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, get, bits, bitmap</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__GetDC</slug>
        <title>LICE__GetDC</title>
        <functioncall prog_lang="cpp">HDC retval = (*LICE__GetDC)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE__GetDC
        </description>
        <retvals>
            HDC retval -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, get, dc, bitmap</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__GetHeight</slug>
        <title>LICE__GetHeight</title>
        <functioncall prog_lang="cpp">int retval = (*LICE__GetHeight)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE get height
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, get, height</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__GetRowSpan</slug>
        <title>LICE__GetRowSpan</title>
        <functioncall prog_lang="cpp">int retval = (*LICE__GetRowSpan)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE get row span.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, get, row, span</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__GetWidth</slug>
        <title>LICE__GetWidth</title>
        <functioncall prog_lang="cpp">int retval = (*LICE__GetWidth)(LICE_IBitmap* bm)</functioncall>
        <requires>  
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE get width.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, get, width</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__IsFlipped</slug>
        <title>LICE__IsFlipped</title>
        <functioncall prog_lang="cpp">bool retval = (*LICE__IsFlipped)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE is flipped
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            bool retval -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, is, flipped</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__resize</slug>
        <title>LICE__resize</title>
        <functioncall prog_lang="cpp">bool retval = (*LICE__resize)(LICE_IBitmap* bm, int w, int h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE resize
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            bool retval -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
            int w - 
            int h -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, resize</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__SetBkColor</slug>
        <title>LICE__SetBkColor</title>
        <functioncall prog_lang="cpp">LICE_pixel retval = (*LICE__SetBkColor)(LICE_IFont* font, LICE_pixel color)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE set bk color
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            LICE_pixel retval -
        </retvals>
        <parameters>
            LICE_IFont* font - 
            LICE_pixel color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, set, bk, color</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__SetFromHFont</slug>
        <title>LICE__SetFromHFont</title>
        <functioncall prog_lang="cpp">void (*LICE__SetFromHFont)(LICE_IFont* font, HFONT hfont, int flags)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE set from h-font
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IFont* font - font must REMAIN valid,unless LICE_FONT_FLAG_PRECALCALL is set
            HFONT hfont - 
            int flags - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, translate, lice, set, from, hfont</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__SetTextColor</slug>
        <title>LICE__SetTextColor</title>
        <functioncall prog_lang="cpp">LICE_pixel retval = (*LICE__SetTextColor)(LICE_IFont* font, LICE_pixel color)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE set text color
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            LICE_pixel retval -
        </retvals>
        <parameters>
            LICE_IFont* font - 
            LICE_pixel color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, set, text, color</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__SetTextCombineMode</slug>
        <title>LICE__SetTextCombineMode</title>
        <functioncall prog_lang="cpp">void (*LICE__SetTextCombineMode)(LICE_IFont* ifont, int mode, float alpha)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE set text combine mode
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IFont* ifont - 
            int mode - 
            float alpha - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, set, text, combine, mode</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Arc</slug>
        <title>LICE_Arc</title>
        <functioncall prog_lang="cpp">void (*LICE_Arc)(LICE_IBitmap* dest, float cx, float cy, float r, float minAngle, float maxAngle, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE arc
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            float cx - 
            float cy - 
            float r - 
            float minAngle - 
            float maxAngle - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
            bool aa - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, arc</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Blit</slug>
        <title>LICE_Blit</title>
        <functioncall prog_lang="cpp">void (*LICE_Blit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE blit
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest -
            LICE_IBitmap* src - 
            int dstx - 
            int dsty - 
            int srcx - 
            int srcy - 
            int srcw - 
            int srch - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, blit</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Blur</slug>
        <title>LICE_Blur</title>
        <functioncall prog_lang="cpp">void (*LICE_Blur)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE blur
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            LICE_IBitmap* src - 
            int dstx - 
            int dsty - 
            int srcx - 
            int srcy - 
            int srcw - 
            int srch - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, blur</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_BorderedRect</slug>
        <title>LICE_BorderedRect</title>
        <functioncall prog_lang="cpp">void (*LICE_BorderedRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel bgcolor, LICE_pixel fgcolor, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE bordered rect.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int x - 
            int y - 
            int w - 
            int h - 
            LICE_pixel bgcolor - 
            LICE_pixel fgcolor - 
            float alpha -
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, bordered, rect</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Circle</slug>
        <title>LICE_Circle</title>
        <functioncall prog_lang="cpp">void (*LICE_Circle)(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE circle
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            float cx - 
            float cy - 
            float r - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
            bool aa - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, circle</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Clear</slug>
        <title>LICE_Clear</title>
        <functioncall prog_lang="cpp">void (*LICE_Clear)(LICE_IBitmap* dest, LICE_pixel color)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE clear
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            LICE_pixel color - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, clear</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_ClearRect</slug>
        <title>LICE_ClearRect</title>
        <functioncall prog_lang="cpp">void (*LICE_ClearRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel mask, LICE_pixel orbits)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE clear rect
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int x - 
            int y - 
            int w - 
            int h - 
            LICE_pixel mask - 
            LICE_pixel orbits - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, clear, rect</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Copy</slug>
        <title>LICE_Copy</title>
        <functioncall prog_lang="cpp">void (*LICE_Copy)(LICE_IBitmap* dest, LICE_IBitmap* src)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE copy
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            LICE_IBitmap* src - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, copy</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_CreateBitmap</slug>
        <title>LICE_CreateBitmap</title>
        <functioncall prog_lang="cpp">LICE_IBitmap* retval = (*LICE_CreateBitmap)(int mode, int w, int h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Create a new bitmap. this is like calling new LICE_MemBitmap (mode=0) or new LICE_SysBitmap (mode=1).
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            LICE_IBitmap* retval -
        </retvals>
        <parameters>
            int mode - 
            int w - 
            int h -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, create, bitmap</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_CreateFont</slug>
        <title>LICE_CreateFont</title>
        <functioncall prog_lang="cpp">LICE_IFont* retval = (*LICE_CreateFont)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE create font
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            LICE_IFont* retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, create, font</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_DrawChar</slug>
        <title>LICE_DrawChar</title>
        <functioncall prog_lang="cpp">void (*LICE_DrawChar)(LICE_IBitmap* bm, int x, int y, char c, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE draw char
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
            int x - 
            int y - 
            char c - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, draw, char</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_DrawGlyph</slug>
        <title>LICE_DrawGlyph</title>
        <functioncall prog_lang="cpp">void (*LICE_DrawGlyph)(LICE_IBitmap* dest, int x, int y, LICE_pixel color, LICE_pixel_chan* alphas, int glyph_w, int glyph_h, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE draw glyph
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int x - 
            int y - 
            LICE_pixel color - 
            LICE_pixel_chan* alphas - 
            int glyph_w - 
            int glyph_h - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, draw, glyph</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_DrawCBezier</slug>
        <title>LICE_DrawCBezier</title>
        <functioncall prog_lang="cpp">void (*LICE_DrawCBezier)(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, LICE_pixel color, float alpha, int mode, bool aa, double tol)</functioncall>
        <requires>
            Reaper=5.80
        </requires>
        <description indent="default">
            LICE Draw C Bezier
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            double xstart -  
            double ystart - 
            double xctl1 -  
            double yctl1 -  
            double xctl2 -  
            double yctl2 -
            double xend - 
            double yend - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
            bool aa - 
            double tol - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, draw, bezier</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_DrawRect</slug>
        <title>LICE_DrawRect</title>
        <functioncall prog_lang="cpp">void (*LICE_DrawRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE draw rect
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int x - 
            int y - 
            int w - 
            int h - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, draw, rectangle</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_DrawText</slug>
        <title>LICE_DrawText</title>
        <functioncall prog_lang="cpp">void (*LICE_DrawText)(LICE_IBitmap* bm, int x, int y, const char* string, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE draw text
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
            int x - 
            int y - 
            const char* string - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, draw, text</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillCBezier</slug>
        <title>LICE_FillCBezier</title>
        <functioncall prog_lang="cpp">void (*LICE_FillCBezier)(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, int yfill, LICE_pixel color, float alpha, int mode, bool aa, double tol);</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description indent="default">
            LICE Fill CBezier
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            double xstart - 
            double ystart -  
            double xctl1 - 
            double yctl1 - 
            double xctl2 - 
            double yctl2 - 
            double xend - 
            double yend - 
            int yfill - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
            bool aa - 
            double tol - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, fill, bezier</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillCircle</slug>
        <title>LICE_FillCircle</title>
        <functioncall prog_lang="cpp">void (*LICE_FillCircle)(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE fill circle
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            float cx - 
            float cy - 
            float r - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
            bool aa - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, fill, circle</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillConvexPolygon</slug>
        <title>LICE_FillConvexPolygon</title>
        <functioncall prog_lang="cpp">void (*LICE_FillConvexPolygon)(LICE_IBitmap* dest, int* x, int* y, int npoints, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE fill convex polygon
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int* x - 
            int* y - 
            int npoints - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, fill, convex, polygon</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillRect</slug>
        <title>LICE_FillRect</title>
        <functioncall prog_lang="cpp">void (*LICE_FillRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE fill rect
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int x - 
            int y - 
            int w - 
            int h - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, fill, rect</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillTrapezoid</slug>
        <title>LICE_FillTrapezoid</title>
        <functioncall prog_lang="cpp">void (*LICE_FillTrapezoid)(LICE_IBitmap* dest, int x1a, int x1b, int y1, int x2a, int x2b, int y2, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE fill trapezoid
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int x1a - 
            int x1b - 
            int y1 - 
            int x2a - 
            int x2b - 
            int y2 - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, fill, trapezoid</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillTriangle</slug>
        <title>LICE_FillTriangle</title>
        <functioncall prog_lang="cpp">void (*LICE_FillTriangle)(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, int x3, int y3, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE fill triangle
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int x1 - 
            int y1 - 
            int x2 - 
            int y2 - 
            int x3 - 
            int y3 - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, fill, triangle</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_GetPixel</slug>
        <title>LICE_GetPixel</title>
        <functioncall prog_lang="cpp">LICE_pixel retval = (*LICE_GetPixel)(LICE_IBitmap* bm, int x, int y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE get pixel
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            LICE_pixel retval -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
            int x - 
            int y -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, get, pixel</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_GradRect</slug>
        <title>LICE_GradRect</title>
        <functioncall prog_lang="cpp">void (*LICE_GradRect)(LICE_IBitmap* dest, int dstx, int dsty, int dstw, int dsth, float ir, float ig, float ib, float ia, float drdx, float dgdx, float dbdx, float dadx, float drdy, float dgdy, float dbdy, float dady, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE grad rect
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int dstx - 
            int dsty - 
            int dstw - 
            int dsth - 
            float ir - 
            float ig - 
            float ib - 
            float ia - 
            float drdx - 
            float dgdx - 
            float dbdx - 
            float dadx - 
            float drdy - 
            float dgdy - 
            float dbdy - 
            float dady - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, grad, rectangle</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Line</slug>
        <title>LICE_Line</title>
        <functioncall prog_lang="cpp">void (*LICE_Line)(LICE_IBitmap* dest, float x1, float y1, float x2, float y2, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE line
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            float x1 - 
            float y1 - 
            float x2 - 
            float y2 - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
            bool aa - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, line</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_LineInt</slug>
        <title>LICE_LineInt</title>
        <functioncall prog_lang="cpp">void (*LICE_LineInt)(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE line int
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int x1 - 
            int y1 - 
            int x2 - 
            int y2 - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
            bool aa - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, line, int</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_LoadPNG</slug>
        <title>LICE_LoadPNG</title>
        <functioncall prog_lang="cpp">LICE_IBitmap* retval = (*LICE_LoadPNG)(const char* filename, LICE_IBitmap* bmp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE load png
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            LICE_IBitmap* retval -
        </retvals>
        <parameters>
            const char* filename - 
            Lice_IBitmap* bmp - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, load, png, file, graphic</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_LoadPNGFromResource</slug>
        <title>LICE_LoadPNGFromResource</title>
        <functioncall prog_lang="cpp">LICE_IBitmap* retval = (*LICE_LoadPNGFromResource)(HINSTANCE hInst, int resid, LICE_IBitmap* bmp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE load png from resource
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            LICE_IBitmap* retval -
        </retvals>
        <parameters>
            HINSTANCE hInst - 
            int resid - 
            LICE_IBitmap* bmp -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, load, png, resource, hinstance</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_MeasureText</slug>
        <title>LICE_MeasureText</title>
        <functioncall prog_lang="cpp">void (*LICE_MeasureText)(const char* string, int* w, int* h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE measure text
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            const char* string - 
            int* w - 
            int* h -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, measure, text</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_MultiplyAddRect</slug>
        <title>LICE_MultiplyAddRect</title>
        <functioncall prog_lang="cpp">void (*LICE_MultiplyAddRect)(LICE_IBitmap* dest, int x, int y, int w, int h, float rsc, float gsc, float bsc, float asc, float radd, float gadd, float badd, float aadd)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE multiplay add rect
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int x - 
            int y - 
            int w - 
            int h - 
            float rsc - 
            float gsc - 
            float bsc - 
            float asc - 
            float radd - 
            float gadd - 
            float badd - 
            float aadd - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, multiply, add, rectangle</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_PutPixel</slug>
        <title>LICE_PutPixel</title>
        <functioncall prog_lang="cpp">void (*LICE_PutPixel)(LICE_IBitmap* bm, int x, int y, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE put pixel
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* bm - 
            int x - 
            int y -
            LICE_pixel color - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, put, pixel</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_RotatedBlit</slug>
        <title>LICE_RotatedBlit</title>
        <functioncall prog_lang="cpp">void (*LICE_RotatedBlit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float angle, bool cliptosourcerect, float alpha, int mode, float rotxcent, float rotycent)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE rotate blit. These coordinates are offset from the center of the image,in source pixel coordinates.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            LICE_IBitmap* src - 
            int dstx - 
            int dsty - 
            int dstw - 
            int dsth - 
            float srcx - 
            float srcy - 
            float srcw - 
            float srch - 
            float angle - 
            bool cliptosourcerect - 
            float alpha - 
            int mode - 
            float rotxcent - 
            float rotycent - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, rotate, blit</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_RoundRect</slug>
        <title>LICE_RoundRect</title>
        <functioncall prog_lang="cpp">void (*LICE_RoundRect)(LICE_IBitmap* drawbm, float xpos, float ypos, float w, float h, int cornerradius, LICE_pixel col, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE round rect
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* drawbm - 
            float xpos - 
            float ypos - 
            float w - 
            float h - 
            int cornerradius - 
            LICE_pixel col - 
            float alpha - 
            int mode - 
            bool aa - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, round, rectangle</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_ScaledBlit</slug>
        <title>LICE_ScaledBlit</title>
        <functioncall prog_lang="cpp">void (*LICE_ScaledBlit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE scaled blit.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            LICE_IBitmap* src - 
            int dstx - 
            int dsty - 
            int dstw - 
            int dsth - 
            float srcx - 
            float srcy - 
            float srcw - 
            float srch - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, scaled, blit</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_SimpleFill</slug>
        <title>LICE_SimpleFill</title>
        <functioncall prog_lang="cpp">void (*LICE_SimpleFill)(LICE_IBitmap* dest, int x, int y, LICE_pixel newcolor, LICE_pixel comparemask, LICE_pixel keepmask)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE simple fill
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            int x - 
            int y -
            LICE_pixel newcolor - 
            LICE_pixel comparemask - 
            LICE_pixel keepmask - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, simple, fill</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_ThickFLine</slug>
        <title>LICE_ThickFLine</title>
        <functioncall prog_lang="cpp">void (*LICE_ThickFLine)(LICE_IBitmap* dest, double x1, double y1, double x2, double y2, LICE_pixel color, float alpha, int mode, int wid);</functioncall>
        <requires>
            Reaper=6.48
        </requires>
        <description indent="default">
            LICE simple fill
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            double x1 - 
            double y1 - 
            double x2 - 
            double y2 - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
            int wid - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, lice, thick, line</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
 
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PCM_Source_CreateFromSimple</slug>
        <title>PCM_Source_CreateFromSimple</title>
        <functioncall prog_lang="cpp">PCM_source* retval = (*PCM_Source_CreateFromSimple)(ISimpleMediaDecoder* dec, const char* fn)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PCM_Source create from simple
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            PCM_source* retval -
        </retvals>
        <parameters>
            ISimpleMediaDecoder* dec - 
            const char* fn - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, pcm, source, create</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PeakBuild_Create</slug>
        <title>PeakBuild_Create</title>
        <functioncall prog_lang="cpp">REAPER_PeakBuild_Interface* retval = (*PeakBuild_Create)(PCM_source* src, const char* fn, int srate, int nch)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Peak build create
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            REAPER_PeakBuild_Interface* retval -
        </retvals>
        <parameters>
            PCM_source* src - 
            const char* fn - 
            int srate -
            int nch - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, peak, build, create</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PeakBuild_CreateEx</slug>
        <title>PeakBuild_CreateEx</title>
        <functioncall prog_lang="cpp">REAPER_PeakBuild_Interface* retval = (*PeakBuild_CreateEx)(PCM_source* src, const char* fn, int srate, int nch, int flags)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Peakbuild create-ex. flags&1 for FP support
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            REAPER_PeakBuild_Interface* retval -
        </retvals>
        <parameters>
            PCM_source* src - 
            const char* fn - 
            int srate -
            int nch - 
            int flags - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, peak, ex, create</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PeakGet_Create</slug>
        <title>PeakGet_Create</title>
        <functioncall prog_lang="cpp">REAPER_PeakGet_Interface* retval =(*PeakGet_Create)(const char* fn, int srate, int nch)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Peak get create.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            REAPER_PeakGet_Interface* retval -
        </retvals>
        <parameters>
            const char* fn - 
            int srate - 
            int nch -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, peak, create, get</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PlayPreview</slug>
        <title>PlayPreview</title>
        <functioncall prog_lang="cpp">int retval = (*PlayPreview)(preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Play preview. Return nonzero on success.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            preview_register_t* preview - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Preview
        </chapter_context>
        <tags>cpp, play, preview</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PlayPreviewEx</slug>
        <title>PlayPreviewEx</title>
        <functioncall prog_lang="cpp">int retval = (*PlayPreviewEx)(preview_register_t* preview, int bufflags, double measure_align)</functioncall>
        <requires>
            Reaper=6.19
        </requires>
        <description indent="default">
            return nonzero on success. 

            Bufflags:
            &1 = buffer source, 
            &2 = treat length changes in source as varispeed and adjust internal state accordingly if buffering.

            measure_align<0=play immediately, >0=align playback with measure start
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            preview_register_t* preview - 
            int bufflags - 
            double measure_align -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Preview
        </chapter_context>
        <tags>cpp, play, preview, ex</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PlayTrackPreview</slug>
        <title>PlayTrackPreview</title>
        <functioncall prog_lang="cpp">int retval = (*PlayTrackPreview)(preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Play track preview. Returns nonzero on success,in these,m_out_chan is a track index (0-n).
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            preview_register_t* preview - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Preview
        </chapter_context>
        <tags>cpp, play, track, preview</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PlayTrackPreview2</slug>
        <title>PlayTrackPreview2</title>
        <functioncall prog_lang="cpp">int retval = (*PlayTrackPreview2)(ReaProject* proj, preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Play track preview. Return nonzero on success,in these,m_out_chan is a track index (0-n).
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            ReaProject* proj - the project-number. 0 for the current project. 
            preview_register_t* preview - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Preview
        </chapter_context>
        <tags>cpp, play, track, preview</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PlayTrackPreview2Ex</slug>
        <title>PlayTrackPreview2Ex</title>
        <functioncall prog_lang="cpp">int retval = (*PlayTrackPreview2Ex)(ReaProject* proj, preview_register_t* preview, int flags, double measure_align)</functioncall>
        <requires>
            Reaper=6.19
        </requires>
        <description>
            return nonzero on success,in these,m_out_chan is a track index (0-n). for flags see PlayPreviewEx bufflags
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            ReaProject* proj - the project-number. 0 for the current project. 
            preview_register_t* preview - 
            int flags -
            double measure_align - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:PlayPreviewEx
                   an enhanced version of play preview 
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Preview
        </chapter_context>
        <tags>cpp, play, track, preview, ex</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>plugin_getapi</slug>
        <title>plugin_getapi</title>
        <functioncall prog_lang="cpp">void* (*plugin_getapi)(const char* name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Plugin get api.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            const char* name - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, plugin, get, api</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>plugin_getFilterList</slug>
        <title>plugin_getFilterList</title>
        <functioncall prog_lang="cpp">const char* retval (*plugin_getFilterList)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Plugin get filter list. Returns a double-NULL terminated list of importable media files, suitable for passing to GetOpenFileName() etc. Includes *.* (All files).
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            const char* retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, get, filter, list, plugin</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>plugin_getImportableProjectFilterList</slug>
        <title>plugin_getImportableProjectFilterList</title>
        <functioncall prog_lang="cpp">const char* retval = (*plugin_getImportableProjectFilterList)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Plugin get importable project filter list. Returns a double-NULL terminated list of importable project files, suitable for passing to GetOpenFileName() etc. Includes *.* (All files). 
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            const char* retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, plugin, get, importable, project, filter, list, file</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>projectconfig_var_addr</slug>
        <title>projectconfig_var_addr</title>
        <functioncall prog_lang="cpp">void* (*projectconfig_var_addr)(ReaProject* proj, int idx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Project config var addr.

            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            ReaProject* proj - the project-number. 0 for the current project. 
            int idx - 
        </parameters>
        <linked_to desc="see also:">
            www:Reaper_Config_Variables.html
                all valid config-variables documented
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Config Vars
        </chapter_context>
        <tags>cpp, project, config, var, addr</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>projectconfig_var_getoffs</slug>
        <title>projectconfig_var_getoffs</title>
        <functioncall prog_lang="cpp">int retval = (*projectconfig_var_getoffs)(const char* name, int* szOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Returns offset to pass to projectconfig_var_addr() to get project-config var of name. szout gets size of object.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            const char* name - 
            int* szOut - size of the object
        </parameters>
        <linked_to desc="see also:">
            www:Reaper_Config_Variables.html
                all valid config-variables documented
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Config Vars
        </chapter_context>
        <tags>cpp, project, config, var, getoffs, offset</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>realloc_cmd_clear</slug>
        <title>realloc_cmd_clear</title>
        <functioncall prog_lang="cpp">void (*realloc_cmd_clear)(int tok)</functioncall>
        <requires>
            Reaper=6.68
        </requires>
        <description>
            clears a buffer/buffer-size registration added with realloc_cmd_register_buf, and clears any later registrations, frees any allocated buffers. call after values are read from any registered pointers etc.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            int tok - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Config Vars
        </chapter_context>
        <tags>cpp, realloc, clear, buffer, register</tags>
        <changelog>
          Reaper 6.68 - added to Reaper
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>realloc_cmd_register_buf</slug>
        <title>realloc_cmd_register_buf</title>
        <functioncall prog_lang="cpp">int (*realloc_cmd_register_buf)(char** ptr, int* ptr_size)</functioncall>
        <requires>
            Reaper=6.68
        </requires>
        <description>
            clears a buffer/buffer-size registration added with realloc_cmd_register_buf, and clears any later registrations, frees any allocated buffers. call after values are read from any registered pointers etc.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            char** ptr - 
            int* ptr_size - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Config Vars
        </chapter_context>
        <tags>cpp, realloc, buffer, register</tags>
        <changelog>
          Reaper 6.68 - added to Reaper
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>ReaperGetPitchShiftAPI</slug>
        <title>ReaperGetPitchShiftAPI</title>
        <functioncall prog_lang="cpp">IReaperPitchShift* retval = (*ReaperGetPitchShiftAPI)(int version)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            version must be REAPER_PITCHSHIFT_API_VER
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            IReaperPitchShift* retval -
        </retvals>
        <parameters>
            int version - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, reaper, pitch, shift, api</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>Resampler_Create</slug>
        <title>Resampler_Create</title>
        <functioncall prog_lang="cpp">REAPER_Resample_Interface* retval = (*Resampler_Create)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Resampler create
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            REAPER_Resample_Interface* retval -
        </retvals>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, resampler, create, interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>ResolveRenderPattern</slug>
        <title>ResolveRenderPattern</title>
        <functioncall prog_lang="cpp">int retval = (*ResolveRenderPattern)(ReaProject* project, const char* path, const char* pattern, char* targets, int targets_sz)</functioncall>
        <requires>
            Reaper=6.26
        </requires>
        <description indent="default">
            Resolve a wildcard pattern into a set of nul-separated, double-nul terminated render target filenames. Returns the length of the string buffer needed for the returned file list. Call with path=NULL to suppress filtering out illegal pathnames, call with targets=NULL to get just the string buffer length.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            ReaProject* project - 
            const char* path - 
            const char* pattern - 
            char* targets - 
            int targets_sz - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, resampler, create, interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>screenset_register</slug>
        <title>screenset_register</title>
        <functioncall prog_lang="cpp">void (*screenset_register)(char* id, void* callbackFunc, void* param)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Screenset register.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            char* id - 
            void* callbackFunc - 
            void* param -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Screensets
        </chapter_context>
        <tags>cpp, screenset, register</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>screenset_registerNew</slug>
        <title>screenset_registerNew</title>
        <functioncall prog_lang="cpp">void (*screenset_registerNew)(char* id, screensetNewCallbackFunc callbackFunc, void* param)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Screenset register new.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            char* id - 
            screensetNewCallbackFunc callbackFunc - 
            void* param -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Screensets
        </chapter_context>
        <tags>cpp, screenset, register, new</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>screenset_unregister</slug>
        <title>screenset_unregister</title>
        <functioncall prog_lang="cpp">void (*screenset_unregister)(char* id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Screenset unregister.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            char* id - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Screensets
        </chapter_context>
        <tags>cpp, screenset, unregister</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>screenset_unregisterByParam</slug>
        <title>screenset_unregisterByParam</title>
        <functioncall prog_lang="cpp">void (*screenset_unregisterByParam)(void* param)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Screenset unregister by param
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            void* param - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Screensets
        </chapter_context>
        <tags>cpp, screenset, unregister, param</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>screenset_updateLastFocus</slug>
        <title>screenset_updateLastFocus</title>
        <functioncall prog_lang="cpp">void (*screenset_updateLastFocus)(HWND prevWin)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            screenset_updateLastFocus
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            HWND prevWin - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Screensets
        </chapter_context>
        <tags>cpp, screenset, update, focus</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>SetRenderLastError</slug>
        <title>SetRenderLastError</title>
        <functioncall prog_lang="cpp">void (*SetRenderLastError)(const char* errorstr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Set render last error.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            const char* errorstr - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, set, render, error</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>StopPreview</slug>
        <title>StopPreview</title>
        <functioncall prog_lang="cpp">int retval = (*StopPreview)(preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Stop preview.
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            preview_register_t* preview - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Preview
        </chapter_context>
        <tags>cpp, stop, preview</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>StopTrackPreview</slug>
        <title>StopTrackPreview</title>
        <functioncall prog_lang="cpp">int retval = (*StopTrackPreview)(preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Stop track preview. Return nonzero on success.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            preview_register_t* preview - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Preview
        </chapter_context>
        <tags>cpp, stop, track, preview</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>StopTrackPreview2</slug>
        <title>StopTrackPreview2</title>
        <functioncall prog_lang="cpp">int retval = (*StopTrackPreview2)(ReaProject* proj, preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Stop track preview2.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            void* ReaProject - the project-number. 0 for the current project. 
            preview_register_t* preview - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Preview
        </chapter_context>
        <tags>cpp, stop, track, preview, ex</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>update_disk_counters</slug>
        <title>update_disk_counters</title>
        <functioncall prog_lang="cpp">void (*update_disk_counters)(int readamt, int writeamt)</functioncall>
        <requires>
            Reaper=6.13
        </requires>
        <description indent="default">
            Updates disk I/O statistics with bytes transferred since last call. 
            Notify REAPER of a write error by calling with readamt=0, writeamt=-101010110 for unknown or -101010111 for disk full
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            int readamt - 
            int writeamt -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Files
        </chapter_context>
        <tags>cpp, update, disk, counters, statistics, bytes, transferred</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>WDL_VirtualWnd_ScaledBlitBG</slug>
        <title>WDL_VirtualWnd_ScaledBlitBG</title>
        <functioncall prog_lang="cpp">bool retval = (*WDL_VirtualWnd_ScaledBlitBG)(LICE_IBitmap* dest, WDL_VirtualWnd_BGCfg* src, int destx, int desty, int destw, int desth, int clipx, int clipy, int clipw, int cliph, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            WDL virtualwnd scale blit bg.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            bool retval -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            WDL_VirtualWnd_BGCfg* src - 
            int destx - 
            int desty - 
            int destw - 
            int desth - 
            int clipx - 
            int clipy - 
            int clipw - 
            int cliph - 
            float alpha - 
            int mode - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            GFX
        </chapter_context>
        <tags>cpp, set, error</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetMediaItemInfo</slug>
        <title>GetSetMediaItemInfo</title>
        <functioncall prog_lang="cpp">void* (*GetSetMediaItemInfo)(MediaItem* item, const char* parmname, void* setNewValue)</functioncall>
        <requires>
            Reaper=6.34
        </requires>
        <description indent="default">
            Get/Set Media Item Info
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            MediaItem* item - a MediaItem-object
            const char* parmname - the parameter to be gotten/set
                -P_TRACK : MediaTrack * (read only)
                -B_MUTE : bool * to muted state
                -B_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.
                -C_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.
                -B_LOOPSRC : bool * to loop source
                -B_ALLTAKESPLAY : bool * to all takes play
                -B_UISEL : bool * to ui selected
                -C_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly
                -C_LOCK : char * to one char of lock flags (&1 is locked, currently)
                -D_VOL : double *, take volume (negative if take polarity is flipped)
                -D_POSITION : double * of item position (seconds)
                -D_LENGTH : double * of item length (seconds)
                -D_SNAPOFFSET : double * of item snap offset (seconds)
                -D_FADEINLEN : double * of item fade in length (manual, seconds)
                -D_FADEOUTLEN : double * of item fade out length (manual, seconds)
                -D_FADEINDIR : double * of item fade in curve [-1; 1]
                -D_FADEOUTDIR : double * of item fade out curve [-1; 1]
                -D_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)
                -D_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)
                -C_FADEINSHAPE : int * to fadein shape, 0=linear, ...
                -C_FADEOUTSHAPE : int * to fadeout shape
                -I_GROUPID : int * to group ID (0 = no group)
                -I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
                -I_LASTH : int * : height in pixels (read-only)
                -I_LASTY : int * to last y position in track (readonly)
                -I_LASTH : int * to last height in track (readonly)
                -I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used (though will store the color anyway).
                -I_CURTAKE : int * to active take
                -IP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)
                -F_FREEMODE_Y : float * to free mode y position (0..1)
                -F_FREEMODE_H : float * to free mode height (0..1)
                -P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)
            void* setNewValue - the new value to be set, refer description of parmname for the values
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            MediaItems
        </chapter_context>
        <tags>cpp, mediaitem, parameters, get, set, info</tags>
        <changelog>
            Reaper 6.54 - fix GetSetMediaItemInfo with F_FREEMODE_Y, F_FREEMODE_H
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetToggleCommandState2</slug>
        <title>GetToggleCommandState2</title>
        <functioncall prog_lang="cpp">int retval = (*GetToggleCommandState2)(KbdSectionInfo* section, int command_id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Get Toggle Command State 2
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            KbdSectionInfo* section - the section, in which the action exists
                -0, Main
                -100, Main (alt recording)
                -32060, MIDI Editor
                -32061, MIDI Event List Editor
                -32062, MIDI Inline Editor
                -32063, Media Explorer
            int command_id - the command-id of the command, whose toggle-state you want
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Actions
        </chapter_context>
        <tags>cpp, get, toggle, command, state, section, commandid</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetTrackInfo</slug>
        <title>GetTrackInfo</title>
        <functioncall prog_lang="cpp">const char* retval = (*GetTrackInfo)(INT_PTR track, int* flags)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Gets track info (returns name).
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            const char* retval -
        </retvals>
        <parameters>
            INT_PTR track - track index, -1=master, 0..n, or cast a MediaTrack* to int 
            int* flags - if flags is non-NULL, will be set to:
                -&1, folder
                -&2, selected
                -&4, has fx enabled
                -&8, muted
                -&16, soloed
                -&32, SIP'd (with &16)
                -&64, rec armed
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Media Track
        </chapter_context>
        <tags>cpp, get, track, info, flag</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>KBD_OnMainActionEx</slug>
        <title>KBD_OnMainActionEx</title>
        <functioncall prog_lang="cpp">int retval = (*KBD_OnMainActionEx)(int cmd, int val, int valhw, int relmode, HWND hwnd, ReaProject* proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            val/valhw are used for midi stuff.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            int cmd - 
            int val - val=[0..127] and valhw=-1 (midi CC)
            int valhw - valhw >=0 (midi pitch (valhw | val<<7))
            int relmode - relmode absolute (0) or 1/2/3 for relative adjust modes
            HWND hwnd - 
            ReaProject* proj -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Actions
        </chapter_context>
        <tags>cpp, midi, command, value, relmode, main, action</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>MIDI_eventlist_Create</slug>
        <title>MIDI_eventlist_Create</title>
        <functioncall prog_lang="cpp">MIDI_eventlist* retval = (*MIDI_eventlist_Create)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Create a MIDI_eventlist object. The returned object must be deleted with MIDI_eventlist_destroy.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            MIDI_eventlist* retval -
        </retvals>
        <linked_to desc="see also:">
            Reaper:MIDI_eventlist_destroy
                   destroy an eventlist-object
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Midi
        </chapter_context>
        <tags>cpp, midi, event, list, create</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>MIDI_eventlist_Destroy</slug>
        <title>MIDI_eventlist_Destroy</title>
        <functioncall prog_lang="cpp">void (*MIDI_eventlist_Destroy)(MIDI_eventlist* evtlist)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description>
            Destroy a MIDI_eventlist object that was created using MIDI_eventlist_Create.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            MIDI_eventlist* evtlist - 
        </parameters>
        <linked_to desc="see also:">
            Reaper:MIDI_eventlist_Create
                   create a MIDI eventlist-object
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Midi
        </chapter_context>
        <tags>cpp, midi, event, list, destroy</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PCM_Sink_Create</slug>
        <title>PCM_Sink_Create</title>
        <functioncall prog_lang="cpp">PCM_sink* retval = (*PCM_Sink_Create)(const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PCM sink create
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            PCM_sink* retval -
        </retvals>
        <parameters>
            const char* filename - 
            const char* cfg - 
            int cfg_sz - 
            int nch - 
            int srate - 
            bool buildpeaks -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, pcm, sink, create, filename</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PCM_Sink_CreateEx</slug>
        <title>PCM_Sink_CreateEx</title>
        <functioncall prog_lang="cpp">PCM_sink* retval = (*PCM_Sink_CreateEx)(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PCM sink create ex.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            PCM_sink* retval -
        </retvals>
        <parameters>
            ReaProject* proj - the project-number. 0 for the current project. 
            const char* filename - 
            const char* cfg - 
            int cfg_sz - 
            int nch - 
            int srate - 
            bool buildpeaks -
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Audio
        </chapter_context>
        <tags>cpp, pcm, sink, create, filename, ex</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PCM_Sink_CreateMIDIFile</slug>
        <title>PCM_Sink_CreateMIDIFile</title>
        <functioncall prog_lang="cpp">PCM_sink* retval = (*PCM_Sink_CreateMIDIFile)(const char* filename, const char* cfg, int cfg_sz, double bpm, int div)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PCM sink create MIDI file.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            PCM_sink* retval -
        </retvals>
        <parameters>
            const char* filename - 
            const char* cfg - 
            int cfg_sz - 
            double bpm - 
            int div - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Midi
        </chapter_context>
        <tags>cpp, pcm, sink, create, midi, filename</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PCM_Sink_CreateMIDIFileEx</slug>
        <title>PCM_Sink_CreateMIDIFileEx</title>
        <functioncall prog_lang="cpp">PCM_sink* retval = (*PCM_Sink_CreateMIDIFileEx)(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, double bpm, int div)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PCM sink create MIDI file ex
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            PCM_sink* retval -
        </retvals>
        <parameters>
            ReaProject* proj - the project-number. 0 for the current project. 
            const char* filename - 
            const char* cfg - 
            int cfg_sz - 
            double bpm - 
            int div - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Midi
        </chapter_context>
        <tags>cpp, pcm, sink, create, midi, filename, ex</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>SendLocalOscMessage</slug>
        <title>SendLocalOscMessage</title>
        <functioncall prog_lang="cpp">void (*SendLocalOscMessage)(void* local_osc_handler, const char* msg, int msglen)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Send local Osc message.
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            void* local_osc_handler - 
            const char* msg - 
            int msglen - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            OSC
        </chapter_context>
        <tags>cpp, send, local, osc, message</tags>
        <changelog>
        </changelog>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PitchShiftSubModeMenu</slug>
        <title>PitchShiftSubModeMenu</title>
        <functioncall prog_lang="cpp">int retval = (*PitchShiftSubModeMenu)(HWND hwnd, int x, int y, int mode, int submode_sel)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            menu to select/modify pitch shifter submode, returns new value (or old value if no item selected)
            
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval -
        </retvals>
        <parameters>
            HWND hwnd - 
            int x - 
            int y - 
            int mode - 
            int submode_sel - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, pitch, shift, sub, mode, menu</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>REAPERAPI_LoadAPI</slug>
        <title>REAPERAPI_LoadAPI</title>
        <functioncall prog_lang="cpp">int retval = REAPERAPI_LoadAPI(void *(*getAPI)(const char *))</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Checks, whether a certain Reaper-API-function exists.

            Because the API is dynamic, callers should never assume a function exists.
            Check that a non-NULL function pointer was returned before using it (unless
            loaded functions are verified using REAPERAPI_LoadAPI(), see note below).

              1) most source files should just #include "reaper_plugin_functions.h" as is.
              2) one file should #define REAPERAPI_IMPLEMENT before including this file.
              3) the plug-in should call REAPERAPI_LoadAPI(rec->GetFunc) from REAPER_PLUGIN_ENTRYPOINT
                 and check the return value for errors (REAPERAPI_LoadAPI will return 0 on success).
                 
            Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            int retval - 0, if a function exists
        </retvals>
        <parameters>
            const char * - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, check, function, plugin, api</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>realloc_cmd_ptr</slug>
        <title>realloc_cmd_ptr</title>
        <functioncall prog_lang="cpp">bool retval = (*realloc_cmd_ptr)(char** ptr, int* ptr_size, int new_size)</functioncall>
        <requires>
            Reaper=5.965
        </requires>
        <description indent="default">
             special use for NeedBig script API functions - reallocates a NeedBig buffer and updates its size, returns false on error
             
             Stored in reaper_plugin_functions.h
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            char** ptr - 
            int* ptr_size - 
            int new_size - 
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            C++-only functions
            Misc
        </chapter_context>
        <tags>cpp, check, function, plugin, api</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaPack_AboutInstalledPackage</slug>
        <title>ReaPack_AboutInstalledPackage(ReaPack)</title>
        <functioncall prog_lang="cpp">bool ReaPack_AboutInstalledPackage(PackageEntry* entry)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ReaPack_AboutInstalledPackage", PackageEntry entry)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.ReaPack_AboutInstalledPackage(PackageEntry entry)</functioncall>
        <functioncall prog_lang="python">Boolean retval = ReaPack_AboutInstalledPackage(PackageEntry entry)</functioncall>
        <requires>
            Reaper=5.965
            ReaPack=1.2.2
        </requires>
        <description>
            Show the about dialog of the given package entry.
            The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.

            see ReaPack_GetOwner to get this parameter
        </description>
        <retvals>
            boolean retval - true, if the dialog is shown
        </retvals>
        <parameters>
            PackageEntry entry - the installed Reapack-package, whose about dialog you want to show
        </parameters>
        <linked_to desc="see also:">
            ReaPack:ReaPack_GetOwner
                    returns the package, that owns a certain installed file
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaPack
        </chapter_context>
        <tags>reapack, show, about, install, package</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaPack_AboutRepository</slug>
        <title>ReaPack_AboutRepository(ReaPack)</title>
        <functioncall prog_lang="cpp">bool ReaPack_AboutRepository(const char* repoName)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ReaPack_AboutRepository", "repoName")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.ReaPack_AboutRepository(string repoName)</functioncall>
        <functioncall prog_lang="python">Boolean retval = ReaPack_AboutRepository(String repoName)</functioncall>
        <requires>
            Reaper=5.965
            ReaPack=1.2.2
        </requires>
        <description prog_lang="*">
            Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.
            The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.
        </description>
        <retvals>
            boolean retval - true, if the dialog is shown
        </retvals>
        <parameters>
            string repoName - the repository, whose about-dialog you would love to have
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaPack
        </chapter_context>
        <tags>reapack, show, about, repository</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaPack_AddSetRepository</slug>
        <title>ReaPack_AddSetRepository(ReaPack)</title>
        <functioncall prog_lang="cpp">bool ReaPack_AddSetRepository(const char* name, const char* url, bool enable, int autoInstall, char* errorOut, int errorOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ReaPack_AddSetRepository", "name", "url", bool enable, int autoInstall, #error)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string error = reaper.ReaPack_AddSetRepository(string name, string url, boolean enable, integer autoInstall)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String name, String url, Boolean enable, Int autoInstall, String errorOut, Int errorOut_sz) = ReaPack_AddSetRepository(name, url, enable, autoInstall, errorOut, errorOut_sz)</functioncall>
        <requires>
            Reaper=5.965
            ReaPack=1.2.2
        </requires>
        <description>
            Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. 
            
            Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.

            autoInstall: usually set to 2 (obey user setting).
        </description>
        <retvals>
            boolean retval - true, if the repo has been added
            string error - 
        </retvals>
        <parameters>
            string name - the name of the package
            string url - the url to the repository's xml-file; set nil to keep the current one
            boolean enable - set this repo as enabled in the GUI of ReaPack, so synchronizing is possible
            integer autoInstall - shall this repository automatically installed, when synchronizing and an update is available?
                                -    0, don't autoinstall new packages when synchronizing
                                -    1, autoinstall new packages when synchronizing
                                -    2, use user-settings
        </parameters>
        <linked_to desc="see also:">
            ReaPack:ReaPack_ProcessQueue
                    processes the new list and updates the gui of ReaPack
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaPack
        </chapter_context>
        <tags>reapack, add, set, repository</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaPack_BrowsePackages</slug>
        <title>ReaPack_BrowsePackages(ReaPack)</title>
        <functioncall prog_lang="cpp">void ReaPack_BrowsePackages(const char* filter)</functioncall>
        <functioncall prog_lang="eel">extension_api("ReaPack_BrowsePackages", "filter")</functioncall>
        <functioncall prog_lang="lua">reaper.ReaPack_BrowsePackages(string filter)</functioncall>
        <functioncall prog_lang="python">ReaPack_BrowsePackages(String filter)</functioncall>
        <requires>
            Reaper=5.965
            ReaPack=1.2.2
        </requires>
        <description prog_lang="*">
            Opens the package browser with the given filter string.
        </description>
        <parameters>
            string filter - the filter to be applied in the package browser. Only packages that feature words included in this filter will be shown.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaPack
        </chapter_context>
        <tags>reapack, browse, packages</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaPack_CompareVersions</slug>
        <title>ReaPack_CompareVersions(ReaPack)</title>
        <functioncall prog_lang="cpp">int ReaPack_CompareVersions(const char* ver1, const char* ver2, char* errorOut, int errorOut_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ReaPack_CompareVersions", "ver1", "ver2", #error)</functioncall>
        <functioncall prog_lang="lua">integer retval, string error = reaper.ReaPack_CompareVersions(string ver1, string ver2)</functioncall>
        <functioncall prog_lang="python">(Int retval, String ver1, String ver2, String errorOut, Int errorOut_sz) = ReaPack_CompareVersions(ver1, ver2, errorOut, errorOut_sz)</functioncall>
        <requires>
            Reaper=5.965
            ReaPack=1.2.2
        </requires>
        <description prog_lang="*">
            Compares two versionnumbers. Versionnumbers must start with a number/digit, or they can't be compared.
            Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.
        </description>
        <retvals>
            integer retval - -1, ver1<ver2
                           - 0, ver1 = ver2
                           - 1, ver1>ver2
            string error - the errormessage, if comparing the parameters ver1 and ver2 is impossible
        </retvals>
        <parameters>
            string ver1 - a first versionnumber to compare; must start with a number/digit
            string ver2 - a second versionnumber to compare; must start with a number/digit
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaPack
        </chapter_context>
        <tags>reapack, compare, versionnumber</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaPack_EnumOwnedFiles</slug>
        <title>ReaPack_EnumOwnedFiles(ReaPack)</title>
        <functioncall prog_lang="cpp">bool ReaPack_EnumOwnedFiles(PackageEntry* entry, int index, char* pathOut, int pathOut_sz, int* sectionsOut, int* typeOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ReaPack_EnumOwnedFiles", PackageEntry entry, int index, #path, int &sections, int &type)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string path, integer sections, integer type = reaper.ReaPack_EnumOwnedFiles(PackageEntry entry, integer index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, PackageEntry entry, Int index, String pathOut, Int pathOut_sz, Int sectionsOut, Int typeOut) = ReaPack_EnumOwnedFiles(entry, index, pathOut, pathOut_sz, sectionsOut, typeOut)</functioncall>
        <requires>
            Reaper=5.965
            ReaPack=1.2.2
        </requires>
        <description>
            Enumerate the files owned by the given package. Returns false when there is no more data.

               sections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor
               type: see ReaPack_GetEntryInfo.

               see ReaPack_GetOwner to get the value for the parameter entry

        </description>
        <retvals>
            boolean retval - true, if more files exist; false, if this is the last/only file
            string path - the path and filename of the installed file
            integer sections - the section(s), in which this file is installed; it is an integer bitfield
                            -   0=not in action list
                            -   &1=main
                            -   &2=midi editor
                            -   &4=midi inline editor
            integer type - the type of the extension, in which this file exists
                        -   1, script 
                        -   2, extension
                        -   3, effect 
                        -   4, data 
                        -   5, theme
                        -   6, langpack 
                        -   7, webinterface
        </retvals>
        <parameters>
            PackageEntry entry - the installed Reapack-package, whose file you want to enumerate
            integer index - the index of the file of this ReaPack-package with 0 for the first file
        </parameters>
        <linked_to desc="see also:">
            ReaPack:ReaPack_GetOwner
                    returns the package, that owns a certain installed file
            ReaPack:ReaPack_GetEntryInfo
                    returns the attributes of an installed repository, like name, package description, etc
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaPack
        </chapter_context>
        <tags>reapack, enumerate, installed files, packageentry, package</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaPack_FreeEntry</slug>
        <title>ReaPack_FreeEntry(ReaPack)</title>
        <functioncall prog_lang="cpp">bool ReaPack_FreeEntry(PackageEntry* entry)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ReaPack_FreeEntry", PackageEntry entry)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.ReaPack_FreeEntry(PackageEntry entry)</functioncall>
        <functioncall prog_lang="python">Boolean retval = ReaPack_FreeEntry(PackageEntry entry)</functioncall>
        <requires>
            Reaper=5.965
            ReaPack=1.2.2
        </requires>
        <description>
            Free resources allocated for the given package entry. 
            
            Must be used to free PackageEntry-objects created by ReaPack_GetOwner.
        </description>
        <retvals>
            boolean retval - true, if freeing was successful; false, if no
        </retvals>
        <parameters>
            PackageEntry entry - the installed Reapack-package, whose ressources you want to free
        </parameters>
        <linked_to desc="see also:">
            ReaPack:ReaPack_GetOwner
                   returns the package, that owns a certain installed file
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaPack
        </chapter_context>
        <tags>reapack, enumerate, free, ressources, packageentry, package</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaPack_GetEntryInfo</slug>
        <title>ReaPack_GetEntryInfo(ReaPack)</title>
        <functioncall prog_lang="cpp">bool ReaPack_GetEntryInfo(PackageEntry* entry, char* repoOut, int repoOut_sz, char* catOut, int catOut_sz, char* pkgOut, int pkgOut_sz, char* descOut, int descOut_sz, int* typeOut, char* verOut, int verOut_sz, char* authorOut, int authorOut_sz, int* flagsOut, int* fileCountOut)</functioncall>
        <functioncall prog_lang="eel">bool ReaPack_GetEntryInfo(PackageEntry entry, #repo, #cat, #pkg, #desc, int &type, #ver, #author, int &flags, int &fileCount)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string repo, string cat, string pkg, string desc, integer type, string ver, string author, integer flags, integer fileCount = reaper.ReaPack_GetEntryInfo(PackageEntry entry)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, PackageEntry entry, String repoOut, Int repoOut_sz, String catOut, Int catOut_sz, String pkgOut, Int pkgOut_sz, String descOut, Int descOut_sz, Int typeOut, String verOut, Int verOut_sz, String authorOut, Int authorOut_sz, Int flagsOut, Int fileCountOut) = ReaPack_GetEntryInfo(entry, repoOut, repoOut_sz, catOut, catOut_sz, pkgOut, pkgOut_sz, descOut, descOut_sz, typeOut, verOut, verOut_sz, authorOut, authorOut_sz, flagsOut, fileCountOut)</functioncall>
        <requires>
            Reaper=5.965
            ReaPack=1.2.4
        </requires>
        <description>
            Get the repository name, category, package name, package description, package type, the currently installed version, author name, flags (&1=Pinned, &2=BleedingEdge) and how many files are owned by the given package entry.
            
            see ReaPack_GetOwner to get value for parameter entry
        </description>
        <retvals>
            boolean retval - true, if getting the info worked
            string repo - the name of the repository
            string cat - the category of this package
            string pkg - the package-name of this package
            string desc - the description of this package
            integer type - the type of this package
                        -  1, script
                        -  2, extension
                        -  3, effect
                        -  4, data
                        -  5, theme
                        -  6, langpack
                        -  7, webinterface
            string ver - the currently installed version of this package
            string author - the author of this package
            integer flags - the pinned-status of this package
                          - &1=Pinned
                          - &2=BleedingEdge
            integer fileCount - the number of files of this package
        </retvals>
        <parameters>
            PackageEntry entry - the installed Reapack-package, whose package-infos you want
        </parameters>
        <linked_to desc="see also:">
            ReaPack:ReaPack_GetOwner
                   returns the package, that owns a certain installed file
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaPack
        </chapter_context>
        <tags>reapack, get, entry, info, packageentry, package</tags>
        <changelog>
            ReaPack 1.2.4 - retval pinned changed from boolean to integer and renamed flag; supports now bleeding edge-flag
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaPack_GetOwner</slug>
        <title>ReaPack_GetOwner(ReaPack)</title>
        <functioncall prog_lang="cpp">PackageEntry* ReaPack_GetOwner(const char* fn, char* errorOut, int errorOut_sz)</functioncall>
        <functioncall prog_lang="eel">PackageEntry extension_api("ReaPack_GetOwner", "fn", #error)</functioncall>
        <functioncall prog_lang="lua">PackageEntry retval, string error = reaper.ReaPack_GetOwner(string fn)</functioncall>
        <functioncall prog_lang="python">(PackageEntry retval, String fn, String errorOut, Int errorOut_sz) = ReaPack_GetOwner(fn, errorOut, errorOut_sz)</functioncall>
        <requires>
            Reaper=5.965
            ReaPack=1.2.2
        </requires>
        <description>
            Returns the package entry owning the given file.
            Delete the returned object from memory after use with ReaPack_FreeEntry.
        </description>
        <retvals>
            PackageEntry retval - the installed Reapack-package, who is owner of this file
            string error - an errormessage, if the file is not part of a ReaPack-package
        </retvals>
        <parameters>
            string fn - filename with path to a file, of which you want to know, whose package owns it
        </parameters>
        <linked_to desc="see also:">
            ReaPack:ReaPack_FreeEntry
                   deletes a PackageEntry, when you have no use for it anymore
        </linked_to>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaPack
        </chapter_context>
        <tags>reapack, get, owner, filename, packageentry, package</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaPack_GetRepositoryInfo</slug>
        <title>ReaPack_GetRepositoryInfo(ReaPack)</title>
        <functioncall prog_lang="cpp">bool ReaPack_GetRepositoryInfo(const char* name, char* urlOut, int urlOut_sz, bool* enabledOut, int* autoInstallOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ReaPack_GetRepositoryInfo", "name", #url, bool &enabled, int &autoInstall)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string url, boolean enabled, integer autoInstall = reaper.ReaPack_GetRepositoryInfo(string name)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String name, String urlOut, Int urlOut_sz, Boolean enabledOut, Int autoInstallOut) = ReaPack_GetRepositoryInfo(name, urlOut, urlOut_sz, enabledOut, autoInstallOut)</functioncall>
        <requires>
            Reaper=5.965
            ReaPack=1.2.2
        </requires>
        <description prog_lang="*">
            Get the infos of the given repository.
        </description>
        <retvals>
            boolean retval - true, such a repository exists; false, it does not exist
            string url - the url of the repository
            boolean enabled - true, the repository is enabled for installing/syncing; false, if not
            integer autoInstall - shall this repository be automatically installed when syncing?
                               - 0, manual 
                               - 1, when synchronizing
                               - 2, obey user setting
        </retvals>
        <parameters>
            string name - the name of the ReaPack package, whose repository you want to have
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaPack
        </chapter_context>
        <tags>reapack, get, repository, url</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaPack_ProcessQueue</slug>
        <title>ReaPack_ProcessQueue(ReaPack)</title>
        <functioncall prog_lang="cpp">void ReaPack_ProcessQueue(bool refreshUI)</functioncall>
        <functioncall prog_lang="eel">extension_api("ReaPack_ProcessQueue", bool refreshUI)</functioncall>
        <functioncall prog_lang="lua">reaper.ReaPack_ProcessQueue(boolean refreshUI)</functioncall>
        <functioncall prog_lang="python">ReaPack_ProcessQueue(Boolean refreshUI)</functioncall>
        <requires>
            Reaper=5.965
            ReaPack=1.2.2
        </requires>
        <description prog_lang="*">
            Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue).
        </description>
        <parameters>
            boolean refreshUI - true, refreshes the UI of the ReaPack-user-interface; false, doesn't update the UI
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaPack
        </chapter_context>
        <tags>reapack, process, queue, refresh ui</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>osara_outputMessage</slug>
        <title>osara_outputMessage</title>
        <functioncall prog_lang="cpp">void osara_outputMessage(const char* message)</functioncall>
        <functioncall prog_lang="eel">extension_api("osara_outputMessage", "message")</functioncall>
        <functioncall prog_lang="lua">reaper.osara_outputMessage(string message)</functioncall>
        <functioncall prog_lang="python">osara_outputMessage(String message)</functioncall>
        <requires>
            Reaper=5.979
            Osara=2021
        </requires>
        <description>
            Output a message to screen readers.
            This should only be used in consultation with screen reader users. Note that this may not work on Windows when certain GUI controls have focus such as list boxes and trees.

            Keep it short and to the point.
        </description>
        <parameters>
            string message - the message, that shall be output to the screen-reader.
        </parameters>
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            Osara
        </chapter_context>
        <tags>osara, output, message</tags>
        <changelog>
        </changelog>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>RDNA_GetMediaSourceMetadata</slug>
        <title>RDNA_GetMediaSourceMetadata</title>
        <functioncall prog_lang="cpp">bool RDNA_GetMediaSourceMetadata(PCM_source* src, const char* metaType, const char* key, char* bufOut, int bufSize)/functioncall>
        <functioncall prog_lang="eel">bool RDNA_GetMediaSourceMetadata(PCM_source src, "metaType", "key", #buf, int bufSize)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.RDNA_GetMediaSourceMetadata(PCM_source src, string metaType, string key, string buf, integer bufSize)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, PCM_source src, String metaType, String key, String bufOut, Int bufSize) = RDNA_GetMediaSourceMetadata(src, metaType, key, bufOut, bufSize)</functioncall>
        <requires>
            Reaper=5.70
            PeloReaper=2023.02.19
        </requires>
        <description>
            Get the value of metadata from media source(.wav only). metaType=BWF,IXML,INFO,CART, key=MetadataID(eg.INAM,IART,... of INFO)
        </description>
        <retvals>
          boolean retval - 
          string buf - 
        </retvals>
        <parameters>
            PCM_Source src - 
            string metaType - 
            string buf - 
            integer bufSize - 
        </parameters>        
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            PeloReaper
        </chapter_context>
        <tags>peloreaper, get, metadata, wav</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Fab_Clear</slug>
        <title>Fab_Clear</title>
        <functioncall prog_lang="cpp">bool Fab_Clear(const char* idStringInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("Fab_Clear", optional "idStringIn")</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.Fab_Clear(optional string idStringIn)</functioncall>
        <functioncall prog_lang="python">BoolFab_Clear(const char* idStringInOptional)</functioncall>
        <requires>
            Reaper=6.23
            ReaFab=0.3.10
        </requires>
        <description>            
            Clears ReaFab control map, optionally based on matching idString. Returns true on success.
        </description>        
        <retvals>
            boolean retval - 
        </retvals>        
        <parameters>
            optional string idStringIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaFab
        </chapter_context>
        <tags>reafab</tags>
        <changelog>
          ReaFab 0.3.10 - added as new function
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Fab_Do</slug>
        <title>Fab_Do</title>
        <functioncall prog_lang="cpp">bool Fab_Do(int command, int val)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("Fab_Do", int command, int val)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.Fab_Do(integer command, integer val)</functioncall>
        <functioncall prog_lang="python">BoolFab_Do(int command, int val)</functioncall>
        <requires>
            Reaper=6.23
            ReaFab=0.3.10
        </requires>
        <description>            
            Runs ReaFab actions/commands. First parameter (command) is ReaFab command number, e.g. 3 for 3rd encoder rotation. Second parameter (val) is MIDI CC Relative value. Value 1 is increment of 1, 127 is decrement of 1. 2 is inc 2, 126 is dec 2 and so on. For button press (commands 9-32) a value of 127 is recommended.
        </description>        
        <retvals>
            boolean retval - 
        </retvals>        
        <parameters>
            integer command - 
            integer val -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaFab
        </chapter_context>
        <tags>reafab</tags>
        <changelog>
          ReaFab 0.3.10 - added as new function
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Fab_Dump</slug>
        <title>Fab_Dump</title>
        <functioncall prog_lang="cpp">void Fab_Dump()</functioncall>
        <functioncall prog_lang="eel">extension_api("Fab_Dump")</functioncall>
        <functioncall prog_lang="lua">reaper.Fab_Dump()</functioncall>
        <functioncall prog_lang="python">Fab_Dump()</functioncall>
        <requires>
            Reaper=6.23
            ReaFab=0.3.10
        </requires>
        <description>            
            Dumps current control mapping into .lua file under ResourcePath/Scripts/reafab_dump-timestamp.lua
        </description>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaFab
        </chapter_context>
        <tags>reafab</tags>
        <changelog>
          ReaFab 0.3.10 - added as new function
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Fab_Get</slug>
        <title>Fab_Get</title>
        <functioncall prog_lang="cpp">bool Fab_Get(int command, int* fxOut, int* paramOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("Fab_Get", int command, int &amp;fx, int &amp;param)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer fx, integer param = reaper.Fab_Get(integer command)</functioncall>
        <functioncall prog_lang="python">BoolFab_Get(int command, int* fxOut, int* paramOut)</functioncall>
        <requires>
            Reaper=6.23
            ReaFab=0.3.10
        </requires>
        <description>            
            Returns target FX and parameter index for given ReaFab command in context of selected track and ReaFab FX index. Valid command range 1 ... 24. Returns false if no such command mapping is found. Returns param index -1 for ReaFab internal band change command.
        </description>        
        <retvals>
            boolean retval - 
            integer fx - 
            integer param - 
        </retvals>        
        <parameters>
            integer command -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaFab
        </chapter_context>
        <tags>reafab</tags>
        <changelog>
          ReaFab 0.3.10 - added as new function
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Fab_Map</slug>
        <title>Fab_Map</title>
        <functioncall prog_lang="cpp">bool Fab_Map(const char* fxId, int command, const char* paramId, int control, int* bandsInOptional, double* stepInOptional, double* accelInOptional, double* minvalInOptional, double* maxvalInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("Fab_Map", "fxId", int command, "paramId", int control, optional int bandsIn, optional stepIn, optional accelIn, optional minvalIn, optional maxvalIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.Fab_Map(string fxId, integer command, string paramId, integer control, optional integer bandsIn, optional number stepIn, optional number accelIn, optional number minvalIn, optional number maxvalIn)</functioncall>
        <functioncall prog_lang="python">BoolFab_Map(const char* fxId, int command, const char* paramId, int control, int* bandsInOptional, double* stepInOptional, double* accelInOptional, double* minvalInOptional, double* maxvalInOptional)</functioncall>
        <requires>
            Reaper=6.23
            ReaFab=0.3.10
        </requires>
        <description>            
            Creates control mapping for ReaFab command.
            fxId e.g. "ReaComp".
            command 1-8 for encoders, 9-24 for buttons.
            paramId e.g. "Ratio".
            control 1 = direct, 2 = band selector, 3 = cycle, 4 = invert, 5 = force toggle, 6 = force range, 7 = 5 and 6, 8 = force continuous.
            bands define, if target fx has multiple identical target bands. In this case, paramId must include 00 placeholder, e.g. "Band 00 Gain".
            step overrides built-in default step of ~0.001 for continuous parameters.
            accel overrides built-in default control acceleration step of 1.0.
            minval &amp; maxval override default detected target param value range.
            Prefixing paramId with "-" reverses direction; useful for creating separate next/previous mappings for bands or list type value navigation.
        </description>        
        <retvals>
            boolean retval - 
        </retvals>        
        <parameters>
            string fxId - 
            integer command - 
            string paramId - 
            integer control - 
            optional integer bandsIn - 
            optional number stepIn - 
            optional number accelIn - 
            optional number minvalIn - 
            optional number maxvalIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>Reaper_Api_Documentation.USDocML</source_document>
        <chapter_context>
            ReaFab
        </chapter_context>
        <tags>reafab</tags>
        <changelog>
          ReaFab 0.3.10 - added as new function
        </changelog>
    </US_DocBloc>
                    

    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_AcceptDragDropPayload</slug>
        <title>ImGui_AcceptDragDropPayload</title>
        <functioncall prog_lang="cpp">bool ImGui_AcceptDragDropPayload(ImGui_Context* ctx, const char* type, char* payloadOutNeedBig, int payloadOutNeedBig_sz, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_AcceptDragDropPayload", ImGui_Context ctx, "type", #payload, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string payload = reaper.ImGui_AcceptDragDropPayload(ImGui_Context ctx, string type, string payload, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_AcceptDragDropPayload(ImGui_Context* ctx, const char* type, char* payloadOutNeedBig, int payloadOutNeedBig_sz, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Accept contents of a given type. If DragDropFlags_AcceptBeforeDelivery is set
         you can peek into the payload before the mouse button is released.
        </description>        
        <retvals>
            boolean retval - 
            string payload - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string type - 
            string payload - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_AcceptDragDropPayloadFiles</slug>
        <title>ImGui_AcceptDragDropPayloadFiles</title>
        <functioncall prog_lang="cpp">bool ImGui_AcceptDragDropPayloadFiles(ImGui_Context* ctx, int* countOut, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_AcceptDragDropPayloadFiles", ImGui_Context ctx, int &amp;count, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer count = reaper.ImGui_AcceptDragDropPayloadFiles(ImGui_Context ctx, integer count, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_AcceptDragDropPayloadFiles(ImGui_Context* ctx, int* countOut, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Accept a list of dropped files. See AcceptDragDropPayload and GetDragDropPayloadFile.
        </description>        
        <retvals>
            boolean retval - 
            integer count - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer count - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_AcceptDragDropPayloadRGB</slug>
        <title>ImGui_AcceptDragDropPayloadRGB</title>
        <functioncall prog_lang="cpp">bool ImGui_AcceptDragDropPayloadRGB(ImGui_Context* ctx, int* rgbOut, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_AcceptDragDropPayloadRGB", ImGui_Context ctx, int &amp;rgb, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer rgb = reaper.ImGui_AcceptDragDropPayloadRGB(ImGui_Context ctx, integer rgb, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_AcceptDragDropPayloadRGB(ImGui_Context* ctx, int* rgbOut, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Accept a RGB color. See AcceptDragDropPayload.
        </description>        
        <retvals>
            boolean retval - 
            integer rgb - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer rgb - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_AcceptDragDropPayloadRGBA</slug>
        <title>ImGui_AcceptDragDropPayloadRGBA</title>
        <functioncall prog_lang="cpp">bool ImGui_AcceptDragDropPayloadRGBA(ImGui_Context* ctx, int* rgbaOut, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_AcceptDragDropPayloadRGBA", ImGui_Context ctx, int &amp;rgba, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer rgba = reaper.ImGui_AcceptDragDropPayloadRGBA(ImGui_Context ctx, integer rgba, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_AcceptDragDropPayloadRGBA(ImGui_Context* ctx, int* rgbaOut, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Accept a RGBA color. See AcceptDragDropPayload.
        </description>        
        <retvals>
            boolean retval - 
            integer rgba - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer rgba - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_AlignTextToFramePadding</slug>
        <title>ImGui_AlignTextToFramePadding</title>
        <functioncall prog_lang="cpp">void ImGui_AlignTextToFramePadding(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_AlignTextToFramePadding", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_AlignTextToFramePadding(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_AlignTextToFramePadding(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Vertically align upcoming text baseline to StyleVar_FramePadding.y so that it
         will align properly to regularly framed items (call if you have text on a line
         before a framed item).
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ArrowButton</slug>
        <title>ImGui_ArrowButton</title>
        <functioncall prog_lang="cpp">bool ImGui_ArrowButton(ImGui_Context* ctx, const char* str_id, int dir)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_ArrowButton", ImGui_Context ctx, "str_id", int dir)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_ArrowButton(ImGui_Context ctx, string str_id, integer dir)</functioncall>
        <functioncall prog_lang="python">bool ImGui_ArrowButton(ImGui_Context* ctx, const char* str_id, int dir)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Square button with an arrow shape. 'dir' is one of the Dir_* values
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string str_id - 
            integer dir -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Attach</slug>
        <title>ImGui_Attach</title>
        <functioncall prog_lang="cpp">void ImGui_Attach(ImGui_Context* ctx, ImGui_Resource* obj)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Attach", ImGui_Context ctx, ImGui_Resource obj)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Attach(ImGui_Context ctx, ImGui_Resource obj)</functioncall>
        <functioncall prog_lang="python">void ImGui_Attach(ImGui_Context* ctx, ImGui_Resource* obj)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Link the object's lifetime to the given context.
         Objects can be draw list splitters, fonts, images, list clippers, etc.
         Call Detach to let the object be garbage-collected after unuse again.
         
         List clipper objects may only be attached to the context they were created for.
         
         Fonts are (currently) a special case: they must be attached to the context
         before usage. Furthermore, fonts may only be attached or detached immediately
         after the context is created or before any other function calls modifying the
         context per defer cycle. See "limitations" in the font API documentation.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            ImGui_Resource obj -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Begin</slug>
        <title>ImGui_Begin</title>
        <functioncall prog_lang="cpp">bool ImGui_Begin(ImGui_Context* ctx, const char* name, bool* p_openInOutOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_Begin", ImGui_Context ctx, "name", optional bool &amp;p_open, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, optional boolean p_open = reaper.ImGui_Begin(ImGui_Context ctx, string name, optional boolean p_open, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_Begin(ImGui_Context* ctx, const char* name, bool* p_openInOutOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Push window to the stack and start appending to it.
         
         - Passing true to 'p_open' shows a window-closing widget in the upper-right
           corner of the window, which clicking will set the boolean to false when returned.
         - You may append multiple times to the same window during the same frame by
           calling Begin()/End() pairs multiple times. Some information such as 'flags'
           or 'p_open' will only be considered by the first call to Begin().
         - Begin() return false to indicate the window is collapsed or fully clipped,
           so you may early out and omit submitting anything to the window.
        </description>        
        <retvals>
            boolean retval - 
            optional boolean p_open - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string name - 
            optional boolean p_open - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginChild</slug>
        <title>ImGui_BeginChild</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginChild(ImGui_Context* ctx, const char* str_id, double* size_wInOptional, double* size_hInOptional, bool* borderInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginChild", ImGui_Context ctx, "str_id", optional size_wIn, optional size_hIn, optional bool borderIn, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginChild(ImGui_Context ctx, string str_id, optional number size_wIn, optional number size_hIn, optional boolean borderIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginChild(ImGui_Context* ctx, const char* str_id, double* size_wInOptional, double* size_hInOptional, bool* borderInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         For each independent axis of 'size':
         - \&gt; 0.0: fixed size
         - = 0.0: use remaining host window size
         - &lt; 0.0: use remaining window size minus abs(size)
         (Each axis can use a different mode, e.g. size = 0x400.)
         
         Returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string str_id - 
            optional number size_wIn - 
            optional number size_hIn - 
            optional boolean borderIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginChildFrame</slug>
        <title>ImGui_BeginChildFrame</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginChildFrame(ImGui_Context* ctx, const char* str_id, double size_w, double size_h, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginChildFrame", ImGui_Context ctx, "str_id", size_w, size_h, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginChildFrame(ImGui_Context ctx, string str_id, number size_w, number size_h, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginChildFrame(ImGui_Context* ctx, const char* str_id, double size_w, double size_h, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Helper to create a child window / scrolling region that looks like a normal
         widget frame. See BeginChild.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string str_id - 
            number size_w - 
            number size_h - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginCombo</slug>
        <title>ImGui_BeginCombo</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginCombo(ImGui_Context* ctx, const char* label, const char* preview_value, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginCombo", ImGui_Context ctx, "label", "preview_value", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginCombo(ImGui_Context ctx, string label, string preview_value, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginCombo(ImGui_Context* ctx, const char* label, const char* preview_value, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         The BeginCombo/EndCombo API allows you to manage your contents and selection
         state however you want it, by creating e.g. Selectable items.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            string preview_value - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginDisabled</slug>
        <title>ImGui_BeginDisabled</title>
        <functioncall prog_lang="cpp">void ImGui_BeginDisabled(ImGui_Context* ctx, bool* disabledInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_BeginDisabled", ImGui_Context ctx, optional bool disabledIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_BeginDisabled(ImGui_Context ctx, optional boolean disabledIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_BeginDisabled(ImGui_Context* ctx, bool* disabledInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable all user interactions and dim items visuals
         (applying StyleVar_DisabledAlpha over current colors).
         
         BeginDisabled(false) essentially does nothing useful but is provided to
         facilitate use of boolean expressions.
         If you can avoid calling BeginDisabled(false)/EndDisabled() best to avoid it.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional boolean disabledIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginDragDropSource</slug>
        <title>ImGui_BeginDragDropSource</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginDragDropSource(ImGui_Context* ctx, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginDragDropSource", ImGui_Context ctx, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginDragDropSource(ImGui_Context ctx, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginDragDropSource(ImGui_Context* ctx, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Call after submitting an item which may be dragged. when this return true,
         you can call SetDragDropPayload() + EndDragDropSource()
         
         If you stop calling BeginDragDropSource() the payload is preserved however
         it won't have a preview tooltip (we currently display a fallback "..." tooltip
         as replacement).
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginDragDropTarget</slug>
        <title>ImGui_BeginDragDropTarget</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginDragDropTarget(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginDragDropTarget", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginDragDropTarget(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginDragDropTarget(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Call after submitting an item that may receive a payload.
         If this returns true, you can call AcceptDragDropPayload + EndDragDropTarget.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginGroup</slug>
        <title>ImGui_BeginGroup</title>
        <functioncall prog_lang="cpp">void ImGui_BeginGroup(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_BeginGroup", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_BeginGroup(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_BeginGroup(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Lock horizontal starting position. See EndGroup.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginListBox</slug>
        <title>ImGui_BeginListBox</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginListBox(ImGui_Context* ctx, const char* label, double* size_wInOptional, double* size_hInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginListBox", ImGui_Context ctx, "label", optional size_wIn, optional size_hIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginListBox(ImGui_Context ctx, string label, optional number size_wIn, optional number size_hIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginListBox(ImGui_Context* ctx, const char* label, double* size_wInOptional, double* size_hInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Open a framed scrolling region. This is essentially a thin wrapper to using
         BeginChild/EndChild with some stylistic changes.
         
         The BeginListBox/EndListBox API allows you to manage your contents and selection
         state however you want it, by creating e.g. Selectable or any items.
         
         - Choose frame width:
           - width  &gt; 0.0: custom
           - width  &lt; 0.0 or -FLT_MIN: right-align
           - width  = 0.0 (default): use current ItemWidth
         - Choose frame height:
           - height &gt; 0.0: custom
           - height &lt; 0.0 or -FLT_MIN: bottom-align
           - height = 0.0 (default): arbitrary default height which can fit ~7 items
         
         See EndListBox.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            optional number size_wIn - 
            optional number size_hIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginMenu</slug>
        <title>ImGui_BeginMenu</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginMenu(ImGui_Context* ctx, const char* label, bool* enabledInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginMenu", ImGui_Context ctx, "label", optional bool enabledIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginMenu(ImGui_Context ctx, string label, optional boolean enabledIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginMenu(ImGui_Context* ctx, const char* label, bool* enabledInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Create a sub-menu entry. only call EndMenu if this returns true!
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            optional boolean enabledIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginMenuBar</slug>
        <title>ImGui_BeginMenuBar</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginMenuBar(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginMenuBar", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginMenuBar(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginMenuBar(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Append to menu-bar of current window (requires WindowFlags_MenuBar flag set
         on parent window). See EndMenuBar.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginPopup</slug>
        <title>ImGui_BeginPopup</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginPopup(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginPopup", ImGui_Context ctx, "str_id", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginPopup(ImGui_Context ctx, string str_id, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginPopup(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Query popup state, if open start appending into the window. Call EndPopup
         afterwards. WindowFlags* are forwarded to the window.
         
         Return true if the popup is open, and you can start outputting to it.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string str_id - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginPopupContextItem</slug>
        <title>ImGui_BeginPopupContextItem</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginPopupContextItem(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginPopupContextItem", ImGui_Context ctx, optional "str_idIn", optional int popup_flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginPopupContextItem(ImGui_Context ctx, optional string str_idIn, optional integer popup_flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginPopupContextItem(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         This is a helper to handle the simplest case of associating one named popup
         to one given widget. You can pass a nil str_id to use the identifier of the last
         item. This is essentially the same as calling OpenPopupOnItemClick + BeginPopup
         but written to avoid computing the ID twice because BeginPopupContext*
         functions may be called very frequently.
         
         If you want to use that on a non-interactive item such as Text you need to pass
         in an explicit ID here.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional string str_idIn - 
            optional integer popup_flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginPopupContextWindow</slug>
        <title>ImGui_BeginPopupContextWindow</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginPopupContextWindow(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginPopupContextWindow", ImGui_Context ctx, optional "str_idIn", optional int popup_flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginPopupContextWindow(ImGui_Context ctx, optional string str_idIn, optional integer popup_flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginPopupContextWindow(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Open+begin popup when clicked on current window.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional string str_idIn - 
            optional integer popup_flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginPopupModal</slug>
        <title>ImGui_BeginPopupModal</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginPopupModal(ImGui_Context* ctx, const char* name, bool* p_openInOutOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginPopupModal", ImGui_Context ctx, "name", optional bool &amp;p_open, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, optional boolean p_open = reaper.ImGui_BeginPopupModal(ImGui_Context ctx, string name, optional boolean p_open, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginPopupModal(ImGui_Context* ctx, const char* name, bool* p_openInOutOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Block every interaction behind the window, cannot be closed by user, add a
         dimming background, has a title bar. Return true if the modal is open, and you
         can start outputting to it. See BeginPopup.
        </description>        
        <retvals>
            boolean retval - 
            optional boolean p_open - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string name - 
            optional boolean p_open - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginTabBar</slug>
        <title>ImGui_BeginTabBar</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginTabBar(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginTabBar", ImGui_Context ctx, "str_id", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginTabBar(ImGui_Context ctx, string str_id, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginTabBar(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Create and append into a TabBar.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string str_id - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginTabItem</slug>
        <title>ImGui_BeginTabItem</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginTabItem(ImGui_Context* ctx, const char* label, bool* p_openInOutOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginTabItem", ImGui_Context ctx, "label", optional bool &amp;p_open, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, optional boolean p_open = reaper.ImGui_BeginTabItem(ImGui_Context ctx, string label, optional boolean p_open, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginTabItem(ImGui_Context* ctx, const char* label, bool* p_openInOutOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Create a Tab. Returns true if the Tab is selected.
         Set 'p_open' to true to enable the close button.
        </description>        
        <retvals>
            boolean retval - 
            optional boolean p_open - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            optional boolean p_open - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginTable</slug>
        <title>ImGui_BeginTable</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginTable(ImGui_Context* ctx, const char* str_id, int column, int* flagsInOptional, double* outer_size_wInOptional, double* outer_size_hInOptional, double* inner_widthInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginTable", ImGui_Context ctx, "str_id", int column, optional int flagsIn, optional outer_size_wIn, optional outer_size_hIn, optional inner_widthIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginTable(ImGui_Context ctx, string str_id, integer column, optional integer flagsIn, optional number outer_size_wIn, optional number outer_size_hIn, optional number inner_widthIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginTable(ImGui_Context* ctx, const char* str_id, int column, int* flagsInOptional, double* outer_size_wInOptional, double* outer_size_hInOptional, double* inner_widthInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string str_id - 
            integer column - 
            optional integer flagsIn - 
            optional number outer_size_wIn - 
            optional number outer_size_hIn - 
            optional number inner_widthIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BeginTooltip</slug>
        <title>ImGui_BeginTooltip</title>
        <functioncall prog_lang="cpp">bool ImGui_BeginTooltip(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_BeginTooltip", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_BeginTooltip(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_BeginTooltip(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Begin/append a tooltip window.
         To create full-featured tooltip (with any kind of items).
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Bullet</slug>
        <title>ImGui_Bullet</title>
        <functioncall prog_lang="cpp">void ImGui_Bullet(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Bullet", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Bullet(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_Bullet(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw a small circle + keep the cursor on the same line.
         Advance cursor x position by GetTreeNodeToLabelSpacing,
         same distance that TreeNode uses.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_BulletText</slug>
        <title>ImGui_BulletText</title>
        <functioncall prog_lang="cpp">void ImGui_BulletText(ImGui_Context* ctx, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_BulletText", ImGui_Context ctx, "text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_BulletText(ImGui_Context ctx, string text)</functioncall>
        <functioncall prog_lang="python">void ImGui_BulletText(ImGui_Context* ctx, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Shortcut for Bullet + Text.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Button</slug>
        <title>ImGui_Button</title>
        <functioncall prog_lang="cpp">bool ImGui_Button(ImGui_Context* ctx, const char* label, double* size_wInOptional, double* size_hInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_Button", ImGui_Context ctx, "label", optional size_wIn, optional size_hIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_Button(ImGui_Context ctx, string label, optional number size_wIn, optional number size_hIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_Button(ImGui_Context* ctx, const char* label, double* size_wInOptional, double* size_hInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            optional number size_wIn - 
            optional number size_hIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ButtonFlags_MouseButtonLeft</slug>
        <title>ImGui_ButtonFlags_MouseButtonLeft</title>
        <functioncall prog_lang="cpp">int ImGui_ButtonFlags_MouseButtonLeft()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ButtonFlags_MouseButtonLeft")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.ImGui_ButtonFlags_MouseButtonLeft()</functioncall>
        <functioncall prog_lang="python">int ImGui_ButtonFlags_MouseButtonLeft()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         React on left mouse button (default).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ButtonFlags_MouseButtonMiddle</slug>
        <title>ImGui_ButtonFlags_MouseButtonMiddle</title>
        <functioncall prog_lang="cpp">int ImGui_ButtonFlags_MouseButtonMiddle()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ButtonFlags_MouseButtonMiddle")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.ImGui_ButtonFlags_MouseButtonMiddle()</functioncall>
        <functioncall prog_lang="python">int ImGui_ButtonFlags_MouseButtonMiddle()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         React on center mouse button.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ButtonFlags_MouseButtonRight</slug>
        <title>ImGui_ButtonFlags_MouseButtonRight</title>
        <functioncall prog_lang="cpp">int ImGui_ButtonFlags_MouseButtonRight()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ButtonFlags_MouseButtonRight")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.ImGui_ButtonFlags_MouseButtonRight()</functioncall>
        <functioncall prog_lang="python">int ImGui_ButtonFlags_MouseButtonRight()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         React on right mouse button.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ButtonFlags_None</slug>
        <title>ImGui_ButtonFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_ButtonFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ButtonFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.ImGui_ButtonFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_ButtonFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CalcItemWidth</slug>
        <title>ImGui_CalcItemWidth</title>
        <functioncall prog_lang="cpp">double ImGui_CalcItemWidth(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_CalcItemWidth", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_CalcItemWidth(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_CalcItemWidth(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Width of item given pushed settings and current cursor position.
         NOT necessarily the width of last item unlike most 'Item' functions.
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CalcTextSize</slug>
        <title>ImGui_CalcTextSize</title>
        <functioncall prog_lang="cpp">void ImGui_CalcTextSize(ImGui_Context* ctx, const char* text, double* wOut, double* hOut, bool* hide_text_after_double_hashInOptional, double* wrap_widthInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_CalcTextSize", ImGui_Context ctx, "text", &amp;w, &amp;h, optional bool hide_text_after_double_hashIn, optional wrap_widthIn)</functioncall>
        <functioncall prog_lang="lua">number w, number h = reaper.ImGui_CalcTextSize(ImGui_Context ctx, string text, number w, number h, optional boolean hide_text_after_double_hashIn, optional number wrap_widthIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_CalcTextSize(ImGui_Context* ctx, const char* text, double* wOut, double* hOut, bool* hide_text_after_double_hashInOptional, double* wrap_widthInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            number w - 
            number h - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string text - 
            number w - 
            number h - 
            optional boolean hide_text_after_double_hashIn - 
            optional number wrap_widthIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Checkbox</slug>
        <title>ImGui_Checkbox</title>
        <functioncall prog_lang="cpp">bool ImGui_Checkbox(ImGui_Context* ctx, const char* label, bool* vInOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_Checkbox", ImGui_Context ctx, "label", bool &amp;v)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean v = reaper.ImGui_Checkbox(ImGui_Context ctx, string label, boolean v)</functioncall>
        <functioncall prog_lang="python">bool ImGui_Checkbox(ImGui_Context* ctx, const char* label, bool* vInOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            boolean v - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            boolean v -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CheckboxFlags</slug>
        <title>ImGui_CheckboxFlags</title>
        <functioncall prog_lang="cpp">bool ImGui_CheckboxFlags(ImGui_Context* ctx, const char* label, int* flagsInOut, int flags_value)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_CheckboxFlags", ImGui_Context ctx, "label", int &amp;flags, int flags_value)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer flags = reaper.ImGui_CheckboxFlags(ImGui_Context ctx, string label, integer flags, integer flags_value)</functioncall>
        <functioncall prog_lang="python">bool ImGui_CheckboxFlags(ImGui_Context* ctx, const char* label, int* flagsInOut, int flags_value)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer flags - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer flags - 
            integer flags_value -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CloseCurrentPopup</slug>
        <title>ImGui_CloseCurrentPopup</title>
        <functioncall prog_lang="cpp">void ImGui_CloseCurrentPopup(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_CloseCurrentPopup", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_CloseCurrentPopup(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_CloseCurrentPopup(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Manually close the popup we have begin-ed into.
         Use inside the BeginPopup/EndPopup scope to close manually.
         
         CloseCurrentPopup() is called by default by Selectable/MenuItem when activated.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_Border</slug>
        <title>ImGui_Col_Border</title>
        <functioncall prog_lang="cpp">int ImGui_Col_Border()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_Border")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.ImGui_Col_Border()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_Border()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_BorderShadow</slug>
        <title>ImGui_Col_BorderShadow</title>
        <functioncall prog_lang="cpp">int ImGui_Col_BorderShadow()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_BorderShadow")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.ImGui_Col_BorderShadow()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_BorderShadow()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_Button</slug>
        <title>ImGui_Col_Button</title>
        <functioncall prog_lang="cpp">int ImGui_Col_Button()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_Button")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.ImGui_Col_Button()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_Button()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_ButtonActive</slug>
        <title>ImGui_Col_ButtonActive</title>
        <functioncall prog_lang="cpp">int ImGui_Col_ButtonActive()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_ButtonActive")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.ImGui_Col_ButtonActive()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_ButtonActive()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_ButtonHovered</slug>
        <title>ImGui_Col_ButtonHovered</title>
        <functioncall prog_lang="cpp">int ImGui_Col_ButtonHovered()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_ButtonHovered")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.ImGui_Col_ButtonHovered()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_ButtonHovered()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_CheckMark</slug>
        <title>ImGui_Col_CheckMark</title>
        <functioncall prog_lang="cpp">int ImGui_Col_CheckMark()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_CheckMark")</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.ImGui_Col_CheckMark()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_CheckMark()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_ChildBg</slug>
        <title>ImGui_Col_ChildBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_ChildBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_ChildBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_ChildBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_ChildBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Background of child windows.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_DockingEmptyBg</slug>
        <title>ImGui_Col_DockingEmptyBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_DockingEmptyBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_DockingEmptyBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_DockingEmptyBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_DockingEmptyBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Background color for empty node (e.g. CentralNode with no window docked into it).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_DockingPreview</slug>
        <title>ImGui_Col_DockingPreview</title>
        <functioncall prog_lang="cpp">int ImGui_Col_DockingPreview()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_DockingPreview")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_DockingPreview()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_DockingPreview()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Preview overlay color when about to docking something.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_DragDropTarget</slug>
        <title>ImGui_Col_DragDropTarget</title>
        <functioncall prog_lang="cpp">int ImGui_Col_DragDropTarget()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_DragDropTarget")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_DragDropTarget()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_DragDropTarget()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Rectangle highlighting a drop target
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_FrameBg</slug>
        <title>ImGui_Col_FrameBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_FrameBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_FrameBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_FrameBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_FrameBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Background of checkbox, radio button, plot, slider, text input.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_FrameBgActive</slug>
        <title>ImGui_Col_FrameBgActive</title>
        <functioncall prog_lang="cpp">int ImGui_Col_FrameBgActive()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_FrameBgActive")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_FrameBgActive()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_FrameBgActive()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_FrameBgHovered</slug>
        <title>ImGui_Col_FrameBgHovered</title>
        <functioncall prog_lang="cpp">int ImGui_Col_FrameBgHovered()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_FrameBgHovered")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_FrameBgHovered()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_FrameBgHovered()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_Header</slug>
        <title>ImGui_Col_Header</title>
        <functioncall prog_lang="cpp">int ImGui_Col_Header()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_Header")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_Header()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_Header()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_HeaderActive</slug>
        <title>ImGui_Col_HeaderActive</title>
        <functioncall prog_lang="cpp">int ImGui_Col_HeaderActive()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_HeaderActive")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_HeaderActive()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_HeaderActive()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_HeaderHovered</slug>
        <title>ImGui_Col_HeaderHovered</title>
        <functioncall prog_lang="cpp">int ImGui_Col_HeaderHovered()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_HeaderHovered")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_HeaderHovered()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_HeaderHovered()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_MenuBarBg</slug>
        <title>ImGui_Col_MenuBarBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_MenuBarBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_MenuBarBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_MenuBarBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_MenuBarBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_ModalWindowDimBg</slug>
        <title>ImGui_Col_ModalWindowDimBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_ModalWindowDimBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_ModalWindowDimBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_ModalWindowDimBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_ModalWindowDimBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Darken/colorize entire screen behind a modal window, when one is active.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_NavHighlight</slug>
        <title>ImGui_Col_NavHighlight</title>
        <functioncall prog_lang="cpp">int ImGui_Col_NavHighlight()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_NavHighlight")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_NavHighlight()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_NavHighlight()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Gamepad/keyboard: current highlighted item.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_NavWindowingDimBg</slug>
        <title>ImGui_Col_NavWindowingDimBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_NavWindowingDimBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_NavWindowingDimBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_NavWindowingDimBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_NavWindowingDimBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Darken/colorize entire screen behind the CTRL+TAB window list, when active.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_NavWindowingHighlight</slug>
        <title>ImGui_Col_NavWindowingHighlight</title>
        <functioncall prog_lang="cpp">int ImGui_Col_NavWindowingHighlight()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_NavWindowingHighlight")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_NavWindowingHighlight()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_NavWindowingHighlight()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Highlight window when using CTRL+TAB.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_PlotHistogram</slug>
        <title>ImGui_Col_PlotHistogram</title>
        <functioncall prog_lang="cpp">int ImGui_Col_PlotHistogram()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_PlotHistogram")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_PlotHistogram()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_PlotHistogram()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_PlotHistogramHovered</slug>
        <title>ImGui_Col_PlotHistogramHovered</title>
        <functioncall prog_lang="cpp">int ImGui_Col_PlotHistogramHovered()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_PlotHistogramHovered")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_PlotHistogramHovered()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_PlotHistogramHovered()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_PlotLines</slug>
        <title>ImGui_Col_PlotLines</title>
        <functioncall prog_lang="cpp">int ImGui_Col_PlotLines()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_PlotLines")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_PlotLines()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_PlotLines()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_PlotLinesHovered</slug>
        <title>ImGui_Col_PlotLinesHovered</title>
        <functioncall prog_lang="cpp">int ImGui_Col_PlotLinesHovered()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_PlotLinesHovered")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_PlotLinesHovered()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_PlotLinesHovered()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_PopupBg</slug>
        <title>ImGui_Col_PopupBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_PopupBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_PopupBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_PopupBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_PopupBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Background of popups, menus, tooltips windows.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_ResizeGrip</slug>
        <title>ImGui_Col_ResizeGrip</title>
        <functioncall prog_lang="cpp">int ImGui_Col_ResizeGrip()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_ResizeGrip")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_ResizeGrip()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_ResizeGrip()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Resize grip in lower-right and lower-left corners of windows.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_ResizeGripActive</slug>
        <title>ImGui_Col_ResizeGripActive</title>
        <functioncall prog_lang="cpp">int ImGui_Col_ResizeGripActive()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_ResizeGripActive")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_ResizeGripActive()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_ResizeGripActive()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_ResizeGripHovered</slug>
        <title>ImGui_Col_ResizeGripHovered</title>
        <functioncall prog_lang="cpp">int ImGui_Col_ResizeGripHovered()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_ResizeGripHovered")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_ResizeGripHovered()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_ResizeGripHovered()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_ScrollbarBg</slug>
        <title>ImGui_Col_ScrollbarBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_ScrollbarBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_ScrollbarBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_ScrollbarBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_ScrollbarBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_ScrollbarGrab</slug>
        <title>ImGui_Col_ScrollbarGrab</title>
        <functioncall prog_lang="cpp">int ImGui_Col_ScrollbarGrab()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_ScrollbarGrab")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_ScrollbarGrab()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_ScrollbarGrab()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_ScrollbarGrabActive</slug>
        <title>ImGui_Col_ScrollbarGrabActive</title>
        <functioncall prog_lang="cpp">int ImGui_Col_ScrollbarGrabActive()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_ScrollbarGrabActive")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_ScrollbarGrabActive()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_ScrollbarGrabActive()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_ScrollbarGrabHovered</slug>
        <title>ImGui_Col_ScrollbarGrabHovered</title>
        <functioncall prog_lang="cpp">int ImGui_Col_ScrollbarGrabHovered()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_ScrollbarGrabHovered")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_ScrollbarGrabHovered()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_ScrollbarGrabHovered()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_Separator</slug>
        <title>ImGui_Col_Separator</title>
        <functioncall prog_lang="cpp">int ImGui_Col_Separator()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_Separator")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_Separator()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_Separator()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_SeparatorActive</slug>
        <title>ImGui_Col_SeparatorActive</title>
        <functioncall prog_lang="cpp">int ImGui_Col_SeparatorActive()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_SeparatorActive")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_SeparatorActive()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_SeparatorActive()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_SeparatorHovered</slug>
        <title>ImGui_Col_SeparatorHovered</title>
        <functioncall prog_lang="cpp">int ImGui_Col_SeparatorHovered()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_SeparatorHovered")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_SeparatorHovered()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_SeparatorHovered()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_SliderGrab</slug>
        <title>ImGui_Col_SliderGrab</title>
        <functioncall prog_lang="cpp">int ImGui_Col_SliderGrab()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_SliderGrab")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_SliderGrab()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_SliderGrab()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_SliderGrabActive</slug>
        <title>ImGui_Col_SliderGrabActive</title>
        <functioncall prog_lang="cpp">int ImGui_Col_SliderGrabActive()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_SliderGrabActive")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_SliderGrabActive()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_SliderGrabActive()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_Tab</slug>
        <title>ImGui_Col_Tab</title>
        <functioncall prog_lang="cpp">int ImGui_Col_Tab()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_Tab")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_Tab()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_Tab()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         TabItem in a TabBar
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TabActive</slug>
        <title>ImGui_Col_TabActive</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TabActive()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TabActive")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TabActive()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TabActive()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TabHovered</slug>
        <title>ImGui_Col_TabHovered</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TabHovered()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TabHovered")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TabHovered()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TabHovered()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TabUnfocused</slug>
        <title>ImGui_Col_TabUnfocused</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TabUnfocused()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TabUnfocused")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TabUnfocused()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TabUnfocused()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TabUnfocusedActive</slug>
        <title>ImGui_Col_TabUnfocusedActive</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TabUnfocusedActive()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TabUnfocusedActive")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TabUnfocusedActive()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TabUnfocusedActive()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TableBorderLight</slug>
        <title>ImGui_Col_TableBorderLight</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TableBorderLight()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TableBorderLight")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TableBorderLight()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TableBorderLight()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Table inner borders (prefer using Alpha=1.0 here).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TableBorderStrong</slug>
        <title>ImGui_Col_TableBorderStrong</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TableBorderStrong()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TableBorderStrong")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TableBorderStrong()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TableBorderStrong()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Table outer and header borders (prefer using Alpha=1.0 here).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TableHeaderBg</slug>
        <title>ImGui_Col_TableHeaderBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TableHeaderBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TableHeaderBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TableHeaderBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TableHeaderBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Table header background.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TableRowBg</slug>
        <title>ImGui_Col_TableRowBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TableRowBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TableRowBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TableRowBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TableRowBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Table row background (even rows).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TableRowBgAlt</slug>
        <title>ImGui_Col_TableRowBgAlt</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TableRowBgAlt()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TableRowBgAlt")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TableRowBgAlt()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TableRowBgAlt()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Table row background (odd rows).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_Text</slug>
        <title>ImGui_Col_Text</title>
        <functioncall prog_lang="cpp">int ImGui_Col_Text()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_Text")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_Text()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_Text()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TextDisabled</slug>
        <title>ImGui_Col_TextDisabled</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TextDisabled()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TextDisabled")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TextDisabled()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TextDisabled()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TextSelectedBg</slug>
        <title>ImGui_Col_TextSelectedBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TextSelectedBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TextSelectedBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TextSelectedBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TextSelectedBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TitleBg</slug>
        <title>ImGui_Col_TitleBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TitleBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TitleBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TitleBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TitleBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TitleBgActive</slug>
        <title>ImGui_Col_TitleBgActive</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TitleBgActive()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TitleBgActive")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TitleBgActive()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TitleBgActive()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_TitleBgCollapsed</slug>
        <title>ImGui_Col_TitleBgCollapsed</title>
        <functioncall prog_lang="cpp">int ImGui_Col_TitleBgCollapsed()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_TitleBgCollapsed")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_TitleBgCollapsed()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_TitleBgCollapsed()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Col_WindowBg</slug>
        <title>ImGui_Col_WindowBg</title>
        <functioncall prog_lang="cpp">int ImGui_Col_WindowBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Col_WindowBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Col_WindowBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_Col_WindowBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Background of normal windows. See also WindowFlags_NoBackground.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CollapsingHeader</slug>
        <title>ImGui_CollapsingHeader</title>
        <functioncall prog_lang="cpp">bool ImGui_CollapsingHeader(ImGui_Context* ctx, const char* label, bool* p_visibleInOut, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_CollapsingHeader", ImGui_Context ctx, "label", bool &amp;p_visible, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean p_visible = reaper.ImGui_CollapsingHeader(ImGui_Context ctx, string label, boolean p_visible, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_CollapsingHeader(ImGui_Context* ctx, const char* label, bool* p_visibleInOut, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Returns true when opened but do not indent nor push into the ID stack
         (because of the TreeNodeFlags_NoTreePushOnOpen flag).
         
         This is basically the same as calling TreeNode(label, TreeNodeFlags_CollapsingHeader).
         You can remove the _NoTreePushOnOpen flag if you want behavior closer to normal
         TreeNode.
         
         When 'visible' is provided: if 'true' display an additional small close button
         on upper right of the header which will set the bool to false when clicked,
         if 'false' don't display the header.
        </description>        
        <retvals>
            boolean retval - 
            boolean p_visible - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            boolean p_visible - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorButton</slug>
        <title>ImGui_ColorButton</title>
        <functioncall prog_lang="cpp">bool ImGui_ColorButton(ImGui_Context* ctx, const char* desc_id, int col_rgba, int* flagsInOptional, double* size_wInOptional, double* size_hInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_ColorButton", ImGui_Context ctx, "desc_id", int col_rgba, optional int flagsIn, optional size_wIn, optional size_hIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_ColorButton(ImGui_Context ctx, string desc_id, integer col_rgba, optional integer flagsIn, optional number size_wIn, optional number size_hIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_ColorButton(ImGui_Context* ctx, const char* desc_id, int col_rgba, int* flagsInOptional, double* size_wInOptional, double* size_hInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Display a color square/button, hover for details, return true when pressed.
         Color is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xRRGGBB.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string desc_id - 
            integer col_rgba - 
            optional integer flagsIn - 
            optional number size_wIn - 
            optional number size_hIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorConvertDouble4ToU32</slug>
        <title>ImGui_ColorConvertDouble4ToU32</title>
        <functioncall prog_lang="cpp">int ImGui_ColorConvertDouble4ToU32(double r, double g, double b, double a)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorConvertDouble4ToU32", r, g, b, a)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorConvertDouble4ToU32(number r, number g, number b, number a)</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorConvertDouble4ToU32(double r, double g, double b, double a)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Pack 0..1 RGBA values into a 32-bit integer (0xRRGGBBAA).
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            number r - 
            number g - 
            number b - 
            number a -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorConvertHSVtoRGB</slug>
        <title>ImGui_ColorConvertHSVtoRGB</title>
        <functioncall prog_lang="cpp">void ImGui_ColorConvertHSVtoRGB(double h, double s, double v, double* rOut, double* gOut, double* bOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ColorConvertHSVtoRGB", h, s, v, &amp;r, &amp;g, &amp;b)</functioncall>
        <functioncall prog_lang="lua">number r, number g, number b = reaper.ImGui_ColorConvertHSVtoRGB(number h, number s, number v)</functioncall>
        <functioncall prog_lang="python">void ImGui_ColorConvertHSVtoRGB(double h, double s, double v, double* rOut, double* gOut, double* bOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Convert HSV values (0..1) into RGB (0..1).
        </description>        
        <retvals>
            number r - 
            number g - 
            number b - 
        </retvals>        
        <parameters>
            number h - 
            number s - 
            number v -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorConvertNative</slug>
        <title>ImGui_ColorConvertNative</title>
        <functioncall prog_lang="cpp">int ImGui_ColorConvertNative(int rgb)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorConvertNative", int rgb)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorConvertNative(integer rgb)</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorConvertNative(int rgb)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Convert a native color coming from REAPER or 0xRRGGBB to native.
         This swaps the red and blue channels on Windows.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer rgb -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorConvertRGBtoHSV</slug>
        <title>ImGui_ColorConvertRGBtoHSV</title>
        <functioncall prog_lang="cpp">void ImGui_ColorConvertRGBtoHSV(double r, double g, double b, double* hOut, double* sOut, double* vOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ColorConvertRGBtoHSV", r, g, b, &amp;h, &amp;s, &amp;v)</functioncall>
        <functioncall prog_lang="lua">number h, number s, number v = reaper.ImGui_ColorConvertRGBtoHSV(number r, number g, number b)</functioncall>
        <functioncall prog_lang="python">void ImGui_ColorConvertRGBtoHSV(double r, double g, double b, double* hOut, double* sOut, double* vOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Convert RGB values (0..1) into HSV (0..1).
        </description>        
        <retvals>
            number h - 
            number s - 
            number v - 
        </retvals>        
        <parameters>
            number r - 
            number g - 
            number b -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorConvertU32ToDouble4</slug>
        <title>ImGui_ColorConvertU32ToDouble4</title>
        <functioncall prog_lang="cpp">void ImGui_ColorConvertU32ToDouble4(int rgba, double* rOut, double* gOut, double* bOut, double* aOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ColorConvertU32ToDouble4", int rgba, &amp;r, &amp;g, &amp;b, &amp;a)</functioncall>
        <functioncall prog_lang="lua">number r, number g, number b, number a = reaper.ImGui_ColorConvertU32ToDouble4(integer rgba)</functioncall>
        <functioncall prog_lang="python">void ImGui_ColorConvertU32ToDouble4(int rgba, double* rOut, double* gOut, double* bOut, double* aOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Unpack a 32-bit integer (0xRRGGBBAA) into separate RGBA values (0..1).
        </description>        
        <retvals>
            number r - 
            number g - 
            number b - 
            number a - 
        </retvals>        
        <parameters>
            integer rgba -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEdit3</slug>
        <title>ImGui_ColorEdit3</title>
        <functioncall prog_lang="cpp">bool ImGui_ColorEdit3(ImGui_Context* ctx, const char* label, int* col_rgbInOut, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_ColorEdit3", ImGui_Context ctx, "label", int &amp;col_rgb, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer col_rgb = reaper.ImGui_ColorEdit3(ImGui_Context ctx, string label, integer col_rgb, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_ColorEdit3(ImGui_Context* ctx, const char* label, int* col_rgbInOut, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Color is in 0xXXRRGGBB. XX is ignored and will not be modified.
        </description>        
        <retvals>
            boolean retval - 
            integer col_rgb - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer col_rgb - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEdit4</slug>
        <title>ImGui_ColorEdit4</title>
        <functioncall prog_lang="cpp">bool ImGui_ColorEdit4(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_ColorEdit4", ImGui_Context ctx, "label", int &amp;col_rgba, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer col_rgba = reaper.ImGui_ColorEdit4(ImGui_Context ctx, string label, integer col_rgba, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_ColorEdit4(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Color is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xXXRRGGBB
         (XX is ignored and will not be modified).
        </description>        
        <retvals>
            boolean retval - 
            integer col_rgba - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer col_rgba - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_AlphaBar</slug>
        <title>ImGui_ColorEditFlags_AlphaBar</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_AlphaBar()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_AlphaBar")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_AlphaBar()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_AlphaBar()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_AlphaPreview</slug>
        <title>ImGui_ColorEditFlags_AlphaPreview</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_AlphaPreview()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_AlphaPreview")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_AlphaPreview()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_AlphaPreview()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker, ColorButton: display preview as a transparent color
            over a checkerboard, instead of opaque.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_AlphaPreviewHalf</slug>
        <title>ImGui_ColorEditFlags_AlphaPreviewHalf</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_AlphaPreviewHalf()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_AlphaPreviewHalf")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_AlphaPreviewHalf()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_AlphaPreviewHalf()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard,
            instead of opaque.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_DisplayHSV</slug>
        <title>ImGui_ColorEditFlags_DisplayHSV</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_DisplayHSV()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_DisplayHSV")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_DisplayHSV()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_DisplayHSV()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit: override _display_ type to HSV. ColorPicker:
            select any combination using one or more of RGB/HSV/Hex.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_DisplayHex</slug>
        <title>ImGui_ColorEditFlags_DisplayHex</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_DisplayHex()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_DisplayHex")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_DisplayHex()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_DisplayHex()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit: override _display_ type to Hex. ColorPicker:
            select any combination using one or more of RGB/HSV/Hex.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_DisplayRGB</slug>
        <title>ImGui_ColorEditFlags_DisplayRGB</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_DisplayRGB()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_DisplayRGB")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_DisplayRGB()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_DisplayRGB()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit: override _display_ type to RGB. ColorPicker:
            select any combination using one or more of RGB/HSV/Hex.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_Float</slug>
        <title>ImGui_ColorEditFlags_Float</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_Float()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_Float")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_Float()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_Float()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0..1.0
            floats instead of 0..255 integers. No round-trip of value via integers.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_InputHSV</slug>
        <title>ImGui_ColorEditFlags_InputHSV</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_InputHSV()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_InputHSV")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_InputHSV()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_InputHSV()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker: input and output data in HSV format.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_InputRGB</slug>
        <title>ImGui_ColorEditFlags_InputRGB</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_InputRGB()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_InputRGB")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_InputRGB()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_InputRGB()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker: input and output data in RGB format.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_NoAlpha</slug>
        <title>ImGui_ColorEditFlags_NoAlpha</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_NoAlpha()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_NoAlpha")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_NoAlpha()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_NoAlpha()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker, ColorButton: ignore Alpha component
           (will only read 3 components from the input pointer).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_NoBorder</slug>
        <title>ImGui_ColorEditFlags_NoBorder</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_NoBorder()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_NoBorder")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_NoBorder()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_NoBorder()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorButton: disable border (which is enforced by default).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_NoDragDrop</slug>
        <title>ImGui_ColorEditFlags_NoDragDrop</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_NoDragDrop()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_NoDragDrop")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_NoDragDrop()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_NoDragDrop()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_NoInputs</slug>
        <title>ImGui_ColorEditFlags_NoInputs</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_NoInputs()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_NoInputs")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_NoInputs()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_NoInputs()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker: disable inputs sliders/text widgets
            (e.g. to show only the small preview color square).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_NoLabel</slug>
        <title>ImGui_ColorEditFlags_NoLabel</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_NoLabel()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_NoLabel")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_NoLabel()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_NoLabel()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker: disable display of inline text label
            (the label is still forwarded to the tooltip and picker).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_NoOptions</slug>
        <title>ImGui_ColorEditFlags_NoOptions</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_NoOptions()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_NoOptions")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_NoOptions()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_NoOptions()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_NoPicker</slug>
        <title>ImGui_ColorEditFlags_NoPicker</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_NoPicker()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_NoPicker")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_NoPicker()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_NoPicker()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit: disable picker when clicking on color square.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_NoSidePreview</slug>
        <title>ImGui_ColorEditFlags_NoSidePreview</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_NoSidePreview()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_NoSidePreview")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_NoSidePreview()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_NoSidePreview()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorPicker: disable bigger color preview on right side of the picker,
            use small color square preview instead.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_NoSmallPreview</slug>
        <title>ImGui_ColorEditFlags_NoSmallPreview</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_NoSmallPreview()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_NoSmallPreview")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_NoSmallPreview()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_NoSmallPreview()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker: disable color square preview next to the inputs.
            (e.g. to show only the inputs).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_NoTooltip</slug>
        <title>ImGui_ColorEditFlags_NoTooltip</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_NoTooltip()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_NoTooltip")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_NoTooltip()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_NoTooltip()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_None</slug>
        <title>ImGui_ColorEditFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_PickerHueBar</slug>
        <title>ImGui_ColorEditFlags_PickerHueBar</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_PickerHueBar()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_PickerHueBar")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_PickerHueBar()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_PickerHueBar()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorPicker: bar for Hue, rectangle for Sat/Value.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_PickerHueWheel</slug>
        <title>ImGui_ColorEditFlags_PickerHueWheel</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_PickerHueWheel()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_PickerHueWheel")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_PickerHueWheel()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_PickerHueWheel()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorPicker: wheel for Hue, triangle for Sat/Value.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorEditFlags_Uint8</slug>
        <title>ImGui_ColorEditFlags_Uint8</title>
        <functioncall prog_lang="cpp">int ImGui_ColorEditFlags_Uint8()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ColorEditFlags_Uint8")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ColorEditFlags_Uint8()</functioncall>
        <functioncall prog_lang="python">int ImGui_ColorEditFlags_Uint8()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorPicker3</slug>
        <title>ImGui_ColorPicker3</title>
        <functioncall prog_lang="cpp">bool ImGui_ColorPicker3(ImGui_Context* ctx, const char* label, int* col_rgbInOut, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_ColorPicker3", ImGui_Context ctx, "label", int &amp;col_rgb, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer col_rgb = reaper.ImGui_ColorPicker3(ImGui_Context ctx, string label, integer col_rgb, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_ColorPicker3(ImGui_Context* ctx, const char* label, int* col_rgbInOut, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Color is in 0xXXRRGGBB. XX is ignored and will not be modified.
        </description>        
        <retvals>
            boolean retval - 
            integer col_rgb - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer col_rgb - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ColorPicker4</slug>
        <title>ImGui_ColorPicker4</title>
        <functioncall prog_lang="cpp">bool ImGui_ColorPicker4(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, int* flagsInOptional, int* ref_colInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_ColorPicker4", ImGui_Context ctx, "label", int &amp;col_rgba, optional int flagsIn, optional int ref_colIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer col_rgba = reaper.ImGui_ColorPicker4(ImGui_Context ctx, string label, integer col_rgba, optional integer flagsIn, optional integer ref_colIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_ColorPicker4(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, int* flagsInOptional, int* ref_colInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer col_rgba - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer col_rgba - 
            optional integer flagsIn - 
            optional integer ref_colIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Combo</slug>
        <title>ImGui_Combo</title>
        <functioncall prog_lang="cpp">bool ImGui_Combo(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, int* popup_max_height_in_itemsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_Combo", ImGui_Context ctx, "label", int &amp;current_item, "items", optional int popup_max_height_in_itemsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer current_item = reaper.ImGui_Combo(ImGui_Context ctx, string label, integer current_item, string items, optional integer popup_max_height_in_itemsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_Combo(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, int* popup_max_height_in_itemsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Helper over BeginCombo/EndCombo for convenience purpose. Each item must be
         null-terminated (requires REAPER v6.44 or newer for EEL and Lua).
        </description>        
        <retvals>
            boolean retval - 
            integer current_item - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer current_item - 
            string items - 
            optional integer popup_max_height_in_itemsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ComboFlags_HeightLarge</slug>
        <title>ImGui_ComboFlags_HeightLarge</title>
        <functioncall prog_lang="cpp">int ImGui_ComboFlags_HeightLarge()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ComboFlags_HeightLarge")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ComboFlags_HeightLarge()</functioncall>
        <functioncall prog_lang="python">int ImGui_ComboFlags_HeightLarge()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Max ~20 items visible.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ComboFlags_HeightLargest</slug>
        <title>ImGui_ComboFlags_HeightLargest</title>
        <functioncall prog_lang="cpp">int ImGui_ComboFlags_HeightLargest()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ComboFlags_HeightLargest")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ComboFlags_HeightLargest()</functioncall>
        <functioncall prog_lang="python">int ImGui_ComboFlags_HeightLargest()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         As many fitting items as possible.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ComboFlags_HeightRegular</slug>
        <title>ImGui_ComboFlags_HeightRegular</title>
        <functioncall prog_lang="cpp">int ImGui_ComboFlags_HeightRegular()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ComboFlags_HeightRegular")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ComboFlags_HeightRegular()</functioncall>
        <functioncall prog_lang="python">int ImGui_ComboFlags_HeightRegular()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Max ~8 items visible (default).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ComboFlags_HeightSmall</slug>
        <title>ImGui_ComboFlags_HeightSmall</title>
        <functioncall prog_lang="cpp">int ImGui_ComboFlags_HeightSmall()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ComboFlags_HeightSmall")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ComboFlags_HeightSmall()</functioncall>
        <functioncall prog_lang="python">int ImGui_ComboFlags_HeightSmall()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Max ~4 items visible. Tip: If you want your combo popup to be a specific size
         you can use SetNextWindowSizeConstraints prior to calling BeginCombo.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ComboFlags_NoArrowButton</slug>
        <title>ImGui_ComboFlags_NoArrowButton</title>
        <functioncall prog_lang="cpp">int ImGui_ComboFlags_NoArrowButton()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ComboFlags_NoArrowButton")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ComboFlags_NoArrowButton()</functioncall>
        <functioncall prog_lang="python">int ImGui_ComboFlags_NoArrowButton()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Display on the preview box without the square arrow button.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ComboFlags_NoPreview</slug>
        <title>ImGui_ComboFlags_NoPreview</title>
        <functioncall prog_lang="cpp">int ImGui_ComboFlags_NoPreview()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ComboFlags_NoPreview")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ComboFlags_NoPreview()</functioncall>
        <functioncall prog_lang="python">int ImGui_ComboFlags_NoPreview()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Display only a square arrow button.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ComboFlags_None</slug>
        <title>ImGui_ComboFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_ComboFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ComboFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ComboFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_ComboFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ComboFlags_PopupAlignLeft</slug>
        <title>ImGui_ComboFlags_PopupAlignLeft</title>
        <functioncall prog_lang="cpp">int ImGui_ComboFlags_PopupAlignLeft()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ComboFlags_PopupAlignLeft")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ComboFlags_PopupAlignLeft()</functioncall>
        <functioncall prog_lang="python">int ImGui_ComboFlags_PopupAlignLeft()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Align the popup toward the left by default.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Cond_Always</slug>
        <title>ImGui_Cond_Always</title>
        <functioncall prog_lang="cpp">int ImGui_Cond_Always()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Cond_Always")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Cond_Always()</functioncall>
        <functioncall prog_lang="python">int ImGui_Cond_Always()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         No condition (always set the variable).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Cond_Appearing</slug>
        <title>ImGui_Cond_Appearing</title>
        <functioncall prog_lang="cpp">int ImGui_Cond_Appearing()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Cond_Appearing")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Cond_Appearing()</functioncall>
        <functioncall prog_lang="python">int ImGui_Cond_Appearing()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set the variable if the object/window is appearing after being
            hidden/inactive (or the first time).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Cond_FirstUseEver</slug>
        <title>ImGui_Cond_FirstUseEver</title>
        <functioncall prog_lang="cpp">int ImGui_Cond_FirstUseEver()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Cond_FirstUseEver")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Cond_FirstUseEver()</functioncall>
        <functioncall prog_lang="python">int ImGui_Cond_FirstUseEver()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set the variable if the object/window has no persistently saved data
            (no entry in .ini file).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Cond_Once</slug>
        <title>ImGui_Cond_Once</title>
        <functioncall prog_lang="cpp">int ImGui_Cond_Once()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Cond_Once")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Cond_Once()</functioncall>
        <functioncall prog_lang="python">int ImGui_Cond_Once()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set the variable once per runtime session (only the first call will succeed).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigFlags_DockingEnable</slug>
        <title>ImGui_ConfigFlags_DockingEnable</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigFlags_DockingEnable()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigFlags_DockingEnable")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigFlags_DockingEnable()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigFlags_DockingEnable()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         [BETA] Enable docking functionality.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigFlags_NavEnableKeyboard</slug>
        <title>ImGui_ConfigFlags_NavEnableKeyboard</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigFlags_NavEnableKeyboard()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigFlags_NavEnableKeyboard")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigFlags_NavEnableKeyboard()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigFlags_NavEnableKeyboard()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Master keyboard navigation enable flag.
         Enable full Tabbing + directional arrows + space/enter to activate.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigFlags_NavEnableSetMousePos</slug>
        <title>ImGui_ConfigFlags_NavEnableSetMousePos</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigFlags_NavEnableSetMousePos()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigFlags_NavEnableSetMousePos")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigFlags_NavEnableSetMousePos()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigFlags_NavEnableSetMousePos()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Instruct navigation to move the mouse cursor.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigFlags_NavNoCaptureKeyboard</slug>
        <title>ImGui_ConfigFlags_NavNoCaptureKeyboard</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigFlags_NavNoCaptureKeyboard()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigFlags_NavNoCaptureKeyboard")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigFlags_NavNoCaptureKeyboard()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigFlags_NavNoCaptureKeyboard()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Instruct navigation to not capture global keyboard input when
            ConfigFlags_NavEnableKeyboard is set (see SetNextFrameWantCaptureKeyboard).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigFlags_NoMouse</slug>
        <title>ImGui_ConfigFlags_NoMouse</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigFlags_NoMouse()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigFlags_NoMouse")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigFlags_NoMouse()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigFlags_NoMouse()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Instruct imgui to ignore mouse position/buttons.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigFlags_NoMouseCursorChange</slug>
        <title>ImGui_ConfigFlags_NoMouseCursorChange</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigFlags_NoMouseCursorChange()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigFlags_NoMouseCursorChange")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigFlags_NoMouseCursorChange()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigFlags_NoMouseCursorChange()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Instruct backend to not alter mouse cursor shape and visibility.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigFlags_NoSavedSettings</slug>
        <title>ImGui_ConfigFlags_NoSavedSettings</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigFlags_NoSavedSettings()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigFlags_NoSavedSettings")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigFlags_NoSavedSettings()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigFlags_NoSavedSettings()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable state restoration and persistence for the whole context.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigFlags_None</slug>
        <title>ImGui_ConfigFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_DebugBeginReturnValueLoop</slug>
        <title>ImGui_ConfigVar_DebugBeginReturnValueLoop</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_DebugBeginReturnValueLoop()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_DebugBeginReturnValueLoop")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_DebugBeginReturnValueLoop()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_DebugBeginReturnValueLoop()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Some calls to Begin()/BeginChild() will return false.
         Will cycle through window depths then repeat. Suggested use: add
         "SetConfigVar(ConfigVar_DebugBeginReturnValueLoop(), GetKeyMods() == Mod_Shift"
         in your main loop then occasionally press SHIFT.
         Windows should be flickering while running.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_DebugBeginReturnValueOnce</slug>
        <title>ImGui_ConfigVar_DebugBeginReturnValueOnce</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_DebugBeginReturnValueOnce()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_DebugBeginReturnValueOnce")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_DebugBeginReturnValueOnce()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_DebugBeginReturnValueOnce()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         First-time calls to Begin()/BeginChild() will return false.
         **Needs to be set at context startup time** if you don't want to miss windows.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_DockingNoSplit</slug>
        <title>ImGui_ConfigVar_DockingNoSplit</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_DockingNoSplit()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_DockingNoSplit")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_DockingNoSplit()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_DockingNoSplit()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Simplified docking mode: disable window splitting, so docking is limited to
            merging multiple windows together into tab-bars.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_DockingTransparentPayload</slug>
        <title>ImGui_ConfigVar_DockingTransparentPayload</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_DockingTransparentPayload()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_DockingTransparentPayload")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_DockingTransparentPayload()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_DockingTransparentPayload()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Make window or viewport transparent when docking and only display docking
            boxes on the target viewport.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_DockingWithShift</slug>
        <title>ImGui_ConfigVar_DockingWithShift</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_DockingWithShift()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_DockingWithShift")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_DockingWithShift()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_DockingWithShift()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable docking with holding Shift key
            (reduce visual noise, allows dropping in wider space
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_DragClickToInputText</slug>
        <title>ImGui_ConfigVar_DragClickToInputText</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_DragClickToInputText()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_DragClickToInputText")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_DragClickToInputText()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_DragClickToInputText()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable turning Drag* widgets into text input with a simple mouse
            click-release (without moving). Not desirable on devices without a keyboard.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_Flags</slug>
        <title>ImGui_ConfigVar_Flags</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_Flags()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_Flags")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_Flags()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_Flags()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ConfigFlags_*
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_HoverDelayNormal</slug>
        <title>ImGui_ConfigVar_HoverDelayNormal</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_HoverDelayNormal()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_HoverDelayNormal")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_HoverDelayNormal()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_HoverDelayNormal()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Delay on hovering before IsItemHovered(HoveredFlags_DelayNormal) returns true.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_HoverDelayShort</slug>
        <title>ImGui_ConfigVar_HoverDelayShort</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_HoverDelayShort()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_HoverDelayShort")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_HoverDelayShort()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_HoverDelayShort()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Delay on hovering before IsItemHovered(HoveredFlags_DelayShort) returns true.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_InputTextCursorBlink</slug>
        <title>ImGui_ConfigVar_InputTextCursorBlink</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_InputTextCursorBlink()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_InputTextCursorBlink")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_InputTextCursorBlink()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_InputTextCursorBlink()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable blinking cursor (optional as some users consider it to be distracting).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_InputTextEnterKeepActive</slug>
        <title>ImGui_ConfigVar_InputTextEnterKeepActive</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_InputTextEnterKeepActive()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_InputTextEnterKeepActive")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_InputTextEnterKeepActive()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_InputTextEnterKeepActive()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Pressing Enter will keep item active and select contents (single-line only).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_InputTrickleEventQueue</slug>
        <title>ImGui_ConfigVar_InputTrickleEventQueue</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_InputTrickleEventQueue()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_InputTrickleEventQueue")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_InputTrickleEventQueue()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_InputTrickleEventQueue()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable input queue trickling: some types of events submitted during the same
            frame (e.g. button down + up) will be spread over multiple frames, improving
            interactions with low framerates.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_KeyRepeatDelay</slug>
        <title>ImGui_ConfigVar_KeyRepeatDelay</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_KeyRepeatDelay()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_KeyRepeatDelay")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_KeyRepeatDelay()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_KeyRepeatDelay()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         When holding a key/button, time before it starts repeating, in seconds
            (for buttons in Repeat mode, etc.).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_KeyRepeatRate</slug>
        <title>ImGui_ConfigVar_KeyRepeatRate</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_KeyRepeatRate()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_KeyRepeatRate")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_KeyRepeatRate()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_KeyRepeatRate()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         When holding a key/button, rate at which it repeats, in seconds.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_MacOSXBehaviors</slug>
        <title>ImGui_ConfigVar_MacOSXBehaviors</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_MacOSXBehaviors()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_MacOSXBehaviors")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_MacOSXBehaviors()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_MacOSXBehaviors()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts
            using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows
            instead of Home/End, Double click selects by word instead of selecting whole
            text, Multi-selection in lists uses Cmd/Super instead of Ctrl.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_MouseDoubleClickMaxDist</slug>
        <title>ImGui_ConfigVar_MouseDoubleClickMaxDist</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_MouseDoubleClickMaxDist()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_MouseDoubleClickMaxDist")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_MouseDoubleClickMaxDist()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_MouseDoubleClickMaxDist()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Distance threshold to stay in to validate a double-click, in pixels.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_MouseDoubleClickTime</slug>
        <title>ImGui_ConfigVar_MouseDoubleClickTime</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_MouseDoubleClickTime()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_MouseDoubleClickTime")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_MouseDoubleClickTime()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_MouseDoubleClickTime()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Time for a double-click, in seconds.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_MouseDragThreshold</slug>
        <title>ImGui_ConfigVar_MouseDragThreshold</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_MouseDragThreshold()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_MouseDragThreshold")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_MouseDragThreshold()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_MouseDragThreshold()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Distance threshold before considering we are dragging.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_ViewportsNoDecoration</slug>
        <title>ImGui_ConfigVar_ViewportsNoDecoration</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_ViewportsNoDecoration()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_ViewportsNoDecoration")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_ViewportsNoDecoration()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_ViewportsNoDecoration()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable default OS window decoration. Enabling decoration can create
            subsequent issues at OS levels (e.g. minimum window size).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_WindowsMoveFromTitleBarOnly</slug>
        <title>ImGui_ConfigVar_WindowsMoveFromTitleBarOnly</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_WindowsMoveFromTitleBarOnly")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable allowing to move windows only when clicking on their title bar.
            Does not apply to windows without a title bar.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ConfigVar_WindowsResizeFromEdges</slug>
        <title>ImGui_ConfigVar_WindowsResizeFromEdges</title>
        <functioncall prog_lang="cpp">int ImGui_ConfigVar_WindowsResizeFromEdges()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_ConfigVar_WindowsResizeFromEdges")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_ConfigVar_WindowsResizeFromEdges()</functioncall>
        <functioncall prog_lang="python">int ImGui_ConfigVar_WindowsResizeFromEdges()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable resizing of windows from their edges and from the lower-left corner.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CreateContext</slug>
        <title>ImGui_CreateContext</title>
        <functioncall prog_lang="cpp">ImGui_Context* ImGui_CreateContext(const char* label, int* config_flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">ImGui_Context extension_api("ImGui_CreateContext", "label", optional int config_flagsIn)</functioncall>
        <functioncall prog_lang="lua">ImGui_Context reaper.ImGui_CreateContext(string label, optional integer config_flagsIn)</functioncall>
        <functioncall prog_lang="python">ImGui_Context* ImGui_CreateContext(const char* label, int* config_flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Create a new ReaImGui context.
         The context will remain valid as long as it is used in each defer cycle.
         
         The label is used for the tab text when windows are docked in REAPER
         and also as a unique identifier for storing settings.
        </description>        
        <retvals>
            ImGui_Context - 
        </retvals>        
        <parameters>
            string label - 
            optional integer config_flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CreateDrawListSplitter</slug>
        <title>ImGui_CreateDrawListSplitter</title>
        <functioncall prog_lang="cpp">ImGui_DrawListSplitter* ImGui_CreateDrawListSplitter(ImGui_DrawList* draw_list)</functioncall>
        <functioncall prog_lang="eel">ImGui_DrawListSplitter extension_api("ImGui_CreateDrawListSplitter", ImGui_DrawList draw_list)</functioncall>
        <functioncall prog_lang="lua">ImGui_DrawListSplitter reaper.ImGui_CreateDrawListSplitter(ImGui_DrawList draw_list)</functioncall>
        <functioncall prog_lang="python">ImGui_DrawListSplitter* ImGui_CreateDrawListSplitter(ImGui_DrawList* draw_list)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            ImGui_DrawListSplitter - 
        </retvals>        
        <parameters>
            ImGui_DrawList draw_list -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CreateFont</slug>
        <title>ImGui_CreateFont</title>
        <functioncall prog_lang="cpp">ImGui_Font* ImGui_CreateFont(const char* family_or_file, int size, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">ImGui_Font extension_api("ImGui_CreateFont", "family_or_file", int size, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">ImGui_Font reaper.ImGui_CreateFont(string family_or_file, integer size, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">ImGui_Font* ImGui_CreateFont(const char* family_or_file, int size, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Load a font matching a font family name or from a font file.
         The font will remain valid while it's attached to a context. See Attach.
         
         The family name can be an installed font or one of the generic fonts:
         sans-serif, serif, monospace, cursive, fantasy.
         
         If 'family_or_file' specifies a path to a font file (contains a / or \):
         - The first byte of 'flags' is used as the font index within the file
         - The font styles in 'flags' are simulated by the font renderer
        </description>        
        <retvals>
            ImGui_Font - 
        </retvals>        
        <parameters>
            string family_or_file - 
            integer size - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CreateFunctionFromEEL</slug>
        <title>ImGui_CreateFunctionFromEEL</title>
        <functioncall prog_lang="cpp">ImGui_Function* ImGui_CreateFunctionFromEEL(const char* code)</functioncall>
        <functioncall prog_lang="eel">ImGui_Function extension_api("ImGui_CreateFunctionFromEEL", "code")</functioncall>
        <functioncall prog_lang="lua">ImGui_Function reaper.ImGui_CreateFunctionFromEEL(string code)</functioncall>
        <functioncall prog_lang="python">ImGui_Function* ImGui_CreateFunctionFromEEL(const char* code)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Compile an EEL program.
         
         Standard EEL [math](https://www.reaper.fm/sdk/js/basiccode.php#js_basicfunc)
         and [string](https://www.reaper.fm/sdk/js/strings.php#js_string_funcs)
         functions are available in addition to callback-specific functions
         (see InputTextCallback_*).
        </description>        
        <retvals>
            ImGui_Function - 
        </retvals>        
        <parameters>
            string code -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CreateImage</slug>
        <title>ImGui_CreateImage</title>
        <functioncall prog_lang="cpp">ImGui_Image* ImGui_CreateImage(const char* file, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">ImGui_Image extension_api("ImGui_CreateImage", "file", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">ImGui_Image reaper.ImGui_CreateImage(string file, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">ImGui_Image* ImGui_CreateImage(const char* file, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         The returned object is valid as long as it is used in each defer cycle
         unless attached to a context (see Attach).
         
         ('flags' currently unused and reserved for future expansion)
        </description>        
        <retvals>
            ImGui_Image - 
        </retvals>        
        <parameters>
            string file - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CreateImageFromMem</slug>
        <title>ImGui_CreateImageFromMem</title>
        <functioncall prog_lang="cpp">ImGui_Image* ImGui_CreateImageFromMem(const char* data, int data_sz)</functioncall>
        <functioncall prog_lang="eel">ImGui_Image extension_api("ImGui_CreateImageFromMem", "data")</functioncall>
        <functioncall prog_lang="lua">ImGui_Image reaper.ImGui_CreateImageFromMem(string data)</functioncall>
        <functioncall prog_lang="python">ImGui_Image* ImGui_CreateImageFromMem(const char* data, int data_sz)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Requires REAPER v6.44 or newer for EEL and Lua. Load from a file using
         CreateImage or explicitely specify data_sz if supporting older versions.
        </description>        
        <retvals>
            ImGui_Image - 
        </retvals>        
        <parameters>
            string data -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CreateImageSet</slug>
        <title>ImGui_CreateImageSet</title>
        <functioncall prog_lang="cpp">ImGui_ImageSet* ImGui_CreateImageSet()</functioncall>
        <functioncall prog_lang="eel">ImGui_ImageSet extension_api("ImGui_CreateImageSet")</functioncall>
        <functioncall prog_lang="lua">ImGui_ImageSet  = reaper.ImGui_CreateImageSet()</functioncall>
        <functioncall prog_lang="python">ImGui_ImageSet* ImGui_CreateImageSet()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            ImGui_ImageSet  - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CreateListClipper</slug>
        <title>ImGui_CreateListClipper</title>
        <functioncall prog_lang="cpp">ImGui_ListClipper* ImGui_CreateListClipper(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">ImGui_ListClipper extension_api("ImGui_CreateListClipper", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">ImGui_ListClipper reaper.ImGui_CreateListClipper(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">ImGui_ListClipper* ImGui_CreateListClipper(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         The returned clipper object is only valid for the given context and is valid
         as long as it is used in each defer cycle unless attached (see Attach).
        </description>        
        <retvals>
            ImGui_ListClipper - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_CreateTextFilter</slug>
        <title>ImGui_CreateTextFilter</title>
        <functioncall prog_lang="cpp">ImGui_TextFilter* ImGui_CreateTextFilter(const char* default_filterInOptional)</functioncall>
        <functioncall prog_lang="eel">ImGui_TextFilter extension_api("ImGui_CreateTextFilter", optional "default_filterIn")</functioncall>
        <functioncall prog_lang="lua">ImGui_TextFilter reaper.ImGui_CreateTextFilter(optional string default_filterIn)</functioncall>
        <functioncall prog_lang="python">ImGui_TextFilter* ImGui_CreateTextFilter(const char* default_filterInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Valid while used every frame unless attached to a context (see Attach).
        </description>        
        <retvals>
            ImGui_TextFilter - 
        </retvals>        
        <parameters>
            optional string default_filterIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DebugTextEncoding</slug>
        <title>ImGui_DebugTextEncoding</title>
        <functioncall prog_lang="cpp">void ImGui_DebugTextEncoding(ImGui_Context* ctx, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DebugTextEncoding", ImGui_Context ctx, "text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DebugTextEncoding(ImGui_Context ctx, string text)</functioncall>
        <functioncall prog_lang="python">void ImGui_DebugTextEncoding(ImGui_Context* ctx, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Helper tool to diagnose between text encoding issues and font loading issues.
         Pass your UTF-8 string and verify that there are correct.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DestroyContext</slug>
        <title>ImGui_DestroyContext</title>
        <functioncall prog_lang="cpp">void ImGui_DestroyContext(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DestroyContext", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DestroyContext(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_DestroyContext(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Free the resources used by a context.
         
         Calling this function is usually not required as all ReaImGui objects are
         automatically garbage-collected when unused.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Detach</slug>
        <title>ImGui_Detach</title>
        <functioncall prog_lang="cpp">void ImGui_Detach(ImGui_Context* ctx, ImGui_Resource* obj)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Detach", ImGui_Context ctx, ImGui_Resource obj)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Detach(ImGui_Context ctx, ImGui_Resource obj)</functioncall>
        <functioncall prog_lang="python">void ImGui_Detach(ImGui_Context* ctx, ImGui_Resource* obj)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Unlink the object's lifetime. Unattached objects are automatically destroyed
         when left unused. You may check whether an object has been destroyed using
         ValidatePtr.
        </description>        
        <parameters>
            ImGui_Context ctxImGui_Resource obj -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Dir_Down</slug>
        <title>ImGui_Dir_Down</title>
        <functioncall prog_lang="cpp">int ImGui_Dir_Down()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Dir_Down")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Dir_Down()</functioncall>
        <functioncall prog_lang="python">int ImGui_Dir_Down()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Dir_Left</slug>
        <title>ImGui_Dir_Left</title>
        <functioncall prog_lang="cpp">int ImGui_Dir_Left()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Dir_Left")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Dir_Left()</functioncall>
        <functioncall prog_lang="python">int ImGui_Dir_Left()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Dir_None</slug>
        <title>ImGui_Dir_None</title>
        <functioncall prog_lang="cpp">int ImGui_Dir_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Dir_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Dir_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_Dir_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Dir_Right</slug>
        <title>ImGui_Dir_Right</title>
        <functioncall prog_lang="cpp">int ImGui_Dir_Right()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Dir_Right")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Dir_Right()</functioncall>
        <functioncall prog_lang="python">int ImGui_Dir_Right()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Dir_Up</slug>
        <title>ImGui_Dir_Up</title>
        <functioncall prog_lang="cpp">int ImGui_Dir_Up()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Dir_Up")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Dir_Up()</functioncall>
        <functioncall prog_lang="python">int ImGui_Dir_Up()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDouble</slug>
        <title>ImGui_DragDouble</title>
        <functioncall prog_lang="cpp">bool ImGui_DragDouble(ImGui_Context* ctx, const char* label, double* vInOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_DragDouble", ImGui_Context ctx, "label", &amp;v, optional v_speedIn, optional v_minIn, optional v_maxIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v = reaper.ImGui_DragDouble(ImGui_Context ctx, string label, number v, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_DragDouble(ImGui_Context* ctx, const char* label, double* vInOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v - 
            optional number v_speedIn - 
            optional number v_minIn - 
            optional number v_maxIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDouble2</slug>
        <title>ImGui_DragDouble2</title>
        <functioncall prog_lang="cpp">bool ImGui_DragDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_DragDouble2", ImGui_Context ctx, "label", &amp;v1, &amp;v2, optional v_speedIn, optional v_minIn, optional v_maxIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v1, number v2 = reaper.ImGui_DragDouble2(ImGui_Context ctx, string label, number v1, number v2, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_DragDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v1 - 
            number v2 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v1 - 
            number v2 - 
            optional number v_speedIn - 
            optional number v_minIn - 
            optional number v_maxIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDouble3</slug>
        <title>ImGui_DragDouble3</title>
        <functioncall prog_lang="cpp">bool ImGui_DragDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_DragDouble3", ImGui_Context ctx, "label", &amp;v1, &amp;v2, &amp;v3, optional v_speedIn, optional v_minIn, optional v_maxIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v1, number v2, number v3 = reaper.ImGui_DragDouble3(ImGui_Context ctx, string label, number v1, number v2, number v3, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_DragDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v1 - 
            number v2 - 
            number v3 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v1 - 
            number v2 - 
            number v3 - 
            optional number v_speedIn - 
            optional number v_minIn - 
            optional number v_maxIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDouble4</slug>
        <title>ImGui_DragDouble4</title>
        <functioncall prog_lang="cpp">bool ImGui_DragDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_DragDouble4", ImGui_Context ctx, "label", &amp;v1, &amp;v2, &amp;v3, &amp;v4, optional v_speedIn, optional v_minIn, optional v_maxIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v1, number v2, number v3, number v4 = reaper.ImGui_DragDouble4(ImGui_Context ctx, string label, number v1, number v2, number v3, number v4, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_DragDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v1 - 
            number v2 - 
            number v3 - 
            number v4 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v1 - 
            number v2 - 
            number v3 - 
            number v4 - 
            optional number v_speedIn - 
            optional number v_minIn - 
            optional number v_maxIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDoubleN</slug>
        <title>ImGui_DragDoubleN</title>
        <functioncall prog_lang="cpp">bool ImGui_DragDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double* speedInOptional, double* minInOptional, double* maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_DragDoubleN", ImGui_Context ctx, "label", reaper_array values, optional speedIn, optional minIn, optional maxIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_DragDoubleN(ImGui_Context ctx, string labelreaper_array values, optional number speedIn, optional number minIn, optional number maxIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_DragDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double* speedInOptional, double* minInOptional, double* maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string labelreaper_array values - 
            optional number speedIn - 
            optional number minIn - 
            optional number maxIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDropFlags_AcceptBeforeDelivery</slug>
        <title>ImGui_DragDropFlags_AcceptBeforeDelivery</title>
        <functioncall prog_lang="cpp">int ImGui_DragDropFlags_AcceptBeforeDelivery()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DragDropFlags_AcceptBeforeDelivery")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DragDropFlags_AcceptBeforeDelivery()</functioncall>
        <functioncall prog_lang="python">int ImGui_DragDropFlags_AcceptBeforeDelivery()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         AcceptDragDropPayload will returns true even before the mouse button is
            released. You can then check GetDragDropPayload/is_delivery to test if the
            payload needs to be delivered.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDropFlags_AcceptNoDrawDefaultRect</slug>
        <title>ImGui_DragDropFlags_AcceptNoDrawDefaultRect</title>
        <functioncall prog_lang="cpp">int ImGui_DragDropFlags_AcceptNoDrawDefaultRect()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DragDropFlags_AcceptNoDrawDefaultRect")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DragDropFlags_AcceptNoDrawDefaultRect()</functioncall>
        <functioncall prog_lang="python">int ImGui_DragDropFlags_AcceptNoDrawDefaultRect()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Do not draw the default highlight rectangle when hovering over target.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDropFlags_AcceptNoPreviewTooltip</slug>
        <title>ImGui_DragDropFlags_AcceptNoPreviewTooltip</title>
        <functioncall prog_lang="cpp">int ImGui_DragDropFlags_AcceptNoPreviewTooltip()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DragDropFlags_AcceptNoPreviewTooltip")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DragDropFlags_AcceptNoPreviewTooltip()</functioncall>
        <functioncall prog_lang="python">int ImGui_DragDropFlags_AcceptNoPreviewTooltip()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDropFlags_AcceptPeekOnly</slug>
        <title>ImGui_DragDropFlags_AcceptPeekOnly</title>
        <functioncall prog_lang="cpp">int ImGui_DragDropFlags_AcceptPeekOnly()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DragDropFlags_AcceptPeekOnly")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DragDropFlags_AcceptPeekOnly()</functioncall>
        <functioncall prog_lang="python">int ImGui_DragDropFlags_AcceptPeekOnly()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         For peeking ahead and inspecting the payload before delivery.
            Equivalent to DragDropFlags_AcceptBeforeDelivery |
            DragDropFlags_AcceptNoDrawDefaultRect.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDropFlags_None</slug>
        <title>ImGui_DragDropFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_DragDropFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DragDropFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DragDropFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_DragDropFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDropFlags_SourceAllowNullID</slug>
        <title>ImGui_DragDropFlags_SourceAllowNullID</title>
        <functioncall prog_lang="cpp">int ImGui_DragDropFlags_SourceAllowNullID()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DragDropFlags_SourceAllowNullID")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DragDropFlags_SourceAllowNullID()</functioncall>
        <functioncall prog_lang="python">int ImGui_DragDropFlags_SourceAllowNullID()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Allow items such as Text, Image that have no unique identifier to be used as
            drag source, by manufacturing a temporary identifier based on their
            window-relative position. This is extremely unusual within the dear imgui
            ecosystem and so we made it explicit.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDropFlags_SourceAutoExpirePayload</slug>
        <title>ImGui_DragDropFlags_SourceAutoExpirePayload</title>
        <functioncall prog_lang="cpp">int ImGui_DragDropFlags_SourceAutoExpirePayload()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DragDropFlags_SourceAutoExpirePayload")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DragDropFlags_SourceAutoExpirePayload()</functioncall>
        <functioncall prog_lang="python">int ImGui_DragDropFlags_SourceAutoExpirePayload()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Automatically expire the payload if the source cease to be submitted
            (otherwise payloads are persisting while being dragged).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDropFlags_SourceExtern</slug>
        <title>ImGui_DragDropFlags_SourceExtern</title>
        <functioncall prog_lang="cpp">int ImGui_DragDropFlags_SourceExtern()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DragDropFlags_SourceExtern")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DragDropFlags_SourceExtern()</functioncall>
        <functioncall prog_lang="python">int ImGui_DragDropFlags_SourceExtern()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         External source (from outside of dear imgui), won't attempt to read current
            item/window info. Will always return true.
            Only one Extern source can be active simultaneously.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDropFlags_SourceNoDisableHover</slug>
        <title>ImGui_DragDropFlags_SourceNoDisableHover</title>
        <functioncall prog_lang="cpp">int ImGui_DragDropFlags_SourceNoDisableHover()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DragDropFlags_SourceNoDisableHover")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DragDropFlags_SourceNoDisableHover()</functioncall>
        <functioncall prog_lang="python">int ImGui_DragDropFlags_SourceNoDisableHover()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         By default, when dragging we clear data so that IsItemHovered will return
            false, to avoid subsequent user code submitting tooltips. This flag disables
            this behavior so you can still call IsItemHovered on the source item.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDropFlags_SourceNoHoldToOpenOthers</slug>
        <title>ImGui_DragDropFlags_SourceNoHoldToOpenOthers</title>
        <functioncall prog_lang="cpp">int ImGui_DragDropFlags_SourceNoHoldToOpenOthers()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DragDropFlags_SourceNoHoldToOpenOthers")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DragDropFlags_SourceNoHoldToOpenOthers()</functioncall>
        <functioncall prog_lang="python">int ImGui_DragDropFlags_SourceNoHoldToOpenOthers()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable the behavior that allows to open tree nodes and collapsing header by
            holding over them while dragging a source item.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragDropFlags_SourceNoPreviewTooltip</slug>
        <title>ImGui_DragDropFlags_SourceNoPreviewTooltip</title>
        <functioncall prog_lang="cpp">int ImGui_DragDropFlags_SourceNoPreviewTooltip()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DragDropFlags_SourceNoPreviewTooltip")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DragDropFlags_SourceNoPreviewTooltip()</functioncall>
        <functioncall prog_lang="python">int ImGui_DragDropFlags_SourceNoPreviewTooltip()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         By default, a successful call to BeginDragDropSource opens a tooltip so you
            can display a preview or description of the source contents.
            This flag disables this behavior.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragFloatRange2</slug>
        <title>ImGui_DragFloatRange2</title>
        <functioncall prog_lang="cpp">bool ImGui_DragFloatRange2(ImGui_Context* ctx, const char* label, double* v_current_minInOut, double* v_current_maxInOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, const char* format_maxInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_DragFloatRange2", ImGui_Context ctx, "label", &amp;v_current_min, &amp;v_current_max, optional v_speedIn, optional v_minIn, optional v_maxIn, optional "formatIn", optional "format_maxIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v_current_min, number v_current_max = reaper.ImGui_DragFloatRange2(ImGui_Context ctx, string label, number v_current_min, number v_current_max, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional string format_maxIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_DragFloatRange2(ImGui_Context* ctx, const char* label, double* v_current_minInOut, double* v_current_maxInOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, const char* format_maxInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v_current_min - 
            number v_current_max - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v_current_min - 
            number v_current_max - 
            optional number v_speedIn - 
            optional number v_minIn - 
            optional number v_maxIn - 
            optional string formatIn - 
            optional string format_maxIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragInt</slug>
        <title>ImGui_DragInt</title>
        <functioncall prog_lang="cpp">bool ImGui_DragInt(ImGui_Context* ctx, const char* label, int* vInOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_DragInt", ImGui_Context ctx, "label", int &amp;v, optional v_speedIn, optional int v_minIn, optional int v_maxIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v = reaper.ImGui_DragInt(ImGui_Context ctx, string label, integer v, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_DragInt(ImGui_Context* ctx, const char* label, int* vInOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v - 
            optional number v_speedIn - 
            optional integer v_minIn - 
            optional integer v_maxIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragInt2</slug>
        <title>ImGui_DragInt2</title>
        <functioncall prog_lang="cpp">bool ImGui_DragInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_DragInt2", ImGui_Context ctx, "label", int &amp;v1, int &amp;v2, optional v_speedIn, optional int v_minIn, optional int v_maxIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v1, integer v2 = reaper.ImGui_DragInt2(ImGui_Context ctx, string label, integer v1, integer v2, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_DragInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v1 - 
            integer v2 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v1 - 
            integer v2 - 
            optional number v_speedIn - 
            optional integer v_minIn - 
            optional integer v_maxIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragInt3</slug>
        <title>ImGui_DragInt3</title>
        <functioncall prog_lang="cpp">bool ImGui_DragInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_DragInt3", ImGui_Context ctx, "label", int &amp;v1, int &amp;v2, int &amp;v3, optional v_speedIn, optional int v_minIn, optional int v_maxIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v1, integer v2, integer v3 = reaper.ImGui_DragInt3(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_DragInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
            optional number v_speedIn - 
            optional integer v_minIn - 
            optional integer v_maxIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragInt4</slug>
        <title>ImGui_DragInt4</title>
        <functioncall prog_lang="cpp">bool ImGui_DragInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_DragInt4", ImGui_Context ctx, "label", int &amp;v1, int &amp;v2, int &amp;v3, int &amp;v4, optional v_speedIn, optional int v_minIn, optional int v_maxIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v1, integer v2, integer v3, integer v4 = reaper.ImGui_DragInt4(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v4, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_DragInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
            integer v4 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
            integer v4 - 
            optional number v_speedIn - 
            optional integer v_minIn - 
            optional integer v_maxIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DragIntRange2</slug>
        <title>ImGui_DragIntRange2</title>
        <functioncall prog_lang="cpp">bool ImGui_DragIntRange2(ImGui_Context* ctx, const char* label, int* v_current_minInOut, int* v_current_maxInOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, const char* format_maxInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_DragIntRange2", ImGui_Context ctx, "label", int &amp;v_current_min, int &amp;v_current_max, optional v_speedIn, optional int v_minIn, optional int v_maxIn, optional "formatIn", optional "format_maxIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v_current_min, integer v_current_max = reaper.ImGui_DragIntRange2(ImGui_Context ctx, string label, integer v_current_min, integer v_current_max, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional string format_maxIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_DragIntRange2(ImGui_Context* ctx, const char* label, int* v_current_minInOut, int* v_current_maxInOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, const char* format_maxInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v_current_min - 
            integer v_current_max - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v_current_min - 
            integer v_current_max - 
            optional number v_speedIn - 
            optional integer v_minIn - 
            optional integer v_maxIn - 
            optional string formatIn - 
            optional string format_maxIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_Closed</slug>
        <title>ImGui_DrawFlags_Closed</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_Closed()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_Closed")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_Closed()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_Closed()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         DrawList_PathStroke, DrawList_AddPolyline: specify that shape should be
            closed (Important: this is always == 1 for legacy reason).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_None</slug>
        <title>ImGui_DrawFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_RoundCornersAll</slug>
        <title>ImGui_DrawFlags_RoundCornersAll</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_RoundCornersAll()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_RoundCornersAll")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_RoundCornersAll()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_RoundCornersAll()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_RoundCornersBottom</slug>
        <title>ImGui_DrawFlags_RoundCornersBottom</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_RoundCornersBottom()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_RoundCornersBottom")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_RoundCornersBottom()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_RoundCornersBottom()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_RoundCornersBottomLeft</slug>
        <title>ImGui_DrawFlags_RoundCornersBottomLeft</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_RoundCornersBottomLeft()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_RoundCornersBottomLeft")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_RoundCornersBottomLeft()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_RoundCornersBottomLeft()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding
            bottom-left corner only (when rounding &gt; 0.0, we default to all corners).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_RoundCornersBottomRight</slug>
        <title>ImGui_DrawFlags_RoundCornersBottomRight</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_RoundCornersBottomRight()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_RoundCornersBottomRight")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_RoundCornersBottomRight()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_RoundCornersBottomRight()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding
            bottom-right corner only (when rounding &gt; 0.0, we default to all corners).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_RoundCornersLeft</slug>
        <title>ImGui_DrawFlags_RoundCornersLeft</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_RoundCornersLeft()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_RoundCornersLeft")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_RoundCornersLeft()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_RoundCornersLeft()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_RoundCornersNone</slug>
        <title>ImGui_DrawFlags_RoundCornersNone</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_RoundCornersNone()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_RoundCornersNone")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_RoundCornersNone()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_RoundCornersNone()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: disable rounding
            on all corners (when rounding &gt; 0.0). This is NOT zero, NOT an implicit flag!.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_RoundCornersRight</slug>
        <title>ImGui_DrawFlags_RoundCornersRight</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_RoundCornersRight()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_RoundCornersRight")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_RoundCornersRight()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_RoundCornersRight()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_RoundCornersTop</slug>
        <title>ImGui_DrawFlags_RoundCornersTop</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_RoundCornersTop()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_RoundCornersTop")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_RoundCornersTop()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_RoundCornersTop()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_RoundCornersTopLeft</slug>
        <title>ImGui_DrawFlags_RoundCornersTopLeft</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_RoundCornersTopLeft()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_RoundCornersTopLeft")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_RoundCornersTopLeft()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_RoundCornersTopLeft()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding
            top-left corner only (when rounding &gt; 0.0, we default to all corners).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawFlags_RoundCornersTopRight</slug>
        <title>ImGui_DrawFlags_RoundCornersTopRight</title>
        <functioncall prog_lang="cpp">int ImGui_DrawFlags_RoundCornersTopRight()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_DrawFlags_RoundCornersTopRight")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_DrawFlags_RoundCornersTopRight()</functioncall>
        <functioncall prog_lang="python">int ImGui_DrawFlags_RoundCornersTopRight()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding
            top-right corner only (when rounding &gt; 0.0, we default to all corners).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawListSplitter_Clear</slug>
        <title>ImGui_DrawListSplitter_Clear</title>
        <functioncall prog_lang="cpp">void ImGui_DrawListSplitter_Clear(ImGui_DrawListSplitter* splitter)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawListSplitter_Clear", ImGui_DrawListSplitter splitter)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawListSplitter_Clear(ImGui_DrawListSplitter splitter)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawListSplitter_Clear(ImGui_DrawListSplitter* splitter)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawListSplitter splitter -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawListSplitter_Merge</slug>
        <title>ImGui_DrawListSplitter_Merge</title>
        <functioncall prog_lang="cpp">void ImGui_DrawListSplitter_Merge(ImGui_DrawListSplitter* splitter)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawListSplitter_Merge", ImGui_DrawListSplitter splitter)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawListSplitter_Merge(ImGui_DrawListSplitter splitter)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawListSplitter_Merge(ImGui_DrawListSplitter* splitter)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawListSplitter splitter -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawListSplitter_SetCurrentChannel</slug>
        <title>ImGui_DrawListSplitter_SetCurrentChannel</title>
        <functioncall prog_lang="cpp">void ImGui_DrawListSplitter_SetCurrentChannel(ImGui_DrawListSplitter* splitter, int channel_idx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawListSplitter_SetCurrentChannel", ImGui_DrawListSplitter splitter, int channel_idx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawListSplitter_SetCurrentChannel(ImGui_DrawListSplitter splitter, integer channel_idx)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawListSplitter_SetCurrentChannel(ImGui_DrawListSplitter* splitter, int channel_idx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawListSplitter splitter - 
            integer channel_idx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawListSplitter_Split</slug>
        <title>ImGui_DrawListSplitter_Split</title>
        <functioncall prog_lang="cpp">void ImGui_DrawListSplitter_Split(ImGui_DrawListSplitter* splitter, int count)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawListSplitter_Split", ImGui_DrawListSplitter splitter, int count)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawListSplitter_Split(ImGui_DrawListSplitter splitter, integer count)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawListSplitter_Split(ImGui_DrawListSplitter* splitter, int count)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawListSplitter splitter - 
            integer count -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddBezierCubic</slug>
        <title>ImGui_DrawList_AddBezierCubic</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddBezierCubic(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, double thickness, int* num_segmentsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddBezierCubic", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, int col_rgba, thickness, optional int num_segmentsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddBezierCubic(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, integer col_rgba, number thickness, optional integer num_segmentsIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddBezierCubic(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, double thickness, int* num_segmentsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Cubic Bezier (4 control points)
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p1_x - 
            number p1_y - 
            number p2_x - 
            number p2_y - 
            number p3_x - 
            number p3_y - 
            number p4_x - 
            number p4_y - 
            integer col_rgba - 
            number thickness - 
            optional integer num_segmentsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddBezierQuadratic</slug>
        <title>ImGui_DrawList_AddBezierQuadratic</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddBezierQuadratic(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, double thickness, int* num_segmentsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddBezierQuadratic", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, int col_rgba, thickness, optional int num_segmentsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddBezierQuadratic(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, integer col_rgba, number thickness, optional integer num_segmentsIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddBezierQuadratic(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, double thickness, int* num_segmentsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Quadratic Bezier (3 control points)
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p1_x - 
            number p1_y - 
            number p2_x - 
            number p2_y - 
            number p3_x - 
            number p3_y - 
            integer col_rgba - 
            number thickness - 
            optional integer num_segmentsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddCircle</slug>
        <title>ImGui_DrawList_AddCircle</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddCircle(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int* num_segmentsInOptional, double* thicknessInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddCircle", ImGui_DrawList draw_list, center_x, center_y, radius, int col_rgba, optional int num_segmentsIn, optional thicknessIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddCircle(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, optional integer num_segmentsIn, optional number thicknessIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddCircle(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int* num_segmentsInOptional, double* thicknessInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Use "num_segments == 0" to automatically calculate tessellation (preferred).
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number center_x - 
            number center_y - 
            number radius - 
            integer col_rgba - 
            optional integer num_segmentsIn - 
            optional number thicknessIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddCircleFilled</slug>
        <title>ImGui_DrawList_AddCircleFilled</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddCircleFilled(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int* num_segmentsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddCircleFilled", ImGui_DrawList draw_list, center_x, center_y, radius, int col_rgba, optional int num_segmentsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddCircleFilled(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, optional integer num_segmentsIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddCircleFilled(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int* num_segmentsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Use "num_segments == 0" to automatically calculate tessellation (preferred).
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number center_x - 
            number center_y - 
            number radius - 
            integer col_rgba - 
            optional integer num_segmentsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddConvexPolyFilled</slug>
        <title>ImGui_DrawList_AddConvexPolyFilled</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddConvexPolyFilled(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddConvexPolyFilled", ImGui_DrawList draw_list, reaper_array points, int col_rgba)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddConvexPolyFilled(ImGui_DrawList draw_listreaper_array points, integer col_rgba)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddConvexPolyFilled(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Note: Anti-aliased filling requires points to be in clockwise order.
        </description>        
        <parameters>
            ImGui_DrawList draw_listreaper_array points - 
            integer col_rgba -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddImage</slug>
        <title>ImGui_DrawList_AddImage</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddImage(ImGui_DrawList* draw_list, ImGui_Image* img, double p_min_x, double p_min_y, double p_max_x, double p_max_y, double* uv_min_xInOptional, double* uv_min_yInOptional, double* uv_max_xInOptional, double* uv_max_yInOptional, int* col_rgbaInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddImage", ImGui_DrawList draw_list, ImGui_Image img, p_min_x, p_min_y, p_max_x, p_max_y, optional uv_min_xIn, optional uv_min_yIn, optional uv_max_xIn, optional uv_max_yIn, optional int col_rgbaIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddImage(ImGui_DrawList draw_listImGui_Image img, number p_min_x, number p_min_y, number p_max_x, number p_max_y, optional number uv_min_xIn, optional number uv_min_yIn, optional number uv_max_xIn, optional number uv_max_yIn, optional integer col_rgbaIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddImage(ImGui_DrawList* draw_list, ImGui_Image* img, double p_min_x, double p_min_y, double p_max_x, double p_max_y, double* uv_min_xInOptional, double* uv_min_yInOptional, double* uv_max_xInOptional, double* uv_max_yInOptional, int* col_rgbaInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_listImGui_Image img - 
            number p_min_x - 
            number p_min_y - 
            number p_max_x - 
            number p_max_y - 
            optional number uv_min_xIn - 
            optional number uv_min_yIn - 
            optional number uv_max_xIn - 
            optional number uv_max_yIn - 
            optional integer col_rgbaIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddImageQuad</slug>
        <title>ImGui_DrawList_AddImageQuad</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddImageQuad(ImGui_DrawList* draw_list, ImGui_Image* img, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, double* uv1_xInOptional, double* uv1_yInOptional, double* uv2_xInOptional, double* uv2_yInOptional, double* uv3_xInOptional, double* uv3_yInOptional, double* uv4_xInOptional, double* uv4_yInOptional, int* col_rgbaInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddImageQuad", ImGui_DrawList draw_list, ImGui_Image img, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, optional uv1_xIn, optional uv1_yIn, optional uv2_xIn, optional uv2_yIn, optional uv3_xIn, optional uv3_yIn, optional uv4_xIn, optional uv4_yIn, optional int col_rgbaIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddImageQuad(ImGui_DrawList draw_listImGui_Image img, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, optional number uv1_xIn, optional number uv1_yIn, optional number uv2_xIn, optional number uv2_yIn, optional number uv3_xIn, optional number uv3_yIn, optional number uv4_xIn, optional number uv4_yIn, optional integer col_rgbaIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddImageQuad(ImGui_DrawList* draw_list, ImGui_Image* img, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, double* uv1_xInOptional, double* uv1_yInOptional, double* uv2_xInOptional, double* uv2_yInOptional, double* uv3_xInOptional, double* uv3_yInOptional, double* uv4_xInOptional, double* uv4_yInOptional, int* col_rgbaInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_listImGui_Image img - 
            number p1_x - 
            number p1_y - 
            number p2_x - 
            number p2_y - 
            number p3_x - 
            number p3_y - 
            number p4_x - 
            number p4_y - 
            optional number uv1_xIn - 
            optional number uv1_yIn - 
            optional number uv2_xIn - 
            optional number uv2_yIn - 
            optional number uv3_xIn - 
            optional number uv3_yIn - 
            optional number uv4_xIn - 
            optional number uv4_yIn - 
            optional integer col_rgbaIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddImageRounded</slug>
        <title>ImGui_DrawList_AddImageRounded</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddImageRounded(ImGui_DrawList* draw_list, ImGui_Image* img, double p_min_x, double p_min_y, double p_max_x, double p_max_y, double uv_min_x, double uv_min_y, double uv_max_x, double uv_max_y, int col_rgba, double rounding, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddImageRounded", ImGui_DrawList draw_list, ImGui_Image img, p_min_x, p_min_y, p_max_x, p_max_y, uv_min_x, uv_min_y, uv_max_x, uv_max_y, int col_rgba, rounding, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddImageRounded(ImGui_DrawList draw_listImGui_Image img, number p_min_x, number p_min_y, number p_max_x, number p_max_y, number uv_min_x, number uv_min_y, number uv_max_x, number uv_max_y, integer col_rgba, number rounding, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddImageRounded(ImGui_DrawList* draw_list, ImGui_Image* img, double p_min_x, double p_min_y, double p_max_x, double p_max_y, double uv_min_x, double uv_min_y, double uv_max_x, double uv_max_y, int col_rgba, double rounding, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_listImGui_Image img - 
            number p_min_x - 
            number p_min_y - 
            number p_max_x - 
            number p_max_y - 
            number uv_min_x - 
            number uv_min_y - 
            number uv_max_x - 
            number uv_max_y - 
            integer col_rgba - 
            number rounding - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddLine</slug>
        <title>ImGui_DrawList_AddLine</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddLine(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, int col_rgba, double* thicknessInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddLine", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, int col_rgba, optional thicknessIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddLine(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, integer col_rgba, optional number thicknessIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddLine(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, int col_rgba, double* thicknessInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p1_x - 
            number p1_y - 
            number p2_x - 
            number p2_y - 
            integer col_rgba - 
            optional number thicknessIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddNgon</slug>
        <title>ImGui_DrawList_AddNgon</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddNgon(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments, double* thicknessInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddNgon", ImGui_DrawList draw_list, center_x, center_y, radius, int col_rgba, int num_segments, optional thicknessIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddNgon(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, integer num_segments, optional number thicknessIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddNgon(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments, double* thicknessInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number center_x - 
            number center_y - 
            number radius - 
            integer col_rgba - 
            integer num_segments - 
            optional number thicknessIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddNgonFilled</slug>
        <title>ImGui_DrawList_AddNgonFilled</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddNgonFilled(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddNgonFilled", ImGui_DrawList draw_list, center_x, center_y, radius, int col_rgba, int num_segments)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddNgonFilled(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, integer num_segments)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddNgonFilled(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number center_x - 
            number center_y - 
            number radius - 
            integer col_rgba - 
            integer num_segments -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddPolyline</slug>
        <title>ImGui_DrawList_AddPolyline</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddPolyline(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba, int flags, double thickness)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddPolyline", ImGui_DrawList draw_list, reaper_array points, int col_rgba, int flags, thickness)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddPolyline(ImGui_DrawList draw_listreaper_array points, integer col_rgba, integer flags, number thickness)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddPolyline(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba, int flags, double thickness)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Points is a list of x,y coordinates.
        </description>        
        <parameters>
            ImGui_DrawList draw_listreaper_array points - 
            integer col_rgba - 
            integer flags - 
            number thickness -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddQuad</slug>
        <title>ImGui_DrawList_AddQuad</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddQuad(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, double* thicknessInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddQuad", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, int col_rgba, optional thicknessIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddQuad(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, integer col_rgba, optional number thicknessIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddQuad(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, double* thicknessInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p1_x - 
            number p1_y - 
            number p2_x - 
            number p2_y - 
            number p3_x - 
            number p3_y - 
            number p4_x - 
            number p4_y - 
            integer col_rgba - 
            optional number thicknessIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddQuadFilled</slug>
        <title>ImGui_DrawList_AddQuadFilled</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddQuadFilled(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddQuadFilled", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, int col_rgba)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddQuadFilled(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, integer col_rgba)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddQuadFilled(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p1_x - 
            number p1_y - 
            number p2_x - 
            number p2_y - 
            number p3_x - 
            number p3_y - 
            number p4_x - 
            number p4_y - 
            integer col_rgba -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddRect</slug>
        <title>ImGui_DrawList_AddRect</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddRect(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, double* roundingInOptional, int* flagsInOptional, double* thicknessInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddRect", ImGui_DrawList draw_list, p_min_x, p_min_y, p_max_x, p_max_y, int col_rgba, optional roundingIn, optional int flagsIn, optional thicknessIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddRect(ImGui_DrawList draw_list, number p_min_x, number p_min_y, number p_max_x, number p_max_y, integer col_rgba, optional number roundingIn, optional integer flagsIn, optional number thicknessIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddRect(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, double* roundingInOptional, int* flagsInOptional, double* thicknessInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p_min_x - 
            number p_min_y - 
            number p_max_x - 
            number p_max_y - 
            integer col_rgba - 
            optional number roundingIn - 
            optional integer flagsIn - 
            optional number thicknessIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddRectFilled</slug>
        <title>ImGui_DrawList_AddRectFilled</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddRectFilled(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, double* roundingInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddRectFilled", ImGui_DrawList draw_list, p_min_x, p_min_y, p_max_x, p_max_y, int col_rgba, optional roundingIn, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddRectFilled(ImGui_DrawList draw_list, number p_min_x, number p_min_y, number p_max_x, number p_max_y, integer col_rgba, optional number roundingIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddRectFilled(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, double* roundingInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p_min_x - 
            number p_min_y - 
            number p_max_x - 
            number p_max_y - 
            integer col_rgba - 
            optional number roundingIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddRectFilledMultiColor</slug>
        <title>ImGui_DrawList_AddRectFilledMultiColor</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddRectFilledMultiColor(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddRectFilledMultiColor", ImGui_DrawList draw_list, p_min_x, p_min_y, p_max_x, p_max_y, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddRectFilledMultiColor(ImGui_DrawList draw_list, number p_min_x, number p_min_y, number p_max_x, number p_max_y, integer col_upr_left, integer col_upr_right, integer col_bot_right, integer col_bot_left)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddRectFilledMultiColor(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p_min_x - 
            number p_min_y - 
            number p_max_x - 
            number p_max_y - 
            integer col_upr_left - 
            integer col_upr_right - 
            integer col_bot_right - 
            integer col_bot_left -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddText</slug>
        <title>ImGui_DrawList_AddText</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddText(ImGui_DrawList* draw_list, double x, double y, int col_rgba, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddText", ImGui_DrawList draw_list, x, y, int col_rgba, "text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddText(ImGui_DrawList draw_list, number x, number y, integer col_rgba, string text)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddText(ImGui_DrawList* draw_list, double x, double y, int col_rgba, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number x - 
            number y - 
            integer col_rgba - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddTextEx</slug>
        <title>ImGui_DrawList_AddTextEx</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddTextEx(ImGui_DrawList* draw_list, ImGui_Font* font, double font_size, double pos_x, double pos_y, int col_rgba, const char* text, double* wrap_widthInOptional, double* cpu_fine_clip_rect_xInOptional, double* cpu_fine_clip_rect_yInOptional, double* cpu_fine_clip_rect_wInOptional, double* cpu_fine_clip_rect_hInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddTextEx", ImGui_DrawList draw_list, ImGui_Font font, font_size, pos_x, pos_y, int col_rgba, "text", optional wrap_widthIn, optional cpu_fine_clip_rect_xIn, optional cpu_fine_clip_rect_yIn, optional cpu_fine_clip_rect_wIn, optional cpu_fine_clip_rect_hIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddTextEx(ImGui_DrawList draw_listImGui_Font font, number font_size, number pos_x, number pos_y, integer col_rgba, string text, optional number wrap_widthIn, optional number cpu_fine_clip_rect_xIn, optional number cpu_fine_clip_rect_yIn, optional number cpu_fine_clip_rect_wIn, optional number cpu_fine_clip_rect_hIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddTextEx(ImGui_DrawList* draw_list, ImGui_Font* font, double font_size, double pos_x, double pos_y, int col_rgba, const char* text, double* wrap_widthInOptional, double* cpu_fine_clip_rect_xInOptional, double* cpu_fine_clip_rect_yInOptional, double* cpu_fine_clip_rect_wInOptional, double* cpu_fine_clip_rect_hInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         The last pushed font is used if font is nil.
         The size of the last pushed font is used if font_size is 0.
         cpu_fine_clip_rect_* only takes effect if all four are non-nil.
        </description>        
        <parameters>
            ImGui_DrawList draw_listImGui_Font font - 
            number font_size - 
            number pos_x - 
            number pos_y - 
            integer col_rgba - 
            string text - 
            optional number wrap_widthIn - 
            optional number cpu_fine_clip_rect_xIn - 
            optional number cpu_fine_clip_rect_yIn - 
            optional number cpu_fine_clip_rect_wIn - 
            optional number cpu_fine_clip_rect_hIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddTriangle</slug>
        <title>ImGui_DrawList_AddTriangle</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddTriangle(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, double* thicknessInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddTriangle", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, int col_rgba, optional thicknessIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddTriangle(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, integer col_rgba, optional number thicknessIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddTriangle(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, double* thicknessInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p1_x - 
            number p1_y - 
            number p2_x - 
            number p2_y - 
            number p3_x - 
            number p3_y - 
            integer col_rgba - 
            optional number thicknessIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_AddTriangleFilled</slug>
        <title>ImGui_DrawList_AddTriangleFilled</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_AddTriangleFilled(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_AddTriangleFilled", ImGui_DrawList draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, int col_rgba)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_AddTriangleFilled(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, integer col_rgba)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_AddTriangleFilled(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p1_x - 
            number p1_y - 
            number p2_x - 
            number p2_y - 
            number p3_x - 
            number p3_y - 
            integer col_rgba -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PathArcTo</slug>
        <title>ImGui_DrawList_PathArcTo</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PathArcTo(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, double a_min, double a_max, int* num_segmentsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PathArcTo", ImGui_DrawList draw_list, center_x, center_y, radius, a_min, a_max, optional int num_segmentsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PathArcTo(ImGui_DrawList draw_list, number center_x, number center_y, number radius, number a_min, number a_max, optional integer num_segmentsIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PathArcTo(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, double a_min, double a_max, int* num_segmentsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number center_x - 
            number center_y - 
            number radius - 
            number a_min - 
            number a_max - 
            optional integer num_segmentsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PathArcToFast</slug>
        <title>ImGui_DrawList_PathArcToFast</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PathArcToFast(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int a_min_of_12, int a_max_of_12)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PathArcToFast", ImGui_DrawList draw_list, center_x, center_y, radius, int a_min_of_12, int a_max_of_12)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PathArcToFast(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer a_min_of_12, integer a_max_of_12)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PathArcToFast(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int a_min_of_12, int a_max_of_12)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Use precomputed angles for a 12 steps circle.
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number center_x - 
            number center_y - 
            number radius - 
            integer a_min_of_12 - 
            integer a_max_of_12 -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PathBezierCubicCurveTo</slug>
        <title>ImGui_DrawList_PathBezierCubicCurveTo</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PathBezierCubicCurveTo(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int* num_segmentsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PathBezierCubicCurveTo", ImGui_DrawList draw_list, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, optional int num_segmentsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PathBezierCubicCurveTo(ImGui_DrawList draw_list, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, optional integer num_segmentsIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PathBezierCubicCurveTo(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int* num_segmentsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Cubic Bezier (4 control points)
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p2_x - 
            number p2_y - 
            number p3_x - 
            number p3_y - 
            number p4_x - 
            number p4_y - 
            optional integer num_segmentsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PathBezierQuadraticCurveTo</slug>
        <title>ImGui_DrawList_PathBezierQuadraticCurveTo</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PathBezierQuadraticCurveTo(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, int* num_segmentsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PathBezierQuadraticCurveTo", ImGui_DrawList draw_list, p2_x, p2_y, p3_x, p3_y, optional int num_segmentsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PathBezierQuadraticCurveTo(ImGui_DrawList draw_list, number p2_x, number p2_y, number p3_x, number p3_y, optional integer num_segmentsIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PathBezierQuadraticCurveTo(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, int* num_segmentsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Quadratic Bezier (3 control points)
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number p2_x - 
            number p2_y - 
            number p3_x - 
            number p3_y - 
            optional integer num_segmentsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PathClear</slug>
        <title>ImGui_DrawList_PathClear</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PathClear(ImGui_DrawList* draw_list)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PathClear", ImGui_DrawList draw_list)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PathClear(ImGui_DrawList draw_list)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PathClear(ImGui_DrawList* draw_list)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PathFillConvex</slug>
        <title>ImGui_DrawList_PathFillConvex</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PathFillConvex(ImGui_DrawList* draw_list, int col_rgba)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PathFillConvex", ImGui_DrawList draw_list, int col_rgba)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PathFillConvex(ImGui_DrawList draw_list, integer col_rgba)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PathFillConvex(ImGui_DrawList* draw_list, int col_rgba)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Note: Anti-aliased filling requires points to be in clockwise order.
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            integer col_rgba -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PathLineTo</slug>
        <title>ImGui_DrawList_PathLineTo</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PathLineTo(ImGui_DrawList* draw_list, double pos_x, double pos_y)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PathLineTo", ImGui_DrawList draw_list, pos_x, pos_y)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PathLineTo(ImGui_DrawList draw_list, number pos_x, number pos_y)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PathLineTo(ImGui_DrawList* draw_list, double pos_x, double pos_y)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number pos_x - 
            number pos_y -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PathRect</slug>
        <title>ImGui_DrawList_PathRect</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PathRect(ImGui_DrawList* draw_list, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y, double* roundingInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PathRect", ImGui_DrawList draw_list, rect_min_x, rect_min_y, rect_max_x, rect_max_y, optional roundingIn, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PathRect(ImGui_DrawList draw_list, number rect_min_x, number rect_min_y, number rect_max_x, number rect_max_y, optional number roundingIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PathRect(ImGui_DrawList* draw_list, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y, double* roundingInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number rect_min_x - 
            number rect_min_y - 
            number rect_max_x - 
            number rect_max_y - 
            optional number roundingIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PathStroke</slug>
        <title>ImGui_DrawList_PathStroke</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PathStroke(ImGui_DrawList* draw_list, int col_rgba, int* flagsInOptional, double* thicknessInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PathStroke", ImGui_DrawList draw_list, int col_rgba, optional int flagsIn, optional thicknessIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PathStroke(ImGui_DrawList draw_list, integer col_rgba, optional integer flagsIn, optional number thicknessIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PathStroke(ImGui_DrawList* draw_list, int col_rgba, int* flagsInOptional, double* thicknessInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            integer col_rgba - 
            optional integer flagsIn - 
            optional number thicknessIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PopClipRect</slug>
        <title>ImGui_DrawList_PopClipRect</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PopClipRect(ImGui_DrawList* draw_list)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PopClipRect", ImGui_DrawList draw_list)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PopClipRect(ImGui_DrawList draw_list)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PopClipRect(ImGui_DrawList* draw_list)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         See DrawList_PushClipRect
        </description>        
        <parameters>
            ImGui_DrawList draw_list -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PushClipRect</slug>
        <title>ImGui_DrawList_PushClipRect</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PushClipRect(ImGui_DrawList* draw_list, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, bool* intersect_with_current_clip_rectInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PushClipRect", ImGui_DrawList draw_list, clip_rect_min_x, clip_rect_min_y, clip_rect_max_x, clip_rect_max_y, optional bool intersect_with_current_clip_rectIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PushClipRect(ImGui_DrawList draw_list, number clip_rect_min_x, number clip_rect_min_y, number clip_rect_max_x, number clip_rect_max_y, optional boolean intersect_with_current_clip_rectIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PushClipRect(ImGui_DrawList* draw_list, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, bool* intersect_with_current_clip_rectInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Render-level scissoring. Prefer using higher-level PushClipRect to affect
         logic (hit-testing and widget culling).
        </description>        
        <parameters>
            ImGui_DrawList draw_list - 
            number clip_rect_min_x - 
            number clip_rect_min_y - 
            number clip_rect_max_x - 
            number clip_rect_max_y - 
            optional boolean intersect_with_current_clip_rectIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_DrawList_PushClipRectFullScreen</slug>
        <title>ImGui_DrawList_PushClipRectFullScreen</title>
        <functioncall prog_lang="cpp">void ImGui_DrawList_PushClipRectFullScreen(ImGui_DrawList* draw_list)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_DrawList_PushClipRectFullScreen", ImGui_DrawList draw_list)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_DrawList_PushClipRectFullScreen(ImGui_DrawList draw_list)</functioncall>
        <functioncall prog_lang="python">void ImGui_DrawList_PushClipRectFullScreen(ImGui_DrawList* draw_list)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_DrawList draw_list -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Dummy</slug>
        <title>ImGui_Dummy</title>
        <functioncall prog_lang="cpp">void ImGui_Dummy(ImGui_Context* ctx, double size_w, double size_h)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Dummy", ImGui_Context ctx, size_w, size_h)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Dummy(ImGui_Context ctx, number size_w, number size_h)</functioncall>
        <functioncall prog_lang="python">void ImGui_Dummy(ImGui_Context* ctx, double size_w, double size_h)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Add a dummy item of given size. unlike InvisibleButton, Dummy() won't take the
         mouse click or be navigable into.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number size_w - 
            number size_h -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_End</slug>
        <title>ImGui_End</title>
        <functioncall prog_lang="cpp">void ImGui_End(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_End", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_End(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_End(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Pop window from the stack. See Begin.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndChild</slug>
        <title>ImGui_EndChild</title>
        <functioncall prog_lang="cpp">void ImGui_EndChild(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndChild", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndChild(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndChild(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         See BeginChild.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndChildFrame</slug>
        <title>ImGui_EndChildFrame</title>
        <functioncall prog_lang="cpp">void ImGui_EndChildFrame(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndChildFrame", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndChildFrame(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndChildFrame(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         See BeginChildFrame.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndCombo</slug>
        <title>ImGui_EndCombo</title>
        <functioncall prog_lang="cpp">void ImGui_EndCombo(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndCombo", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndCombo(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndCombo(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only call EndCombo() if BeginCombo returns true!
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndDisabled</slug>
        <title>ImGui_EndDisabled</title>
        <functioncall prog_lang="cpp">void ImGui_EndDisabled(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndDisabled", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndDisabled(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndDisabled(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         See BeginDisabled.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndDragDropSource</slug>
        <title>ImGui_EndDragDropSource</title>
        <functioncall prog_lang="cpp">void ImGui_EndDragDropSource(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndDragDropSource", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndDragDropSource(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndDragDropSource(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only call EndDragDropSource() if BeginDragDropSource returns true!
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndDragDropTarget</slug>
        <title>ImGui_EndDragDropTarget</title>
        <functioncall prog_lang="cpp">void ImGui_EndDragDropTarget(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndDragDropTarget", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndDragDropTarget(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndDragDropTarget(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only call EndDragDropTarget() if BeginDragDropTarget returns true!
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndGroup</slug>
        <title>ImGui_EndGroup</title>
        <functioncall prog_lang="cpp">void ImGui_EndGroup(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndGroup", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndGroup(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndGroup(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Unlock horizontal starting position + capture the whole group bounding box
         into one "item" (so you can use IsItemHovered or layout primitives such as
         SameLine on whole group, etc.).
         
         See BeginGroup.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndListBox</slug>
        <title>ImGui_EndListBox</title>
        <functioncall prog_lang="cpp">void ImGui_EndListBox(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndListBox", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndListBox(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndListBox(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only call EndListBox() if BeginListBox returned true!
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndMenu</slug>
        <title>ImGui_EndMenu</title>
        <functioncall prog_lang="cpp">void ImGui_EndMenu(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndMenu", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndMenu(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndMenu(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only call EndMenu() if BeginMenu returns true!
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndMenuBar</slug>
        <title>ImGui_EndMenuBar</title>
        <functioncall prog_lang="cpp">void ImGui_EndMenuBar(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndMenuBar", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndMenuBar(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndMenuBar(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only call EndMenuBar if BeginMenuBar returns true!
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndPopup</slug>
        <title>ImGui_EndPopup</title>
        <functioncall prog_lang="cpp">void ImGui_EndPopup(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndPopup", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndPopup(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndPopup(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only call EndPopup() if BeginPopup*() returns true!
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndTabBar</slug>
        <title>ImGui_EndTabBar</title>
        <functioncall prog_lang="cpp">void ImGui_EndTabBar(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndTabBar", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndTabBar(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndTabBar(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only call EndTabBar() if BeginTabBar() returns true!
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndTabItem</slug>
        <title>ImGui_EndTabItem</title>
        <functioncall prog_lang="cpp">void ImGui_EndTabItem(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndTabItem", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndTabItem(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndTabItem(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only call EndTabItem() if BeginTabItem() returns true!
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndTable</slug>
        <title>ImGui_EndTable</title>
        <functioncall prog_lang="cpp">void ImGui_EndTable(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndTable", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndTable(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndTable(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only call EndTable() if BeginTable() returns true!
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_EndTooltip</slug>
        <title>ImGui_EndTooltip</title>
        <functioncall prog_lang="cpp">void ImGui_EndTooltip(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_EndTooltip", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_EndTooltip(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_EndTooltip(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only call EndTooltip() if BeginTooltip() returns true.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_FocusedFlags_AnyWindow</slug>
        <title>ImGui_FocusedFlags_AnyWindow</title>
        <functioncall prog_lang="cpp">int ImGui_FocusedFlags_AnyWindow()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_FocusedFlags_AnyWindow")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_FocusedFlags_AnyWindow()</functioncall>
        <functioncall prog_lang="python">int ImGui_FocusedFlags_AnyWindow()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return true if any window is focused.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_FocusedFlags_ChildWindows</slug>
        <title>ImGui_FocusedFlags_ChildWindows</title>
        <functioncall prog_lang="cpp">int ImGui_FocusedFlags_ChildWindows()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_FocusedFlags_ChildWindows")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_FocusedFlags_ChildWindows()</functioncall>
        <functioncall prog_lang="python">int ImGui_FocusedFlags_ChildWindows()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return true if any children of the window is focused.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_FocusedFlags_DockHierarchy</slug>
        <title>ImGui_FocusedFlags_DockHierarchy</title>
        <functioncall prog_lang="cpp">int ImGui_FocusedFlags_DockHierarchy()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_FocusedFlags_DockHierarchy")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_FocusedFlags_DockHierarchy()</functioncall>
        <functioncall prog_lang="python">int ImGui_FocusedFlags_DockHierarchy()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Consider docking hierarchy (treat dockspace host as parent of docked window)
            (when used with _ChildWindows or _RootWindow).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_FocusedFlags_NoPopupHierarchy</slug>
        <title>ImGui_FocusedFlags_NoPopupHierarchy</title>
        <functioncall prog_lang="cpp">int ImGui_FocusedFlags_NoPopupHierarchy()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_FocusedFlags_NoPopupHierarchy")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_FocusedFlags_NoPopupHierarchy()</functioncall>
        <functioncall prog_lang="python">int ImGui_FocusedFlags_NoPopupHierarchy()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Do not consider popup hierarchy (do not treat popup emitter as parent of
            popup) (when used with _ChildWindows or _RootWindow).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_FocusedFlags_None</slug>
        <title>ImGui_FocusedFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_FocusedFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_FocusedFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_FocusedFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_FocusedFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_FocusedFlags_RootAndChildWindows</slug>
        <title>ImGui_FocusedFlags_RootAndChildWindows</title>
        <functioncall prog_lang="cpp">int ImGui_FocusedFlags_RootAndChildWindows()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_FocusedFlags_RootAndChildWindows")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_FocusedFlags_RootAndChildWindows()</functioncall>
        <functioncall prog_lang="python">int ImGui_FocusedFlags_RootAndChildWindows()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         FocusedFlags_RootWindow | FocusedFlags_ChildWindows
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_FocusedFlags_RootWindow</slug>
        <title>ImGui_FocusedFlags_RootWindow</title>
        <functioncall prog_lang="cpp">int ImGui_FocusedFlags_RootWindow()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_FocusedFlags_RootWindow")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_FocusedFlags_RootWindow()</functioncall>
        <functioncall prog_lang="python">int ImGui_FocusedFlags_RootWindow()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Test from root window (top most parent of the current hierarchy).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_FontFlags_Bold</slug>
        <title>ImGui_FontFlags_Bold</title>
        <functioncall prog_lang="cpp">int ImGui_FontFlags_Bold()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_FontFlags_Bold")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_FontFlags_Bold()</functioncall>
        <functioncall prog_lang="python">int ImGui_FontFlags_Bold()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_FontFlags_Italic</slug>
        <title>ImGui_FontFlags_Italic</title>
        <functioncall prog_lang="cpp">int ImGui_FontFlags_Italic()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_FontFlags_Italic")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_FontFlags_Italic()</functioncall>
        <functioncall prog_lang="python">int ImGui_FontFlags_Italic()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_FontFlags_None</slug>
        <title>ImGui_FontFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_FontFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_FontFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_FontFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_FontFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Function_Execute</slug>
        <title>ImGui_Function_Execute</title>
        <functioncall prog_lang="cpp">void ImGui_Function_Execute(ImGui_Function* func)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Function_Execute", ImGui_Function func)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Function_Execute(ImGui_Function func)</functioncall>
        <functioncall prog_lang="python">void ImGui_Function_Execute(ImGui_Function* func)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Function func -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Function_GetValue</slug>
        <title>ImGui_Function_GetValue</title>
        <functioncall prog_lang="cpp">double ImGui_Function_GetValue(ImGui_Function* func, const char* name)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_Function_GetValue", ImGui_Function func, "name")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_Function_GetValue(ImGui_Function func, string name)</functioncall>
        <functioncall prog_lang="python">double ImGui_Function_GetValue(ImGui_Function* func, const char* name)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Function func - 
            string name -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Function_GetValue_Array</slug>
        <title>ImGui_Function_GetValue_Array</title>
        <functioncall prog_lang="cpp">void ImGui_Function_GetValue_Array(ImGui_Function* func, const char* name, reaper_array* values)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Function_GetValue_Array", ImGui_Function func, "name", reaper_array values)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Function_GetValue_Array(ImGui_Function func, string namereaper_array values)</functioncall>
        <functioncall prog_lang="python">void ImGui_Function_GetValue_Array(ImGui_Function* func, const char* name, reaper_array* values)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Copy the values in the function's memory starting at the address stored
         in the given variable into the array.
        </description>        
        <parameters>
            ImGui_Function func - 
            string namereaper_array values -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Function_GetValue_String</slug>
        <title>ImGui_Function_GetValue_String</title>
        <functioncall prog_lang="cpp">void ImGui_Function_GetValue_String(ImGui_Function* func, const char* name, char* valueOutNeedBig, int valueOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Function_GetValue_String", ImGui_Function func, "name", #value)</functioncall>
        <functioncall prog_lang="lua">string value = reaper.ImGui_Function_GetValue_String(ImGui_Function func, string name)</functioncall>
        <functioncall prog_lang="python">void ImGui_Function_GetValue_String(ImGui_Function* func, const char* name, char* valueOutNeedBig, int valueOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Read from a string slot or a named string (when name starts with a `#`).
        </description>        
        <retvals>
            string value - 
        </retvals>        
        <parameters>
            ImGui_Function func - 
            string name -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Function_SetValue</slug>
        <title>ImGui_Function_SetValue</title>
        <functioncall prog_lang="cpp">void ImGui_Function_SetValue(ImGui_Function* func, const char* name, double value)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Function_SetValue", ImGui_Function func, "name", value)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Function_SetValue(ImGui_Function func, string name, number value)</functioncall>
        <functioncall prog_lang="python">void ImGui_Function_SetValue(ImGui_Function* func, const char* name, double value)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Function func - 
            string name - 
            number value -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Function_SetValue_Array</slug>
        <title>ImGui_Function_SetValue_Array</title>
        <functioncall prog_lang="cpp">void ImGui_Function_SetValue_Array(ImGui_Function* func, const char* name, reaper_array* values)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Function_SetValue_Array", ImGui_Function func, "name", reaper_array values)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Function_SetValue_Array(ImGui_Function func, string namereaper_array values)</functioncall>
        <functioncall prog_lang="python">void ImGui_Function_SetValue_Array(ImGui_Function* func, const char* name, reaper_array* values)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Copy the values in the array to the function's memory at the address stored
         in the given variable.
        </description>        
        <parameters>
            ImGui_Function func - 
            string namereaper_array values -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Function_SetValue_String</slug>
        <title>ImGui_Function_SetValue_String</title>
        <functioncall prog_lang="cpp">void ImGui_Function_SetValue_String(ImGui_Function* func, const char* name, const char* value, int value_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Function_SetValue_String", ImGui_Function func, "name", "value")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Function_SetValue_String(ImGui_Function func, string name, string value)</functioncall>
        <functioncall prog_lang="python">void ImGui_Function_SetValue_String(ImGui_Function* func, const char* name, const char* value, int value_sz)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Write to a string slot or a named string (when name starts with a `#`).
        </description>        
        <parameters>
            ImGui_Function func - 
            string name - 
            string value -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetBackgroundDrawList</slug>
        <title>ImGui_GetBackgroundDrawList</title>
        <functioncall prog_lang="cpp">ImGui_DrawList* ImGui_GetBackgroundDrawList(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">ImGui_DrawList extension_api("ImGui_GetBackgroundDrawList", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">ImGui_DrawList reaper.ImGui_GetBackgroundDrawList(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">ImGui_DrawList* ImGui_GetBackgroundDrawList(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         This draw list will be the first rendering one. Useful to quickly draw
         shapes/text behind dear imgui contents.
        </description>        
        <retvals>
            ImGui_DrawList - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetClipboardText</slug>
        <title>ImGui_GetClipboardText</title>
        <functioncall prog_lang="cpp">const char* ImGui_GetClipboardText(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_GetClipboardText", #retval, ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">string retval = reaper.ImGui_GetClipboardText(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">const char* ImGui_GetClipboardText(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            string retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetColor</slug>
        <title>ImGui_GetColor</title>
        <functioncall prog_lang="cpp">int ImGui_GetColor(ImGui_Context* ctx, int idx, double* alpha_mulInOptional)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_GetColor", ImGui_Context ctx, int idx, optional alpha_mulIn)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_GetColor(ImGui_Context ctx, integer idx, optional number alpha_mulIn)</functioncall>
        <functioncall prog_lang="python">int ImGui_GetColor(ImGui_Context* ctx, int idx, double* alpha_mulInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Retrieve given style color with style alpha applied and optional extra alpha
         multiplier, packed as a 32-bit value (RGBA). See Col_* for available style colors.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer idx - 
            optional number alpha_mulIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetColorEx</slug>
        <title>ImGui_GetColorEx</title>
        <functioncall prog_lang="cpp">int ImGui_GetColorEx(ImGui_Context* ctx, int col_rgba)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_GetColorEx", ImGui_Context ctx, int col_rgba)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_GetColorEx(ImGui_Context ctx, integer col_rgba)</functioncall>
        <functioncall prog_lang="python">int ImGui_GetColorEx(ImGui_Context* ctx, int col_rgba)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Retrieve given color with style alpha applied, packed as a 32-bit value (RGBA).
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer col_rgba -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetConfigVar</slug>
        <title>ImGui_GetConfigVar</title>
        <functioncall prog_lang="cpp">double ImGui_GetConfigVar(ImGui_Context* ctx, int var_idx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetConfigVar", ImGui_Context ctx, int var_idx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetConfigVar(ImGui_Context ctx, integer var_idx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetConfigVar(ImGui_Context* ctx, int var_idx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer var_idx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetContentRegionAvail</slug>
        <title>ImGui_GetContentRegionAvail</title>
        <functioncall prog_lang="cpp">void ImGui_GetContentRegionAvail(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetContentRegionAvail", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetContentRegionAvail(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetContentRegionAvail(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         == GetContentRegionMax() - GetCursorPos()
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetContentRegionMax</slug>
        <title>ImGui_GetContentRegionMax</title>
        <functioncall prog_lang="cpp">void ImGui_GetContentRegionMax(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetContentRegionMax", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetContentRegionMax(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetContentRegionMax(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Current content boundaries (typically window boundaries including scrolling,
         or current column boundaries), in windows coordinates.
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetCursorPos</slug>
        <title>ImGui_GetCursorPos</title>
        <functioncall prog_lang="cpp">void ImGui_GetCursorPos(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetCursorPos", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetCursorPos(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetCursorPos(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Cursor position in window
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetCursorPosX</slug>
        <title>ImGui_GetCursorPosX</title>
        <functioncall prog_lang="cpp">double ImGui_GetCursorPosX(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetCursorPosX", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetCursorPosX(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetCursorPosX(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Cursor X position in window
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetCursorPosY</slug>
        <title>ImGui_GetCursorPosY</title>
        <functioncall prog_lang="cpp">double ImGui_GetCursorPosY(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetCursorPosY", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetCursorPosY(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetCursorPosY(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Cursor Y position in window
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetCursorScreenPos</slug>
        <title>ImGui_GetCursorScreenPos</title>
        <functioncall prog_lang="cpp">void ImGui_GetCursorScreenPos(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetCursorScreenPos", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetCursorScreenPos(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetCursorScreenPos(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Cursor position in absolute screen coordinates (useful to work with the DrawList API).
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetCursorStartPos</slug>
        <title>ImGui_GetCursorStartPos</title>
        <functioncall prog_lang="cpp">void ImGui_GetCursorStartPos(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetCursorStartPos", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetCursorStartPos(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetCursorStartPos(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Initial cursor position in window coordinates.
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetDeltaTime</slug>
        <title>ImGui_GetDeltaTime</title>
        <functioncall prog_lang="cpp">double ImGui_GetDeltaTime(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetDeltaTime", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetDeltaTime(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetDeltaTime(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Time elapsed since last frame, in seconds.
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetDragDropPayload</slug>
        <title>ImGui_GetDragDropPayload</title>
        <functioncall prog_lang="cpp">bool ImGui_GetDragDropPayload(ImGui_Context* ctx, char* typeOut, int typeOut_sz, char* payloadOutNeedBig, int payloadOutNeedBig_sz, bool* is_previewOut, bool* is_deliveryOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_GetDragDropPayload", ImGui_Context ctx, #type, #payload, bool &amp;is_preview, bool &amp;is_delivery)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string type, string payload, boolean is_preview, boolean is_delivery = reaper.ImGui_GetDragDropPayload(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_GetDragDropPayload(ImGui_Context* ctx, char* typeOut, int typeOut_sz, char* payloadOutNeedBig, int payloadOutNeedBig_sz, bool* is_previewOut, bool* is_deliveryOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Peek directly into the current payload from anywhere.
        </description>        
        <retvals>
            boolean retval - 
            string type - 
            string payload - 
            boolean is_preview - 
            boolean is_delivery - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetDragDropPayloadFile</slug>
        <title>ImGui_GetDragDropPayloadFile</title>
        <functioncall prog_lang="cpp">bool ImGui_GetDragDropPayloadFile(ImGui_Context* ctx, int index, char* filenameOut, int filenameOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_GetDragDropPayloadFile", ImGui_Context ctx, int index, #filename)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string filename = reaper.ImGui_GetDragDropPayloadFile(ImGui_Context ctx, integer index)</functioncall>
        <functioncall prog_lang="python">bool ImGui_GetDragDropPayloadFile(ImGui_Context* ctx, int index, char* filenameOut, int filenameOut_sz)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get a filename from the list of dropped files.
         Returns false if index is out of bounds.
        </description>        
        <retvals>
            boolean retval - 
            string filename - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer index -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetFont</slug>
        <title>ImGui_GetFont</title>
        <functioncall prog_lang="cpp">ImGui_Font* ImGui_GetFont(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">ImGui_Font extension_api("ImGui_GetFont", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">ImGui_Font reaper.ImGui_GetFont(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">ImGui_Font* ImGui_GetFont(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get the current font
        </description>        
        <retvals>
            ImGui_Font - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetFontSize</slug>
        <title>ImGui_GetFontSize</title>
        <functioncall prog_lang="cpp">double ImGui_GetFontSize(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetFontSize", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetFontSize(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetFontSize(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get current font size (= height in pixels) of current font with current scale
         applied.
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetForegroundDrawList</slug>
        <title>ImGui_GetForegroundDrawList</title>
        <functioncall prog_lang="cpp">ImGui_DrawList* ImGui_GetForegroundDrawList(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">ImGui_DrawList extension_api("ImGui_GetForegroundDrawList", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">ImGui_DrawList reaper.ImGui_GetForegroundDrawList(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">ImGui_DrawList* ImGui_GetForegroundDrawList(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         This draw list will be the last rendered one. Useful to quickly draw
         shapes/text over dear imgui contents.
        </description>        
        <retvals>
            ImGui_DrawList - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetFrameCount</slug>
        <title>ImGui_GetFrameCount</title>
        <functioncall prog_lang="cpp">int ImGui_GetFrameCount(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_GetFrameCount", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_GetFrameCount(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">int ImGui_GetFrameCount(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get global imgui frame count. incremented by 1 every frame.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetFrameHeight</slug>
        <title>ImGui_GetFrameHeight</title>
        <functioncall prog_lang="cpp">double ImGui_GetFrameHeight(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetFrameHeight", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetFrameHeight(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetFrameHeight(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         GetFontSize + StyleVar_FramePadding.y * 2
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetFrameHeightWithSpacing</slug>
        <title>ImGui_GetFrameHeightWithSpacing</title>
        <functioncall prog_lang="cpp">double ImGui_GetFrameHeightWithSpacing(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetFrameHeightWithSpacing", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetFrameHeightWithSpacing(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetFrameHeightWithSpacing(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         GetFontSize + StyleVar_FramePadding.y * 2 + StyleVar_ItemSpacing.y
         (distance in pixels between 2 consecutive lines of framed widgets).
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetFramerate</slug>
        <title>ImGui_GetFramerate</title>
        <functioncall prog_lang="cpp">double ImGui_GetFramerate(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetFramerate", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetFramerate(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetFramerate(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Estimate of application framerate (rolling average over 60 frames, based on
         GetDeltaTime), in frame per second. Solely for convenience.
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetInputQueueCharacter</slug>
        <title>ImGui_GetInputQueueCharacter</title>
        <functioncall prog_lang="cpp">bool ImGui_GetInputQueueCharacter(ImGui_Context* ctx, int idx, int* unicode_charOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_GetInputQueueCharacter", ImGui_Context ctx, int idx, int &amp;unicode_char)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer unicode_char = reaper.ImGui_GetInputQueueCharacter(ImGui_Context ctx, integer idx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_GetInputQueueCharacter(ImGui_Context* ctx, int idx, int* unicode_charOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Read from ImGui's character input queue.
         Call with increasing idx until false is returned.
        </description>        
        <retvals>
            boolean retval - 
            integer unicode_char - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer idx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetItemRectMax</slug>
        <title>ImGui_GetItemRectMax</title>
        <functioncall prog_lang="cpp">void ImGui_GetItemRectMax(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetItemRectMax", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetItemRectMax(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetItemRectMax(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get lower-right bounding rectangle of the last item (screen space)
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetItemRectMin</slug>
        <title>ImGui_GetItemRectMin</title>
        <functioncall prog_lang="cpp">void ImGui_GetItemRectMin(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetItemRectMin", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetItemRectMin(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetItemRectMin(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get upper-left bounding rectangle of the last item (screen space)
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetItemRectSize</slug>
        <title>ImGui_GetItemRectSize</title>
        <functioncall prog_lang="cpp">void ImGui_GetItemRectSize(ImGui_Context* ctx, double* wOut, double* hOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetItemRectSize", ImGui_Context ctx, &amp;w, &amp;h)</functioncall>
        <functioncall prog_lang="lua">number w, number h = reaper.ImGui_GetItemRectSize(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetItemRectSize(ImGui_Context* ctx, double* wOut, double* hOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get size of last item
        </description>        
        <retvals>
            number w - 
            number h - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetKeyDownDuration</slug>
        <title>ImGui_GetKeyDownDuration</title>
        <functioncall prog_lang="cpp">double ImGui_GetKeyDownDuration(ImGui_Context* ctx, int key)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetKeyDownDuration", ImGui_Context ctx, int key)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetKeyDownDuration(ImGui_Context ctx, integer key)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetKeyDownDuration(ImGui_Context* ctx, int key)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Duration the keyboard key has been down (0.0 == just pressed)
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer key -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetKeyMods</slug>
        <title>ImGui_GetKeyMods</title>
        <functioncall prog_lang="cpp">int ImGui_GetKeyMods(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_GetKeyMods", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_GetKeyMods(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">int ImGui_GetKeyMods(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Flags for the Ctrl/Shift/Alt/Super keys. Uses Mod_* values.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetKeyPressedAmount</slug>
        <title>ImGui_GetKeyPressedAmount</title>
        <functioncall prog_lang="cpp">int ImGui_GetKeyPressedAmount(ImGui_Context* ctx, int key, double repeat_delay, double rate)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_GetKeyPressedAmount", ImGui_Context ctx, int key, repeat_delay, rate)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_GetKeyPressedAmount(ImGui_Context ctx, integer key, number repeat_delay, number rate)</functioncall>
        <functioncall prog_lang="python">int ImGui_GetKeyPressedAmount(ImGui_Context* ctx, int key, double repeat_delay, double rate)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Uses provided repeat rate/delay. Return a count, most often 0 or 1 but might
         be &gt;1 if ConfigVar_RepeatRate is small enough that GetDeltaTime &gt; RepeatRate.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer key - 
            number repeat_delay - 
            number rate -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetMainViewport</slug>
        <title>ImGui_GetMainViewport</title>
        <functioncall prog_lang="cpp">ImGui_Viewport* ImGui_GetMainViewport(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">ImGui_Viewport extension_api("ImGui_GetMainViewport", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">ImGui_Viewport reaper.ImGui_GetMainViewport(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">ImGui_Viewport* ImGui_GetMainViewport(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Currently represents REAPER's main window (arrange view).
         WARNING: This may change or be removed in the future.
        </description>        
        <retvals>
            ImGui_Viewport - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetMouseClickedCount</slug>
        <title>ImGui_GetMouseClickedCount</title>
        <functioncall prog_lang="cpp">int ImGui_GetMouseClickedCount(ImGui_Context* ctx, int button)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_GetMouseClickedCount", ImGui_Context ctx, int button)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_GetMouseClickedCount(ImGui_Context ctx, integer button)</functioncall>
        <functioncall prog_lang="python">int ImGui_GetMouseClickedCount(ImGui_Context* ctx, int button)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return the number of successive mouse-clicks at the time where a click happen (otherwise 0).
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer button -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetMouseClickedPos</slug>
        <title>ImGui_GetMouseClickedPos</title>
        <functioncall prog_lang="cpp">void ImGui_GetMouseClickedPos(ImGui_Context* ctx, int button, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetMouseClickedPos", ImGui_Context ctx, int button, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetMouseClickedPos(ImGui_Context ctx, integer button)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetMouseClickedPos(ImGui_Context* ctx, int button, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer button -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetMouseCursor</slug>
        <title>ImGui_GetMouseCursor</title>
        <functioncall prog_lang="cpp">int ImGui_GetMouseCursor(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_GetMouseCursor", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_GetMouseCursor(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">int ImGui_GetMouseCursor(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get desired mouse cursor shape, reset every frame. This is updated during the frame.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetMouseDelta</slug>
        <title>ImGui_GetMouseDelta</title>
        <functioncall prog_lang="cpp">void ImGui_GetMouseDelta(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetMouseDelta", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetMouseDelta(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetMouseDelta(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Mouse delta. Note that this is zero if either current or previous position
         are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have
         a huge delta.
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetMouseDownDuration</slug>
        <title>ImGui_GetMouseDownDuration</title>
        <functioncall prog_lang="cpp">double ImGui_GetMouseDownDuration(ImGui_Context* ctx, int button)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetMouseDownDuration", ImGui_Context ctx, int button)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetMouseDownDuration(ImGui_Context ctx, integer button)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetMouseDownDuration(ImGui_Context* ctx, int button)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Duration the mouse button has been down (0.0 == just clicked)
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer button -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetMouseDragDelta</slug>
        <title>ImGui_GetMouseDragDelta</title>
        <functioncall prog_lang="cpp">void ImGui_GetMouseDragDelta(ImGui_Context* ctx, double* xOut, double* yOut, int* buttonInOptional, double* lock_thresholdInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetMouseDragDelta", ImGui_Context ctx, &amp;x, &amp;y, optional int buttonIn, optional lock_thresholdIn)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetMouseDragDelta(ImGui_Context ctx, number x, number y, optional integer buttonIn, optional number lock_thresholdIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetMouseDragDelta(ImGui_Context* ctx, double* xOut, double* yOut, int* buttonInOptional, double* lock_thresholdInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return the delta from the initial clicking position while the mouse button is
         pressed or was just released. This is locked and return 0.0 until the mouse
         moves past a distance threshold at least once (if lock_threshold &lt; -1.0, uses
         ConfigVar_MouseDragThreshold).
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            number x - 
            number y - 
            optional integer buttonIn - 
            optional number lock_thresholdIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetMousePos</slug>
        <title>ImGui_GetMousePos</title>
        <functioncall prog_lang="cpp">void ImGui_GetMousePos(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetMousePos", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetMousePos(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetMousePos(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetMousePosOnOpeningCurrentPopup</slug>
        <title>ImGui_GetMousePosOnOpeningCurrentPopup</title>
        <functioncall prog_lang="cpp">void ImGui_GetMousePosOnOpeningCurrentPopup(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetMousePosOnOpeningCurrentPopup", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetMousePosOnOpeningCurrentPopup(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetMousePosOnOpeningCurrentPopup(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Retrieve mouse position at the time of opening popup we have BeginPopup()
         into (helper to avoid user backing that value themselves).
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetMouseWheel</slug>
        <title>ImGui_GetMouseWheel</title>
        <functioncall prog_lang="cpp">void ImGui_GetMouseWheel(ImGui_Context* ctx, double* verticalOut, double* horizontalOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetMouseWheel", ImGui_Context ctx, &amp;vertical, &amp;horizontal)</functioncall>
        <functioncall prog_lang="lua">number vertical, number horizontal = reaper.ImGui_GetMouseWheel(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetMouseWheel(ImGui_Context* ctx, double* verticalOut, double* horizontalOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Vertical: 1 unit scrolls about 5 lines text. &gt;0 scrolls Up, &lt;0 scrolls Down.
         Hold SHIFT to turn vertical scroll into horizontal scroll
         
         Horizontal: &gt;0 scrolls Left, &lt;0 scrolls Right.
         Most users don't have a mouse with a horizontal wheel.
        </description>        
        <retvals>
            number vertical - 
            number horizontal - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetScrollMaxX</slug>
        <title>ImGui_GetScrollMaxX</title>
        <functioncall prog_lang="cpp">double ImGui_GetScrollMaxX(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetScrollMaxX", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetScrollMaxX(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetScrollMaxX(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetScrollMaxY</slug>
        <title>ImGui_GetScrollMaxY</title>
        <functioncall prog_lang="cpp">double ImGui_GetScrollMaxY(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetScrollMaxY", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetScrollMaxY(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetScrollMaxY(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetScrollX</slug>
        <title>ImGui_GetScrollX</title>
        <functioncall prog_lang="cpp">double ImGui_GetScrollX(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetScrollX", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetScrollX(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetScrollX(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get scrolling amount [0 .. GetScrollMaxX()]
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetScrollY</slug>
        <title>ImGui_GetScrollY</title>
        <functioncall prog_lang="cpp">double ImGui_GetScrollY(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetScrollY", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetScrollY(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetScrollY(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get scrolling amount [0 .. GetScrollMaxY()]
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetStyleColor</slug>
        <title>ImGui_GetStyleColor</title>
        <functioncall prog_lang="cpp">int ImGui_GetStyleColor(ImGui_Context* ctx, int idx)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_GetStyleColor", ImGui_Context ctx, int idx)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_GetStyleColor(ImGui_Context ctx, integer idx)</functioncall>
        <functioncall prog_lang="python">int ImGui_GetStyleColor(ImGui_Context* ctx, int idx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Retrieve style color as stored in ImGuiStyle structure.
         Use to feed back into PushStyleColor, Otherwise use GetColor to get style color
         with style alpha baked in. See Col_* for available style colors.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer idx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetStyleVar</slug>
        <title>ImGui_GetStyleVar</title>
        <functioncall prog_lang="cpp">void ImGui_GetStyleVar(ImGui_Context* ctx, int var_idx, double* val1Out, double* val2Out)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetStyleVar", ImGui_Context ctx, int var_idx, &amp;val1, &amp;val2)</functioncall>
        <functioncall prog_lang="lua">number val1, number val2 = reaper.ImGui_GetStyleVar(ImGui_Context ctx, integer var_idx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetStyleVar(ImGui_Context* ctx, int var_idx, double* val1Out, double* val2Out)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            number val1 - 
            number val2 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer var_idx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetTextLineHeight</slug>
        <title>ImGui_GetTextLineHeight</title>
        <functioncall prog_lang="cpp">double ImGui_GetTextLineHeight(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetTextLineHeight", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetTextLineHeight(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetTextLineHeight(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Same as GetFontSize
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetTextLineHeightWithSpacing</slug>
        <title>ImGui_GetTextLineHeightWithSpacing</title>
        <functioncall prog_lang="cpp">double ImGui_GetTextLineHeightWithSpacing(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetTextLineHeightWithSpacing", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetTextLineHeightWithSpacing(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetTextLineHeightWithSpacing(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         GetFontSize + StyleVar_ItemSpacing.y
         (distance in pixels between 2 consecutive lines of text).
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetTime</slug>
        <title>ImGui_GetTime</title>
        <functioncall prog_lang="cpp">double ImGui_GetTime(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetTime", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetTime(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetTime(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get global imgui time. Incremented every frame.
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetTreeNodeToLabelSpacing</slug>
        <title>ImGui_GetTreeNodeToLabelSpacing</title>
        <functioncall prog_lang="cpp">double ImGui_GetTreeNodeToLabelSpacing(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetTreeNodeToLabelSpacing", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetTreeNodeToLabelSpacing(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetTreeNodeToLabelSpacing(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Horizontal distance preceding label when using TreeNode*() or Bullet()
         == (GetFontSize + StyleVar_FramePadding.x*2) for a regular unframed TreeNode.
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetVersion</slug>
        <title>ImGui_GetVersion</title>
        <functioncall prog_lang="cpp">void ImGui_GetVersion(char* imgui_versionOut, int imgui_versionOut_sz, int* imgui_version_numOut, char* reaimgui_versionOut, int reaimgui_versionOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetVersion", #imgui_version, int &amp;imgui_version_num, #reaimgui_version)</functioncall>
        <functioncall prog_lang="lua">string imgui_version, integer imgui_version_num, string reaimgui_version = reaper.ImGui_GetVersion()</functioncall>
        <functioncall prog_lang="python">void ImGui_GetVersion(char* imgui_versionOut, int imgui_versionOut_sz, int* imgui_version_numOut, char* reaimgui_versionOut, int reaimgui_versionOut_sz)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            string imgui_version - 
            integer imgui_version_num - 
            string reaimgui_version - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetWindowContentRegionMax</slug>
        <title>ImGui_GetWindowContentRegionMax</title>
        <functioncall prog_lang="cpp">void ImGui_GetWindowContentRegionMax(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetWindowContentRegionMax", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetWindowContentRegionMax(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetWindowContentRegionMax(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Content boundaries max (roughly (0,0)+Size-Scroll) where Size can be
         overridden with SetNextWindowContentSize, in window coordinates.
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetWindowContentRegionMin</slug>
        <title>ImGui_GetWindowContentRegionMin</title>
        <functioncall prog_lang="cpp">void ImGui_GetWindowContentRegionMin(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetWindowContentRegionMin", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetWindowContentRegionMin(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetWindowContentRegionMin(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Content boundaries min (roughly (0,0)-Scroll), in window coordinates.
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetWindowDockID</slug>
        <title>ImGui_GetWindowDockID</title>
        <functioncall prog_lang="cpp">int ImGui_GetWindowDockID(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_GetWindowDockID", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_GetWindowDockID(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">int ImGui_GetWindowDockID(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetWindowDpiScale</slug>
        <title>ImGui_GetWindowDpiScale</title>
        <functioncall prog_lang="cpp">double ImGui_GetWindowDpiScale(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetWindowDpiScale", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetWindowDpiScale(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetWindowDpiScale(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get DPI scale currently associated to the current window's viewport
         (1.0 = 96 DPI).
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetWindowDrawList</slug>
        <title>ImGui_GetWindowDrawList</title>
        <functioncall prog_lang="cpp">ImGui_DrawList* ImGui_GetWindowDrawList(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">ImGui_DrawList extension_api("ImGui_GetWindowDrawList", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">ImGui_DrawList reaper.ImGui_GetWindowDrawList(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">ImGui_DrawList* ImGui_GetWindowDrawList(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         The draw list associated to the current window, to append your own drawing primitives
        </description>        
        <retvals>
            ImGui_DrawList - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetWindowHeight</slug>
        <title>ImGui_GetWindowHeight</title>
        <functioncall prog_lang="cpp">double ImGui_GetWindowHeight(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetWindowHeight", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetWindowHeight(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetWindowHeight(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get current window height (shortcut for (select(2, GetWindowSize())).
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetWindowPos</slug>
        <title>ImGui_GetWindowPos</title>
        <functioncall prog_lang="cpp">void ImGui_GetWindowPos(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetWindowPos", ImGui_Context ctx, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_GetWindowPos(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetWindowPos(ImGui_Context* ctx, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get current window position in screen space (useful if you want to do your own
         drawing via the DrawList API).
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetWindowSize</slug>
        <title>ImGui_GetWindowSize</title>
        <functioncall prog_lang="cpp">void ImGui_GetWindowSize(ImGui_Context* ctx, double* wOut, double* hOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_GetWindowSize", ImGui_Context ctx, &amp;w, &amp;h)</functioncall>
        <functioncall prog_lang="lua">number w, number h = reaper.ImGui_GetWindowSize(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_GetWindowSize(ImGui_Context* ctx, double* wOut, double* hOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get current window size
        </description>        
        <retvals>
            number w - 
            number h - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetWindowViewport</slug>
        <title>ImGui_GetWindowViewport</title>
        <functioncall prog_lang="cpp">ImGui_Viewport* ImGui_GetWindowViewport(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">ImGui_Viewport extension_api("ImGui_GetWindowViewport", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">ImGui_Viewport reaper.ImGui_GetWindowViewport(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">ImGui_Viewport* ImGui_GetWindowViewport(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get viewport currently associated to the current window.
        </description>        
        <retvals>
            ImGui_Viewport - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_GetWindowWidth</slug>
        <title>ImGui_GetWindowWidth</title>
        <functioncall prog_lang="cpp">double ImGui_GetWindowWidth(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">double extension_api("ImGui_GetWindowWidth", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.ImGui_GetWindowWidth(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">double ImGui_GetWindowWidth(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Get current window width (shortcut for (select(1, GetWindowSize())).
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_AllowWhenBlockedByActiveItem</slug>
        <title>ImGui_HoveredFlags_AllowWhenBlockedByActiveItem</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_AllowWhenBlockedByActiveItem")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return true even if an active item is blocking access to this item/window.
           Useful for Drag and Drop patterns.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_AllowWhenBlockedByPopup</slug>
        <title>ImGui_HoveredFlags_AllowWhenBlockedByPopup</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_AllowWhenBlockedByPopup()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_AllowWhenBlockedByPopup")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_AllowWhenBlockedByPopup()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_AllowWhenBlockedByPopup()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return true even if a popup window is normally blocking access to this item/window.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_AllowWhenDisabled</slug>
        <title>ImGui_HoveredFlags_AllowWhenDisabled</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_AllowWhenDisabled()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_AllowWhenDisabled")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_AllowWhenDisabled()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_AllowWhenDisabled()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         IsItemHovered only: Return true even if the item is disabled.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_AllowWhenOverlapped</slug>
        <title>ImGui_HoveredFlags_AllowWhenOverlapped</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_AllowWhenOverlapped()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_AllowWhenOverlapped")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_AllowWhenOverlapped()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_AllowWhenOverlapped()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         IsItemHovered only: Return true even if the position is obstructed or
           overlapped by another window.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_AnyWindow</slug>
        <title>ImGui_HoveredFlags_AnyWindow</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_AnyWindow()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_AnyWindow")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_AnyWindow()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_AnyWindow()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         IsWindowHovered only: Return true if any window is hovered.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_ChildWindows</slug>
        <title>ImGui_HoveredFlags_ChildWindows</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_ChildWindows()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_ChildWindows")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_ChildWindows()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_ChildWindows()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         IsWindowHovered only: Return true if any children of the window is hovered.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_DelayNormal</slug>
        <title>ImGui_HoveredFlags_DelayNormal</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_DelayNormal()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_DelayNormal")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_DelayNormal()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_DelayNormal()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return true after ConfigVar_HoverDelayNormal elapsed (~0.30 sec)
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_DelayShort</slug>
        <title>ImGui_HoveredFlags_DelayShort</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_DelayShort()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_DelayShort")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_DelayShort()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_DelayShort()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return true after ConfigVar_HoverDelayShort elapsed (~0.10 sec)
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_DockHierarchy</slug>
        <title>ImGui_HoveredFlags_DockHierarchy</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_DockHierarchy()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_DockHierarchy")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_DockHierarchy()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_DockHierarchy()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         IsWindowHovered only: Consider docking hierarchy (treat dockspace host as
           parent of docked window) (when used with _ChildWindows or _RootWindow).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_NoNavOverride</slug>
        <title>ImGui_HoveredFlags_NoNavOverride</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_NoNavOverride()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_NoNavOverride")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_NoNavOverride()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_NoNavOverride()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable using gamepad/keyboard navigation state when active, always query mouse.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_NoPopupHierarchy</slug>
        <title>ImGui_HoveredFlags_NoPopupHierarchy</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_NoPopupHierarchy()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_NoPopupHierarchy")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_NoPopupHierarchy()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_NoPopupHierarchy()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         IsWindowHovered only: Do not consider popup hierarchy (do not treat popup
           emitter as parent of popup) (when used with _ChildWindows or _RootWindow).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_NoSharedDelay</slug>
        <title>ImGui_HoveredFlags_NoSharedDelay</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_NoSharedDelay()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_NoSharedDelay")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_NoSharedDelay()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_NoSharedDelay()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable shared delay system where moving from one item to the next keeps
           the previous timer for a short time (standard for tooltips with long delays
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_None</slug>
        <title>ImGui_HoveredFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return true if directly over the item/window, not obstructed by another
           window, not obstructed by an active popup or modal blocking inputs under them.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_RectOnly</slug>
        <title>ImGui_HoveredFlags_RectOnly</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_RectOnly()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_RectOnly")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_RectOnly()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_RectOnly()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         HoveredFlags_AllowWhenBlockedByPopup |
           HoveredFlags_AllowWhenBlockedByActiveItem | HoveredFlags_AllowWhenOverlapped
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_RootAndChildWindows</slug>
        <title>ImGui_HoveredFlags_RootAndChildWindows</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_RootAndChildWindows()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_RootAndChildWindows")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_RootAndChildWindows()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_RootAndChildWindows()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         HoveredFlags_RootWindow | HoveredFlags_ChildWindows
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_HoveredFlags_RootWindow</slug>
        <title>ImGui_HoveredFlags_RootWindow</title>
        <functioncall prog_lang="cpp">int ImGui_HoveredFlags_RootWindow()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_HoveredFlags_RootWindow")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_HoveredFlags_RootWindow()</functioncall>
        <functioncall prog_lang="python">int ImGui_HoveredFlags_RootWindow()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         IsWindowHovered only: Test from root window (top most parent of the current hierarchy).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Image</slug>
        <title>ImGui_Image</title>
        <functioncall prog_lang="cpp">void ImGui_Image(ImGui_Context* ctx, ImGui_Image* img, double size_w, double size_h, double* uv0_xInOptional, double* uv0_yInOptional, double* uv1_xInOptional, double* uv1_yInOptional, int* tint_col_rgbaInOptional, int* border_col_rgbaInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Image", ImGui_Context ctx, ImGui_Image img, size_w, size_h, optional uv0_xIn, optional uv0_yIn, optional uv1_xIn, optional uv1_yIn, optional int tint_col_rgbaIn, optional int border_col_rgbaIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Image(ImGui_Context ctxImGui_Image img, number size_w, number size_h, optional number uv0_xIn, optional number uv0_yIn, optional number uv1_xIn, optional number uv1_yIn, optional integer tint_col_rgbaIn, optional integer border_col_rgbaIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_Image(ImGui_Context* ctx, ImGui_Image* img, double size_w, double size_h, double* uv0_xInOptional, double* uv0_yInOptional, double* uv1_xInOptional, double* uv1_yInOptional, int* tint_col_rgbaInOptional, int* border_col_rgbaInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctxImGui_Image img - 
            number size_w - 
            number size_h - 
            optional number uv0_xIn - 
            optional number uv0_yIn - 
            optional number uv1_xIn - 
            optional number uv1_yIn - 
            optional integer tint_col_rgbaIn - 
            optional integer border_col_rgbaIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ImageButton</slug>
        <title>ImGui_ImageButton</title>
        <functioncall prog_lang="cpp">bool ImGui_ImageButton(ImGui_Context* ctx, const char* str_id, ImGui_Image* img, double size_w, double size_h, double* uv0_xInOptional, double* uv0_yInOptional, double* uv1_xInOptional, double* uv1_yInOptional, int* bg_col_rgbaInOptional, int* tint_col_rgbaInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_ImageButton", ImGui_Context ctx, "str_id", ImGui_Image img, size_w, size_h, optional uv0_xIn, optional uv0_yIn, optional uv1_xIn, optional uv1_yIn, optional int bg_col_rgbaIn, optional int tint_col_rgbaIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_ImageButton(ImGui_Context ctx, string str_idImGui_Image img, number size_w, number size_h, optional number uv0_xIn, optional number uv0_yIn, optional number uv1_xIn, optional number uv1_yIn, optional integer bg_col_rgbaIn, optional integer tint_col_rgbaIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_ImageButton(ImGui_Context* ctx, const char* str_id, ImGui_Image* img, double size_w, double size_h, double* uv0_xInOptional, double* uv0_yInOptional, double* uv1_xInOptional, double* uv1_yInOptional, int* bg_col_rgbaInOptional, int* tint_col_rgbaInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string str_idImGui_Image img - 
            number size_w - 
            number size_h - 
            optional number uv0_xIn - 
            optional number uv0_yIn - 
            optional number uv1_xIn - 
            optional number uv1_yIn - 
            optional integer bg_col_rgbaIn - 
            optional integer tint_col_rgbaIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ImageSet_Add</slug>
        <title>ImGui_ImageSet_Add</title>
        <functioncall prog_lang="cpp">void ImGui_ImageSet_Add(ImGui_ImageSet* set, double scale, ImGui_Image* img)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ImageSet_Add", ImGui_ImageSet set, scale, ImGui_Image img)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_ImageSet_Add(ImGui_ImageSet set, number scaleImGui_Image img)</functioncall>
        <functioncall prog_lang="python">void ImGui_ImageSet_Add(ImGui_ImageSet* set, double scale, ImGui_Image* img)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         'img' cannot be another ImageSet.
        </description>        
        <parameters>
            ImGui_ImageSet set - 
            number scaleImGui_Image img -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Image_GetSize</slug>
        <title>ImGui_Image_GetSize</title>
        <functioncall prog_lang="cpp">void ImGui_Image_GetSize(ImGui_Image* img, double* wOut, double* hOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Image_GetSize", ImGui_Image img, &amp;w, &amp;h)</functioncall>
        <functioncall prog_lang="lua">number w, number h = reaper.ImGui_Image_GetSize(ImGui_Image img)</functioncall>
        <functioncall prog_lang="python">void ImGui_Image_GetSize(ImGui_Image* img, double* wOut, double* hOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            number w - 
            number h - 
        </retvals>        
        <parameters>
            ImGui_Image img -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Indent</slug>
        <title>ImGui_Indent</title>
        <functioncall prog_lang="cpp">void ImGui_Indent(ImGui_Context* ctx, double* indent_wInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Indent", ImGui_Context ctx, optional indent_wIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Indent(ImGui_Context ctx, optional number indent_wIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_Indent(ImGui_Context* ctx, double* indent_wInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Move content position toward the right, by 'indent_w', or
         StyleVar_IndentSpacing if 'indent_w' &lt;= 0. See Unindent.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional number indent_wIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputDouble</slug>
        <title>ImGui_InputDouble</title>
        <functioncall prog_lang="cpp">bool ImGui_InputDouble(ImGui_Context* ctx, const char* label, double* vInOut, double* stepInOptional, double* step_fastInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputDouble", ImGui_Context ctx, "label", &amp;v, optional stepIn, optional step_fastIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v = reaper.ImGui_InputDouble(ImGui_Context ctx, string label, number v, optional number stepIn, optional number step_fastIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputDouble(ImGui_Context* ctx, const char* label, double* vInOut, double* stepInOptional, double* step_fastInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v - 
            optional number stepIn - 
            optional number step_fastIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputDouble2</slug>
        <title>ImGui_InputDouble2</title>
        <functioncall prog_lang="cpp">bool ImGui_InputDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputDouble2", ImGui_Context ctx, "label", &amp;v1, &amp;v2, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v1, number v2 = reaper.ImGui_InputDouble2(ImGui_Context ctx, string label, number v1, number v2, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v1 - 
            number v2 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v1 - 
            number v2 - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputDouble3</slug>
        <title>ImGui_InputDouble3</title>
        <functioncall prog_lang="cpp">bool ImGui_InputDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputDouble3", ImGui_Context ctx, "label", &amp;v1, &amp;v2, &amp;v3, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v1, number v2, number v3 = reaper.ImGui_InputDouble3(ImGui_Context ctx, string label, number v1, number v2, number v3, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v1 - 
            number v2 - 
            number v3 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v1 - 
            number v2 - 
            number v3 - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputDouble4</slug>
        <title>ImGui_InputDouble4</title>
        <functioncall prog_lang="cpp">bool ImGui_InputDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputDouble4", ImGui_Context ctx, "label", &amp;v1, &amp;v2, &amp;v3, &amp;v4, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v1, number v2, number v3, number v4 = reaper.ImGui_InputDouble4(ImGui_Context ctx, string label, number v1, number v2, number v3, number v4, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v1 - 
            number v2 - 
            number v3 - 
            number v4 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v1 - 
            number v2 - 
            number v3 - 
            number v4 - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputDoubleN</slug>
        <title>ImGui_InputDoubleN</title>
        <functioncall prog_lang="cpp">bool ImGui_InputDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double* stepInOptional, double* step_fastInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputDoubleN", ImGui_Context ctx, "label", reaper_array values, optional stepIn, optional step_fastIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_InputDoubleN(ImGui_Context ctx, string labelreaper_array values, optional number stepIn, optional number step_fastIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double* stepInOptional, double* step_fastInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string labelreaper_array values - 
            optional number stepIn - 
            optional number step_fastIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputInt</slug>
        <title>ImGui_InputInt</title>
        <functioncall prog_lang="cpp">bool ImGui_InputInt(ImGui_Context* ctx, const char* label, int* vInOut, int* stepInOptional, int* step_fastInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputInt", ImGui_Context ctx, "label", int &amp;v, optional int stepIn, optional int step_fastIn, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v = reaper.ImGui_InputInt(ImGui_Context ctx, string label, integer v, optional integer stepIn, optional integer step_fastIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputInt(ImGui_Context* ctx, const char* label, int* vInOut, int* stepInOptional, int* step_fastInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v - 
            optional integer stepIn - 
            optional integer step_fastIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputInt2</slug>
        <title>ImGui_InputInt2</title>
        <functioncall prog_lang="cpp">bool ImGui_InputInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputInt2", ImGui_Context ctx, "label", int &amp;v1, int &amp;v2, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v1, integer v2 = reaper.ImGui_InputInt2(ImGui_Context ctx, string label, integer v1, integer v2, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v1 - 
            integer v2 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v1 - 
            integer v2 - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputInt3</slug>
        <title>ImGui_InputInt3</title>
        <functioncall prog_lang="cpp">bool ImGui_InputInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputInt3", ImGui_Context ctx, "label", int &amp;v1, int &amp;v2, int &amp;v3, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v1, integer v2, integer v3 = reaper.ImGui_InputInt3(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputInt4</slug>
        <title>ImGui_InputInt4</title>
        <functioncall prog_lang="cpp">bool ImGui_InputInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputInt4", ImGui_Context ctx, "label", int &amp;v1, int &amp;v2, int &amp;v3, int &amp;v4, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v1, integer v2, integer v3, integer v4 = reaper.ImGui_InputInt4(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v4, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
            integer v4 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
            integer v4 - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputText</slug>
        <title>ImGui_InputText</title>
        <functioncall prog_lang="cpp">bool ImGui_InputText(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, int* flagsInOptional, ImGui_Function* callbackInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputText", ImGui_Context ctx, "label", #buf, optional int flagsIn, ImGui_Function callbackIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.ImGui_InputText(ImGui_Context ctx, string label, string buf, optional integer flagsIn, ImGui_Function callbackIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputText(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, int* flagsInOptional, ImGui_Function* callbackInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            string buf - 
            optional integer flagsIn - 
            ImGui_Function callbackIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_AllowTabInput</slug>
        <title>ImGui_InputTextFlags_AllowTabInput</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_AllowTabInput()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_AllowTabInput")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_AllowTabInput()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_AllowTabInput()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Pressing TAB input a '\t' character into the text field.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_AlwaysOverwrite</slug>
        <title>ImGui_InputTextFlags_AlwaysOverwrite</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_AlwaysOverwrite()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_AlwaysOverwrite")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_AlwaysOverwrite()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_AlwaysOverwrite()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Overwrite mode.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_AutoSelectAll</slug>
        <title>ImGui_InputTextFlags_AutoSelectAll</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_AutoSelectAll()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_AutoSelectAll")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_AutoSelectAll()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_AutoSelectAll()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Select entire text when first taking mouse focus.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_CallbackAlways</slug>
        <title>ImGui_InputTextFlags_CallbackAlways</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_CallbackAlways()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_CallbackAlways")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_CallbackAlways()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_CallbackAlways()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Callback on each iteration. User code may query cursor position, modify text buffer.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_CallbackCharFilter</slug>
        <title>ImGui_InputTextFlags_CallbackCharFilter</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_CallbackCharFilter()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_CallbackCharFilter")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_CallbackCharFilter()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_CallbackCharFilter()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Callback on character inputs to replace or discard them.
            Modify 'EventChar' to replace or 'EventChar = 0' to discard.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_CallbackCompletion</slug>
        <title>ImGui_InputTextFlags_CallbackCompletion</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_CallbackCompletion()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_CallbackCompletion")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_CallbackCompletion()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_CallbackCompletion()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Callback on pressing TAB (for completion handling).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_CallbackEdit</slug>
        <title>ImGui_InputTextFlags_CallbackEdit</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_CallbackEdit()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_CallbackEdit")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_CallbackEdit()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_CallbackEdit()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Callback on any edit (note that InputText() already returns true on edit,
            the callback is useful mainly to manipulate the underlying buffer while
            focus is active).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_CallbackHistory</slug>
        <title>ImGui_InputTextFlags_CallbackHistory</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_CallbackHistory()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_CallbackHistory")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_CallbackHistory()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_CallbackHistory()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Callback on pressing Up/Down arrows (for history handling).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_CharsDecimal</slug>
        <title>ImGui_InputTextFlags_CharsDecimal</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_CharsDecimal()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_CharsDecimal")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_CharsDecimal()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_CharsDecimal()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Allow 0123456789.+-*/.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_CharsHexadecimal</slug>
        <title>ImGui_InputTextFlags_CharsHexadecimal</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_CharsHexadecimal()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_CharsHexadecimal")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_CharsHexadecimal()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_CharsHexadecimal()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Allow 0123456789ABCDEFabcdef.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_CharsNoBlank</slug>
        <title>ImGui_InputTextFlags_CharsNoBlank</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_CharsNoBlank()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_CharsNoBlank")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_CharsNoBlank()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_CharsNoBlank()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Filter out spaces, tabs.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_CharsScientific</slug>
        <title>ImGui_InputTextFlags_CharsScientific</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_CharsScientific()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_CharsScientific")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_CharsScientific()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_CharsScientific()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Allow 0123456789.+-*/eE (Scientific notation input).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_CharsUppercase</slug>
        <title>ImGui_InputTextFlags_CharsUppercase</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_CharsUppercase()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_CharsUppercase")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_CharsUppercase()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_CharsUppercase()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Turn a..z into A..Z.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_CtrlEnterForNewLine</slug>
        <title>ImGui_InputTextFlags_CtrlEnterForNewLine</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_CtrlEnterForNewLine()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_CtrlEnterForNewLine")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_CtrlEnterForNewLine()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_CtrlEnterForNewLine()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter
            (default is opposite: unfocus with Ctrl+Enter, add line with Enter).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_EnterReturnsTrue</slug>
        <title>ImGui_InputTextFlags_EnterReturnsTrue</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_EnterReturnsTrue()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_EnterReturnsTrue")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_EnterReturnsTrue()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_EnterReturnsTrue()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return 'true' when Enter is pressed (as opposed to every time the value was
            modified). Consider looking at the IsItemDeactivatedAfterEdit function.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_EscapeClearsAll</slug>
        <title>ImGui_InputTextFlags_EscapeClearsAll</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_EscapeClearsAll()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_EscapeClearsAll")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_EscapeClearsAll()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_EscapeClearsAll()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Escape key clears content if not empty, and deactivate otherwise
            (constrast to default behavior of Escape to revert).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_NoHorizontalScroll</slug>
        <title>ImGui_InputTextFlags_NoHorizontalScroll</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_NoHorizontalScroll()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_NoHorizontalScroll")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_NoHorizontalScroll()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_NoHorizontalScroll()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable following the cursor horizontally.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_NoUndoRedo</slug>
        <title>ImGui_InputTextFlags_NoUndoRedo</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_NoUndoRedo()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_NoUndoRedo")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_NoUndoRedo()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_NoUndoRedo()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable undo/redo. Note that input text owns the text data while active.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_None</slug>
        <title>ImGui_InputTextFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_Password</slug>
        <title>ImGui_InputTextFlags_Password</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_Password()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_Password")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_Password()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_Password()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Password mode, display all characters as '*'.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextFlags_ReadOnly</slug>
        <title>ImGui_InputTextFlags_ReadOnly</title>
        <functioncall prog_lang="cpp">int ImGui_InputTextFlags_ReadOnly()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_InputTextFlags_ReadOnly")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_InputTextFlags_ReadOnly()</functioncall>
        <functioncall prog_lang="python">int ImGui_InputTextFlags_ReadOnly()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Read-only mode.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextMultiline</slug>
        <title>ImGui_InputTextMultiline</title>
        <functioncall prog_lang="cpp">bool ImGui_InputTextMultiline(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, double* size_wInOptional, double* size_hInOptional, int* flagsInOptional, ImGui_Function* callbackInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputTextMultiline", ImGui_Context ctx, "label", #buf, optional size_wIn, optional size_hIn, optional int flagsIn, ImGui_Function callbackIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.ImGui_InputTextMultiline(ImGui_Context ctx, string label, string buf, optional number size_wIn, optional number size_hIn, optional integer flagsIn, ImGui_Function callbackIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputTextMultiline(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, double* size_wInOptional, double* size_hInOptional, int* flagsInOptional, ImGui_Function* callbackInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            string buf - 
            optional number size_wIn - 
            optional number size_hIn - 
            optional integer flagsIn - 
            ImGui_Function callbackIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InputTextWithHint</slug>
        <title>ImGui_InputTextWithHint</title>
        <functioncall prog_lang="cpp">bool ImGui_InputTextWithHint(ImGui_Context* ctx, const char* label, const char* hint, char* bufInOutNeedBig, int bufInOutNeedBig_sz, int* flagsInOptional, ImGui_Function* callbackInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InputTextWithHint", ImGui_Context ctx, "label", "hint", #buf, optional int flagsIn, ImGui_Function callbackIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.ImGui_InputTextWithHint(ImGui_Context ctx, string label, string hint, string buf, optional integer flagsIn, ImGui_Function callbackIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InputTextWithHint(ImGui_Context* ctx, const char* label, const char* hint, char* bufInOutNeedBig, int bufInOutNeedBig_sz, int* flagsInOptional, ImGui_Function* callbackInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            string hint - 
            string buf - 
            optional integer flagsIn - 
            ImGui_Function callbackIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_InvisibleButton</slug>
        <title>ImGui_InvisibleButton</title>
        <functioncall prog_lang="cpp">bool ImGui_InvisibleButton(ImGui_Context* ctx, const char* str_id, double size_w, double size_h, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_InvisibleButton", ImGui_Context ctx, "str_id", size_w, size_h, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_InvisibleButton(ImGui_Context ctx, string str_id, number size_w, number size_h, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_InvisibleButton(ImGui_Context* ctx, const char* str_id, double size_w, double size_h, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Flexible button behavior without the visuals, frequently useful to build
         custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.).
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string str_id - 
            number size_w - 
            number size_h - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsAnyItemActive</slug>
        <title>ImGui_IsAnyItemActive</title>
        <functioncall prog_lang="cpp">bool ImGui_IsAnyItemActive(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsAnyItemActive", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsAnyItemActive(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsAnyItemActive(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsAnyItemFocused</slug>
        <title>ImGui_IsAnyItemFocused</title>
        <functioncall prog_lang="cpp">bool ImGui_IsAnyItemFocused(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsAnyItemFocused", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsAnyItemFocused(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsAnyItemFocused(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsAnyItemHovered</slug>
        <title>ImGui_IsAnyItemHovered</title>
        <functioncall prog_lang="cpp">bool ImGui_IsAnyItemHovered(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsAnyItemHovered", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsAnyItemHovered(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsAnyItemHovered(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsAnyMouseDown</slug>
        <title>ImGui_IsAnyMouseDown</title>
        <functioncall prog_lang="cpp">bool ImGui_IsAnyMouseDown(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsAnyMouseDown", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsAnyMouseDown(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsAnyMouseDown(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is any mouse button held?
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsItemActivated</slug>
        <title>ImGui_IsItemActivated</title>
        <functioncall prog_lang="cpp">bool ImGui_IsItemActivated(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsItemActivated", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsItemActivated(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsItemActivated(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Was the last item just made active (item was previously inactive).
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsItemActive</slug>
        <title>ImGui_IsItemActive</title>
        <functioncall prog_lang="cpp">bool ImGui_IsItemActive(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsItemActive", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsItemActive(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsItemActive(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is the last item active? (e.g. button being held, text field being edited.
         This will continuously return true while holding mouse button on an item.
         Items that don't interact will always return false.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsItemClicked</slug>
        <title>ImGui_IsItemClicked</title>
        <functioncall prog_lang="cpp">bool ImGui_IsItemClicked(ImGui_Context* ctx, int* mouse_buttonInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsItemClicked", ImGui_Context ctx, optional int mouse_buttonIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsItemClicked(ImGui_Context ctx, optional integer mouse_buttonIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsItemClicked(ImGui_Context* ctx, int* mouse_buttonInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is the last item clicked? (e.g. button/node just clicked on)
         == IsMouseClicked(mouse_button) &amp;&amp; IsItemHovered().
         
         This is NOT equivalent to the behavior of e.g. Button.
         Most widgets have specific reactions based on mouse-up/down state, mouse position etc.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional integer mouse_buttonIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsItemDeactivated</slug>
        <title>ImGui_IsItemDeactivated</title>
        <functioncall prog_lang="cpp">bool ImGui_IsItemDeactivated(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsItemDeactivated", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsItemDeactivated(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsItemDeactivated(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Was the last item just made inactive (item was previously active).
         Useful for Undo/Redo patterns with widgets that require continuous editing.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsItemDeactivatedAfterEdit</slug>
        <title>ImGui_IsItemDeactivatedAfterEdit</title>
        <functioncall prog_lang="cpp">bool ImGui_IsItemDeactivatedAfterEdit(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsItemDeactivatedAfterEdit", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsItemDeactivatedAfterEdit(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsItemDeactivatedAfterEdit(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Was the last item just made inactive and made a value change when it was
         active? (e.g. Slider/Drag moved).
         
         Useful for Undo/Redo patterns with widgets that require continuous editing. Note
         that you may get false positives (some widgets such as Combo/ListBox/Selectable
         will return true even when clicking an already selected item).
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsItemEdited</slug>
        <title>ImGui_IsItemEdited</title>
        <functioncall prog_lang="cpp">bool ImGui_IsItemEdited(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsItemEdited", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsItemEdited(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsItemEdited(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Did the last item modify its underlying value this frame? or was pressed?
         This is generally the same as the "bool" return value of many widgets.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsItemFocused</slug>
        <title>ImGui_IsItemFocused</title>
        <functioncall prog_lang="cpp">bool ImGui_IsItemFocused(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsItemFocused", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsItemFocused(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsItemFocused(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is the last item focused for keyboard/gamepad navigation?
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsItemHovered</slug>
        <title>ImGui_IsItemHovered</title>
        <functioncall prog_lang="cpp">bool ImGui_IsItemHovered(ImGui_Context* ctx, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsItemHovered", ImGui_Context ctx, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsItemHovered(ImGui_Context ctx, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsItemHovered(ImGui_Context* ctx, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is the last item hovered? (and usable, aka not blocked by a popup, etc.).
         See HoveredFlags_* for more options.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsItemToggledOpen</slug>
        <title>ImGui_IsItemToggledOpen</title>
        <functioncall prog_lang="cpp">bool ImGui_IsItemToggledOpen(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsItemToggledOpen", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsItemToggledOpen(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsItemToggledOpen(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Was the last item open state toggled? Set by TreeNode.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsItemVisible</slug>
        <title>ImGui_IsItemVisible</title>
        <functioncall prog_lang="cpp">bool ImGui_IsItemVisible(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsItemVisible", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsItemVisible(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsItemVisible(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is the last item visible? (items may be out of sight because of clipping/scrolling)
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsKeyDown</slug>
        <title>ImGui_IsKeyDown</title>
        <functioncall prog_lang="cpp">bool ImGui_IsKeyDown(ImGui_Context* ctx, int key)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsKeyDown", ImGui_Context ctx, int key)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsKeyDown(ImGui_Context ctx, integer key)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsKeyDown(ImGui_Context* ctx, int key)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is key being held.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer key -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsKeyPressed</slug>
        <title>ImGui_IsKeyPressed</title>
        <functioncall prog_lang="cpp">bool ImGui_IsKeyPressed(ImGui_Context* ctx, int key, bool* repeatInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsKeyPressed", ImGui_Context ctx, int key, optional bool repeatIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsKeyPressed(ImGui_Context ctx, integer key, optional boolean repeatIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsKeyPressed(ImGui_Context* ctx, int key, bool* repeatInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Was key pressed (went from !Down to Down)?
         If repeat=true, uses ConfigVar_KeyRepeatDelay / ConfigVar_KeyRepeatRate.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer key - 
            optional boolean repeatIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsKeyReleased</slug>
        <title>ImGui_IsKeyReleased</title>
        <functioncall prog_lang="cpp">bool ImGui_IsKeyReleased(ImGui_Context* ctx, int key)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsKeyReleased", ImGui_Context ctx, int key)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsKeyReleased(ImGui_Context ctx, integer key)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsKeyReleased(ImGui_Context* ctx, int key)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Was key released (went from Down to !Down)?
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer key -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsMouseClicked</slug>
        <title>ImGui_IsMouseClicked</title>
        <functioncall prog_lang="cpp">bool ImGui_IsMouseClicked(ImGui_Context* ctx, int button, bool* repeatInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsMouseClicked", ImGui_Context ctx, int button, optional bool repeatIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsMouseClicked(ImGui_Context ctx, integer button, optional boolean repeatIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsMouseClicked(ImGui_Context* ctx, int button, bool* repeatInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Did mouse button clicked? (went from !Down to Down).
         Same as GetMouseClickedCount() == 1.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer button - 
            optional boolean repeatIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsMouseDoubleClicked</slug>
        <title>ImGui_IsMouseDoubleClicked</title>
        <functioncall prog_lang="cpp">bool ImGui_IsMouseDoubleClicked(ImGui_Context* ctx, int button)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsMouseDoubleClicked", ImGui_Context ctx, int button)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsMouseDoubleClicked(ImGui_Context ctx, integer button)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsMouseDoubleClicked(ImGui_Context* ctx, int button)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Did mouse button double-clicked? Same as GetMouseClickedCount() == 2.
         (Note that a double-click will also report IsMouseClicked() == true)
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer button -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsMouseDown</slug>
        <title>ImGui_IsMouseDown</title>
        <functioncall prog_lang="cpp">bool ImGui_IsMouseDown(ImGui_Context* ctx, int button)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsMouseDown", ImGui_Context ctx, int button)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsMouseDown(ImGui_Context ctx, integer button)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsMouseDown(ImGui_Context* ctx, int button)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is mouse button held?
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer button -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsMouseDragging</slug>
        <title>ImGui_IsMouseDragging</title>
        <functioncall prog_lang="cpp">bool ImGui_IsMouseDragging(ImGui_Context* ctx, int button, double* lock_thresholdInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsMouseDragging", ImGui_Context ctx, int button, optional lock_thresholdIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsMouseDragging(ImGui_Context ctx, integer button, optional number lock_thresholdIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsMouseDragging(ImGui_Context* ctx, int button, double* lock_thresholdInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is mouse dragging? (if lock_threshold &lt; -1.0, uses ConfigVar_MouseDragThreshold)
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer button - 
            optional number lock_thresholdIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsMouseHoveringRect</slug>
        <title>ImGui_IsMouseHoveringRect</title>
        <functioncall prog_lang="cpp">bool ImGui_IsMouseHoveringRect(ImGui_Context* ctx, double r_min_x, double r_min_y, double r_max_x, double r_max_y, bool* clipInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsMouseHoveringRect", ImGui_Context ctx, r_min_x, r_min_y, r_max_x, r_max_y, optional bool clipIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsMouseHoveringRect(ImGui_Context ctx, number r_min_x, number r_min_y, number r_max_x, number r_max_y, optional boolean clipIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsMouseHoveringRect(ImGui_Context* ctx, double r_min_x, double r_min_y, double r_max_x, double r_max_y, bool* clipInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is mouse hovering given bounding rect (in screen space).
         Clipped by current clipping settings, but disregarding of other consideration
         of focus/window ordering/popup-block.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            number r_min_x - 
            number r_min_y - 
            number r_max_x - 
            number r_max_y - 
            optional boolean clipIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsMousePosValid</slug>
        <title>ImGui_IsMousePosValid</title>
        <functioncall prog_lang="cpp">bool ImGui_IsMousePosValid(ImGui_Context* ctx, double* mouse_pos_xInOptional, double* mouse_pos_yInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsMousePosValid", ImGui_Context ctx, optional mouse_pos_xIn, optional mouse_pos_yIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsMousePosValid(ImGui_Context ctx, optional number mouse_pos_xIn, optional number mouse_pos_yIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsMousePosValid(ImGui_Context* ctx, double* mouse_pos_xInOptional, double* mouse_pos_yInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional number mouse_pos_xIn - 
            optional number mouse_pos_yIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsMouseReleased</slug>
        <title>ImGui_IsMouseReleased</title>
        <functioncall prog_lang="cpp">bool ImGui_IsMouseReleased(ImGui_Context* ctx, int button)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsMouseReleased", ImGui_Context ctx, int button)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsMouseReleased(ImGui_Context ctx, integer button)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsMouseReleased(ImGui_Context* ctx, int button)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Did mouse button released? (went from Down to !Down)
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer button -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsPopupOpen</slug>
        <title>ImGui_IsPopupOpen</title>
        <functioncall prog_lang="cpp">bool ImGui_IsPopupOpen(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsPopupOpen", ImGui_Context ctx, "str_id", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsPopupOpen(ImGui_Context ctx, string str_id, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsPopupOpen(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return true if the popup is open at the current BeginPopup level of the
         popup stack.
         
         - With PopupFlags_AnyPopupId: return true if any popup is open at the current
           BeginPopup() level of the popup stack.
         - With PopupFlags_AnyPopupId + PopupFlags_AnyPopupLevel: return true if any
           popup is open.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string str_id - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsRectVisible</slug>
        <title>ImGui_IsRectVisible</title>
        <functioncall prog_lang="cpp">bool ImGui_IsRectVisible(ImGui_Context* ctx, double size_w, double size_h)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsRectVisible", ImGui_Context ctx, size_w, size_h)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsRectVisible(ImGui_Context ctx, number size_w, number size_h)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsRectVisible(ImGui_Context* ctx, double size_w, double size_h)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Test if rectangle (of given size, starting from cursor position) is
         visible / not clipped.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            number size_w - 
            number size_h -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsRectVisibleEx</slug>
        <title>ImGui_IsRectVisibleEx</title>
        <functioncall prog_lang="cpp">bool ImGui_IsRectVisibleEx(ImGui_Context* ctx, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsRectVisibleEx", ImGui_Context ctx, rect_min_x, rect_min_y, rect_max_x, rect_max_y)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsRectVisibleEx(ImGui_Context ctx, number rect_min_x, number rect_min_y, number rect_max_x, number rect_max_y)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsRectVisibleEx(ImGui_Context* ctx, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Test if rectangle (in screen space) is visible / not clipped. to perform
         coarse clipping on user's side.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            number rect_min_x - 
            number rect_min_y - 
            number rect_max_x - 
            number rect_max_y -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsWindowAppearing</slug>
        <title>ImGui_IsWindowAppearing</title>
        <functioncall prog_lang="cpp">bool ImGui_IsWindowAppearing(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsWindowAppearing", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsWindowAppearing(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsWindowAppearing(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Use after Begin/BeginPopup/BeginPopupModal to tell if a window just opened.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsWindowDocked</slug>
        <title>ImGui_IsWindowDocked</title>
        <functioncall prog_lang="cpp">bool ImGui_IsWindowDocked(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsWindowDocked", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsWindowDocked(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsWindowDocked(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is current window docked into another window or a REAPER docker?
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsWindowFocused</slug>
        <title>ImGui_IsWindowFocused</title>
        <functioncall prog_lang="cpp">bool ImGui_IsWindowFocused(ImGui_Context* ctx, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsWindowFocused", ImGui_Context ctx, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsWindowFocused(ImGui_Context ctx, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsWindowFocused(ImGui_Context* ctx, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is current window focused? or its root/child, depending on flags.
         See flags for options.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_IsWindowHovered</slug>
        <title>ImGui_IsWindowHovered</title>
        <functioncall prog_lang="cpp">bool ImGui_IsWindowHovered(ImGui_Context* ctx, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_IsWindowHovered", ImGui_Context ctx, optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_IsWindowHovered(ImGui_Context ctx, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_IsWindowHovered(ImGui_Context* ctx, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Is current window hovered (and typically: not blocked by a popup/modal)?
         See flags for options.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_0</slug>
        <title>ImGui_Key_0</title>
        <functioncall prog_lang="cpp">int ImGui_Key_0()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_0")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_0()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_0()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_1</slug>
        <title>ImGui_Key_1</title>
        <functioncall prog_lang="cpp">int ImGui_Key_1()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_1")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_1()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_1()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_2</slug>
        <title>ImGui_Key_2</title>
        <functioncall prog_lang="cpp">int ImGui_Key_2()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_2")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_2()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_2()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_3</slug>
        <title>ImGui_Key_3</title>
        <functioncall prog_lang="cpp">int ImGui_Key_3()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_3")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_3()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_3()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_4</slug>
        <title>ImGui_Key_4</title>
        <functioncall prog_lang="cpp">int ImGui_Key_4()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_4")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_4()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_4()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_5</slug>
        <title>ImGui_Key_5</title>
        <functioncall prog_lang="cpp">int ImGui_Key_5()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_5")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_5()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_5()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_6</slug>
        <title>ImGui_Key_6</title>
        <functioncall prog_lang="cpp">int ImGui_Key_6()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_6")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_6()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_6()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_7</slug>
        <title>ImGui_Key_7</title>
        <functioncall prog_lang="cpp">int ImGui_Key_7()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_7")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_7()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_7()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_8</slug>
        <title>ImGui_Key_8</title>
        <functioncall prog_lang="cpp">int ImGui_Key_8()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_8")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_8()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_8()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_9</slug>
        <title>ImGui_Key_9</title>
        <functioncall prog_lang="cpp">int ImGui_Key_9()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_9")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_9()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_9()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_A</slug>
        <title>ImGui_Key_A</title>
        <functioncall prog_lang="cpp">int ImGui_Key_A()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_A")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_A()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_A()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Apostrophe</slug>
        <title>ImGui_Key_Apostrophe</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Apostrophe()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Apostrophe")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Apostrophe()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Apostrophe()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         '
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_B</slug>
        <title>ImGui_Key_B</title>
        <functioncall prog_lang="cpp">int ImGui_Key_B()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_B")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_B()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_B()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Backslash</slug>
        <title>ImGui_Key_Backslash</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Backslash()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Backslash")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Backslash()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Backslash()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         \
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Backspace</slug>
        <title>ImGui_Key_Backspace</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Backspace()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Backspace")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Backspace()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Backspace()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_C</slug>
        <title>ImGui_Key_C</title>
        <functioncall prog_lang="cpp">int ImGui_Key_C()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_C")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_C()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_C()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_CapsLock</slug>
        <title>ImGui_Key_CapsLock</title>
        <functioncall prog_lang="cpp">int ImGui_Key_CapsLock()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_CapsLock")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_CapsLock()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_CapsLock()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Comma</slug>
        <title>ImGui_Key_Comma</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Comma()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Comma")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Comma()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Comma()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ,
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_D</slug>
        <title>ImGui_Key_D</title>
        <functioncall prog_lang="cpp">int ImGui_Key_D()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_D")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_D()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_D()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Delete</slug>
        <title>ImGui_Key_Delete</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Delete()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Delete")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Delete()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Delete()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_DownArrow</slug>
        <title>ImGui_Key_DownArrow</title>
        <functioncall prog_lang="cpp">int ImGui_Key_DownArrow()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_DownArrow")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_DownArrow()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_DownArrow()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_E</slug>
        <title>ImGui_Key_E</title>
        <functioncall prog_lang="cpp">int ImGui_Key_E()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_E")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_E()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_E()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_End</slug>
        <title>ImGui_Key_End</title>
        <functioncall prog_lang="cpp">int ImGui_Key_End()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_End")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_End()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_End()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Enter</slug>
        <title>ImGui_Key_Enter</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Enter()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Enter")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Enter()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Enter()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Equal</slug>
        <title>ImGui_Key_Equal</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Equal()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Equal")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Equal()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Equal()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         =
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Escape</slug>
        <title>ImGui_Key_Escape</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Escape()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Escape")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Escape()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Escape()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F</slug>
        <title>ImGui_Key_F</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F1</slug>
        <title>ImGui_Key_F1</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F1()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F1")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F1()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F1()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F10</slug>
        <title>ImGui_Key_F10</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F10()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F10")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F10()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F10()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F11</slug>
        <title>ImGui_Key_F11</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F11()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F11")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F11()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F11()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F12</slug>
        <title>ImGui_Key_F12</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F12()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F12")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F12()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F12()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F2</slug>
        <title>ImGui_Key_F2</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F2()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F2")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F2()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F2()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F3</slug>
        <title>ImGui_Key_F3</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F3()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F3")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F3()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F3()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F4</slug>
        <title>ImGui_Key_F4</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F4()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F4")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F4()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F4()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F5</slug>
        <title>ImGui_Key_F5</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F5()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F5")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F5()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F5()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F6</slug>
        <title>ImGui_Key_F6</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F6()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F6")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F6()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F6()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F7</slug>
        <title>ImGui_Key_F7</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F7()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F7")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F7()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F7()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F8</slug>
        <title>ImGui_Key_F8</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F8()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F8")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F8()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F8()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_F9</slug>
        <title>ImGui_Key_F9</title>
        <functioncall prog_lang="cpp">int ImGui_Key_F9()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_F9")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_F9()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_F9()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_G</slug>
        <title>ImGui_Key_G</title>
        <functioncall prog_lang="cpp">int ImGui_Key_G()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_G")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_G()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_G()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_GraveAccent</slug>
        <title>ImGui_Key_GraveAccent</title>
        <functioncall prog_lang="cpp">int ImGui_Key_GraveAccent()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_GraveAccent")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_GraveAccent()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_GraveAccent()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         `
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_H</slug>
        <title>ImGui_Key_H</title>
        <functioncall prog_lang="cpp">int ImGui_Key_H()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_H")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_H()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_H()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Home</slug>
        <title>ImGui_Key_Home</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Home()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Home")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Home()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Home()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_I</slug>
        <title>ImGui_Key_I</title>
        <functioncall prog_lang="cpp">int ImGui_Key_I()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_I")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_I()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_I()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Insert</slug>
        <title>ImGui_Key_Insert</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Insert()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Insert")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Insert()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Insert()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_J</slug>
        <title>ImGui_Key_J</title>
        <functioncall prog_lang="cpp">int ImGui_Key_J()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_J")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_J()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_J()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_K</slug>
        <title>ImGui_Key_K</title>
        <functioncall prog_lang="cpp">int ImGui_Key_K()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_K")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_K()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_K()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Keypad0</slug>
        <title>ImGui_Key_Keypad0</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Keypad0()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Keypad0")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Keypad0()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Keypad0()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Keypad1</slug>
        <title>ImGui_Key_Keypad1</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Keypad1()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Keypad1")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Keypad1()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Keypad1()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Keypad2</slug>
        <title>ImGui_Key_Keypad2</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Keypad2()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Keypad2")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Keypad2()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Keypad2()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Keypad3</slug>
        <title>ImGui_Key_Keypad3</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Keypad3()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Keypad3")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Keypad3()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Keypad3()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Keypad4</slug>
        <title>ImGui_Key_Keypad4</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Keypad4()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Keypad4")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Keypad4()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Keypad4()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Keypad5</slug>
        <title>ImGui_Key_Keypad5</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Keypad5()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Keypad5")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Keypad5()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Keypad5()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Keypad6</slug>
        <title>ImGui_Key_Keypad6</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Keypad6()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Keypad6")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Keypad6()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Keypad6()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Keypad7</slug>
        <title>ImGui_Key_Keypad7</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Keypad7()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Keypad7")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Keypad7()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Keypad7()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Keypad8</slug>
        <title>ImGui_Key_Keypad8</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Keypad8()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Keypad8")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Keypad8()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Keypad8()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Keypad9</slug>
        <title>ImGui_Key_Keypad9</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Keypad9()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Keypad9")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Keypad9()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Keypad9()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_KeypadAdd</slug>
        <title>ImGui_Key_KeypadAdd</title>
        <functioncall prog_lang="cpp">int ImGui_Key_KeypadAdd()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_KeypadAdd")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_KeypadAdd()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_KeypadAdd()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_KeypadDecimal</slug>
        <title>ImGui_Key_KeypadDecimal</title>
        <functioncall prog_lang="cpp">int ImGui_Key_KeypadDecimal()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_KeypadDecimal")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_KeypadDecimal()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_KeypadDecimal()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_KeypadDivide</slug>
        <title>ImGui_Key_KeypadDivide</title>
        <functioncall prog_lang="cpp">int ImGui_Key_KeypadDivide()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_KeypadDivide")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_KeypadDivide()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_KeypadDivide()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_KeypadEnter</slug>
        <title>ImGui_Key_KeypadEnter</title>
        <functioncall prog_lang="cpp">int ImGui_Key_KeypadEnter()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_KeypadEnter")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_KeypadEnter()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_KeypadEnter()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_KeypadEqual</slug>
        <title>ImGui_Key_KeypadEqual</title>
        <functioncall prog_lang="cpp">int ImGui_Key_KeypadEqual()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_KeypadEqual")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_KeypadEqual()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_KeypadEqual()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_KeypadMultiply</slug>
        <title>ImGui_Key_KeypadMultiply</title>
        <functioncall prog_lang="cpp">int ImGui_Key_KeypadMultiply()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_KeypadMultiply")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_KeypadMultiply()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_KeypadMultiply()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_KeypadSubtract</slug>
        <title>ImGui_Key_KeypadSubtract</title>
        <functioncall prog_lang="cpp">int ImGui_Key_KeypadSubtract()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_KeypadSubtract")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_KeypadSubtract()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_KeypadSubtract()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_L</slug>
        <title>ImGui_Key_L</title>
        <functioncall prog_lang="cpp">int ImGui_Key_L()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_L")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_L()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_L()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_LeftAlt</slug>
        <title>ImGui_Key_LeftAlt</title>
        <functioncall prog_lang="cpp">int ImGui_Key_LeftAlt()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_LeftAlt")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_LeftAlt()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_LeftAlt()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_LeftArrow</slug>
        <title>ImGui_Key_LeftArrow</title>
        <functioncall prog_lang="cpp">int ImGui_Key_LeftArrow()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_LeftArrow")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_LeftArrow()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_LeftArrow()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_LeftBracket</slug>
        <title>ImGui_Key_LeftBracket</title>
        <functioncall prog_lang="cpp">int ImGui_Key_LeftBracket()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_LeftBracket")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_LeftBracket()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_LeftBracket()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         [
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_LeftCtrl</slug>
        <title>ImGui_Key_LeftCtrl</title>
        <functioncall prog_lang="cpp">int ImGui_Key_LeftCtrl()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_LeftCtrl")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_LeftCtrl()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_LeftCtrl()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_LeftShift</slug>
        <title>ImGui_Key_LeftShift</title>
        <functioncall prog_lang="cpp">int ImGui_Key_LeftShift()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_LeftShift")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_LeftShift()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_LeftShift()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_LeftSuper</slug>
        <title>ImGui_Key_LeftSuper</title>
        <functioncall prog_lang="cpp">int ImGui_Key_LeftSuper()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_LeftSuper")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_LeftSuper()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_LeftSuper()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_M</slug>
        <title>ImGui_Key_M</title>
        <functioncall prog_lang="cpp">int ImGui_Key_M()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_M")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_M()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_M()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Menu</slug>
        <title>ImGui_Key_Menu</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Menu()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Menu")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Menu()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Menu()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Minus</slug>
        <title>ImGui_Key_Minus</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Minus()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Minus")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Minus()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Minus()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         -
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_MouseLeft</slug>
        <title>ImGui_Key_MouseLeft</title>
        <functioncall prog_lang="cpp">int ImGui_Key_MouseLeft()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_MouseLeft")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_MouseLeft()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_MouseLeft()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_MouseMiddle</slug>
        <title>ImGui_Key_MouseMiddle</title>
        <functioncall prog_lang="cpp">int ImGui_Key_MouseMiddle()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_MouseMiddle")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_MouseMiddle()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_MouseMiddle()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_MouseRight</slug>
        <title>ImGui_Key_MouseRight</title>
        <functioncall prog_lang="cpp">int ImGui_Key_MouseRight()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_MouseRight")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_MouseRight()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_MouseRight()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_MouseWheelX</slug>
        <title>ImGui_Key_MouseWheelX</title>
        <functioncall prog_lang="cpp">int ImGui_Key_MouseWheelX()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_MouseWheelX")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_MouseWheelX()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_MouseWheelX()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_MouseWheelY</slug>
        <title>ImGui_Key_MouseWheelY</title>
        <functioncall prog_lang="cpp">int ImGui_Key_MouseWheelY()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_MouseWheelY")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_MouseWheelY()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_MouseWheelY()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_MouseX1</slug>
        <title>ImGui_Key_MouseX1</title>
        <functioncall prog_lang="cpp">int ImGui_Key_MouseX1()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_MouseX1")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_MouseX1()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_MouseX1()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_MouseX2</slug>
        <title>ImGui_Key_MouseX2</title>
        <functioncall prog_lang="cpp">int ImGui_Key_MouseX2()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_MouseX2")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_MouseX2()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_MouseX2()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_N</slug>
        <title>ImGui_Key_N</title>
        <functioncall prog_lang="cpp">int ImGui_Key_N()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_N")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_N()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_N()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_NumLock</slug>
        <title>ImGui_Key_NumLock</title>
        <functioncall prog_lang="cpp">int ImGui_Key_NumLock()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_NumLock")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_NumLock()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_NumLock()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_O</slug>
        <title>ImGui_Key_O</title>
        <functioncall prog_lang="cpp">int ImGui_Key_O()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_O")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_O()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_O()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_P</slug>
        <title>ImGui_Key_P</title>
        <functioncall prog_lang="cpp">int ImGui_Key_P()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_P")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_P()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_P()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_PageDown</slug>
        <title>ImGui_Key_PageDown</title>
        <functioncall prog_lang="cpp">int ImGui_Key_PageDown()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_PageDown")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_PageDown()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_PageDown()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_PageUp</slug>
        <title>ImGui_Key_PageUp</title>
        <functioncall prog_lang="cpp">int ImGui_Key_PageUp()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_PageUp")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_PageUp()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_PageUp()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Pause</slug>
        <title>ImGui_Key_Pause</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Pause()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Pause")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Pause()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Pause()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Period</slug>
        <title>ImGui_Key_Period</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Period()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Period")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Period()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Period()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         .
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_PrintScreen</slug>
        <title>ImGui_Key_PrintScreen</title>
        <functioncall prog_lang="cpp">int ImGui_Key_PrintScreen()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_PrintScreen")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_PrintScreen()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_PrintScreen()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Q</slug>
        <title>ImGui_Key_Q</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Q()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Q")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Q()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Q()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_R</slug>
        <title>ImGui_Key_R</title>
        <functioncall prog_lang="cpp">int ImGui_Key_R()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_R")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_R()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_R()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_RightAlt</slug>
        <title>ImGui_Key_RightAlt</title>
        <functioncall prog_lang="cpp">int ImGui_Key_RightAlt()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_RightAlt")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_RightAlt()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_RightAlt()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_RightArrow</slug>
        <title>ImGui_Key_RightArrow</title>
        <functioncall prog_lang="cpp">int ImGui_Key_RightArrow()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_RightArrow")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_RightArrow()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_RightArrow()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_RightBracket</slug>
        <title>ImGui_Key_RightBracket</title>
        <functioncall prog_lang="cpp">int ImGui_Key_RightBracket()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_RightBracket")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_RightBracket()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_RightBracket()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ]
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_RightCtrl</slug>
        <title>ImGui_Key_RightCtrl</title>
        <functioncall prog_lang="cpp">int ImGui_Key_RightCtrl()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_RightCtrl")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_RightCtrl()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_RightCtrl()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_RightShift</slug>
        <title>ImGui_Key_RightShift</title>
        <functioncall prog_lang="cpp">int ImGui_Key_RightShift()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_RightShift")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_RightShift()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_RightShift()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_RightSuper</slug>
        <title>ImGui_Key_RightSuper</title>
        <functioncall prog_lang="cpp">int ImGui_Key_RightSuper()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_RightSuper")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_RightSuper()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_RightSuper()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_S</slug>
        <title>ImGui_Key_S</title>
        <functioncall prog_lang="cpp">int ImGui_Key_S()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_S")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_S()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_S()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_ScrollLock</slug>
        <title>ImGui_Key_ScrollLock</title>
        <functioncall prog_lang="cpp">int ImGui_Key_ScrollLock()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_ScrollLock")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_ScrollLock()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_ScrollLock()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Semicolon</slug>
        <title>ImGui_Key_Semicolon</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Semicolon()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Semicolon")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Semicolon()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Semicolon()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         ;
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Slash</slug>
        <title>ImGui_Key_Slash</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Slash()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Slash")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Slash()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Slash()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         /
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Space</slug>
        <title>ImGui_Key_Space</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Space()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Space")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Space()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Space()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_T</slug>
        <title>ImGui_Key_T</title>
        <functioncall prog_lang="cpp">int ImGui_Key_T()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_T")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_T()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_T()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Tab</slug>
        <title>ImGui_Key_Tab</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Tab()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Tab")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Tab()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Tab()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_U</slug>
        <title>ImGui_Key_U</title>
        <functioncall prog_lang="cpp">int ImGui_Key_U()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_U")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_U()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_U()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_UpArrow</slug>
        <title>ImGui_Key_UpArrow</title>
        <functioncall prog_lang="cpp">int ImGui_Key_UpArrow()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_UpArrow")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_UpArrow()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_UpArrow()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_V</slug>
        <title>ImGui_Key_V</title>
        <functioncall prog_lang="cpp">int ImGui_Key_V()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_V")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_V()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_V()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_W</slug>
        <title>ImGui_Key_W</title>
        <functioncall prog_lang="cpp">int ImGui_Key_W()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_W")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_W()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_W()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_X</slug>
        <title>ImGui_Key_X</title>
        <functioncall prog_lang="cpp">int ImGui_Key_X()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_X")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_X()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_X()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Y</slug>
        <title>ImGui_Key_Y</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Y()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Y")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Y()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Y()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Key_Z</slug>
        <title>ImGui_Key_Z</title>
        <functioncall prog_lang="cpp">int ImGui_Key_Z()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Key_Z")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Key_Z()</functioncall>
        <functioncall prog_lang="python">int ImGui_Key_Z()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_LabelText</slug>
        <title>ImGui_LabelText</title>
        <functioncall prog_lang="cpp">void ImGui_LabelText(ImGui_Context* ctx, const char* label, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_LabelText", ImGui_Context ctx, "label", "text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_LabelText(ImGui_Context ctx, string label, string text)</functioncall>
        <functioncall prog_lang="python">void ImGui_LabelText(ImGui_Context* ctx, const char* label, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Display text+label aligned the same way as value+label widgets
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ListBox</slug>
        <title>ImGui_ListBox</title>
        <functioncall prog_lang="cpp">bool ImGui_ListBox(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, int* height_in_itemsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_ListBox", ImGui_Context ctx, "label", int &amp;current_item, "items", optional int height_in_itemsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer current_item = reaper.ImGui_ListBox(ImGui_Context ctx, string label, integer current_item, string items, optional integer height_in_itemsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_ListBox(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, int* height_in_itemsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         This is an helper over BeginListBox/EndListBox for convenience purpose.
         
         Each item must be null-terminated (requires REAPER v6.44 or newer for EEL and Lua).
        </description>        
        <retvals>
            boolean retval - 
            integer current_item - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer current_item - 
            string items - 
            optional integer height_in_itemsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ListClipper_Begin</slug>
        <title>ImGui_ListClipper_Begin</title>
        <functioncall prog_lang="cpp">void ImGui_ListClipper_Begin(ImGui_ListClipper* clipper, int items_count, double* items_heightInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ListClipper_Begin", ImGui_ListClipper clipper, int items_count, optional items_heightIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_ListClipper_Begin(ImGui_ListClipper clipper, integer items_count, optional number items_heightIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_ListClipper_Begin(ImGui_ListClipper* clipper, int items_count, double* items_heightInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         - items_count: Use INT_MAX if you don't know how many items you have
         (in which case the cursor won't be advanced in the final step)
         - items_height: Use -1.0 to be calculated automatically on first step.
           Otherwise pass in the distance between your items, typically
           GetTextLineHeightWithSpacing or GetFrameHeightWithSpacing.
        </description>        
        <parameters>
            ImGui_ListClipper clipper - 
            integer items_count - 
            optional number items_heightIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ListClipper_End</slug>
        <title>ImGui_ListClipper_End</title>
        <functioncall prog_lang="cpp">void ImGui_ListClipper_End(ImGui_ListClipper* clipper)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ListClipper_End", ImGui_ListClipper clipper)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_ListClipper_End(ImGui_ListClipper clipper)</functioncall>
        <functioncall prog_lang="python">void ImGui_ListClipper_End(ImGui_ListClipper* clipper)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Automatically called on the last call of ListClipper_Step that returns false.
        </description>        
        <parameters>
            ImGui_ListClipper clipper -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ListClipper_ForceDisplayRangeByIndices</slug>
        <title>ImGui_ListClipper_ForceDisplayRangeByIndices</title>
        <functioncall prog_lang="cpp">void ImGui_ListClipper_ForceDisplayRangeByIndices(ImGui_ListClipper* clipper, int item_min, int item_max)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ListClipper_ForceDisplayRangeByIndices", ImGui_ListClipper clipper, int item_min, int item_max)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_ListClipper_ForceDisplayRangeByIndices(ImGui_ListClipper clipper, integer item_min, integer item_max)</functioncall>
        <functioncall prog_lang="python">void ImGui_ListClipper_ForceDisplayRangeByIndices(ImGui_ListClipper* clipper, int item_min, int item_max)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Call ListClipper_ForceDisplayRangeByIndices before first call to
         ListClipper_Step if you need a range of items to be displayed regardless of
         visibility.
         
         item_max is exclusive e.g. use (42, 42+1) to make item 42 always visible BUT due
         to alignment/padding of certain items it is likely that an extra item may be
         included on either end of the display range.
        </description>        
        <parameters>
            ImGui_ListClipper clipper - 
            integer item_min - 
            integer item_max -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ListClipper_GetDisplayRange</slug>
        <title>ImGui_ListClipper_GetDisplayRange</title>
        <functioncall prog_lang="cpp">void ImGui_ListClipper_GetDisplayRange(ImGui_ListClipper* clipper, int* display_startOut, int* display_endOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ListClipper_GetDisplayRange", ImGui_ListClipper clipper, int &amp;display_start, int &amp;display_end)</functioncall>
        <functioncall prog_lang="lua">integer display_start, integer display_end = reaper.ImGui_ListClipper_GetDisplayRange(ImGui_ListClipper clipper)</functioncall>
        <functioncall prog_lang="python">void ImGui_ListClipper_GetDisplayRange(ImGui_ListClipper* clipper, int* display_startOut, int* display_endOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer display_start - 
            integer display_end - 
        </retvals>        
        <parameters>
            ImGui_ListClipper clipper -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ListClipper_Step</slug>
        <title>ImGui_ListClipper_Step</title>
        <functioncall prog_lang="cpp">bool ImGui_ListClipper_Step(ImGui_ListClipper* clipper)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_ListClipper_Step", ImGui_ListClipper clipper)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_ListClipper_Step(ImGui_ListClipper clipper)</functioncall>
        <functioncall prog_lang="python">bool ImGui_ListClipper_Step(ImGui_ListClipper* clipper)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Call until it returns false. The display_start/display_end fields from
         ListClipper_GetDisplayRange will be set and you can process/draw those items.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_ListClipper clipper -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_LogFinish</slug>
        <title>ImGui_LogFinish</title>
        <functioncall prog_lang="cpp">void ImGui_LogFinish(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_LogFinish", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_LogFinish(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_LogFinish(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Stop logging (close file, etc.)
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_LogText</slug>
        <title>ImGui_LogText</title>
        <functioncall prog_lang="cpp">void ImGui_LogText(ImGui_Context* ctx, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_LogText", ImGui_Context ctx, "text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_LogText(ImGui_Context ctx, string text)</functioncall>
        <functioncall prog_lang="python">void ImGui_LogText(ImGui_Context* ctx, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Pass text data straight to log (without being displayed)
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_LogToClipboard</slug>
        <title>ImGui_LogToClipboard</title>
        <functioncall prog_lang="cpp">void ImGui_LogToClipboard(ImGui_Context* ctx, int* auto_open_depthInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_LogToClipboard", ImGui_Context ctx, optional int auto_open_depthIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_LogToClipboard(ImGui_Context ctx, optional integer auto_open_depthIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_LogToClipboard(ImGui_Context* ctx, int* auto_open_depthInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Start logging all text output from the interface to the OS clipboard.
         See also SetClipboardText.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional integer auto_open_depthIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_LogToFile</slug>
        <title>ImGui_LogToFile</title>
        <functioncall prog_lang="cpp">void ImGui_LogToFile(ImGui_Context* ctx, int* auto_open_depthInOptional, const char* filenameInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_LogToFile", ImGui_Context ctx, optional int auto_open_depthIn, optional "filenameIn")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_LogToFile(ImGui_Context ctx, optional integer auto_open_depthIn, optional string filenameIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_LogToFile(ImGui_Context* ctx, int* auto_open_depthInOptional, const char* filenameInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Start logging all text output from the interface to a file.
         The data is saved to $resource_path/imgui_log.txt if filename is nil.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional integer auto_open_depthIn - 
            optional string filenameIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_LogToTTY</slug>
        <title>ImGui_LogToTTY</title>
        <functioncall prog_lang="cpp">void ImGui_LogToTTY(ImGui_Context* ctx, int* auto_open_depthInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_LogToTTY", ImGui_Context ctx, optional int auto_open_depthIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_LogToTTY(ImGui_Context ctx, optional integer auto_open_depthIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_LogToTTY(ImGui_Context* ctx, int* auto_open_depthInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Start logging all text output from the interface to the TTY (stdout).
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional integer auto_open_depthIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MenuItem</slug>
        <title>ImGui_MenuItem</title>
        <functioncall prog_lang="cpp">bool ImGui_MenuItem(ImGui_Context* ctx, const char* label, const char* shortcutInOptional, bool* p_selectedInOutOptional, bool* enabledInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_MenuItem", ImGui_Context ctx, "label", optional "shortcutIn", optional bool &amp;p_selected, optional bool enabledIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, optional boolean p_selected = reaper.ImGui_MenuItem(ImGui_Context ctx, string label, optional string shortcutIn, optional boolean p_selected, optional boolean enabledIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_MenuItem(ImGui_Context* ctx, const char* label, const char* shortcutInOptional, bool* p_selectedInOutOptional, bool* enabledInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return true when activated. Shortcuts are displayed for convenience but not
         processed by ImGui at the moment. Toggle state is written to 'selected' when
         provided.
        </description>        
        <retvals>
            boolean retval - 
            optional boolean p_selected - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            optional string shortcutIn - 
            optional boolean p_selected - 
            optional boolean enabledIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Mod_Alt</slug>
        <title>ImGui_Mod_Alt</title>
        <functioncall prog_lang="cpp">int ImGui_Mod_Alt()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Mod_Alt")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Mod_Alt()</functioncall>
        <functioncall prog_lang="python">int ImGui_Mod_Alt()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Mod_Ctrl</slug>
        <title>ImGui_Mod_Ctrl</title>
        <functioncall prog_lang="cpp">int ImGui_Mod_Ctrl()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Mod_Ctrl")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Mod_Ctrl()</functioncall>
        <functioncall prog_lang="python">int ImGui_Mod_Ctrl()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Mod_None</slug>
        <title>ImGui_Mod_None</title>
        <functioncall prog_lang="cpp">int ImGui_Mod_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Mod_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Mod_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_Mod_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Mod_Shift</slug>
        <title>ImGui_Mod_Shift</title>
        <functioncall prog_lang="cpp">int ImGui_Mod_Shift()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Mod_Shift")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Mod_Shift()</functioncall>
        <functioncall prog_lang="python">int ImGui_Mod_Shift()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Mod_Shortcut</slug>
        <title>ImGui_Mod_Shortcut</title>
        <functioncall prog_lang="cpp">int ImGui_Mod_Shortcut()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Mod_Shortcut")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Mod_Shortcut()</functioncall>
        <functioncall prog_lang="python">int ImGui_Mod_Shortcut()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Alias for Mod_Ctrl on Linux and Windows and Mod_Super on macOS (Cmd key).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Mod_Super</slug>
        <title>ImGui_Mod_Super</title>
        <functioncall prog_lang="cpp">int ImGui_Mod_Super()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_Mod_Super")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_Mod_Super()</functioncall>
        <functioncall prog_lang="python">int ImGui_Mod_Super()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseButton_Left</slug>
        <title>ImGui_MouseButton_Left</title>
        <functioncall prog_lang="cpp">int ImGui_MouseButton_Left()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseButton_Left")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseButton_Left()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseButton_Left()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseButton_Middle</slug>
        <title>ImGui_MouseButton_Middle</title>
        <functioncall prog_lang="cpp">int ImGui_MouseButton_Middle()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseButton_Middle")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseButton_Middle()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseButton_Middle()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseButton_Right</slug>
        <title>ImGui_MouseButton_Right</title>
        <functioncall prog_lang="cpp">int ImGui_MouseButton_Right()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseButton_Right")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseButton_Right()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseButton_Right()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseCursor_Arrow</slug>
        <title>ImGui_MouseCursor_Arrow</title>
        <functioncall prog_lang="cpp">int ImGui_MouseCursor_Arrow()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseCursor_Arrow")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseCursor_Arrow()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseCursor_Arrow()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseCursor_Hand</slug>
        <title>ImGui_MouseCursor_Hand</title>
        <functioncall prog_lang="cpp">int ImGui_MouseCursor_Hand()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseCursor_Hand")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseCursor_Hand()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseCursor_Hand()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         (Unused by Dear ImGui functions. Use for e.g. hyperlinks)
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseCursor_None</slug>
        <title>ImGui_MouseCursor_None</title>
        <functioncall prog_lang="cpp">int ImGui_MouseCursor_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseCursor_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseCursor_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseCursor_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseCursor_NotAllowed</slug>
        <title>ImGui_MouseCursor_NotAllowed</title>
        <functioncall prog_lang="cpp">int ImGui_MouseCursor_NotAllowed()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseCursor_NotAllowed")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseCursor_NotAllowed()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseCursor_NotAllowed()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         When hovering something with disallowed interaction. Usually a crossed circle.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseCursor_ResizeAll</slug>
        <title>ImGui_MouseCursor_ResizeAll</title>
        <functioncall prog_lang="cpp">int ImGui_MouseCursor_ResizeAll()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseCursor_ResizeAll")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseCursor_ResizeAll()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseCursor_ResizeAll()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         (Unused by Dear ImGui functions)
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseCursor_ResizeEW</slug>
        <title>ImGui_MouseCursor_ResizeEW</title>
        <functioncall prog_lang="cpp">int ImGui_MouseCursor_ResizeEW()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseCursor_ResizeEW")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseCursor_ResizeEW()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseCursor_ResizeEW()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         When hovering over a vertical border or a column.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseCursor_ResizeNESW</slug>
        <title>ImGui_MouseCursor_ResizeNESW</title>
        <functioncall prog_lang="cpp">int ImGui_MouseCursor_ResizeNESW()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseCursor_ResizeNESW")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseCursor_ResizeNESW()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseCursor_ResizeNESW()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         When hovering over the bottom-left corner of a window.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseCursor_ResizeNS</slug>
        <title>ImGui_MouseCursor_ResizeNS</title>
        <functioncall prog_lang="cpp">int ImGui_MouseCursor_ResizeNS()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseCursor_ResizeNS")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseCursor_ResizeNS()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseCursor_ResizeNS()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         When hovering over a horizontal border.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseCursor_ResizeNWSE</slug>
        <title>ImGui_MouseCursor_ResizeNWSE</title>
        <functioncall prog_lang="cpp">int ImGui_MouseCursor_ResizeNWSE()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseCursor_ResizeNWSE")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseCursor_ResizeNWSE()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseCursor_ResizeNWSE()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         When hovering over the bottom-right corner of a window.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_MouseCursor_TextInput</slug>
        <title>ImGui_MouseCursor_TextInput</title>
        <functioncall prog_lang="cpp">int ImGui_MouseCursor_TextInput()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_MouseCursor_TextInput")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_MouseCursor_TextInput()</functioncall>
        <functioncall prog_lang="python">int ImGui_MouseCursor_TextInput()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         When hovering over InputText, etc.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_NewLine</slug>
        <title>ImGui_NewLine</title>
        <functioncall prog_lang="cpp">void ImGui_NewLine(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_NewLine", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_NewLine(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_NewLine(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Undo a SameLine() or force a new line when in a horizontal-layout context.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_NumericLimits_Double</slug>
        <title>ImGui_NumericLimits_Double</title>
        <functioncall prog_lang="cpp">void ImGui_NumericLimits_Double(double* minOut, double* maxOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_NumericLimits_Double", &amp;min, &amp;max)</functioncall>
        <functioncall prog_lang="lua">number min, number max = reaper.ImGui_NumericLimits_Double()</functioncall>
        <functioncall prog_lang="python">void ImGui_NumericLimits_Double(double* minOut, double* maxOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Returns DBL_MIN and DBL_MAX for this system.
        </description>        
        <retvals>
            number min - 
            number max - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_NumericLimits_Float</slug>
        <title>ImGui_NumericLimits_Float</title>
        <functioncall prog_lang="cpp">void ImGui_NumericLimits_Float(double* minOut, double* maxOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_NumericLimits_Float", &amp;min, &amp;max)</functioncall>
        <functioncall prog_lang="lua">number min, number max = reaper.ImGui_NumericLimits_Float()</functioncall>
        <functioncall prog_lang="python">void ImGui_NumericLimits_Float(double* minOut, double* maxOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Returns FLT_MIN and FLT_MAX for this system.
        </description>        
        <retvals>
            number min - 
            number max - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_NumericLimits_Int</slug>
        <title>ImGui_NumericLimits_Int</title>
        <functioncall prog_lang="cpp">void ImGui_NumericLimits_Int(int* minOut, int* maxOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_NumericLimits_Int", int &amp;min, int &amp;max)</functioncall>
        <functioncall prog_lang="lua">integer min, integer max = reaper.ImGui_NumericLimits_Int()</functioncall>
        <functioncall prog_lang="python">void ImGui_NumericLimits_Int(int* minOut, int* maxOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Returns INT_MIN and INT_MAX for this system.
        </description>        
        <retvals>
            integer min - 
            integer max - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_OpenPopup</slug>
        <title>ImGui_OpenPopup</title>
        <functioncall prog_lang="cpp">void ImGui_OpenPopup(ImGui_Context* ctx, const char* str_id, int* popup_flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_OpenPopup", ImGui_Context ctx, "str_id", optional int popup_flagsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_OpenPopup(ImGui_Context ctx, string str_id, optional integer popup_flagsIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_OpenPopup(ImGui_Context* ctx, const char* str_id, int* popup_flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set popup state to open (don't call every frame!).
         ImGuiPopupFlags are available for opening options.
         
         If not modal: they can be closed by clicking anywhere outside them, or by
         pressing ESCAPE.
         
         Use PopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's
         already one at the same level.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string str_id - 
            optional integer popup_flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_OpenPopupOnItemClick</slug>
        <title>ImGui_OpenPopupOnItemClick</title>
        <functioncall prog_lang="cpp">void ImGui_OpenPopupOnItemClick(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_OpenPopupOnItemClick", ImGui_Context ctx, optional "str_idIn", optional int popup_flagsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_OpenPopupOnItemClick(ImGui_Context ctx, optional string str_idIn, optional integer popup_flagsIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_OpenPopupOnItemClick(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Helper to open popup when clicked on last item. return true when just opened.
         (Note: actually triggers on the mouse _released_ event to be consistent with
         popup behaviors.)
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional string str_idIn - 
            optional integer popup_flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PlotHistogram</slug>
        <title>ImGui_PlotHistogram</title>
        <functioncall prog_lang="cpp">void ImGui_PlotHistogram(ImGui_Context* ctx, const char* label, reaper_array* values, int* values_offsetInOptional, const char* overlay_textInOptional, double* scale_minInOptional, double* scale_maxInOptional, double* graph_size_wInOptional, double* graph_size_hInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PlotHistogram", ImGui_Context ctx, "label", reaper_array values, optional int values_offsetIn, optional "overlay_textIn", optional scale_minIn, optional scale_maxIn, optional graph_size_wIn, optional graph_size_hIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PlotHistogram(ImGui_Context ctx, string labelreaper_array values, optional integer values_offsetIn, optional string overlay_textIn, optional number scale_minIn, optional number scale_maxIn, optional number graph_size_wIn, optional number graph_size_hIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_PlotHistogram(ImGui_Context* ctx, const char* label, reaper_array* values, int* values_offsetInOptional, const char* overlay_textInOptional, double* scale_minInOptional, double* scale_maxInOptional, double* graph_size_wInOptional, double* graph_size_hInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string labelreaper_array values - 
            optional integer values_offsetIn - 
            optional string overlay_textIn - 
            optional number scale_minIn - 
            optional number scale_maxIn - 
            optional number graph_size_wIn - 
            optional number graph_size_hIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PlotLines</slug>
        <title>ImGui_PlotLines</title>
        <functioncall prog_lang="cpp">void ImGui_PlotLines(ImGui_Context* ctx, const char* label, reaper_array* values, int* values_offsetInOptional, const char* overlay_textInOptional, double* scale_minInOptional, double* scale_maxInOptional, double* graph_size_wInOptional, double* graph_size_hInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PlotLines", ImGui_Context ctx, "label", reaper_array values, optional int values_offsetIn, optional "overlay_textIn", optional scale_minIn, optional scale_maxIn, optional graph_size_wIn, optional graph_size_hIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PlotLines(ImGui_Context ctx, string labelreaper_array values, optional integer values_offsetIn, optional string overlay_textIn, optional number scale_minIn, optional number scale_maxIn, optional number graph_size_wIn, optional number graph_size_hIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_PlotLines(ImGui_Context* ctx, const char* label, reaper_array* values, int* values_offsetInOptional, const char* overlay_textInOptional, double* scale_minInOptional, double* scale_maxInOptional, double* graph_size_wInOptional, double* graph_size_hInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string labelreaper_array values - 
            optional integer values_offsetIn - 
            optional string overlay_textIn - 
            optional number scale_minIn - 
            optional number scale_maxIn - 
            optional number graph_size_wIn - 
            optional number graph_size_hIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PointConvertNative</slug>
        <title>ImGui_PointConvertNative</title>
        <functioncall prog_lang="cpp">void ImGui_PointConvertNative(ImGui_Context* ctx, double* xInOut, double* yInOut, bool* to_nativeInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PointConvertNative", ImGui_Context ctx, &amp;x, &amp;y, optional bool to_nativeIn)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_PointConvertNative(ImGui_Context ctx, number x, number y, optional boolean to_nativeIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_PointConvertNative(ImGui_Context* ctx, double* xInOut, double* yInOut, bool* to_nativeInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Convert a position from the current platform's native coordinate position
         system to ReaImGui global coordinates (or vice versa).
         
         This effectively flips the Y coordinate on macOS and applies HiDPI scaling on
         Windows and Linux.
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            number x - 
            number y - 
            optional boolean to_nativeIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopButtonRepeat</slug>
        <title>ImGui_PopButtonRepeat</title>
        <functioncall prog_lang="cpp">void ImGui_PopButtonRepeat(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PopButtonRepeat", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PopButtonRepeat(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_PopButtonRepeat(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         See PushButtonRepeat
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopClipRect</slug>
        <title>ImGui_PopClipRect</title>
        <functioncall prog_lang="cpp">void ImGui_PopClipRect(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PopClipRect", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PopClipRect(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_PopClipRect(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         See PushClipRect
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopFont</slug>
        <title>ImGui_PopFont</title>
        <functioncall prog_lang="cpp">void ImGui_PopFont(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PopFont", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PopFont(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_PopFont(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         See PushFont.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopID</slug>
        <title>ImGui_PopID</title>
        <functioncall prog_lang="cpp">void ImGui_PopID(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PopID", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PopID(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_PopID(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Pop from the ID stack.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopItemWidth</slug>
        <title>ImGui_PopItemWidth</title>
        <functioncall prog_lang="cpp">void ImGui_PopItemWidth(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PopItemWidth", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PopItemWidth(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_PopItemWidth(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         See PushItemWidth
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopStyleColor</slug>
        <title>ImGui_PopStyleColor</title>
        <functioncall prog_lang="cpp">void ImGui_PopStyleColor(ImGui_Context* ctx, int* countInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PopStyleColor", ImGui_Context ctx, optional int countIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PopStyleColor(ImGui_Context ctx, optional integer countIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_PopStyleColor(ImGui_Context* ctx, int* countInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional integer countIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopStyleVar</slug>
        <title>ImGui_PopStyleVar</title>
        <functioncall prog_lang="cpp">void ImGui_PopStyleVar(ImGui_Context* ctx, int* countInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PopStyleVar", ImGui_Context ctx, optional int countIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PopStyleVar(ImGui_Context ctx, optional integer countIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_PopStyleVar(ImGui_Context* ctx, int* countInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Reset a style variable.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional integer countIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopTabStop</slug>
        <title>ImGui_PopTabStop</title>
        <functioncall prog_lang="cpp">void ImGui_PopTabStop(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PopTabStop", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PopTabStop(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_PopTabStop(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         See PushTabStop
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopTextWrapPos</slug>
        <title>ImGui_PopTextWrapPos</title>
        <functioncall prog_lang="cpp">void ImGui_PopTextWrapPos(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PopTextWrapPos", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PopTextWrapPos(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_PopTextWrapPos(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopupFlags_AnyPopup</slug>
        <title>ImGui_PopupFlags_AnyPopup</title>
        <functioncall prog_lang="cpp">int ImGui_PopupFlags_AnyPopup()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_PopupFlags_AnyPopup")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_PopupFlags_AnyPopup()</functioncall>
        <functioncall prog_lang="python">int ImGui_PopupFlags_AnyPopup()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         PopupFlags_AnyPopupId | PopupFlags_AnyPopupLevel
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopupFlags_AnyPopupId</slug>
        <title>ImGui_PopupFlags_AnyPopupId</title>
        <functioncall prog_lang="cpp">int ImGui_PopupFlags_AnyPopupId()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_PopupFlags_AnyPopupId")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_PopupFlags_AnyPopupId()</functioncall>
        <functioncall prog_lang="python">int ImGui_PopupFlags_AnyPopupId()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         For IsPopupOpen: ignore the str_id parameter and test for any popup.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopupFlags_AnyPopupLevel</slug>
        <title>ImGui_PopupFlags_AnyPopupLevel</title>
        <functioncall prog_lang="cpp">int ImGui_PopupFlags_AnyPopupLevel()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_PopupFlags_AnyPopupLevel")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_PopupFlags_AnyPopupLevel()</functioncall>
        <functioncall prog_lang="python">int ImGui_PopupFlags_AnyPopupLevel()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         For IsPopupOpen: search/test at any level of the popup stack
           (default test in the current level).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopupFlags_MouseButtonLeft</slug>
        <title>ImGui_PopupFlags_MouseButtonLeft</title>
        <functioncall prog_lang="cpp">int ImGui_PopupFlags_MouseButtonLeft()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_PopupFlags_MouseButtonLeft")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_PopupFlags_MouseButtonLeft()</functioncall>
        <functioncall prog_lang="python">int ImGui_PopupFlags_MouseButtonLeft()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         For BeginPopupContext*(): open on Left Mouse release.
            Guaranteed to always be == 0 (same as MouseButton_Left).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopupFlags_MouseButtonMiddle</slug>
        <title>ImGui_PopupFlags_MouseButtonMiddle</title>
        <functioncall prog_lang="cpp">int ImGui_PopupFlags_MouseButtonMiddle()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_PopupFlags_MouseButtonMiddle")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_PopupFlags_MouseButtonMiddle()</functioncall>
        <functioncall prog_lang="python">int ImGui_PopupFlags_MouseButtonMiddle()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         For BeginPopupContext*(): open on Middle Mouse release.
            Guaranteed to always be == 2 (same as MouseButton_Middle).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopupFlags_MouseButtonRight</slug>
        <title>ImGui_PopupFlags_MouseButtonRight</title>
        <functioncall prog_lang="cpp">int ImGui_PopupFlags_MouseButtonRight()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_PopupFlags_MouseButtonRight")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_PopupFlags_MouseButtonRight()</functioncall>
        <functioncall prog_lang="python">int ImGui_PopupFlags_MouseButtonRight()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         For BeginPopupContext*(): open on Right Mouse release.
            Guaranteed to always be == 1 (same as MouseButton_Right).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopupFlags_NoOpenOverExistingPopup</slug>
        <title>ImGui_PopupFlags_NoOpenOverExistingPopup</title>
        <functioncall prog_lang="cpp">int ImGui_PopupFlags_NoOpenOverExistingPopup()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_PopupFlags_NoOpenOverExistingPopup")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_PopupFlags_NoOpenOverExistingPopup()</functioncall>
        <functioncall prog_lang="python">int ImGui_PopupFlags_NoOpenOverExistingPopup()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup
            at the same level of the popup stack.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopupFlags_NoOpenOverItems</slug>
        <title>ImGui_PopupFlags_NoOpenOverItems</title>
        <functioncall prog_lang="cpp">int ImGui_PopupFlags_NoOpenOverItems()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_PopupFlags_NoOpenOverItems")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_PopupFlags_NoOpenOverItems()</functioncall>
        <functioncall prog_lang="python">int ImGui_PopupFlags_NoOpenOverItems()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         For BeginPopupContextWindow: don't return true when hovering items,
            only when hovering empty space.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PopupFlags_None</slug>
        <title>ImGui_PopupFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_PopupFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_PopupFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_PopupFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_PopupFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ProgressBar</slug>
        <title>ImGui_ProgressBar</title>
        <functioncall prog_lang="cpp">void ImGui_ProgressBar(ImGui_Context* ctx, double fraction, double* size_arg_wInOptional, double* size_arg_hInOptional, const char* overlayInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ProgressBar", ImGui_Context ctx, fraction, optional size_arg_wIn, optional size_arg_hIn, optional "overlayIn")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_ProgressBar(ImGui_Context ctx, number fraction, optional number size_arg_wIn, optional number size_arg_hIn, optional string overlayIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_ProgressBar(ImGui_Context* ctx, double fraction, double* size_arg_wInOptional, double* size_arg_hInOptional, const char* overlayInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number fraction - 
            optional number size_arg_wIn - 
            optional number size_arg_hIn - 
            optional string overlayIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PushButtonRepeat</slug>
        <title>ImGui_PushButtonRepeat</title>
        <functioncall prog_lang="cpp">void ImGui_PushButtonRepeat(ImGui_Context* ctx, bool repeat)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PushButtonRepeat", ImGui_Context ctx, bool repeat)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PushButtonRepeat(ImGui_Context ctx, boolean repeat)</functioncall>
        <functioncall prog_lang="python">void ImGui_PushButtonRepeat(ImGui_Context* ctx, bool repeat)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         In 'repeat' mode, Button*() functions return repeated true in a typematic
         manner (using ConfigVar_KeyRepeatDelay/ConfigVar_KeyRepeatRate settings).
         
         Note that you can call IsItemActive after any Button to tell if the button is
         held in the current frame.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            boolean repeat -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PushClipRect</slug>
        <title>ImGui_PushClipRect</title>
        <functioncall prog_lang="cpp">void ImGui_PushClipRect(ImGui_Context* ctx, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, bool intersect_with_current_clip_rect)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PushClipRect", ImGui_Context ctx, clip_rect_min_x, clip_rect_min_y, clip_rect_max_x, clip_rect_max_y, bool intersect_with_current_clip_rect)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PushClipRect(ImGui_Context ctx, number clip_rect_min_x, number clip_rect_min_y, number clip_rect_max_x, number clip_rect_max_y, boolean intersect_with_current_clip_rect)</functioncall>
        <functioncall prog_lang="python">void ImGui_PushClipRect(ImGui_Context* ctx, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, bool intersect_with_current_clip_rect)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number clip_rect_min_x - 
            number clip_rect_min_y - 
            number clip_rect_max_x - 
            number clip_rect_max_y - 
            boolean intersect_with_current_clip_rect -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PushFont</slug>
        <title>ImGui_PushFont</title>
        <functioncall prog_lang="cpp">void ImGui_PushFont(ImGui_Context* ctx, ImGui_Font* font)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PushFont", ImGui_Context ctx, ImGui_Font font)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PushFont(ImGui_Context ctxImGui_Font font)</functioncall>
        <functioncall prog_lang="python">void ImGui_PushFont(ImGui_Context* ctx, ImGui_Font* font)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Change the current font. Use nil to push the default font.
         The font object must have been registered using Attach. See PopFont.
        </description>        
        <parameters>
            ImGui_Context ctxImGui_Font font -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PushID</slug>
        <title>ImGui_PushID</title>
        <functioncall prog_lang="cpp">void ImGui_PushID(ImGui_Context* ctx, const char* str_id)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PushID", ImGui_Context ctx, "str_id")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PushID(ImGui_Context ctx, string str_id)</functioncall>
        <functioncall prog_lang="python">void ImGui_PushID(ImGui_Context* ctx, const char* str_id)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Push string into the ID stack.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string str_id -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PushItemWidth</slug>
        <title>ImGui_PushItemWidth</title>
        <functioncall prog_lang="cpp">void ImGui_PushItemWidth(ImGui_Context* ctx, double item_width)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PushItemWidth", ImGui_Context ctx, item_width)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PushItemWidth(ImGui_Context ctx, number item_width)</functioncall>
        <functioncall prog_lang="python">void ImGui_PushItemWidth(ImGui_Context* ctx, double item_width)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Push width of items for common large "item+label" widgets.
         
         - \&gt;0.0: width in pixels
         - &lt;0.0 align xx pixels to the right of window
           (so -FLT_MIN always align width to the right side)
         - 0.0 = default to ~2/3 of windows width.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number item_width -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PushStyleColor</slug>
        <title>ImGui_PushStyleColor</title>
        <functioncall prog_lang="cpp">void ImGui_PushStyleColor(ImGui_Context* ctx, int idx, int col_rgba)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PushStyleColor", ImGui_Context ctx, int idx, int col_rgba)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PushStyleColor(ImGui_Context ctx, integer idx, integer col_rgba)</functioncall>
        <functioncall prog_lang="python">void ImGui_PushStyleColor(ImGui_Context* ctx, int idx, int col_rgba)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Temporarily modify a style color.
         Call PopStyleColor to undo after use (before the end of the frame).
         See Col_* for available style colors.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            integer idx - 
            integer col_rgba -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PushStyleVar</slug>
        <title>ImGui_PushStyleVar</title>
        <functioncall prog_lang="cpp">void ImGui_PushStyleVar(ImGui_Context* ctx, int var_idx, double val1, double* val2InOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PushStyleVar", ImGui_Context ctx, int var_idx, val1, optional val2In)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PushStyleVar(ImGui_Context ctx, integer var_idx, number val1, optional number val2In)</functioncall>
        <functioncall prog_lang="python">void ImGui_PushStyleVar(ImGui_Context* ctx, int var_idx, double val1, double* val2InOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Temporarily modify a style variable.
         Call PopStyleVar to undo after use (before the end of the frame).
         See StyleVar_* for possible values of 'var_idx'.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            integer var_idx - 
            number val1 - 
            optional number val2In -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PushTabStop</slug>
        <title>ImGui_PushTabStop</title>
        <functioncall prog_lang="cpp">void ImGui_PushTabStop(ImGui_Context* ctx, bool tab_stop)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PushTabStop", ImGui_Context ctx, bool tab_stop)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PushTabStop(ImGui_Context ctx, boolean tab_stop)</functioncall>
        <functioncall prog_lang="python">void ImGui_PushTabStop(ImGui_Context* ctx, bool tab_stop)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it
         for certain widgets
        </description>        
        <parameters>
            ImGui_Context ctx - 
            boolean tab_stop -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_PushTextWrapPos</slug>
        <title>ImGui_PushTextWrapPos</title>
        <functioncall prog_lang="cpp">void ImGui_PushTextWrapPos(ImGui_Context* ctx, double* wrap_local_pos_xInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_PushTextWrapPos", ImGui_Context ctx, optional wrap_local_pos_xIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_PushTextWrapPos(ImGui_Context ctx, optional number wrap_local_pos_xIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_PushTextWrapPos(ImGui_Context* ctx, double* wrap_local_pos_xInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Push word-wrapping position for Text*() commands.
         
         -  &lt; 0.0: no wrapping
         -  = 0.0: wrap to end of window (or column)
         - \&gt; 0.0: wrap at 'wrap_pos_x' position in window local space.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional number wrap_local_pos_xIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_RadioButton</slug>
        <title>ImGui_RadioButton</title>
        <functioncall prog_lang="cpp">bool ImGui_RadioButton(ImGui_Context* ctx, const char* label, bool active)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_RadioButton", ImGui_Context ctx, "label", bool active)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_RadioButton(ImGui_Context ctx, string label, boolean active)</functioncall>
        <functioncall prog_lang="python">bool ImGui_RadioButton(ImGui_Context* ctx, const char* label, bool active)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            boolean active -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_RadioButtonEx</slug>
        <title>ImGui_RadioButtonEx</title>
        <functioncall prog_lang="cpp">bool ImGui_RadioButtonEx(ImGui_Context* ctx, const char* label, int* vInOut, int v_button)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_RadioButtonEx", ImGui_Context ctx, "label", int &amp;v, int v_button)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v = reaper.ImGui_RadioButtonEx(ImGui_Context ctx, string label, integer v, integer v_button)</functioncall>
        <functioncall prog_lang="python">bool ImGui_RadioButtonEx(ImGui_Context* ctx, const char* label, int* vInOut, int v_button)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Shortcut to handle RadioButton's example pattern when value is an integer
        </description>        
        <retvals>
            boolean retval - 
            integer v - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v - 
            integer v_button -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ResetMouseDragDelta</slug>
        <title>ImGui_ResetMouseDragDelta</title>
        <functioncall prog_lang="cpp">void ImGui_ResetMouseDragDelta(ImGui_Context* ctx, int* buttonInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ResetMouseDragDelta", ImGui_Context ctx, optional int buttonIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_ResetMouseDragDelta(ImGui_Context ctx, optional integer buttonIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_ResetMouseDragDelta(ImGui_Context* ctx, int* buttonInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional integer buttonIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SameLine</slug>
        <title>ImGui_SameLine</title>
        <functioncall prog_lang="cpp">void ImGui_SameLine(ImGui_Context* ctx, double* offset_from_start_xInOptional, double* spacingInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SameLine", ImGui_Context ctx, optional offset_from_start_xIn, optional spacingIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SameLine(ImGui_Context ctx, optional number offset_from_start_xIn, optional number spacingIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SameLine(ImGui_Context* ctx, double* offset_from_start_xInOptional, double* spacingInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Call between widgets or groups to layout them horizontally.
         X position given in window coordinates.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional number offset_from_start_xIn - 
            optional number spacingIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Selectable</slug>
        <title>ImGui_Selectable</title>
        <functioncall prog_lang="cpp">bool ImGui_Selectable(ImGui_Context* ctx, const char* label, bool* p_selectedInOut, int* flagsInOptional, double* size_wInOptional, double* size_hInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_Selectable", ImGui_Context ctx, "label", bool &amp;p_selected, optional int flagsIn, optional size_wIn, optional size_hIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean p_selected = reaper.ImGui_Selectable(ImGui_Context ctx, string label, boolean p_selected, optional integer flagsIn, optional number size_wIn, optional number size_hIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_Selectable(ImGui_Context* ctx, const char* label, bool* p_selectedInOut, int* flagsInOptional, double* size_wInOptional, double* size_hInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            boolean p_selected - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            boolean p_selected - 
            optional integer flagsIn - 
            optional number size_wIn - 
            optional number size_hIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SelectableFlags_AllowDoubleClick</slug>
        <title>ImGui_SelectableFlags_AllowDoubleClick</title>
        <functioncall prog_lang="cpp">int ImGui_SelectableFlags_AllowDoubleClick()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SelectableFlags_AllowDoubleClick")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SelectableFlags_AllowDoubleClick()</functioncall>
        <functioncall prog_lang="python">int ImGui_SelectableFlags_AllowDoubleClick()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Generate press events on double clicks too.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SelectableFlags_AllowItemOverlap</slug>
        <title>ImGui_SelectableFlags_AllowItemOverlap</title>
        <functioncall prog_lang="cpp">int ImGui_SelectableFlags_AllowItemOverlap()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SelectableFlags_AllowItemOverlap")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SelectableFlags_AllowItemOverlap()</functioncall>
        <functioncall prog_lang="python">int ImGui_SelectableFlags_AllowItemOverlap()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Hit testing to allow subsequent widgets to overlap this one.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SelectableFlags_Disabled</slug>
        <title>ImGui_SelectableFlags_Disabled</title>
        <functioncall prog_lang="cpp">int ImGui_SelectableFlags_Disabled()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SelectableFlags_Disabled")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SelectableFlags_Disabled()</functioncall>
        <functioncall prog_lang="python">int ImGui_SelectableFlags_Disabled()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Cannot be selected, display grayed out text.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SelectableFlags_DontClosePopups</slug>
        <title>ImGui_SelectableFlags_DontClosePopups</title>
        <functioncall prog_lang="cpp">int ImGui_SelectableFlags_DontClosePopups()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SelectableFlags_DontClosePopups")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SelectableFlags_DontClosePopups()</functioncall>
        <functioncall prog_lang="python">int ImGui_SelectableFlags_DontClosePopups()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Clicking this doesn't close parent popup window.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SelectableFlags_None</slug>
        <title>ImGui_SelectableFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_SelectableFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SelectableFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SelectableFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_SelectableFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SelectableFlags_SpanAllColumns</slug>
        <title>ImGui_SelectableFlags_SpanAllColumns</title>
        <functioncall prog_lang="cpp">int ImGui_SelectableFlags_SpanAllColumns()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SelectableFlags_SpanAllColumns")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SelectableFlags_SpanAllColumns()</functioncall>
        <functioncall prog_lang="python">int ImGui_SelectableFlags_SpanAllColumns()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Selectable frame can span all columns (text will still fit in current column).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Separator</slug>
        <title>ImGui_Separator</title>
        <functioncall prog_lang="cpp">void ImGui_Separator(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Separator", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Separator(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_Separator(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Separator, generally horizontal. inside a menu bar or in horizontal layout
         mode, this becomes a vertical separator.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SeparatorText</slug>
        <title>ImGui_SeparatorText</title>
        <functioncall prog_lang="cpp">void ImGui_SeparatorText(ImGui_Context* ctx, const char* label)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SeparatorText", ImGui_Context ctx, "label")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SeparatorText(ImGui_Context ctx, string label)</functioncall>
        <functioncall prog_lang="python">void ImGui_SeparatorText(ImGui_Context* ctx, const char* label)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Text formatted with an horizontal line
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string label -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetClipboardText</slug>
        <title>ImGui_SetClipboardText</title>
        <functioncall prog_lang="cpp">void ImGui_SetClipboardText(ImGui_Context* ctx, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetClipboardText", ImGui_Context ctx, "text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetClipboardText(ImGui_Context ctx, string text)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetClipboardText(ImGui_Context* ctx, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         See also the LogToClipboard function to capture GUI into clipboard,
         or easily output text data to the clipboard.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetColorEditOptions</slug>
        <title>ImGui_SetColorEditOptions</title>
        <functioncall prog_lang="cpp">void ImGui_SetColorEditOptions(ImGui_Context* ctx, int flags)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetColorEditOptions", ImGui_Context ctx, int flags)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetColorEditOptions(ImGui_Context ctx, integer flags)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetColorEditOptions(ImGui_Context* ctx, int flags)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Picker type, etc. User will be able to change many settings, unless you pass
         the _NoOptions flag to your calls.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            integer flags -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetConfigVar</slug>
        <title>ImGui_SetConfigVar</title>
        <functioncall prog_lang="cpp">void ImGui_SetConfigVar(ImGui_Context* ctx, int var_idx, double value)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetConfigVar", ImGui_Context ctx, int var_idx, value)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetConfigVar(ImGui_Context ctx, integer var_idx, number value)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetConfigVar(ImGui_Context* ctx, int var_idx, double value)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctx - 
            integer var_idx - 
            number value -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetCursorPos</slug>
        <title>ImGui_SetCursorPos</title>
        <functioncall prog_lang="cpp">void ImGui_SetCursorPos(ImGui_Context* ctx, double local_pos_x, double local_pos_y)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetCursorPos", ImGui_Context ctx, local_pos_x, local_pos_y)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetCursorPos(ImGui_Context ctx, number local_pos_x, number local_pos_y)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetCursorPos(ImGui_Context* ctx, double local_pos_x, double local_pos_y)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Cursor position in window
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number local_pos_x - 
            number local_pos_y -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetCursorPosX</slug>
        <title>ImGui_SetCursorPosX</title>
        <functioncall prog_lang="cpp">void ImGui_SetCursorPosX(ImGui_Context* ctx, double local_x)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetCursorPosX", ImGui_Context ctx, local_x)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetCursorPosX(ImGui_Context ctx, number local_x)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetCursorPosX(ImGui_Context* ctx, double local_x)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Cursor X position in window
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number local_x -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetCursorPosY</slug>
        <title>ImGui_SetCursorPosY</title>
        <functioncall prog_lang="cpp">void ImGui_SetCursorPosY(ImGui_Context* ctx, double local_y)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetCursorPosY", ImGui_Context ctx, local_y)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetCursorPosY(ImGui_Context ctx, number local_y)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetCursorPosY(ImGui_Context* ctx, double local_y)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Cursor Y position in window
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number local_y -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetCursorScreenPos</slug>
        <title>ImGui_SetCursorScreenPos</title>
        <functioncall prog_lang="cpp">void ImGui_SetCursorScreenPos(ImGui_Context* ctx, double pos_x, double pos_y)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetCursorScreenPos", ImGui_Context ctx, pos_x, pos_y)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetCursorScreenPos(ImGui_Context ctx, number pos_x, number pos_y)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetCursorScreenPos(ImGui_Context* ctx, double pos_x, double pos_y)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Cursor position in absolute screen coordinates.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number pos_x - 
            number pos_y -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetDragDropPayload</slug>
        <title>ImGui_SetDragDropPayload</title>
        <functioncall prog_lang="cpp">bool ImGui_SetDragDropPayload(ImGui_Context* ctx, const char* type, const char* data, int* condInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SetDragDropPayload", ImGui_Context ctx, "type", "data", optional int condIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_SetDragDropPayload(ImGui_Context ctx, string type, string data, optional integer condIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SetDragDropPayload(ImGui_Context* ctx, const char* type, const char* data, int* condInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         The type is a user defined string of maximum 32 characters.
         Strings starting with '_' are reserved for dear imgui internal types.
         Data is copied and held by imgui.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string type - 
            string data - 
            optional integer condIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetItemAllowOverlap</slug>
        <title>ImGui_SetItemAllowOverlap</title>
        <functioncall prog_lang="cpp">void ImGui_SetItemAllowOverlap(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetItemAllowOverlap", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetItemAllowOverlap(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetItemAllowOverlap(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Allow last item to be overlapped by a subsequent item. sometimes useful with
         invisible buttons, selectables, etc. to catch unused area.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetItemDefaultFocus</slug>
        <title>ImGui_SetItemDefaultFocus</title>
        <functioncall prog_lang="cpp">void ImGui_SetItemDefaultFocus(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetItemDefaultFocus", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetItemDefaultFocus(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetItemDefaultFocus(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Make last item the default focused item of a window.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetKeyboardFocusHere</slug>
        <title>ImGui_SetKeyboardFocusHere</title>
        <functioncall prog_lang="cpp">void ImGui_SetKeyboardFocusHere(ImGui_Context* ctx, int* offsetInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetKeyboardFocusHere", ImGui_Context ctx, optional int offsetIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetKeyboardFocusHere(ImGui_Context ctx, optional integer offsetIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetKeyboardFocusHere(ImGui_Context* ctx, int* offsetInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Focus keyboard on the next widget. Use positive 'offset' to access sub
         components of a multiple component widget. Use -1 to access previous widget.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional integer offsetIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetMouseCursor</slug>
        <title>ImGui_SetMouseCursor</title>
        <functioncall prog_lang="cpp">void ImGui_SetMouseCursor(ImGui_Context* ctx, int cursor_type)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetMouseCursor", ImGui_Context ctx, int cursor_type)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetMouseCursor(ImGui_Context ctx, integer cursor_type)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetMouseCursor(ImGui_Context* ctx, int cursor_type)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set desired mouse cursor shape. See MouseCursor_* for possible values.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            integer cursor_type -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextFrameWantCaptureKeyboard</slug>
        <title>ImGui_SetNextFrameWantCaptureKeyboard</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextFrameWantCaptureKeyboard(ImGui_Context* ctx, bool want_capture_keyboard)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextFrameWantCaptureKeyboard", ImGui_Context ctx, bool want_capture_keyboard)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextFrameWantCaptureKeyboard(ImGui_Context ctx, boolean want_capture_keyboard)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextFrameWantCaptureKeyboard(ImGui_Context* ctx, bool want_capture_keyboard)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Request capture of keyboard shortcuts in REAPER's global scope for the next frame.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            boolean want_capture_keyboard -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextItemOpen</slug>
        <title>ImGui_SetNextItemOpen</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextItemOpen(ImGui_Context* ctx, bool is_open, int* condInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextItemOpen", ImGui_Context ctx, bool is_open, optional int condIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextItemOpen(ImGui_Context ctx, boolean is_open, optional integer condIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextItemOpen(ImGui_Context* ctx, bool is_open, int* condInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set next TreeNode/CollapsingHeader open state.
         Can also be done with the TreeNodeFlags_DefaultOpen flag.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            boolean is_open - 
            optional integer condIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextItemWidth</slug>
        <title>ImGui_SetNextItemWidth</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextItemWidth(ImGui_Context* ctx, double item_width)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextItemWidth", ImGui_Context ctx, item_width)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextItemWidth(ImGui_Context ctx, number item_width)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextItemWidth(ImGui_Context* ctx, double item_width)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set width of the _next_ common large "item+label" widget.
         
         - \&gt;0.0: width in pixels
         - &lt;0.0 align xx pixels to the right of window
           (so -FLT_MIN always align width to the right side)
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number item_width -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextWindowBgAlpha</slug>
        <title>ImGui_SetNextWindowBgAlpha</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextWindowBgAlpha(ImGui_Context* ctx, double alpha)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextWindowBgAlpha", ImGui_Context ctx, alpha)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextWindowBgAlpha(ImGui_Context ctx, number alpha)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextWindowBgAlpha(ImGui_Context* ctx, double alpha)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set next window background color alpha. Helper to easily override the Alpha
         component of Col_WindowBg/Col_ChildBg/Col_PopupBg.
         You may also use WindowFlags_NoBackground for a fully transparent window.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number alpha -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextWindowCollapsed</slug>
        <title>ImGui_SetNextWindowCollapsed</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextWindowCollapsed(ImGui_Context* ctx, bool collapsed, int* condInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextWindowCollapsed", ImGui_Context ctx, bool collapsed, optional int condIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextWindowCollapsed(ImGui_Context ctx, boolean collapsed, optional integer condIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextWindowCollapsed(ImGui_Context* ctx, bool collapsed, int* condInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set next window collapsed state.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            boolean collapsed - 
            optional integer condIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextWindowContentSize</slug>
        <title>ImGui_SetNextWindowContentSize</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextWindowContentSize(ImGui_Context* ctx, double size_w, double size_h)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextWindowContentSize", ImGui_Context ctx, size_w, size_h)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextWindowContentSize(ImGui_Context ctx, number size_w, number size_h)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextWindowContentSize(ImGui_Context* ctx, double size_w, double size_h)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set next window content size (~ scrollable client area, which enforce the
         range of scrollbars). Not including window decorations (title bar, menu bar,
         etc.) nor StyleVar_WindowPadding. set an axis to 0.0 to leave it automatic.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number size_w - 
            number size_h -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextWindowDockID</slug>
        <title>ImGui_SetNextWindowDockID</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextWindowDockID(ImGui_Context* ctx, int dock_id, int* condInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextWindowDockID", ImGui_Context ctx, int dock_id, optional int condIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextWindowDockID(ImGui_Context ctx, integer dock_id, optional integer condIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextWindowDockID(ImGui_Context* ctx, int dock_id, int* condInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctx - 
            integer dock_id - 
            optional integer condIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextWindowFocus</slug>
        <title>ImGui_SetNextWindowFocus</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextWindowFocus(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextWindowFocus", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextWindowFocus(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextWindowFocus(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set next window to be focused / top-most.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextWindowPos</slug>
        <title>ImGui_SetNextWindowPos</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextWindowPos(ImGui_Context* ctx, double pos_x, double pos_y, int* condInOptional, double* pivot_xInOptional, double* pivot_yInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextWindowPos", ImGui_Context ctx, pos_x, pos_y, optional int condIn, optional pivot_xIn, optional pivot_yIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextWindowPos(ImGui_Context ctx, number pos_x, number pos_y, optional integer condIn, optional number pivot_xIn, optional number pivot_yIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextWindowPos(ImGui_Context* ctx, double pos_x, double pos_y, int* condInOptional, double* pivot_xInOptional, double* pivot_yInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set next window position. Use pivot=(0.5,0.5) to center on given point, etc.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number pos_x - 
            number pos_y - 
            optional integer condIn - 
            optional number pivot_xIn - 
            optional number pivot_yIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextWindowScroll</slug>
        <title>ImGui_SetNextWindowScroll</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextWindowScroll(ImGui_Context* ctx, double scroll_x, double scroll_y)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextWindowScroll", ImGui_Context ctx, scroll_x, scroll_y)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextWindowScroll(ImGui_Context ctx, number scroll_x, number scroll_y)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextWindowScroll(ImGui_Context* ctx, double scroll_x, double scroll_y)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set next window scrolling value (use &lt; 0.0 to not affect a given axis).
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number scroll_x - 
            number scroll_y -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextWindowSize</slug>
        <title>ImGui_SetNextWindowSize</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextWindowSize(ImGui_Context* ctx, double size_w, double size_h, int* condInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextWindowSize", ImGui_Context ctx, size_w, size_h, optional int condIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextWindowSize(ImGui_Context ctx, number size_w, number size_h, optional integer condIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextWindowSize(ImGui_Context* ctx, double size_w, double size_h, int* condInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set next window size. set axis to 0.0 to force an auto-fit on this axis.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number size_w - 
            number size_h - 
            optional integer condIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetNextWindowSizeConstraints</slug>
        <title>ImGui_SetNextWindowSizeConstraints</title>
        <functioncall prog_lang="cpp">void ImGui_SetNextWindowSizeConstraints(ImGui_Context* ctx, double size_min_w, double size_min_h, double size_max_w, double size_max_h, ImGui_Function* callbackInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetNextWindowSizeConstraints", ImGui_Context ctx, size_min_w, size_min_h, size_max_w, size_max_h, ImGui_Function callbackIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetNextWindowSizeConstraints(ImGui_Context ctx, number size_min_w, number size_min_h, number size_max_w, number size_max_hImGui_Function callbackIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetNextWindowSizeConstraints(ImGui_Context* ctx, double size_min_w, double size_min_h, double size_max_w, double size_max_h, ImGui_Function* callbackInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set next window size limits. Use -1,-1 on either X/Y axis to preserve the
         current size. Use FLT_MAX (second return value of NumericLimits_Float) for no
         maximum size. Sizes will be rounded down.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number size_min_w - 
            number size_min_h - 
            number size_max_w - 
            number size_max_hImGui_Function callbackIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetScrollFromPosX</slug>
        <title>ImGui_SetScrollFromPosX</title>
        <functioncall prog_lang="cpp">void ImGui_SetScrollFromPosX(ImGui_Context* ctx, double local_x, double* center_x_ratioInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetScrollFromPosX", ImGui_Context ctx, local_x, optional center_x_ratioIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetScrollFromPosX(ImGui_Context ctx, number local_x, optional number center_x_ratioIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetScrollFromPosX(ImGui_Context* ctx, double local_x, double* center_x_ratioInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Adjust scrolling amount to make given position visible.
         Generally GetCursorStartPos() + offset to compute a valid position.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number local_x - 
            optional number center_x_ratioIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetScrollFromPosY</slug>
        <title>ImGui_SetScrollFromPosY</title>
        <functioncall prog_lang="cpp">void ImGui_SetScrollFromPosY(ImGui_Context* ctx, double local_y, double* center_y_ratioInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetScrollFromPosY", ImGui_Context ctx, local_y, optional center_y_ratioIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetScrollFromPosY(ImGui_Context ctx, number local_y, optional number center_y_ratioIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetScrollFromPosY(ImGui_Context* ctx, double local_y, double* center_y_ratioInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Adjust scrolling amount to make given position visible.
         Generally GetCursorStartPos() + offset to compute a valid position.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number local_y - 
            optional number center_y_ratioIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetScrollHereX</slug>
        <title>ImGui_SetScrollHereX</title>
        <functioncall prog_lang="cpp">void ImGui_SetScrollHereX(ImGui_Context* ctx, double* center_x_ratioInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetScrollHereX", ImGui_Context ctx, optional center_x_ratioIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetScrollHereX(ImGui_Context ctx, optional number center_x_ratioIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetScrollHereX(ImGui_Context* ctx, double* center_x_ratioInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Adjust scrolling amount to make current cursor position visible.
         center_x_ratio=0.0: left, 0.5: center, 1.0: right.
         When using to make a "default/current item" visible,
         consider using SetItemDefaultFocus instead.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional number center_x_ratioIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetScrollHereY</slug>
        <title>ImGui_SetScrollHereY</title>
        <functioncall prog_lang="cpp">void ImGui_SetScrollHereY(ImGui_Context* ctx, double* center_y_ratioInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetScrollHereY", ImGui_Context ctx, optional center_y_ratioIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetScrollHereY(ImGui_Context ctx, optional number center_y_ratioIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetScrollHereY(ImGui_Context* ctx, double* center_y_ratioInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Adjust scrolling amount to make current cursor position visible.
         center_y_ratio=0.0: top, 0.5: center, 1.0: bottom.
         When using to make a "default/current item" visible,
         consider using SetItemDefaultFocus instead.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional number center_y_ratioIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetScrollX</slug>
        <title>ImGui_SetScrollX</title>
        <functioncall prog_lang="cpp">void ImGui_SetScrollX(ImGui_Context* ctx, double scroll_x)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetScrollX", ImGui_Context ctx, scroll_x)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetScrollX(ImGui_Context ctx, number scroll_x)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetScrollX(ImGui_Context* ctx, double scroll_x)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set scrolling amount [0 .. GetScrollMaxX()]
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number scroll_x -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetScrollY</slug>
        <title>ImGui_SetScrollY</title>
        <functioncall prog_lang="cpp">void ImGui_SetScrollY(ImGui_Context* ctx, double scroll_y)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetScrollY", ImGui_Context ctx, scroll_y)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetScrollY(ImGui_Context ctx, number scroll_y)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetScrollY(ImGui_Context* ctx, double scroll_y)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set scrolling amount [0 .. GetScrollMaxY()]
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number scroll_y -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetTabItemClosed</slug>
        <title>ImGui_SetTabItemClosed</title>
        <functioncall prog_lang="cpp">void ImGui_SetTabItemClosed(ImGui_Context* ctx, const char* tab_or_docked_window_label)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetTabItemClosed", ImGui_Context ctx, "tab_or_docked_window_label")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetTabItemClosed(ImGui_Context ctx, string tab_or_docked_window_label)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetTabItemClosed(ImGui_Context* ctx, const char* tab_or_docked_window_label)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Notify TabBar or Docking system of a closed tab/window ahead
         (useful to reduce visual flicker on reorderable tab bars).
         For tab-bar: call after BeginTabBar and before Tab submissions.
         Otherwise call with a window name.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string tab_or_docked_window_label -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetTooltip</slug>
        <title>ImGui_SetTooltip</title>
        <functioncall prog_lang="cpp">void ImGui_SetTooltip(ImGui_Context* ctx, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetTooltip", ImGui_Context ctx, "text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetTooltip(ImGui_Context ctx, string text)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetTooltip(ImGui_Context* ctx, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set a text-only tooltip, typically use with IsItemHovered. override any
         previous call to SetTooltip.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetWindowCollapsed</slug>
        <title>ImGui_SetWindowCollapsed</title>
        <functioncall prog_lang="cpp">void ImGui_SetWindowCollapsed(ImGui_Context* ctx, bool collapsed, int* condInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetWindowCollapsed", ImGui_Context ctx, bool collapsed, optional int condIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetWindowCollapsed(ImGui_Context ctx, boolean collapsed, optional integer condIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetWindowCollapsed(ImGui_Context* ctx, bool collapsed, int* condInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         (Not recommended) Set current window collapsed state.
         Prefer using SetNextWindowCollapsed.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            boolean collapsed - 
            optional integer condIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetWindowCollapsedEx</slug>
        <title>ImGui_SetWindowCollapsedEx</title>
        <functioncall prog_lang="cpp">void ImGui_SetWindowCollapsedEx(ImGui_Context* ctx, const char* name, bool collapsed, int* condInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetWindowCollapsedEx", ImGui_Context ctx, "name", bool collapsed, optional int condIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetWindowCollapsedEx(ImGui_Context ctx, string name, boolean collapsed, optional integer condIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetWindowCollapsedEx(ImGui_Context* ctx, const char* name, bool collapsed, int* condInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set named window collapsed state.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string name - 
            boolean collapsed - 
            optional integer condIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetWindowFocus</slug>
        <title>ImGui_SetWindowFocus</title>
        <functioncall prog_lang="cpp">void ImGui_SetWindowFocus(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetWindowFocus", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetWindowFocus(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetWindowFocus(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         (Not recommended) Set current window to be focused / top-most.
         Prefer using SetNextWindowFocus.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetWindowFocusEx</slug>
        <title>ImGui_SetWindowFocusEx</title>
        <functioncall prog_lang="cpp">void ImGui_SetWindowFocusEx(ImGui_Context* ctx, const char* name)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetWindowFocusEx", ImGui_Context ctx, "name")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetWindowFocusEx(ImGui_Context ctx, string name)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetWindowFocusEx(ImGui_Context* ctx, const char* name)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set named window to be focused / top-most. Use an empty name to remove focus.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string name -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetWindowPos</slug>
        <title>ImGui_SetWindowPos</title>
        <functioncall prog_lang="cpp">void ImGui_SetWindowPos(ImGui_Context* ctx, double pos_x, double pos_y, int* condInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetWindowPos", ImGui_Context ctx, pos_x, pos_y, optional int condIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetWindowPos(ImGui_Context ctx, number pos_x, number pos_y, optional integer condIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetWindowPos(ImGui_Context* ctx, double pos_x, double pos_y, int* condInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         (Not recommended) Set current window position - call within Begin/End.
         Prefer using SetNextWindowPos, as this may incur tearing and minor side-effects.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number pos_x - 
            number pos_y - 
            optional integer condIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetWindowPosEx</slug>
        <title>ImGui_SetWindowPosEx</title>
        <functioncall prog_lang="cpp">void ImGui_SetWindowPosEx(ImGui_Context* ctx, const char* name, double pos_x, double pos_y, int* condInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetWindowPosEx", ImGui_Context ctx, "name", pos_x, pos_y, optional int condIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetWindowPosEx(ImGui_Context ctx, string name, number pos_x, number pos_y, optional integer condIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetWindowPosEx(ImGui_Context* ctx, const char* name, double pos_x, double pos_y, int* condInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set named window position.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string name - 
            number pos_x - 
            number pos_y - 
            optional integer condIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetWindowSize</slug>
        <title>ImGui_SetWindowSize</title>
        <functioncall prog_lang="cpp">void ImGui_SetWindowSize(ImGui_Context* ctx, double size_w, double size_h, int* condInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetWindowSize", ImGui_Context ctx, size_w, size_h, optional int condIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetWindowSize(ImGui_Context ctx, number size_w, number size_h, optional integer condIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetWindowSize(ImGui_Context* ctx, double size_w, double size_h, int* condInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         (Not recommended) Set current window size - call within Begin/End.
         Set size_w and size_h to 0 to force an auto-fit.
         Prefer using SetNextWindowSize, as this may incur tearing and minor side-effects.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            number size_w - 
            number size_h - 
            optional integer condIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SetWindowSizeEx</slug>
        <title>ImGui_SetWindowSizeEx</title>
        <functioncall prog_lang="cpp">void ImGui_SetWindowSizeEx(ImGui_Context* ctx, const char* name, double size_w, double size_h, int* condInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_SetWindowSizeEx", ImGui_Context ctx, "name", size_w, size_h, optional int condIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_SetWindowSizeEx(ImGui_Context ctx, string name, number size_w, number size_h, optional integer condIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_SetWindowSizeEx(ImGui_Context* ctx, const char* name, double size_w, double size_h, int* condInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set named window size. Set axis to 0.0 to force an auto-fit on this axis.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string name - 
            number size_w - 
            number size_h - 
            optional integer condIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ShowAboutWindow</slug>
        <title>ImGui_ShowAboutWindow</title>
        <functioncall prog_lang="cpp">void ImGui_ShowAboutWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ShowAboutWindow", ImGui_Context ctx, optional bool &amp;p_open)</functioncall>
        <functioncall prog_lang="lua">optional boolean p_open = reaper.ImGui_ShowAboutWindow(ImGui_Context ctx, optional boolean p_open)</functioncall>
        <functioncall prog_lang="python">void ImGui_ShowAboutWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Create About window.
         Display ReaImGui version, Dear ImGui version, credits and build/system information.
        </description>        
        <retvals>
            optional boolean p_open - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional boolean p_open -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ShowDebugLogWindow</slug>
        <title>ImGui_ShowDebugLogWindow</title>
        <functioncall prog_lang="cpp">void ImGui_ShowDebugLogWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ShowDebugLogWindow", ImGui_Context ctx, optional bool &amp;p_open)</functioncall>
        <functioncall prog_lang="lua">optional boolean p_open = reaper.ImGui_ShowDebugLogWindow(ImGui_Context ctx, optional boolean p_open)</functioncall>
        <functioncall prog_lang="python">void ImGui_ShowDebugLogWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Create Debug Log window. display a simplified log of important dear imgui events.
        </description>        
        <retvals>
            optional boolean p_open - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional boolean p_open -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ShowMetricsWindow</slug>
        <title>ImGui_ShowMetricsWindow</title>
        <functioncall prog_lang="cpp">void ImGui_ShowMetricsWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ShowMetricsWindow", ImGui_Context ctx, optional bool &amp;p_open)</functioncall>
        <functioncall prog_lang="lua">optional boolean p_open = reaper.ImGui_ShowMetricsWindow(ImGui_Context ctx, optional boolean p_open)</functioncall>
        <functioncall prog_lang="python">void ImGui_ShowMetricsWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Create Metrics/Debugger window.
         Display Dear ImGui internals: windows, draw commands, various internal state, etc.
        </description>        
        <retvals>
            optional boolean p_open - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional boolean p_open -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ShowStackToolWindow</slug>
        <title>ImGui_ShowStackToolWindow</title>
        <functioncall prog_lang="cpp">void ImGui_ShowStackToolWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_ShowStackToolWindow", ImGui_Context ctx, optional bool &amp;p_open)</functioncall>
        <functioncall prog_lang="lua">optional boolean p_open = reaper.ImGui_ShowStackToolWindow(ImGui_Context ctx, optional boolean p_open)</functioncall>
        <functioncall prog_lang="python">void ImGui_ShowStackToolWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Create Stack Tool window. Hover items with mouse to query information about
         the source of their unique ID.
        </description>        
        <retvals>
            optional boolean p_open - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional boolean p_open -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderAngle</slug>
        <title>ImGui_SliderAngle</title>
        <functioncall prog_lang="cpp">bool ImGui_SliderAngle(ImGui_Context* ctx, const char* label, double* v_radInOut, double* v_degrees_minInOptional, double* v_degrees_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SliderAngle", ImGui_Context ctx, "label", &amp;v_rad, optional v_degrees_minIn, optional v_degrees_maxIn, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v_rad = reaper.ImGui_SliderAngle(ImGui_Context ctx, string label, number v_rad, optional number v_degrees_minIn, optional number v_degrees_maxIn, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SliderAngle(ImGui_Context* ctx, const char* label, double* v_radInOut, double* v_degrees_minInOptional, double* v_degrees_maxInOptional, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v_rad - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v_rad - 
            optional number v_degrees_minIn - 
            optional number v_degrees_maxIn - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderDouble</slug>
        <title>ImGui_SliderDouble</title>
        <functioncall prog_lang="cpp">bool ImGui_SliderDouble(ImGui_Context* ctx, const char* label, double* vInOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SliderDouble", ImGui_Context ctx, "label", &amp;v, v_min, v_max, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v = reaper.ImGui_SliderDouble(ImGui_Context ctx, string label, number v, number v_min, number v_max, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SliderDouble(ImGui_Context* ctx, const char* label, double* vInOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v - 
            number v_min - 
            number v_max - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderDouble2</slug>
        <title>ImGui_SliderDouble2</title>
        <functioncall prog_lang="cpp">bool ImGui_SliderDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SliderDouble2", ImGui_Context ctx, "label", &amp;v1, &amp;v2, v_min, v_max, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v1, number v2 = reaper.ImGui_SliderDouble2(ImGui_Context ctx, string label, number v1, number v2, number v_min, number v_max, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SliderDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v1 - 
            number v2 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v1 - 
            number v2 - 
            number v_min - 
            number v_max - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderDouble3</slug>
        <title>ImGui_SliderDouble3</title>
        <functioncall prog_lang="cpp">bool ImGui_SliderDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SliderDouble3", ImGui_Context ctx, "label", &amp;v1, &amp;v2, &amp;v3, v_min, v_max, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v1, number v2, number v3 = reaper.ImGui_SliderDouble3(ImGui_Context ctx, string label, number v1, number v2, number v3, number v_min, number v_max, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SliderDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v1 - 
            number v2 - 
            number v3 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v1 - 
            number v2 - 
            number v3 - 
            number v_min - 
            number v_max - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderDouble4</slug>
        <title>ImGui_SliderDouble4</title>
        <functioncall prog_lang="cpp">bool ImGui_SliderDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SliderDouble4", ImGui_Context ctx, "label", &amp;v1, &amp;v2, &amp;v3, &amp;v4, v_min, v_max, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v1, number v2, number v3, number v4 = reaper.ImGui_SliderDouble4(ImGui_Context ctx, string label, number v1, number v2, number v3, number v4, number v_min, number v_max, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SliderDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v1 - 
            number v2 - 
            number v3 - 
            number v4 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number v1 - 
            number v2 - 
            number v3 - 
            number v4 - 
            number v_min - 
            number v_max - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderDoubleN</slug>
        <title>ImGui_SliderDoubleN</title>
        <functioncall prog_lang="cpp">bool ImGui_SliderDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SliderDoubleN", ImGui_Context ctx, "label", reaper_array values, v_min, v_max, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_SliderDoubleN(ImGui_Context ctx, string labelreaper_array values, number v_min, number v_max, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SliderDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string labelreaper_array values - 
            number v_min - 
            number v_max - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderFlags_AlwaysClamp</slug>
        <title>ImGui_SliderFlags_AlwaysClamp</title>
        <functioncall prog_lang="cpp">int ImGui_SliderFlags_AlwaysClamp()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SliderFlags_AlwaysClamp")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SliderFlags_AlwaysClamp()</functioncall>
        <functioncall prog_lang="python">int ImGui_SliderFlags_AlwaysClamp()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Clamp value to min/max bounds when input manually with CTRL+Click.
            By default CTRL+Click allows going out of bounds.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderFlags_Logarithmic</slug>
        <title>ImGui_SliderFlags_Logarithmic</title>
        <functioncall prog_lang="cpp">int ImGui_SliderFlags_Logarithmic()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SliderFlags_Logarithmic")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SliderFlags_Logarithmic()</functioncall>
        <functioncall prog_lang="python">int ImGui_SliderFlags_Logarithmic()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Make the widget logarithmic (linear otherwise).
            Consider using SliderFlags_NoRoundToFormat with this if using a format-string
            with small amount of digits.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderFlags_NoInput</slug>
        <title>ImGui_SliderFlags_NoInput</title>
        <functioncall prog_lang="cpp">int ImGui_SliderFlags_NoInput()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SliderFlags_NoInput")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SliderFlags_NoInput()</functioncall>
        <functioncall prog_lang="python">int ImGui_SliderFlags_NoInput()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable CTRL+Click or Enter key allowing to input text directly into the widget.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderFlags_NoRoundToFormat</slug>
        <title>ImGui_SliderFlags_NoRoundToFormat</title>
        <functioncall prog_lang="cpp">int ImGui_SliderFlags_NoRoundToFormat()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SliderFlags_NoRoundToFormat")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SliderFlags_NoRoundToFormat()</functioncall>
        <functioncall prog_lang="python">int ImGui_SliderFlags_NoRoundToFormat()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable rounding underlying value to match precision of the display format
            string (e.g. %.3f values are rounded to those 3 digits).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderFlags_None</slug>
        <title>ImGui_SliderFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_SliderFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SliderFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SliderFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_SliderFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderInt</slug>
        <title>ImGui_SliderInt</title>
        <functioncall prog_lang="cpp">bool ImGui_SliderInt(ImGui_Context* ctx, const char* label, int* vInOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SliderInt", ImGui_Context ctx, "label", int &amp;v, int v_min, int v_max, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v = reaper.ImGui_SliderInt(ImGui_Context ctx, string label, integer v, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SliderInt(ImGui_Context* ctx, const char* label, int* vInOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v - 
            integer v_min - 
            integer v_max - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderInt2</slug>
        <title>ImGui_SliderInt2</title>
        <functioncall prog_lang="cpp">bool ImGui_SliderInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SliderInt2", ImGui_Context ctx, "label", int &amp;v1, int &amp;v2, int v_min, int v_max, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v1, integer v2 = reaper.ImGui_SliderInt2(ImGui_Context ctx, string label, integer v1, integer v2, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SliderInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v1 - 
            integer v2 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v1 - 
            integer v2 - 
            integer v_min - 
            integer v_max - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderInt3</slug>
        <title>ImGui_SliderInt3</title>
        <functioncall prog_lang="cpp">bool ImGui_SliderInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SliderInt3", ImGui_Context ctx, "label", int &amp;v1, int &amp;v2, int &amp;v3, int v_min, int v_max, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v1, integer v2, integer v3 = reaper.ImGui_SliderInt3(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SliderInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
            integer v_min - 
            integer v_max - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SliderInt4</slug>
        <title>ImGui_SliderInt4</title>
        <functioncall prog_lang="cpp">bool ImGui_SliderInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SliderInt4", ImGui_Context ctx, "label", int &amp;v1, int &amp;v2, int &amp;v3, int &amp;v4, int v_min, int v_max, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v1, integer v2, integer v3, integer v4 = reaper.ImGui_SliderInt4(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v4, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SliderInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
            integer v4 - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            integer v1 - 
            integer v2 - 
            integer v3 - 
            integer v4 - 
            integer v_min - 
            integer v_max - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SmallButton</slug>
        <title>ImGui_SmallButton</title>
        <functioncall prog_lang="cpp">bool ImGui_SmallButton(ImGui_Context* ctx, const char* label)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_SmallButton", ImGui_Context ctx, "label")</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_SmallButton(ImGui_Context ctx, string label)</functioncall>
        <functioncall prog_lang="python">bool ImGui_SmallButton(ImGui_Context* ctx, const char* label)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Button with StyleVar_FramePadding=(0,0) to easily embed within text.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SortDirection_Ascending</slug>
        <title>ImGui_SortDirection_Ascending</title>
        <functioncall prog_lang="cpp">int ImGui_SortDirection_Ascending()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SortDirection_Ascending")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SortDirection_Ascending()</functioncall>
        <functioncall prog_lang="python">int ImGui_SortDirection_Ascending()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Ascending = 0-&gt;9, A-&gt;Z etc.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SortDirection_Descending</slug>
        <title>ImGui_SortDirection_Descending</title>
        <functioncall prog_lang="cpp">int ImGui_SortDirection_Descending()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SortDirection_Descending")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SortDirection_Descending()</functioncall>
        <functioncall prog_lang="python">int ImGui_SortDirection_Descending()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Descending = 9-&gt;0, Z-&gt;A etc.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_SortDirection_None</slug>
        <title>ImGui_SortDirection_None</title>
        <functioncall prog_lang="cpp">int ImGui_SortDirection_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_SortDirection_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_SortDirection_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_SortDirection_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Spacing</slug>
        <title>ImGui_Spacing</title>
        <functioncall prog_lang="cpp">void ImGui_Spacing(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Spacing", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Spacing(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_Spacing(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Add vertical spacing.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_Alpha</slug>
        <title>ImGui_StyleVar_Alpha</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_Alpha()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_Alpha")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_Alpha()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_Alpha()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Global alpha applies to everything in Dear ImGui.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_ButtonTextAlign</slug>
        <title>ImGui_StyleVar_ButtonTextAlign</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_ButtonTextAlign()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_ButtonTextAlign")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_ButtonTextAlign()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_ButtonTextAlign()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Alignment of button text when button is larger than text.
            Defaults to (0.5, 0.5) (centered).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_CellPadding</slug>
        <title>ImGui_StyleVar_CellPadding</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_CellPadding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_CellPadding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_CellPadding()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_CellPadding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Padding within a table cell.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_ChildBorderSize</slug>
        <title>ImGui_StyleVar_ChildBorderSize</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_ChildBorderSize()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_ChildBorderSize")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_ChildBorderSize()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_ChildBorderSize()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Thickness of border around child windows. Generally set to 0.0 or 1.0.
            (Other values are not well tested and more CPU/GPU costly).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_ChildRounding</slug>
        <title>ImGui_StyleVar_ChildRounding</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_ChildRounding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_ChildRounding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_ChildRounding()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_ChildRounding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Radius of child window corners rounding. Set to 0.0 to have rectangular windows.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_DisabledAlpha</slug>
        <title>ImGui_StyleVar_DisabledAlpha</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_DisabledAlpha()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_DisabledAlpha")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_DisabledAlpha()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_DisabledAlpha()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Additional alpha multiplier applied by BeginDisabled.
           Multiply over current value of Alpha.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_FrameBorderSize</slug>
        <title>ImGui_StyleVar_FrameBorderSize</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_FrameBorderSize()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_FrameBorderSize")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_FrameBorderSize()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_FrameBorderSize()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Thickness of border around frames. Generally set to 0.0 or 1.0.
            (Other values are not well tested and more CPU/GPU costly).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_FramePadding</slug>
        <title>ImGui_StyleVar_FramePadding</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_FramePadding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_FramePadding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_FramePadding()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_FramePadding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Padding within a framed rectangle (used by most widgets).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_FrameRounding</slug>
        <title>ImGui_StyleVar_FrameRounding</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_FrameRounding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_FrameRounding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_FrameRounding()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_FrameRounding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Radius of frame corners rounding.
            Set to 0.0 to have rectangular frame (used by most widgets).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_GrabMinSize</slug>
        <title>ImGui_StyleVar_GrabMinSize</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_GrabMinSize()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_GrabMinSize")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_GrabMinSize()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_GrabMinSize()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Minimum width/height of a grab box for slider/scrollbar.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_GrabRounding</slug>
        <title>ImGui_StyleVar_GrabRounding</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_GrabRounding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_GrabRounding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_GrabRounding()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_GrabRounding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Radius of grabs corners rounding. Set to 0.0 to have rectangular slider grabs.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_IndentSpacing</slug>
        <title>ImGui_StyleVar_IndentSpacing</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_IndentSpacing()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_IndentSpacing")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_IndentSpacing()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_IndentSpacing()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Horizontal indentation when e.g. entering a tree node.
            Generally == (GetFontSize + StyleVar_FramePadding.x*2).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_ItemInnerSpacing</slug>
        <title>ImGui_StyleVar_ItemInnerSpacing</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_ItemInnerSpacing()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_ItemInnerSpacing")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_ItemInnerSpacing()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_ItemInnerSpacing()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Horizontal and vertical spacing between within elements of a composed widget
            (e.g. a slider and its label).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_ItemSpacing</slug>
        <title>ImGui_StyleVar_ItemSpacing</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_ItemSpacing()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_ItemSpacing")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_ItemSpacing()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_ItemSpacing()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Horizontal and vertical spacing between widgets/lines.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_PopupBorderSize</slug>
        <title>ImGui_StyleVar_PopupBorderSize</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_PopupBorderSize()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_PopupBorderSize")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_PopupBorderSize()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_PopupBorderSize()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Thickness of border around popup/tooltip windows. Generally set to 0.0 or 1.0.
            (Other values are not well tested and more CPU/GPU costly).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_PopupRounding</slug>
        <title>ImGui_StyleVar_PopupRounding</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_PopupRounding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_PopupRounding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_PopupRounding()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_PopupRounding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Radius of popup window corners rounding.
            (Note that tooltip windows use StyleVar_WindowRounding.)
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_ScrollbarRounding</slug>
        <title>ImGui_StyleVar_ScrollbarRounding</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_ScrollbarRounding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_ScrollbarRounding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_ScrollbarRounding()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_ScrollbarRounding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Radius of grab corners for scrollbar.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_ScrollbarSize</slug>
        <title>ImGui_StyleVar_ScrollbarSize</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_ScrollbarSize()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_ScrollbarSize")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_ScrollbarSize()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_ScrollbarSize()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Width of the vertical scrollbar, Height of the horizontal scrollbar.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_SelectableTextAlign</slug>
        <title>ImGui_StyleVar_SelectableTextAlign</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_SelectableTextAlign()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_SelectableTextAlign")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_SelectableTextAlign()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_SelectableTextAlign()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Alignment of selectable text. Defaults to (0.0, 0.0) (top-left aligned).
            It's generally important to keep this left-aligned if you want to lay
            multiple items on a same line.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_SeparatorTextAlign</slug>
        <title>ImGui_StyleVar_SeparatorTextAlign</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_SeparatorTextAlign()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_SeparatorTextAlign")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_SeparatorTextAlign()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_SeparatorTextAlign()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Alignment of text within the separator.
         Defaults to (0.0, 0.5) (left aligned, center).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_SeparatorTextBorderSize</slug>
        <title>ImGui_StyleVar_SeparatorTextBorderSize</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_SeparatorTextBorderSize()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_SeparatorTextBorderSize")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_SeparatorTextBorderSize()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_SeparatorTextBorderSize()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Thickness of border in SeparatorText()
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_SeparatorTextPadding</slug>
        <title>ImGui_StyleVar_SeparatorTextPadding</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_SeparatorTextPadding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_SeparatorTextPadding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_SeparatorTextPadding()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_SeparatorTextPadding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Horizontal offset of text from each edge of the separator + spacing on other
         axis. Generally small values. .y is recommended to be == StyleVar_FramePadding.y.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_TabRounding</slug>
        <title>ImGui_StyleVar_TabRounding</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_TabRounding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_TabRounding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_TabRounding()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_TabRounding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Radius of upper corners of a tab. Set to 0.0 to have rectangular tabs.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_WindowBorderSize</slug>
        <title>ImGui_StyleVar_WindowBorderSize</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_WindowBorderSize()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_WindowBorderSize")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_WindowBorderSize()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_WindowBorderSize()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Thickness of border around windows. Generally set to 0.0 or 1.0.
           (Other values are not well tested and more CPU/GPU costly).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_WindowMinSize</slug>
        <title>ImGui_StyleVar_WindowMinSize</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_WindowMinSize()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_WindowMinSize")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_WindowMinSize()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_WindowMinSize()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Minimum window size. This is a global setting.
           If you want to constrain individual windows, use SetNextWindowSizeConstraints.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_WindowPadding</slug>
        <title>ImGui_StyleVar_WindowPadding</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_WindowPadding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_WindowPadding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_WindowPadding()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_WindowPadding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Padding within a window.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_WindowRounding</slug>
        <title>ImGui_StyleVar_WindowRounding</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_WindowRounding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_WindowRounding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_WindowRounding()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_WindowRounding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Radius of window corners rounding. Set to 0.0 to have rectangular windows.
           Large values tend to lead to variety of artifacts and are not recommended.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_StyleVar_WindowTitleAlign</slug>
        <title>ImGui_StyleVar_WindowTitleAlign</title>
        <functioncall prog_lang="cpp">int ImGui_StyleVar_WindowTitleAlign()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_StyleVar_WindowTitleAlign")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_StyleVar_WindowTitleAlign()</functioncall>
        <functioncall prog_lang="python">int ImGui_StyleVar_WindowTitleAlign()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Alignment for title bar text.
            Defaults to (0.0,0.5) for left-aligned,vertically centered.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabBarFlags_AutoSelectNewTabs</slug>
        <title>ImGui_TabBarFlags_AutoSelectNewTabs</title>
        <functioncall prog_lang="cpp">int ImGui_TabBarFlags_AutoSelectNewTabs()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabBarFlags_AutoSelectNewTabs")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabBarFlags_AutoSelectNewTabs()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabBarFlags_AutoSelectNewTabs()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Automatically select new tabs when they appear.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabBarFlags_FittingPolicyResizeDown</slug>
        <title>ImGui_TabBarFlags_FittingPolicyResizeDown</title>
        <functioncall prog_lang="cpp">int ImGui_TabBarFlags_FittingPolicyResizeDown()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabBarFlags_FittingPolicyResizeDown")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabBarFlags_FittingPolicyResizeDown()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabBarFlags_FittingPolicyResizeDown()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Resize tabs when they don't fit.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabBarFlags_FittingPolicyScroll</slug>
        <title>ImGui_TabBarFlags_FittingPolicyScroll</title>
        <functioncall prog_lang="cpp">int ImGui_TabBarFlags_FittingPolicyScroll()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabBarFlags_FittingPolicyScroll")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabBarFlags_FittingPolicyScroll()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabBarFlags_FittingPolicyScroll()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Add scroll buttons when tabs don't fit.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabBarFlags_NoCloseWithMiddleMouseButton</slug>
        <title>ImGui_TabBarFlags_NoCloseWithMiddleMouseButton</title>
        <functioncall prog_lang="cpp">int ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabBarFlags_NoCloseWithMiddleMouseButton")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable behavior of closing tabs (that are submitted with p_open != nil)
            with middle mouse button. You can still repro this behavior on user's side
            with if(IsItemHovered() &amp;&amp; IsMouseClicked(2)) p_open = false.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabBarFlags_NoTabListScrollingButtons</slug>
        <title>ImGui_TabBarFlags_NoTabListScrollingButtons</title>
        <functioncall prog_lang="cpp">int ImGui_TabBarFlags_NoTabListScrollingButtons()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabBarFlags_NoTabListScrollingButtons")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabBarFlags_NoTabListScrollingButtons()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabBarFlags_NoTabListScrollingButtons()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable scrolling buttons (apply when fitting policy is
            TabBarFlags_FittingPolicyScroll).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabBarFlags_NoTooltip</slug>
        <title>ImGui_TabBarFlags_NoTooltip</title>
        <functioncall prog_lang="cpp">int ImGui_TabBarFlags_NoTooltip()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabBarFlags_NoTooltip")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabBarFlags_NoTooltip()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabBarFlags_NoTooltip()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable tooltips when hovering a tab.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabBarFlags_None</slug>
        <title>ImGui_TabBarFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_TabBarFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabBarFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabBarFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabBarFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabBarFlags_Reorderable</slug>
        <title>ImGui_TabBarFlags_Reorderable</title>
        <functioncall prog_lang="cpp">int ImGui_TabBarFlags_Reorderable()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabBarFlags_Reorderable")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabBarFlags_Reorderable()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabBarFlags_Reorderable()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Allow manually dragging tabs to re-order them + New tabs are appended at
            the end of list.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabBarFlags_TabListPopupButton</slug>
        <title>ImGui_TabBarFlags_TabListPopupButton</title>
        <functioncall prog_lang="cpp">int ImGui_TabBarFlags_TabListPopupButton()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabBarFlags_TabListPopupButton")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabBarFlags_TabListPopupButton()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabBarFlags_TabListPopupButton()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable buttons to open the tab list popup.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabItemButton</slug>
        <title>ImGui_TabItemButton</title>
        <functioncall prog_lang="cpp">bool ImGui_TabItemButton(ImGui_Context* ctx, const char* label, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TabItemButton", ImGui_Context ctx, "label", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_TabItemButton(ImGui_Context ctx, string label, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_TabItemButton(ImGui_Context* ctx, const char* label, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Create a Tab behaving like a button. Return true when clicked.
         Cannot be selected in the tab bar.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabItemFlags_Leading</slug>
        <title>ImGui_TabItemFlags_Leading</title>
        <functioncall prog_lang="cpp">int ImGui_TabItemFlags_Leading()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabItemFlags_Leading")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabItemFlags_Leading()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabItemFlags_Leading()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enforce the tab position to the left of the tab bar (after the tab list popup button).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabItemFlags_NoCloseWithMiddleMouseButton</slug>
        <title>ImGui_TabItemFlags_NoCloseWithMiddleMouseButton</title>
        <functioncall prog_lang="cpp">int ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabItemFlags_NoCloseWithMiddleMouseButton")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable behavior of closing tabs (that are submitted with p_open != nil) with
            middle mouse button. You can still repro this behavior on user's side with
            if(IsItemHovered() &amp;&amp; IsMouseClicked(2)) p_open = false.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabItemFlags_NoPushId</slug>
        <title>ImGui_TabItemFlags_NoPushId</title>
        <functioncall prog_lang="cpp">int ImGui_TabItemFlags_NoPushId()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabItemFlags_NoPushId")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabItemFlags_NoPushId()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabItemFlags_NoPushId()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Don't call PushID(tab-&gt;ID)/PopID() on BeginTabItem/EndTabItem.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabItemFlags_NoReorder</slug>
        <title>ImGui_TabItemFlags_NoReorder</title>
        <functioncall prog_lang="cpp">int ImGui_TabItemFlags_NoReorder()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabItemFlags_NoReorder")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabItemFlags_NoReorder()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabItemFlags_NoReorder()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable reordering this tab or having another tab cross over this tab.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabItemFlags_NoTooltip</slug>
        <title>ImGui_TabItemFlags_NoTooltip</title>
        <functioncall prog_lang="cpp">int ImGui_TabItemFlags_NoTooltip()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabItemFlags_NoTooltip")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabItemFlags_NoTooltip()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabItemFlags_NoTooltip()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable tooltip for the given tab.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabItemFlags_None</slug>
        <title>ImGui_TabItemFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_TabItemFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabItemFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabItemFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabItemFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabItemFlags_SetSelected</slug>
        <title>ImGui_TabItemFlags_SetSelected</title>
        <functioncall prog_lang="cpp">int ImGui_TabItemFlags_SetSelected()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabItemFlags_SetSelected")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabItemFlags_SetSelected()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabItemFlags_SetSelected()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Trigger flag to programmatically make the tab selected when calling BeginTabItem.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabItemFlags_Trailing</slug>
        <title>ImGui_TabItemFlags_Trailing</title>
        <functioncall prog_lang="cpp">int ImGui_TabItemFlags_Trailing()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabItemFlags_Trailing")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabItemFlags_Trailing()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabItemFlags_Trailing()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enforce the tab position to the right of the tab bar (before the scrolling buttons).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TabItemFlags_UnsavedDocument</slug>
        <title>ImGui_TabItemFlags_UnsavedDocument</title>
        <functioncall prog_lang="cpp">int ImGui_TabItemFlags_UnsavedDocument()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TabItemFlags_UnsavedDocument")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TabItemFlags_UnsavedDocument()</functioncall>
        <functioncall prog_lang="python">int ImGui_TabItemFlags_UnsavedDocument()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Append '*' to title without affecting the ID, as a convenience to avoid using
            the ### operator. Also: tab is selected on closure and closure is deferred by
            one frame to allow code to undo it without flicker.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableBgTarget_CellBg</slug>
        <title>ImGui_TableBgTarget_CellBg</title>
        <functioncall prog_lang="cpp">int ImGui_TableBgTarget_CellBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableBgTarget_CellBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableBgTarget_CellBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableBgTarget_CellBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set cell background color (top-most color).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableBgTarget_None</slug>
        <title>ImGui_TableBgTarget_None</title>
        <functioncall prog_lang="cpp">int ImGui_TableBgTarget_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableBgTarget_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableBgTarget_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableBgTarget_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableBgTarget_RowBg0</slug>
        <title>ImGui_TableBgTarget_RowBg0</title>
        <functioncall prog_lang="cpp">int ImGui_TableBgTarget_RowBg0()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableBgTarget_RowBg0")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableBgTarget_RowBg0()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableBgTarget_RowBg0()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set row background color 0 (generally used for background,
            automatically set when TableFlags_RowBg is used).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableBgTarget_RowBg1</slug>
        <title>ImGui_TableBgTarget_RowBg1</title>
        <functioncall prog_lang="cpp">int ImGui_TableBgTarget_RowBg1()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableBgTarget_RowBg1")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableBgTarget_RowBg1()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableBgTarget_RowBg1()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set row background color 1 (generally used for selection marking).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_DefaultHide</slug>
        <title>ImGui_TableColumnFlags_DefaultHide</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_DefaultHide()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_DefaultHide")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_DefaultHide()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_DefaultHide()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Default as a hidden/disabled column.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_DefaultSort</slug>
        <title>ImGui_TableColumnFlags_DefaultSort</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_DefaultSort()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_DefaultSort")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_DefaultSort()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_DefaultSort()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Default as a sorting column.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_Disabled</slug>
        <title>ImGui_TableColumnFlags_Disabled</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_Disabled()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_Disabled")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_Disabled()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_Disabled()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Overriding/master disable flag: hide column, won't show in context menu
            (unlike calling TableSetColumnEnabled which manipulates the user accessible state).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_IndentDisable</slug>
        <title>ImGui_TableColumnFlags_IndentDisable</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_IndentDisable()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_IndentDisable")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_IndentDisable()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_IndentDisable()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Ignore current Indent value when entering cell (default for columns &gt; 0).
            Indentation changes _within_ the cell will still be honored.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_IndentEnable</slug>
        <title>ImGui_TableColumnFlags_IndentEnable</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_IndentEnable()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_IndentEnable")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_IndentEnable()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_IndentEnable()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Use current Indent value when entering cell (default for column 0).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_IsEnabled</slug>
        <title>ImGui_TableColumnFlags_IsEnabled</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_IsEnabled()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_IsEnabled")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_IsEnabled()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_IsEnabled()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Status: is enabled == not hidden by user/api (referred to as "Hide" in
            _DefaultHide and _NoHide) flags.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_IsHovered</slug>
        <title>ImGui_TableColumnFlags_IsHovered</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_IsHovered()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_IsHovered")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_IsHovered()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_IsHovered()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Status: is hovered by mouse.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_IsSorted</slug>
        <title>ImGui_TableColumnFlags_IsSorted</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_IsSorted()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_IsSorted")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_IsSorted()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_IsSorted()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Status: is currently part of the sort specs.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_IsVisible</slug>
        <title>ImGui_TableColumnFlags_IsVisible</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_IsVisible()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_IsVisible")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_IsVisible()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_IsVisible()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Status: is visible == is enabled AND not clipped by scrolling.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_NoClip</slug>
        <title>ImGui_TableColumnFlags_NoClip</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_NoClip()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_NoClip")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_NoClip()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_NoClip()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable clipping for this column
            (all NoClip columns will render in a same draw command).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_NoHeaderLabel</slug>
        <title>ImGui_TableColumnFlags_NoHeaderLabel</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_NoHeaderLabel()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_NoHeaderLabel")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_NoHeaderLabel()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_NoHeaderLabel()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         TableHeadersRow will not submit label for this column.
            Convenient for some small columns. Name will still appear in context menu.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_NoHeaderWidth</slug>
        <title>ImGui_TableColumnFlags_NoHeaderWidth</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_NoHeaderWidth()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_NoHeaderWidth")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_NoHeaderWidth()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_NoHeaderWidth()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable header text width contribution to automatic column width.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_NoHide</slug>
        <title>ImGui_TableColumnFlags_NoHide</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_NoHide()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_NoHide")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_NoHide()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_NoHide()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable ability to hide/disable this column.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_NoReorder</slug>
        <title>ImGui_TableColumnFlags_NoReorder</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_NoReorder()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_NoReorder")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_NoReorder()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_NoReorder()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable manual reordering this column, this will also prevent other columns
            from crossing over this column.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_NoResize</slug>
        <title>ImGui_TableColumnFlags_NoResize</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_NoResize()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_NoResize")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_NoResize()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_NoResize()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable manual resizing.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_NoSort</slug>
        <title>ImGui_TableColumnFlags_NoSort</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_NoSort()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_NoSort")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_NoSort()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_NoSort()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable ability to sort on this field
            (even if TableFlags_Sortable is set on the table).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_NoSortAscending</slug>
        <title>ImGui_TableColumnFlags_NoSortAscending</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_NoSortAscending()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_NoSortAscending")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_NoSortAscending()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_NoSortAscending()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable ability to sort in the ascending direction.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_NoSortDescending</slug>
        <title>ImGui_TableColumnFlags_NoSortDescending</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_NoSortDescending()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_NoSortDescending")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_NoSortDescending()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_NoSortDescending()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable ability to sort in the descending direction.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_None</slug>
        <title>ImGui_TableColumnFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_PreferSortAscending</slug>
        <title>ImGui_TableColumnFlags_PreferSortAscending</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_PreferSortAscending()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_PreferSortAscending")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_PreferSortAscending()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_PreferSortAscending()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Make the initial sort direction Ascending when first sorting on this column (default).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_PreferSortDescending</slug>
        <title>ImGui_TableColumnFlags_PreferSortDescending</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_PreferSortDescending()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_PreferSortDescending")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_PreferSortDescending()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_PreferSortDescending()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Make the initial sort direction Descending when first sorting on this column.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_WidthFixed</slug>
        <title>ImGui_TableColumnFlags_WidthFixed</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_WidthFixed()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_WidthFixed")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_WidthFixed()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_WidthFixed()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Column will not stretch. Preferable with horizontal scrolling enabled
            (default if table sizing policy is _SizingFixedFit and table is resizable).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableColumnFlags_WidthStretch</slug>
        <title>ImGui_TableColumnFlags_WidthStretch</title>
        <functioncall prog_lang="cpp">int ImGui_TableColumnFlags_WidthStretch()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableColumnFlags_WidthStretch")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableColumnFlags_WidthStretch()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableColumnFlags_WidthStretch()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Column will stretch. Preferable with horizontal scrolling disabled
            (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_Borders</slug>
        <title>ImGui_TableFlags_Borders</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_Borders()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_Borders")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_Borders()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_Borders()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw all borders.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_BordersH</slug>
        <title>ImGui_TableFlags_BordersH</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_BordersH()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_BordersH")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_BordersH()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_BordersH()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw horizontal borders.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_BordersInner</slug>
        <title>ImGui_TableFlags_BordersInner</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_BordersInner()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_BordersInner")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_BordersInner()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_BordersInner()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw inner borders.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_BordersInnerH</slug>
        <title>ImGui_TableFlags_BordersInnerH</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_BordersInnerH()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_BordersInnerH")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_BordersInnerH()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_BordersInnerH()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw horizontal borders between rows.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_BordersInnerV</slug>
        <title>ImGui_TableFlags_BordersInnerV</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_BordersInnerV()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_BordersInnerV")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_BordersInnerV()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_BordersInnerV()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw vertical borders between columns.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_BordersOuter</slug>
        <title>ImGui_TableFlags_BordersOuter</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_BordersOuter()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_BordersOuter")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_BordersOuter()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_BordersOuter()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw outer borders.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_BordersOuterH</slug>
        <title>ImGui_TableFlags_BordersOuterH</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_BordersOuterH()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_BordersOuterH")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_BordersOuterH()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_BordersOuterH()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw horizontal borders at the top and bottom.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_BordersOuterV</slug>
        <title>ImGui_TableFlags_BordersOuterV</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_BordersOuterV()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_BordersOuterV")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_BordersOuterV()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_BordersOuterV()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw vertical borders on the left and right sides.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_BordersV</slug>
        <title>ImGui_TableFlags_BordersV</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_BordersV()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_BordersV")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_BordersV()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_BordersV()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw vertical borders.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_ContextMenuInBody</slug>
        <title>ImGui_TableFlags_ContextMenuInBody</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_ContextMenuInBody()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_ContextMenuInBody")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_ContextMenuInBody()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_ContextMenuInBody()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Right-click on columns body/contents will display table context menu.
            By default it is available in TableHeadersRow.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_Hideable</slug>
        <title>ImGui_TableFlags_Hideable</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_Hideable()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_Hideable")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_Hideable()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_Hideable()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable hiding/disabling columns in context menu.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_NoClip</slug>
        <title>ImGui_TableFlags_NoClip</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_NoClip()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_NoClip")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_NoClip()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_NoClip()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable clipping rectangle for every individual columns
            (reduce draw command count, items will be able to overflow into other columns).
            Generally incompatible with TableSetupScrollFreeze.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_NoHostExtendX</slug>
        <title>ImGui_TableFlags_NoHostExtendX</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_NoHostExtendX()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_NoHostExtendX")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_NoHostExtendX()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_NoHostExtendX()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Make outer width auto-fit to columns, overriding outer_size.x value. Only
            available when ScrollX/ScrollY are disabled and Stretch columns are not used.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_NoHostExtendY</slug>
        <title>ImGui_TableFlags_NoHostExtendY</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_NoHostExtendY()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_NoHostExtendY")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_NoHostExtendY()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_NoHostExtendY()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Make outer height stop exactly at outer_size.y (prevent auto-extending table
            past the limit). Only available when ScrollX/ScrollY are disabled.
            Data below the limit will be clipped and not visible.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_NoKeepColumnsVisible</slug>
        <title>ImGui_TableFlags_NoKeepColumnsVisible</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_NoKeepColumnsVisible()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_NoKeepColumnsVisible")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_NoKeepColumnsVisible()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_NoKeepColumnsVisible()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable keeping column always minimally visible when ScrollX is off and table
            gets too small. Not recommended if columns are resizable.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_NoPadInnerX</slug>
        <title>ImGui_TableFlags_NoPadInnerX</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_NoPadInnerX()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_NoPadInnerX")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_NoPadInnerX()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_NoPadInnerX()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable inner padding between columns (double inner padding if
            TableFlags_BordersOuterV is on, single inner padding if BordersOuterV is off).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_NoPadOuterX</slug>
        <title>ImGui_TableFlags_NoPadOuterX</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_NoPadOuterX()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_NoPadOuterX")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_NoPadOuterX()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_NoPadOuterX()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Default if TableFlags_BordersOuterV is off. Disable outermost padding.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_NoSavedSettings</slug>
        <title>ImGui_TableFlags_NoSavedSettings</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_NoSavedSettings()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_NoSavedSettings")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_NoSavedSettings()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_NoSavedSettings()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable persisting columns order, width and sort settings in the .ini file.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_None</slug>
        <title>ImGui_TableFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_PadOuterX</slug>
        <title>ImGui_TableFlags_PadOuterX</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_PadOuterX()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_PadOuterX")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_PadOuterX()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_PadOuterX()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Default if TableFlags_BordersOuterV is on. Enable outermost padding.
            Generally desirable if you have headers.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_PreciseWidths</slug>
        <title>ImGui_TableFlags_PreciseWidths</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_PreciseWidths()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_PreciseWidths")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_PreciseWidths()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_PreciseWidths()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable distributing remainder width to stretched columns (width allocation
            on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this
            flag: 33,33,33).
            With larger number of columns, resizing will appear to be less smooth.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_Reorderable</slug>
        <title>ImGui_TableFlags_Reorderable</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_Reorderable()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_Reorderable")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_Reorderable()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_Reorderable()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable reordering columns in header row
            (need calling TableSetupColumn + TableHeadersRow to display headers).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_Resizable</slug>
        <title>ImGui_TableFlags_Resizable</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_Resizable()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_Resizable")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_Resizable()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_Resizable()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable resizing columns.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_RowBg</slug>
        <title>ImGui_TableFlags_RowBg</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_RowBg()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_RowBg")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_RowBg()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_RowBg()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Set each RowBg color with Col_TableRowBg or Col_TableRowBgAlt (equivalent of
            calling TableSetBgColor with TableBgTarget_RowBg0 on each row manually).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_ScrollX</slug>
        <title>ImGui_TableFlags_ScrollX</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_ScrollX()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_ScrollX")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_ScrollX()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_ScrollX()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable to
            specify the container size. Changes default sizing policy.
            Because this creates a child window, ScrollY is currently generally
            recommended when using ScrollX.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_ScrollY</slug>
        <title>ImGui_TableFlags_ScrollY</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_ScrollY()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_ScrollY")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_ScrollY()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_ScrollY()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable vertical scrolling.
            Require 'outer_size' parameter of BeginTable to specify the container size.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_SizingFixedFit</slug>
        <title>ImGui_TableFlags_SizingFixedFit</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_SizingFixedFit()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_SizingFixedFit")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_SizingFixedFit()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_SizingFixedFit()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),
            matching contents width.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_SizingFixedSame</slug>
        <title>ImGui_TableFlags_SizingFixedSame</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_SizingFixedSame()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_SizingFixedSame")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_SizingFixedSame()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_SizingFixedSame()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),
            matching the maximum contents width of all columns.
            Implicitly enable TableFlags_NoKeepColumnsVisible.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_SizingStretchProp</slug>
        <title>ImGui_TableFlags_SizingStretchProp</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_SizingStretchProp()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_SizingStretchProp")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_SizingStretchProp()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_SizingStretchProp()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Columns default to _WidthStretch with default weights proportional to each
            columns contents widths.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_SizingStretchSame</slug>
        <title>ImGui_TableFlags_SizingStretchSame</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_SizingStretchSame()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_SizingStretchSame")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_SizingStretchSame()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_SizingStretchSame()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Columns default to _WidthStretch with default weights all equal,
            unless overriden by TableSetupColumn.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_SortMulti</slug>
        <title>ImGui_TableFlags_SortMulti</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_SortMulti()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_SortMulti")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_SortMulti()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_SortMulti()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Hold shift when clicking headers to sort on multiple column.
            TableGetGetSortSpecs may return specs where (SpecsCount &gt; 1).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_SortTristate</slug>
        <title>ImGui_TableFlags_SortTristate</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_SortTristate()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_SortTristate")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_SortTristate()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_SortTristate()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Allow no sorting, disable default sorting.
            TableGetColumnSortSpecs may return specs where (SpecsCount == 0).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableFlags_Sortable</slug>
        <title>ImGui_TableFlags_Sortable</title>
        <functioncall prog_lang="cpp">int ImGui_TableFlags_Sortable()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableFlags_Sortable")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableFlags_Sortable()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableFlags_Sortable()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Enable sorting. Call TableNeedSort/TableGetColumnSortSpecs to obtain sort specs.
            Also see TableFlags_SortMulti and TableFlags_SortTristate.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableGetColumnCount</slug>
        <title>ImGui_TableGetColumnCount</title>
        <functioncall prog_lang="cpp">int ImGui_TableGetColumnCount(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableGetColumnCount", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableGetColumnCount(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">int ImGui_TableGetColumnCount(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return number of columns (value passed to BeginTable).
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableGetColumnFlags</slug>
        <title>ImGui_TableGetColumnFlags</title>
        <functioncall prog_lang="cpp">int ImGui_TableGetColumnFlags(ImGui_Context* ctx, int* column_nInOptional)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableGetColumnFlags", ImGui_Context ctx, optional int column_nIn)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableGetColumnFlags(ImGui_Context ctx, optional integer column_nIn)</functioncall>
        <functioncall prog_lang="python">int ImGui_TableGetColumnFlags(ImGui_Context* ctx, int* column_nInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return column flags so you can query their Enabled/Visible/Sorted/Hovered
         status flags. Pass -1 to use current column.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional integer column_nIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableGetColumnIndex</slug>
        <title>ImGui_TableGetColumnIndex</title>
        <functioncall prog_lang="cpp">int ImGui_TableGetColumnIndex(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableGetColumnIndex", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableGetColumnIndex(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">int ImGui_TableGetColumnIndex(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return current column index.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableGetColumnName</slug>
        <title>ImGui_TableGetColumnName</title>
        <functioncall prog_lang="cpp">const char* ImGui_TableGetColumnName(ImGui_Context* ctx, int* column_nInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TableGetColumnName", #retval, ImGui_Context ctx, optional int column_nIn)</functioncall>
        <functioncall prog_lang="lua">string retval = reaper.ImGui_TableGetColumnName(ImGui_Context ctx, optional integer column_nIn)</functioncall>
        <functioncall prog_lang="python">const char* ImGui_TableGetColumnName(ImGui_Context* ctx, int* column_nInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return "" if column didn't have a name declared by TableSetupColumn.
         Pass -1 to use current column.
        </description>        
        <retvals>
            string retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            optional integer column_nIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableGetColumnSortSpecs</slug>
        <title>ImGui_TableGetColumnSortSpecs</title>
        <functioncall prog_lang="cpp">bool ImGui_TableGetColumnSortSpecs(ImGui_Context* ctx, int id, int* column_user_idOut, int* column_indexOut, int* sort_orderOut, int* sort_directionOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TableGetColumnSortSpecs", ImGui_Context ctx, int id, int &amp;column_user_id, int &amp;column_index, int &amp;sort_order, int &amp;sort_direction)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer column_user_id, integer column_index, integer sort_order, integer sort_direction = reaper.ImGui_TableGetColumnSortSpecs(ImGui_Context ctx, integer id)</functioncall>
        <functioncall prog_lang="python">bool ImGui_TableGetColumnSortSpecs(ImGui_Context* ctx, int id, int* column_user_idOut, int* column_indexOut, int* sort_orderOut, int* sort_directionOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Sorting specification for one column of a table.
         Call while incrementing 'id' from 0 until false is returned.
         
         - ColumnUserID:  User id of the column (if specified by a TableSetupColumn call)
         - ColumnIndex:   Index of the column
         - SortOrder:     Index within parent SortSpecs (always stored in order starting
           from 0, tables sorted on a single criteria will always have a 0 here)
         - SortDirection: SortDirection_Ascending or SortDirection_Descending
           (you can use this or SortSign, whichever is more convenient for your sort
           function)
         
         See TableNeedSort.
        </description>        
        <retvals>
            boolean retval - 
            integer column_user_id - 
            integer column_index - 
            integer sort_order - 
            integer sort_direction - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer id -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableGetRowIndex</slug>
        <title>ImGui_TableGetRowIndex</title>
        <functioncall prog_lang="cpp">int ImGui_TableGetRowIndex(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableGetRowIndex", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableGetRowIndex(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">int ImGui_TableGetRowIndex(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return current row index.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableHeader</slug>
        <title>ImGui_TableHeader</title>
        <functioncall prog_lang="cpp">void ImGui_TableHeader(ImGui_Context* ctx, const char* label)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TableHeader", ImGui_Context ctx, "label")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TableHeader(ImGui_Context ctx, string label)</functioncall>
        <functioncall prog_lang="python">void ImGui_TableHeader(ImGui_Context* ctx, const char* label)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Submit one header cell manually (rarely used). See TableSetupColumn.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string label -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableHeadersRow</slug>
        <title>ImGui_TableHeadersRow</title>
        <functioncall prog_lang="cpp">void ImGui_TableHeadersRow(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TableHeadersRow", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TableHeadersRow(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_TableHeadersRow(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Submit all headers cells based on data provided to TableSetupColumn +
         submit context menu.
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableNeedSort</slug>
        <title>ImGui_TableNeedSort</title>
        <functioncall prog_lang="cpp">bool ImGui_TableNeedSort(ImGui_Context* ctx, bool* has_specsOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TableNeedSort", ImGui_Context ctx, bool &amp;has_specs)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean has_specs = reaper.ImGui_TableNeedSort(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_TableNeedSort(ImGui_Context* ctx, bool* has_specsOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return true once when sorting specs have changed since last call,
         or the first time. 'has_specs' is false when not sorting.
         
         See TableGetColumnSortSpecs.
        </description>        
        <retvals>
            boolean retval - 
            boolean has_specs - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableNextColumn</slug>
        <title>ImGui_TableNextColumn</title>
        <functioncall prog_lang="cpp">bool ImGui_TableNextColumn(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TableNextColumn", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_TableNextColumn(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">bool ImGui_TableNextColumn(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Append into the next column (or first column of next row if currently in
         last column). Return true when column is visible.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableNextRow</slug>
        <title>ImGui_TableNextRow</title>
        <functioncall prog_lang="cpp">void ImGui_TableNextRow(ImGui_Context* ctx, int* row_flagsInOptional, double* min_row_heightInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TableNextRow", ImGui_Context ctx, optional int row_flagsIn, optional min_row_heightIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TableNextRow(ImGui_Context ctx, optional integer row_flagsIn, optional number min_row_heightIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_TableNextRow(ImGui_Context* ctx, int* row_flagsInOptional, double* min_row_heightInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Append into the first cell of a new row.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional integer row_flagsIn - 
            optional number min_row_heightIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableRowFlags_Headers</slug>
        <title>ImGui_TableRowFlags_Headers</title>
        <functioncall prog_lang="cpp">int ImGui_TableRowFlags_Headers()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableRowFlags_Headers")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableRowFlags_Headers()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableRowFlags_Headers()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Identify header row (set default background color + width of its contents
            accounted different for auto column width).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableRowFlags_None</slug>
        <title>ImGui_TableRowFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_TableRowFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TableRowFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TableRowFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_TableRowFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         For TableNextRow.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableSetBgColor</slug>
        <title>ImGui_TableSetBgColor</title>
        <functioncall prog_lang="cpp">void ImGui_TableSetBgColor(ImGui_Context* ctx, int target, int color_rgba, int* column_nInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TableSetBgColor", ImGui_Context ctx, int target, int color_rgba, optional int column_nIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TableSetBgColor(ImGui_Context ctx, integer target, integer color_rgba, optional integer column_nIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_TableSetBgColor(ImGui_Context* ctx, int target, int color_rgba, int* column_nInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Change the color of a cell, row, or column.
         See TableBgTarget_* flags for details.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            integer target - 
            integer color_rgba - 
            optional integer column_nIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableSetColumnEnabled</slug>
        <title>ImGui_TableSetColumnEnabled</title>
        <functioncall prog_lang="cpp">void ImGui_TableSetColumnEnabled(ImGui_Context* ctx, int column_n, bool v)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TableSetColumnEnabled", ImGui_Context ctx, int column_n, bool v)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TableSetColumnEnabled(ImGui_Context ctx, integer column_n, boolean v)</functioncall>
        <functioncall prog_lang="python">void ImGui_TableSetColumnEnabled(ImGui_Context* ctx, int column_n, bool v)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Change user-accessible enabled/disabled state of a column, set to false to
         hide the column. Note that end-user can use the context menu to change this
         themselves (right-click in headers, or right-click in columns body with
         TableFlags_ContextMenuInBody).
         
         - Require table to have the TableFlags_Hideable flag because we are manipulating
           user accessible state.
         - Request will be applied during next layout, which happens on the first call to
           TableNextRow after Begin_Table.
         - For the getter you can test
           (TableGetColumnFlags() &amp; TableColumnFlags_IsEnabled) != 0.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            integer column_n - 
            boolean v -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableSetColumnIndex</slug>
        <title>ImGui_TableSetColumnIndex</title>
        <functioncall prog_lang="cpp">bool ImGui_TableSetColumnIndex(ImGui_Context* ctx, int column_n)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TableSetColumnIndex", ImGui_Context ctx, int column_n)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_TableSetColumnIndex(ImGui_Context ctx, integer column_n)</functioncall>
        <functioncall prog_lang="python">bool ImGui_TableSetColumnIndex(ImGui_Context* ctx, int column_n)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Append into the specified column. Return true when column is visible.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            integer column_n -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableSetupColumn</slug>
        <title>ImGui_TableSetupColumn</title>
        <functioncall prog_lang="cpp">void ImGui_TableSetupColumn(ImGui_Context* ctx, const char* label, int* flagsInOptional, double* init_width_or_weightInOptional, int* user_idInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TableSetupColumn", ImGui_Context ctx, "label", optional int flagsIn, optional init_width_or_weightIn, optional int user_idIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TableSetupColumn(ImGui_Context ctx, string label, optional integer flagsIn, optional number init_width_or_weightIn, optional integer user_idIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_TableSetupColumn(ImGui_Context* ctx, const char* label, int* flagsInOptional, double* init_width_or_weightInOptional, int* user_idInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Use to specify label, resizing policy, default width/weight, id,
         various other flags etc.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            optional integer flagsIn - 
            optional number init_width_or_weightIn - 
            optional integer user_idIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TableSetupScrollFreeze</slug>
        <title>ImGui_TableSetupScrollFreeze</title>
        <functioncall prog_lang="cpp">void ImGui_TableSetupScrollFreeze(ImGui_Context* ctx, int cols, int rows)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TableSetupScrollFreeze", ImGui_Context ctx, int cols, int rows)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TableSetupScrollFreeze(ImGui_Context ctx, integer cols, integer rows)</functioncall>
        <functioncall prog_lang="python">void ImGui_TableSetupScrollFreeze(ImGui_Context* ctx, int cols, int rows)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Lock columns/rows so they stay visible when scrolled.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            integer cols - 
            integer rows -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Text</slug>
        <title>ImGui_Text</title>
        <functioncall prog_lang="cpp">void ImGui_Text(ImGui_Context* ctx, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Text", ImGui_Context ctx, "text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Text(ImGui_Context ctx, string text)</functioncall>
        <functioncall prog_lang="python">void ImGui_Text(ImGui_Context* ctx, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TextColored</slug>
        <title>ImGui_TextColored</title>
        <functioncall prog_lang="cpp">void ImGui_TextColored(ImGui_Context* ctx, int col_rgba, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TextColored", ImGui_Context ctx, int col_rgba, "text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TextColored(ImGui_Context ctx, integer col_rgba, string text)</functioncall>
        <functioncall prog_lang="python">void ImGui_TextColored(ImGui_Context* ctx, int col_rgba, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Shortcut for PushStyleColor(Col_Text, color); Text(text); PopStyleColor();
        </description>        
        <parameters>
            ImGui_Context ctx - 
            integer col_rgba - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TextDisabled</slug>
        <title>ImGui_TextDisabled</title>
        <functioncall prog_lang="cpp">void ImGui_TextDisabled(ImGui_Context* ctx, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TextDisabled", ImGui_Context ctx, "text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TextDisabled(ImGui_Context ctx, string text)</functioncall>
        <functioncall prog_lang="python">void ImGui_TextDisabled(ImGui_Context* ctx, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TextFilter_Clear</slug>
        <title>ImGui_TextFilter_Clear</title>
        <functioncall prog_lang="cpp">void ImGui_TextFilter_Clear(ImGui_TextFilter* filter)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TextFilter_Clear", ImGui_TextFilter filter)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TextFilter_Clear(ImGui_TextFilter filter)</functioncall>
        <functioncall prog_lang="python">void ImGui_TextFilter_Clear(ImGui_TextFilter* filter)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_TextFilter filter -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TextFilter_Draw</slug>
        <title>ImGui_TextFilter_Draw</title>
        <functioncall prog_lang="cpp">bool ImGui_TextFilter_Draw(ImGui_TextFilter* filter, ImGui_Context* ctx, const char* labelInOptional, double* widthInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TextFilter_Draw", ImGui_TextFilter filter, ImGui_Context ctx, optional "labelIn", optional widthIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_TextFilter_Draw(ImGui_TextFilter filterImGui_Context ctx, optional string labelIn, optional number widthIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_TextFilter_Draw(ImGui_TextFilter* filter, ImGui_Context* ctx, const char* labelInOptional, double* widthInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Helper calling InputText+TextFilter_Set
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_TextFilter filterImGui_Context ctx - 
            optional string labelIn - 
            optional number widthIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TextFilter_Get</slug>
        <title>ImGui_TextFilter_Get</title>
        <functioncall prog_lang="cpp">const char* ImGui_TextFilter_Get(ImGui_TextFilter* filter)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TextFilter_Get", #retval, ImGui_TextFilter filter)</functioncall>
        <functioncall prog_lang="lua">string retval = reaper.ImGui_TextFilter_Get(ImGui_TextFilter filter)</functioncall>
        <functioncall prog_lang="python">const char* ImGui_TextFilter_Get(ImGui_TextFilter* filter)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            string retval - 
        </retvals>        
        <parameters>
            ImGui_TextFilter filter -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TextFilter_IsActive</slug>
        <title>ImGui_TextFilter_IsActive</title>
        <functioncall prog_lang="cpp">bool ImGui_TextFilter_IsActive(ImGui_TextFilter* filter)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TextFilter_IsActive", ImGui_TextFilter filter)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_TextFilter_IsActive(ImGui_TextFilter filter)</functioncall>
        <functioncall prog_lang="python">bool ImGui_TextFilter_IsActive(ImGui_TextFilter* filter)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_TextFilter filter -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TextFilter_PassFilter</slug>
        <title>ImGui_TextFilter_PassFilter</title>
        <functioncall prog_lang="cpp">bool ImGui_TextFilter_PassFilter(ImGui_TextFilter* filter, const char* text)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TextFilter_PassFilter", ImGui_TextFilter filter, "text")</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_TextFilter_PassFilter(ImGui_TextFilter filter, string text)</functioncall>
        <functioncall prog_lang="python">bool ImGui_TextFilter_PassFilter(ImGui_TextFilter* filter, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_TextFilter filter - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TextFilter_Set</slug>
        <title>ImGui_TextFilter_Set</title>
        <functioncall prog_lang="cpp">void ImGui_TextFilter_Set(ImGui_TextFilter* filter, const char* filter_text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TextFilter_Set", ImGui_TextFilter filter, "filter_text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TextFilter_Set(ImGui_TextFilter filter, string filter_text)</functioncall>
        <functioncall prog_lang="python">void ImGui_TextFilter_Set(ImGui_TextFilter* filter, const char* filter_text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <parameters>
            ImGui_TextFilter filter - 
            string filter_text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TextWrapped</slug>
        <title>ImGui_TextWrapped</title>
        <functioncall prog_lang="cpp">void ImGui_TextWrapped(ImGui_Context* ctx, const char* text)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TextWrapped", ImGui_Context ctx, "text")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TextWrapped(ImGui_Context ctx, string text)</functioncall>
        <functioncall prog_lang="python">void ImGui_TextWrapped(ImGui_Context* ctx, const char* text)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Shortcut for PushTextWrapPos(0.0); Text(text); PopTextWrapPos();.
         Note that this won't work on an auto-resizing window if there's no other
         widgets to extend the window width, yoy may need to set a size using
         SetNextWindowSize.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string text -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNode</slug>
        <title>ImGui_TreeNode</title>
        <functioncall prog_lang="cpp">bool ImGui_TreeNode(ImGui_Context* ctx, const char* label, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TreeNode", ImGui_Context ctx, "label", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_TreeNode(ImGui_Context ctx, string label, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_TreeNode(ImGui_Context* ctx, const char* label, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         TreeNode functions return true when the node is open, in which case you need
         to also call TreePop when you are finished displaying the tree node contents.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeEx</slug>
        <title>ImGui_TreeNodeEx</title>
        <functioncall prog_lang="cpp">bool ImGui_TreeNodeEx(ImGui_Context* ctx, const char* str_id, const char* label, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_TreeNodeEx", ImGui_Context ctx, "str_id", "label", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_TreeNodeEx(ImGui_Context ctx, string str_id, string label, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_TreeNodeEx(ImGui_Context* ctx, const char* str_id, const char* label, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Helper variation to easily decorelate the id from the displayed string.
         Read the [FAQ](https://dearimgui.org/faq) about why and how to use ID.
         To align arbitrary text at the same level as a TreeNode you can use Bullet.
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string str_id - 
            string label - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_AllowItemOverlap</slug>
        <title>ImGui_TreeNodeFlags_AllowItemOverlap</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_AllowItemOverlap()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_AllowItemOverlap")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_AllowItemOverlap()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_AllowItemOverlap()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Hit testing to allow subsequent widgets to overlap this one.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_Bullet</slug>
        <title>ImGui_TreeNodeFlags_Bullet</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_Bullet()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_Bullet")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_Bullet()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_Bullet()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Display a bullet instead of arrow.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_CollapsingHeader</slug>
        <title>ImGui_TreeNodeFlags_CollapsingHeader</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_CollapsingHeader()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_CollapsingHeader")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_CollapsingHeader()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_CollapsingHeader()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         TreeNodeFlags_Framed | TreeNodeFlags_NoTreePushOnOpen | TreeNodeFlags_NoAutoOpenOnLog
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_DefaultOpen</slug>
        <title>ImGui_TreeNodeFlags_DefaultOpen</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_DefaultOpen()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_DefaultOpen")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_DefaultOpen()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_DefaultOpen()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Default node to be open.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_FramePadding</slug>
        <title>ImGui_TreeNodeFlags_FramePadding</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_FramePadding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_FramePadding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_FramePadding()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_FramePadding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Use FramePadding (even for an unframed text node) to vertically align text
            baseline to regular widget height.
            Equivalent to calling AlignTextToFramePadding.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_Framed</slug>
        <title>ImGui_TreeNodeFlags_Framed</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_Framed()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_Framed")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_Framed()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_Framed()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw frame with background (e.g. for CollapsingHeader).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_Leaf</slug>
        <title>ImGui_TreeNodeFlags_Leaf</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_Leaf()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_Leaf")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_Leaf()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_Leaf()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         No collapsing, no arrow (use as a convenience for leaf nodes).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_NoAutoOpenOnLog</slug>
        <title>ImGui_TreeNodeFlags_NoAutoOpenOnLog</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_NoAutoOpenOnLog()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_NoAutoOpenOnLog")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_NoAutoOpenOnLog()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_NoAutoOpenOnLog()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Don't automatically and temporarily open node when Logging is active
            (by default logging will automatically open tree nodes).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_NoTreePushOnOpen</slug>
        <title>ImGui_TreeNodeFlags_NoTreePushOnOpen</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_NoTreePushOnOpen()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_NoTreePushOnOpen")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_NoTreePushOnOpen()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_NoTreePushOnOpen()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Don't do a TreePush when open (e.g. for CollapsingHeader)
            = no extra indent nor pushing on ID stack.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_None</slug>
        <title>ImGui_TreeNodeFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_OpenOnArrow</slug>
        <title>ImGui_TreeNodeFlags_OpenOnArrow</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_OpenOnArrow()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_OpenOnArrow")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_OpenOnArrow()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_OpenOnArrow()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Only open when clicking on the arrow part.
            If TreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or
            double-click all box to open.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_OpenOnDoubleClick</slug>
        <title>ImGui_TreeNodeFlags_OpenOnDoubleClick</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_OpenOnDoubleClick()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_OpenOnDoubleClick")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_OpenOnDoubleClick()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_OpenOnDoubleClick()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Need double-click to open node.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_Selected</slug>
        <title>ImGui_TreeNodeFlags_Selected</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_Selected()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_Selected")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_Selected()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_Selected()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Draw as selected.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_SpanAvailWidth</slug>
        <title>ImGui_TreeNodeFlags_SpanAvailWidth</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_SpanAvailWidth()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_SpanAvailWidth")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_SpanAvailWidth()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_SpanAvailWidth()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Extend hit box to the right-most edge, even if not framed.
            This is not the default in order to allow adding other items on the same line.
            In the future we may refactor the hit system to be front-to-back,
            allowing natural overlaps and then this can become the default.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreeNodeFlags_SpanFullWidth</slug>
        <title>ImGui_TreeNodeFlags_SpanFullWidth</title>
        <functioncall prog_lang="cpp">int ImGui_TreeNodeFlags_SpanFullWidth()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_TreeNodeFlags_SpanFullWidth")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_TreeNodeFlags_SpanFullWidth()</functioncall>
        <functioncall prog_lang="python">int ImGui_TreeNodeFlags_SpanFullWidth()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Extend hit box to the left-most and right-most edges (bypass the indented area).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreePop</slug>
        <title>ImGui_TreePop</title>
        <functioncall prog_lang="cpp">void ImGui_TreePop(ImGui_Context* ctx)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TreePop", ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TreePop(ImGui_Context ctx)</functioncall>
        <functioncall prog_lang="python">void ImGui_TreePop(ImGui_Context* ctx)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Unindent()+PopID()
        </description>        
        <parameters>
            ImGui_Context ctx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_TreePush</slug>
        <title>ImGui_TreePush</title>
        <functioncall prog_lang="cpp">void ImGui_TreePush(ImGui_Context* ctx, const char* str_id)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_TreePush", ImGui_Context ctx, "str_id")</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_TreePush(ImGui_Context ctx, string str_id)</functioncall>
        <functioncall prog_lang="python">void ImGui_TreePush(ImGui_Context* ctx, const char* str_id)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Indent()+PushID(). Already called by TreeNode when returning true,
         but you can call TreePush/TreePop yourself if desired.
        </description>        
        <parameters>
            ImGui_Context ctx - 
            string str_id -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Unindent</slug>
        <title>ImGui_Unindent</title>
        <functioncall prog_lang="cpp">void ImGui_Unindent(ImGui_Context* ctx, double* indent_wInOptional)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Unindent", ImGui_Context ctx, optional indent_wIn)</functioncall>
        <functioncall prog_lang="lua">reaper.ImGui_Unindent(ImGui_Context ctx, optional number indent_wIn)</functioncall>
        <functioncall prog_lang="python">void ImGui_Unindent(ImGui_Context* ctx, double* indent_wInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Move content position back to the left, by 'indent_w', or
         StyleVar_IndentSpacing if 'indent_w' &lt;= 0
        </description>        
        <parameters>
            ImGui_Context ctx - 
            optional number indent_wIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_VSliderDouble</slug>
        <title>ImGui_VSliderDouble</title>
        <functioncall prog_lang="cpp">bool ImGui_VSliderDouble(ImGui_Context* ctx, const char* label, double size_w, double size_h, double* vInOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_VSliderDouble", ImGui_Context ctx, "label", size_w, size_h, &amp;v, v_min, v_max, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number v = reaper.ImGui_VSliderDouble(ImGui_Context ctx, string label, number size_w, number size_h, number v, number v_min, number v_max, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_VSliderDouble(ImGui_Context* ctx, const char* label, double size_w, double size_h, double* vInOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            number v - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number size_w - 
            number size_h - 
            number v - 
            number v_min - 
            number v_max - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_VSliderInt</slug>
        <title>ImGui_VSliderInt</title>
        <functioncall prog_lang="cpp">bool ImGui_VSliderInt(ImGui_Context* ctx, const char* label, double size_w, double size_h, int* vInOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_VSliderInt", ImGui_Context ctx, "label", size_w, size_h, int &amp;v, int v_min, int v_max, optional "formatIn", optional int flagsIn)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer v = reaper.ImGui_VSliderInt(ImGui_Context ctx, string label, number size_w, number size_h, integer v, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)</functioncall>
        <functioncall prog_lang="python">bool ImGui_VSliderInt(ImGui_Context* ctx, const char* label, double size_w, double size_h, int* vInOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
        </description>        
        <retvals>
            boolean retval - 
            integer v - 
        </retvals>        
        <parameters>
            ImGui_Context ctx - 
            string label - 
            number size_w - 
            number size_h - 
            integer v - 
            integer v_min - 
            integer v_max - 
            optional string formatIn - 
            optional integer flagsIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_ValidatePtr</slug>
        <title>ImGui_ValidatePtr</title>
        <functioncall prog_lang="cpp">bool ImGui_ValidatePtr(void* pointer, const char* type)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ImGui_ValidatePtr", void* pointer, "type")</functioncall>
        <functioncall prog_lang="lua">boolean reaper.ImGui_ValidatePtr(identifier pointer, string type)</functioncall>
        <functioncall prog_lang="python">bool ImGui_ValidatePtr(void* pointer, const char* type)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Return whether the pointer of the specified type is valid.
         
         Supported types are:
         
         - ImGui_Context*
         - ImGui_DrawList*
         - ImGui_DrawListSplitter*
         - ImGui_Font*
         - ImGui_Function*
         - ImGui_Image*
         - ImGui_ImageSet*
         - ImGui_ListClipper*
         - ImGui_TextFilter*
         - ImGui_Viewport*
        </description>        
        <retvals>
            boolean - 
        </retvals>        
        <parameters>
            identifier pointer - 
            string type -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Viewport_GetCenter</slug>
        <title>ImGui_Viewport_GetCenter</title>
        <functioncall prog_lang="cpp">void ImGui_Viewport_GetCenter(ImGui_Viewport* viewport, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Viewport_GetCenter", ImGui_Viewport viewport, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_Viewport_GetCenter(ImGui_Viewport viewport)</functioncall>
        <functioncall prog_lang="python">void ImGui_Viewport_GetCenter(ImGui_Viewport* viewport, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Center of the viewport.
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Viewport viewport -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Viewport_GetPos</slug>
        <title>ImGui_Viewport_GetPos</title>
        <functioncall prog_lang="cpp">void ImGui_Viewport_GetPos(ImGui_Viewport* viewport, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Viewport_GetPos", ImGui_Viewport viewport, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_Viewport_GetPos(ImGui_Viewport viewport)</functioncall>
        <functioncall prog_lang="python">void ImGui_Viewport_GetPos(ImGui_Viewport* viewport, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Main Area: Position of the viewport
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Viewport viewport -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Viewport_GetSize</slug>
        <title>ImGui_Viewport_GetSize</title>
        <functioncall prog_lang="cpp">void ImGui_Viewport_GetSize(ImGui_Viewport* viewport, double* wOut, double* hOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Viewport_GetSize", ImGui_Viewport viewport, &amp;w, &amp;h)</functioncall>
        <functioncall prog_lang="lua">number w, number h = reaper.ImGui_Viewport_GetSize(ImGui_Viewport viewport)</functioncall>
        <functioncall prog_lang="python">void ImGui_Viewport_GetSize(ImGui_Viewport* viewport, double* wOut, double* hOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Main Area: Size of the viewport.
        </description>        
        <retvals>
            number w - 
            number h - 
        </retvals>        
        <parameters>
            ImGui_Viewport viewport -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Viewport_GetWorkCenter</slug>
        <title>ImGui_Viewport_GetWorkCenter</title>
        <functioncall prog_lang="cpp">void ImGui_Viewport_GetWorkCenter(ImGui_Viewport* viewport, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Viewport_GetWorkCenter", ImGui_Viewport viewport, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_Viewport_GetWorkCenter(ImGui_Viewport viewport)</functioncall>
        <functioncall prog_lang="python">void ImGui_Viewport_GetWorkCenter(ImGui_Viewport* viewport, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Center of the viewport's work area.
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Viewport viewport -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Viewport_GetWorkPos</slug>
        <title>ImGui_Viewport_GetWorkPos</title>
        <functioncall prog_lang="cpp">void ImGui_Viewport_GetWorkPos(ImGui_Viewport* viewport, double* xOut, double* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Viewport_GetWorkPos", ImGui_Viewport viewport, &amp;x, &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.ImGui_Viewport_GetWorkPos(ImGui_Viewport viewport)</functioncall>
        <functioncall prog_lang="python">void ImGui_Viewport_GetWorkPos(ImGui_Viewport* viewport, double* xOut, double* yOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         &gt;= Viewport_GetPos
        </description>        
        <retvals>
            number x - 
            number y - 
        </retvals>        
        <parameters>
            ImGui_Viewport viewport -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_Viewport_GetWorkSize</slug>
        <title>ImGui_Viewport_GetWorkSize</title>
        <functioncall prog_lang="cpp">void ImGui_Viewport_GetWorkSize(ImGui_Viewport* viewport, double* wOut, double* hOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("ImGui_Viewport_GetWorkSize", ImGui_Viewport viewport, &amp;w, &amp;h)</functioncall>
        <functioncall prog_lang="lua">number w, number h = reaper.ImGui_Viewport_GetWorkSize(ImGui_Viewport viewport)</functioncall>
        <functioncall prog_lang="python">void ImGui_Viewport_GetWorkSize(ImGui_Viewport* viewport, double* wOut, double* hOut)</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         &lt;= Viewport_GetSize
        </description>        
        <retvals>
            number w - 
            number h - 
        </retvals>        
        <parameters>
            ImGui_Viewport viewport -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_AlwaysAutoResize</slug>
        <title>ImGui_WindowFlags_AlwaysAutoResize</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_AlwaysAutoResize()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_AlwaysAutoResize")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_AlwaysAutoResize()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_AlwaysAutoResize()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Resize every window to its content every frame.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_AlwaysHorizontalScrollbar</slug>
        <title>ImGui_WindowFlags_AlwaysHorizontalScrollbar</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_AlwaysHorizontalScrollbar()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_AlwaysHorizontalScrollbar")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_AlwaysHorizontalScrollbar()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_AlwaysHorizontalScrollbar()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Always show horizontal scrollbar (even if ContentSize.x &lt; Size.x).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_AlwaysUseWindowPadding</slug>
        <title>ImGui_WindowFlags_AlwaysUseWindowPadding</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_AlwaysUseWindowPadding()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_AlwaysUseWindowPadding")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_AlwaysUseWindowPadding()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_AlwaysUseWindowPadding()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Ensure child windows without border uses StyleVar_WindowPadding
            (ignored by default for non-bordered child windows, because more convenient).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_AlwaysVerticalScrollbar</slug>
        <title>ImGui_WindowFlags_AlwaysVerticalScrollbar</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_AlwaysVerticalScrollbar()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_AlwaysVerticalScrollbar")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_AlwaysVerticalScrollbar()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_AlwaysVerticalScrollbar()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Always show vertical scrollbar (even if ContentSize.y &lt; Size.y).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_HorizontalScrollbar</slug>
        <title>ImGui_WindowFlags_HorizontalScrollbar</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_HorizontalScrollbar()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_HorizontalScrollbar")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_HorizontalScrollbar()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_HorizontalScrollbar()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Allow horizontal scrollbar to appear (off by default).
            You may use SetNextWindowContentSize(width, 0.0) prior to calling Begin() to
            specify width. Read code in the demo's "Horizontal Scrolling" section.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_MenuBar</slug>
        <title>ImGui_WindowFlags_MenuBar</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_MenuBar()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_MenuBar")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_MenuBar()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_MenuBar()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Has a menu-bar.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoBackground</slug>
        <title>ImGui_WindowFlags_NoBackground</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoBackground()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoBackground")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoBackground()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoBackground()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable drawing background color (WindowBg, etc.) and outside border.
            Similar as using SetNextWindowBgAlpha(0.0).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoCollapse</slug>
        <title>ImGui_WindowFlags_NoCollapse</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoCollapse()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoCollapse")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoCollapse()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoCollapse()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable user collapsing window by double-clicking on it.
            Also referred to as Window Menu Button (e.g. within a docking node).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoDecoration</slug>
        <title>ImGui_WindowFlags_NoDecoration</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoDecoration()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoDecoration")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoDecoration()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoDecoration()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         WindowFlags_NoTitleBar | WindowFlags_NoResize | WindowFlags_NoScrollbar |
            WindowFlags_NoCollapse
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoDocking</slug>
        <title>ImGui_WindowFlags_NoDocking</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoDocking()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoDocking")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoDocking()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoDocking()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable docking of this window.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoFocusOnAppearing</slug>
        <title>ImGui_WindowFlags_NoFocusOnAppearing</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoFocusOnAppearing()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoFocusOnAppearing")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoFocusOnAppearing()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoFocusOnAppearing()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable taking focus when transitioning from hidden to visible state.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoInputs</slug>
        <title>ImGui_WindowFlags_NoInputs</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoInputs()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoInputs")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoInputs()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoInputs()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         WindowFlags_NoMouseInputs | WindowFlags_NoNavInputs | WindowFlags_NoNavFocus
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoMouseInputs</slug>
        <title>ImGui_WindowFlags_NoMouseInputs</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoMouseInputs()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoMouseInputs")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoMouseInputs()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoMouseInputs()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable catching mouse, hovering test with pass through.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoMove</slug>
        <title>ImGui_WindowFlags_NoMove</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoMove()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoMove")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoMove()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoMove()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable user moving the window.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoNav</slug>
        <title>ImGui_WindowFlags_NoNav</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoNav()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoNav")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoNav()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoNav()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         WindowFlags_NoNavInputs | WindowFlags_NoNavFocus
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoNavFocus</slug>
        <title>ImGui_WindowFlags_NoNavFocus</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoNavFocus()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoNavFocus")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoNavFocus()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoNavFocus()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         No focusing toward this window with gamepad/keyboard navigation
            (e.g. skipped by CTRL+TAB).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoNavInputs</slug>
        <title>ImGui_WindowFlags_NoNavInputs</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoNavInputs()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoNavInputs")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoNavInputs()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoNavInputs()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         No gamepad/keyboard navigation within the window.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoResize</slug>
        <title>ImGui_WindowFlags_NoResize</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoResize()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoResize")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoResize()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoResize()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable user resizing with the lower-right grip.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoSavedSettings</slug>
        <title>ImGui_WindowFlags_NoSavedSettings</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoSavedSettings()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoSavedSettings")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoSavedSettings()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoSavedSettings()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Never load/save settings in .ini file.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoScrollWithMouse</slug>
        <title>ImGui_WindowFlags_NoScrollWithMouse</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoScrollWithMouse()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoScrollWithMouse")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoScrollWithMouse()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoScrollWithMouse()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable user vertically scrolling with mouse wheel.
            On child window, mouse wheel will be forwarded to the parent unless
            NoScrollbar is also set.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoScrollbar</slug>
        <title>ImGui_WindowFlags_NoScrollbar</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoScrollbar()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoScrollbar")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoScrollbar()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoScrollbar()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable scrollbars (window can still scroll with mouse or programmatically).
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_NoTitleBar</slug>
        <title>ImGui_WindowFlags_NoTitleBar</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_NoTitleBar()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_NoTitleBar")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_NoTitleBar()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_NoTitleBar()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Disable title-bar.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_None</slug>
        <title>ImGui_WindowFlags_None</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_None()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_None")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_None()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_None()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Default flag.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_TopMost</slug>
        <title>ImGui_WindowFlags_TopMost</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_TopMost()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_TopMost")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_TopMost()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_TopMost()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Show the window above all non-topmost windows.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ImGui_WindowFlags_UnsavedDocument</slug>
        <title>ImGui_WindowFlags_UnsavedDocument</title>
        <functioncall prog_lang="cpp">int ImGui_WindowFlags_UnsavedDocument()</functioncall>
        <functioncall prog_lang="eel">int extension_api("ImGui_WindowFlags_UnsavedDocument")</functioncall>
        <functioncall prog_lang="lua">integer retval =  reaper.ImGui_WindowFlags_UnsavedDocument()</functioncall>
        <functioncall prog_lang="python">int ImGui_WindowFlags_UnsavedDocument()</functioncall>
        <requires>
            Reaper=6.44
            ReaImGui=0.8.5
        </requires>
        <description>        
         Display a dot next to the title. When used in a tab/docking context,
            tab is selected when clicking the X + closure is not assumed
            (will wait for user to stop submitting the tab).
            Otherwise closure is assumed when pressing the X,
            so if you keep submitting the tab may reappear at end of tab bar.
        </description>        
        <retvals>
            integer retval - 
        </retvals>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaImGui
        </chapter_context>
        <tags>reaimgui, gui, user interface</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_GetButtonValue</slug>
        <title>MCULive_GetButtonValue</title>
        <functioncall prog_lang="cpp">int MCULive_GetButtonValue(int device, int button)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_GetButtonValue", int device, int button)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MCULive_GetButtonValue(integer device, integer button)</functioncall>
        <functioncall prog_lang="python">int MCULive_GetButtonValue(int device, int button)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Get current button state.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer button -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_GetDevice</slug>
        <title>MCULive_GetDevice</title>
        <functioncall prog_lang="cpp">int MCULive_GetDevice(int device, int type)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_GetDevice", int device, int type)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MCULive_GetDevice(integer device, integer type)</functioncall>
        <functioncall prog_lang="python">int MCULive_GetDevice(int device, int type)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Get MIDI input or output dev ID. type 0 is input dev, type 1 is output dev. device &lt; 0 returns number of MCULive devices.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer type -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_GetEncoderValue</slug>
        <title>MCULive_GetEncoderValue</title>
        <functioncall prog_lang="cpp">double MCULive_GetEncoderValue(int device, int encIdx, int param)</functioncall>
        <functioncall prog_lang="eel">double extension_api("MCULive_GetEncoderValue", int device, int encIdx, int param)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.MCULive_GetEncoderValue(integer device, integer encIdx, integer param)</functioncall>
        <functioncall prog_lang="python">double MCULive_GetEncoderValue(int device, int encIdx, int param)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Returns zero-indexed encoder parameter value. 0 = lastpos, 1 = lasttouch
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer encIdx - 
            integer param -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_GetFaderValue</slug>
        <title>MCULive_GetFaderValue</title>
        <functioncall prog_lang="cpp">double MCULive_GetFaderValue(int device, int faderIdx, int param)</functioncall>
        <functioncall prog_lang="eel">double extension_api("MCULive_GetFaderValue", int device, int faderIdx, int param)</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.MCULive_GetFaderValue(integer device, integer faderIdx, integer param)</functioncall>
        <functioncall prog_lang="python">double MCULive_GetFaderValue(int device, int faderIdx, int param)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Returns zero-indexed fader parameter value. 0 = lastpos, 1 = lasttouch, 2 = lastmove (any fader)
        </description>        
        <retvals>
            number retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer faderIdx - 
            integer param -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_GetMIDIMessage</slug>
        <title>MCULive_GetMIDIMessage</title>
        <functioncall prog_lang="cpp">int MCULive_GetMIDIMessage(int device, int msgIdx, int* statusOut, int* data1Out, int* data2Out, int* frame_offsetOut, char* msgOutOptional, int msgOutOptional_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_GetMIDIMessage", int device, int msgIdx, int &amp;status, int &amp;data1, int &amp;data2, int &amp;frame_offset, optional #msg)</functioncall>
        <functioncall prog_lang="lua">integer retval, integer status, integer data1, integer data2, integer frame_offset, optional string msg = reaper.MCULive_GetMIDIMessage(integer device, integer msgIdx)</functioncall>
        <functioncall prog_lang="python">int MCULive_GetMIDIMessage(int device, int msgIdx, int* statusOut, int* data1Out, int* data2Out, int* frame_offsetOut, char* msgOutOptional, int msgOutOptional_sz)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Gets MIDI message from input buffer/queue. Gets (pops/pulls) indexed message (status, data1, data2 and frame_offset) from queue and retval is total size/length left in queue. E.g. continuously read all indiviual messages with deferred script. Frame offset resolution is 1/1024000 seconds, not audio samples. Long messages are returned as optional strings of byte characters. msgIdx -1 returns size (length) of buffer. Read also non-MCU devices by creating MCULive device with their input. 
        </description>        
        <retvals>
            integer retval - 
            integer status - 
            integer data1 - 
            integer data2 - 
            integer frame_offset - 
            optional string msg - 
        </retvals>        
        <parameters>
            integer device - 
            integer msgIdx -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_Map</slug>
        <title>MCULive_Map</title>
        <functioncall prog_lang="cpp">int MCULive_Map(int device, int button, int command_id, isRemap bool)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_Map", int device, int button, int command_id, <b>unsupported</b> bool)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MCULive_Map(integer device, integer button, integer command_id, unsupported bool)</functioncall>
        <functioncall prog_lang="python">int MCULive_Map(int device, int button, int command_id, isRemap bool)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Maps MCU Live device# button# to REAPER command ID. E.g. reaper.MCULive_Map(0,0x5b, 40340) maps MCU Rewind to "Track: Unsolo all tracks". Or remap button to another button if your MCU button layout doesnt play nicely with default MCULive mappings. By default range 0x00 .. 0x2d is in use. Button numbers are second column (prefixed with 0x) e.g. '90 5e' 0x5e for 'transport : play', roughly. 
         
         mcu documentation: 
         mcu=&gt;pc: 
           the mcu seems to send, when it boots (or is reset) f0 00 00 66 14 01 58 59 5a 57 18 61 05 57 18 61 05 f7 
           ex vv vv    :   volume fader move, x=0..7, 8=master, vv vv is int14 
           b0 1x vv    :   pan fader move, x=0..7, vv has 40 set if negative, low bits 0-31 are move amount 
           b0 3c vv    :   jog wheel move, 01 or 41 
           to the extent the buttons below have leds, you can set them by sending these messages, with 7f for on, 1 for blink, 0 for off. 
           90 0x vv    :   rec arm push x=0..7 (vv:..) 
           90 0x vv    :   solo push x=8..f (vv:..) 
           90 1x vv    :   mute push x=0..7 (vv:..) 
           90 1x vv    :   selected push x=8..f (vv:..) 
           90 2x vv    :   pan knob push, x=0..7 (vv:..) 
           90 28 vv    :   assignment track 
           90 29 vv    :   assignment send 
           90 2a vv    :   assignment pan/surround 
           90 2b vv    :   assignment plug-in 
           90 2c vv    :   assignment eq 
           90 2d vv    :   assignment instrument 
           90 2e vv    :   bank down button (vv: 00=release, 7f=push) 
           90 2f vv    :   channel down button (vv: ..) 
           90 30 vv    :   bank up button (vv:..) 
           90 31 vv    :   channel up button (vv:..) 
           90 32 vv    :   flip button 
           90 33 vv    :   global view button 
           90 34 vv    :   name/value display button 
           90 35 vv    :   smpte/beats mode switch (vv:..) 
           90 36 vv    :   f1 
           90 37 vv    :   f2 
           90 38 vv    :   f3 
           90 39 vv    :   f4 
           90 3a vv    :   f5 
           90 3b vv    :   f6 
           90 3c vv    :   f7 
           90 3d vv    :   f8 
           90 3e vv    :   global view : midi tracks 
           90 3f vv    :   global view : inputs 
           90 40 vv    :   global view : audio tracks 
           90 41 vv    :   global view : audio instrument 
           90 42 vv    :   global view : aux 
           90 43 vv    :   global view : busses 
           90 44 vv    :   global view : outputs 
           90 45 vv    :   global view : user 
           90 46 vv    :   shift modifier (vv:..) 
           90 47 vv    :   option modifier 
           90 48 vv    :   control modifier 
           90 49 vv    :   alt modifier 
           90 4a vv    :   automation read/off 
           90 4b vv    :   automation write 
           90 4c vv    :   automation trim 
           90 4d vv    :   automation touch 
           90 4e vv    :   automation latch 
           90 4f vv    :   automation group 
           90 50 vv    :   utilities save 
           90 51 vv    :   utilities undo 
           90 52 vv    :   utilities cancel 
           90 53 vv    :   utilities enter 
           90 54 vv    :   marker 
           90 55 vv    :   nudge 
           90 56 vv    :   cycle 
           90 57 vv    :   drop 
           90 58 vv    :   replace 
           90 59 vv    :   click 
           90 5a vv    :   solo 
           90 5b vv    :   transport rewind (vv:..) 
           90 5c vv    :   transport ffwd (vv:..) 
           90 5d vv    :   transport pause (vv:..) 
           90 5e vv    :   transport play (vv:..) 
           90 5f vv    :   transport record (vv:..) 
           90 60 vv    :   up arrow button  (vv:..) 
           90 61 vv    :   down arrow button 1 (vv:..) 
           90 62 vv    :   left arrow button 1 (vv:..) 
           90 63 vv    :   right arrow button 1 (vv:..) 
           90 64 vv    :   zoom button (vv:..) 
           90 65 vv    :   scrub button (vv:..) 
           90 6x vv    :   fader touch x=8..f 
           90 70 vv    :   master fader touch 
         pc=&gt;mcu: 
           f0 00 00 66 14 12 xx &lt;data&gt; f7   : update lcd. xx=offset (0-112), string. display is 55 chars wide, second line begins at 56, though. 
           f0 00 00 66 14 08 00 f7          : reset mcu 
           f0 00 00 66 14 20 0x 03 f7       : put track in vu meter mode, x=track   
           90 73 vv : rude solo light (vv: 7f=on, 00=off, 01=blink) 
           b0 3x vv : pan display, x=0..7, vv=1..17 (hex) or so 
           b0 4x vv : right to left of leds. if 0x40 set in vv, dot below char is set (x=0..11) 
           d0 yx    : update vu meter, y=track, x=0..d=volume, e=clip on, f=clip off 
           ex vv vv : set volume fader, x=track index, 8=master 
         
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer button - 
            integer command_id
            unsupported bool -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_Reset</slug>
        <title>MCULive_Reset</title>
        <functioncall prog_lang="cpp">int MCULive_Reset(int device)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_Reset", int device)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MCULive_Reset(integer device)</functioncall>
        <functioncall prog_lang="python">int MCULive_Reset(int device)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
            Reset device. device &lt; 0 resets all and returns number of devices.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer device -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_SendMIDIMessage</slug>
        <title>MCULive_SendMIDIMessage</title>
        <functioncall prog_lang="cpp">int MCULive_SendMIDIMessage(int device, int status, int data1, int data2, const char* msgInOptional, int* msgInOptional_sz msgInOptional_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_SendMIDIMessage", int device, int status, int data1, int data2, optional "msgIn", <b>unsupported</b> msgIn)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MCULive_SendMIDIMessage(integer device, integer status, integer data1, integer data2, optional string msgIn, unsupported msgIn)</functioncall>
        <functioncall prog_lang="python">int MCULive_SendMIDIMessage(int device, int status, int data1, int data2, const char* msgInOptional, int* msgInOptional_sz msgInOptional_sz)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Sends MIDI message to device. If string is provided, individual bytes are not sent. Returns number of sent bytes.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer status - 
            integer data1 - 
            integer data2 - 
            optional string msgIn - 
            unsupported msgIn -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_SetButtonPassthrough</slug>
        <title>MCULive_SetButtonPassthrough</title>
        <functioncall prog_lang="cpp">int MCULive_SetButtonPassthrough(int device, int button, bool isSet)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_SetButtonPassthrough", int device, int button, bool isSet)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MCULive_SetButtonPassthrough(integer device, integer button, boolean isSet)</functioncall>
        <functioncall prog_lang="python">int MCULive_SetButtonPassthrough(int device, int button, bool isSet)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Set button as MIDI passthrough.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer button - 
            boolean isSet -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_SetButtonPressOnly</slug>
        <title>MCULive_SetButtonPressOnly</title>
        <functioncall prog_lang="cpp">int MCULive_SetButtonPressOnly(int device, int button, bool isSet)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_SetButtonPressOnly", int device, int button, bool isSet)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MCULive_SetButtonPressOnly(integer device, integer button, boolean isSet)</functioncall>
        <functioncall prog_lang="python">int MCULive_SetButtonPressOnly(int device, int button, bool isSet)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Buttons function as press only by default. Set false for press and release function.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer button - 
            boolean isSet -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_SetButtonValue</slug>
        <title>MCULive_SetButtonValue</title>
        <functioncall prog_lang="cpp">int MCULive_SetButtonValue(int device, int button, int value)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_SetButtonValue", int device, int button, int value)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MCULive_SetButtonValue(integer device, integer button, integer value)</functioncall>
        <functioncall prog_lang="python">int MCULive_SetButtonValue(int device, int button, int value)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Set button led/mode/state. Value 0 = off,1 = blink, 0x7f = on, usually.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer button - 
            integer value -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_SetDefault</slug>
        <title>MCULive_SetDefault</title>
        <functioncall prog_lang="cpp">void MCULive_SetDefault(int device, bool isSet)</functioncall>
        <functioncall prog_lang="eel">extension_api("MCULive_SetDefault", int device, bool isSet)</functioncall>
        <functioncall prog_lang="lua">reaper.MCULive_SetDefault(integer device, boolean isSet)</functioncall>
        <functioncall prog_lang="python">void MCULive_SetDefault(int device, bool isSet)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Enables/disables default out-of-the-box operation.
        </description>        
        <parameters>
            integer device - 
            boolean isSet -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_SetDisplay</slug>
        <title>MCULive_SetDisplay</title>
        <functioncall prog_lang="cpp">void MCULive_SetDisplay(int device, int pos, const char* message, int pad)</functioncall>
        <functioncall prog_lang="eel">extension_api("MCULive_SetDisplay", int device, int pos, "message", int pad)</functioncall>
        <functioncall prog_lang="lua">reaper.MCULive_SetDisplay(integer device, integer pos, string message, integer pad)</functioncall>
        <functioncall prog_lang="python">void MCULive_SetDisplay(int device, int pos, const char* message, int pad)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Write to display. 112 characters, 56 per row.
        </description>        
        <parameters>
            integer device - 
            integer pos - 
            string message - 
            integer pad -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_SetEncoderValue</slug>
        <title>MCULive_SetEncoderValue</title>
        <functioncall prog_lang="cpp">int MCULive_SetEncoderValue(int device, int encIdx, double val, int type)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_SetEncoderValue", int device, int encIdx, val, int type)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MCULive_SetEncoderValue(integer device, integer encIdx, number val, integer type)</functioncall>
        <functioncall prog_lang="python">int MCULive_SetEncoderValue(int device, int encIdx, double val, int type)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Set encoder to value 0 ... 1.0. Type 0 = linear, 1 = track volume, 2 = pan. Returns scaled value.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer encIdx - 
            number val - 
            integer type -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_SetFaderValue</slug>
        <title>MCULive_SetFaderValue</title>
        <functioncall prog_lang="cpp">int MCULive_SetFaderValue(int device, int faderIdx, double val, int type)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_SetFaderValue", int device, int faderIdx, val, int type)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MCULive_SetFaderValue(integer device, integer faderIdx, number val, integer type)</functioncall>
        <functioncall prog_lang="python">int MCULive_SetFaderValue(int device, int faderIdx, double val, int type)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Set fader to value 0 ... 1.0. Type 0 = linear, 1 = track volume, 2 = pan. Returns scaled value.
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer faderIdx - 
            number val - 
            integer type -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_SetMeterValue</slug>
        <title>MCULive_SetMeterValue</title>
        <functioncall prog_lang="cpp">int MCULive_SetMeterValue(int device, int meterIdx, double val, int type)</functioncall>
        <functioncall prog_lang="eel">int extension_api("MCULive_SetMeterValue", int device, int meterIdx, val, int type)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.MCULive_SetMeterValue(integer device, integer meterIdx, number val, integer type)</functioncall>
        <functioncall prog_lang="python">int MCULive_SetMeterValue(int device, int meterIdx, double val, int type)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         Set meter value 0 ... 1.0. Type 0 = linear, 1 = track volume (with decay).
        </description>        
        <retvals>
            integer retval - 
        </retvals>        
        <parameters>
            integer device - 
            integer meterIdx - 
            number val - 
            integer type -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MCULive_SetOption</slug>
        <title>MCULive_SetOption</title>
        <functioncall prog_lang="cpp">void MCULive_SetOption(int option, int value)</functioncall>
        <functioncall prog_lang="eel">extension_api("MCULive_SetOption", int option, int value)</functioncall>
        <functioncall prog_lang="lua">reaper.MCULive_SetOption(integer option, integer value)</functioncall>
        <functioncall prog_lang="python">void MCULive_SetOption(int option, int value)</functioncall>
        <requires>
            Reaper=6.44
            ReaMCULive=0.1.5
        </requires>
        <description>        
         1 : surface split point device index 
         2 : 'mode-is-global' bitmask/flags, first 6 bits
        </description>        
        <parameters>
            integer option - 
            integer value -
        </parameters>                
        <target_document>Reaper_Api_Documentation</target_document>
        <source_document>reaper-apidocs.USDocML</source_document>
        <chapter_context>
            ReaMCULive
        </chapter_context>
        <tags>reamculive</tags>
        <changelog>
        </changelog>
    </US_DocBloc>
    
    
</USDocBloc>