local Math = require("public.math")

describe("Math.round", function()
  test("positive integers (shouldn't change)", function()
    expect(Math.round(10)).toEqual(10)
    expect(Math.round(65)).toEqual(65)
    expect(Math.round(879)).toEqual(879)
    expect(Math.round(4367)).toEqual(4367)
    expect(Math.round(56810)).toEqual(56810)
  end)

  test("negative integers (shouldn't change)", function()
    expect(Math.round(-16)).toEqual(-16)
    expect(Math.round(-46)).toEqual(-46)
    expect(Math.round(-348)).toEqual(-348)
    expect(Math.round(-5794)).toEqual(-5794)
    expect(Math.round(-16489)).toEqual(-16489)
  end)

  test("positive decimals", function()
    expect(Math.round(1.3)).toEqual(1)
    expect(Math.round(41.8)).toEqual(42)
    expect(Math.round(65.23)).toEqual(65)
    expect(Math.round(15.7)).toEqual(16)
    expect(Math.round(77.5)).toEqual(78)
  end)

  test("negative decimals", function()
    expect(Math.round(-1.3)).toEqual(-1)
    expect(Math.round(-41.8)).toEqual(-42)
    expect(Math.round(-65.23)).toEqual(-65)
    expect(Math.round(-15.7)).toEqual(-16)
    expect(Math.round(-77.5)).toEqual(-78)
  end)

  test("-1 to 1", function()
    expect(Math.round(0.3)).toEqual(0)
    expect(Math.round(0.8)).toEqual(1)
    expect(Math.round(-0.4)).toEqual(0)
    expect(Math.round(-0.6)).toEqual(-1)
  end)
end)

describe("Math.nearestMultiple", function()
  test("", function()
    expect(Math.nearestMultiple(15, 4)).toEqual(16)
    expect(Math.nearestMultiple(32, 5)).toEqual(30)
    expect(Math.nearestMultiple(853.2, 3)).toEqual(852)
  end)
end)

describe("Math.clamp", function()
  test("returned value should be the median", function()
    expect(Math.clamp(0, 0.5, 1)).toEqual(0.5)
    expect(Math.clamp(-5, -2, -1)).toEqual(-2)
    expect(Math.clamp(10, 20, 100)).toEqual(20)
  end)

  test("argument order shouldn't matter", function()
    expect(Math.clamp(0, 5, 30)).toEqual(5)
    expect(Math.clamp(0, 30, 5)).toEqual(5)
    expect(Math.clamp(5, 0, 30)).toEqual(5)
    expect(Math.clamp(5, 30, 0)).toEqual(5)
    expect(Math.clamp(30, 0, 5)).toEqual(5)
    expect(Math.clamp(30, 5, 0)).toEqual(5)
  end)
end)

describe("Math.ordinal", function()
  test("_st", function()
    expect(Math.ordinal(1)).toEqual("1st")
    expect(Math.ordinal(31)).toEqual("31st")
    expect(Math.ordinal(181)).toEqual("181st")
  end)
  test("_nd", function()
    expect(Math.ordinal(2)).toEqual("2nd")
    expect(Math.ordinal(22)).toEqual("22nd")
    expect(Math.ordinal(582)).toEqual("582nd")
  end)
  test("_rd", function()
    expect(Math.ordinal(3)).toEqual("3rd")
    expect(Math.ordinal(43)).toEqual("43rd")
    expect(Math.ordinal(353)).toEqual("353rd")
  end)
  test("_th", function()
    expect(Math.ordinal(4)).toEqual("4th")
    expect(Math.ordinal(11)).toEqual("11th")
    expect(Math.ordinal(13)).toEqual("13th")
  end)

end)

describe("Math.polarToCart", function()
  test("", function()
    local x, y = Math.polarToCart(0.3333, 5, 0, 0)
    expect(x).toAlmostEqual(2.5)
    expect(y).toAlmostEqual(4.33)
  end)

  test("", function()
    local x, y = Math.polarToCart(0.5, 12, 14, 6)
    expect(x).toAlmostEqual(14)
    expect(y).toAlmostEqual(18)
  end)
  test("", function()
    local x, y = Math.polarToCart(-0.1667, 2, 0, 0)
    expect(x).toAlmostEqual(1.732)
    expect(y).toAlmostEqual(-1)
  end)
end)

describe("Math.cartToPolar", function()
  test("", function()
    local angle, r = Math.cartToPolar(2, 2, 0, 0)
    expect(angle).toAlmostEqual(0.25)
    expect(r).toAlmostEqual(2.828)
  end)

  test("", function()
    local angle, r = Math.cartToPolar(-4, 8, -1, -1)
    expect(angle).toAlmostEqual(0.602)
    expect(r).toAlmostEqual(9.487)
  end)

  test("", function()
    local angle, r = Math.cartToPolar(-64, -15)
    expect(angle).toAlmostEqual(-0.927)
    expect(r).toAlmostEqual(65.734)
  end)
end)
