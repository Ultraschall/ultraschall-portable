<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<USDocBloc>
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>1.Introduction</slug>
        <title>1 Introduction to ReaScript</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            ##ReaScript API as of Reaper 5.965
            
            REAPER provides an API (advanced programming interface) for users and third parties to create extended functionality. API functions can be called from a compiled C/C++ dynamic library that is loaded by REAPER, or at run-time by user-created ReaScripts that can be written using REAPER's own editor.

            ReaScripts can be written in EEL2, a specialized language that is also used to write JSFX; Lua, a popular scripting language; or Python, another scripting language. EEL and Lua are embedded within REAPER and require no additional downloads or settings. Python must be downloaded and installed separately, and enabled in REAPER preferences.

            A script named "__startup.lua|.eel" will be started automatically by Reaper at startup. You can have both; Reaper will run __startup.eel first, __startup.lua second.
            This __startup-script doesn't need to be registered into the actionlist of Reaper; it's pure existence in the scripts-folder of the resources-folder of Reaper is sufficient for it to be run.
            
            Learn more about ReaScript: [http://www.cockos.com/reaper/sdk/reascript/reascript.php](http://www.cockos.com/reaper/sdk/reascript/reascript.php).
            
            This documentation includes the functions provided by SWS: [sws-extension.org](https://www.sws-extension.org) as well as Julian Sader's plugin, that can be installed via ReaPack.
            
            The IDE in Reaper has some limitations, as every line must not exceed 4095 characters, or they will be split when the script is loaded the next time.
            
            The base-directory for ReaScript can be read from the reaper.ini -> [REAPER] -> lastcwd=
            That means, if you create a new file without giving it a path, it will be created in the path set in lastcwd.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, reascript</tags>
    </US_DocBloc>


    <US_DocBloc version="1.0" prog_lang="*" spok_lang="en">
        <slug>3.Datatypes_used_in_this_document</slug>
        <title>3 Datatypes used in this document</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
                ###Datatypes used in this document
                
                boolean - accepts only true or false as values
                optional boolean - a boolean, that can be given, but is not required
                number - can be integer, double or a floating-point-number
                optional number - a number, that can be given, but is not required
                integer - only integer numbers allowed
                reaper.array - a special array, that Reaper provides
                string - a string of characters/text
                optional string - a string, that can be given, but is not required

                AudioAccessor - Audio Accessor object for a track or a media-item
                BR_Envelope \(BR\) - an envelope-object, created from a track or take-envelope
                HWND - a window
                IReaperControlSurface - a ControlSurface, e.g. OSC-devices
                joystick_device - a joystick-device
                KbdSectionInfo - Keyboard Section Info, 
                -        0, Main
                -        100, Main (alt recording)
                -        32060, MIDI Editor
                -        32061, MIDI Event List Editor
                -        32062, MIDI Inline Editor
                -        32063, Media Explorer
                PCM_source - the audiosource of a MediaItem
                ReaProject - a project within Reaper; 0 for current open project\(-tab\); in [EnumProjects](#EnumProjects), it is an object, not a number!
                RprMidiTake \(FNG\) - ReaperMidiTake as object
                RprMidiNote \(FNG}) - RprMidiNote as object
                MediaTrack - a Reaper-Track as object
                MediaItem - a Reaper-MediaItem like audio,video, Midi, etc as object
                MediaItem_Take - a take within a MediaItem as object
                TrackEnvelope - an envelope of a track as object
                WDL_FastString\(S&M\) - a different kind of a string, made into a Reaper-object
                
                deviceHDC - get it using function [JS_GDI_GetWindowDC](#JS_GDI_GetWindowDC)
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, eel</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" prog_lang="cpp" spok_lang="en">
        <slug>2.1.cpp_desc</slug>
        <title>2.1 CPP Description</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            ###Usage of the Reaper Api in C++
            Note: the C++ pure virtual interfaces used require the MSVC-compatible C++ ABI on Win32.  Sorry, mingw users.

            Reaper extensions: see [http://www.cockos.com/reaper/sdk/plugin/plugin.php](http://www.cockos.com/reaper/sdk/plugin/plugin.php) and reaper_plugin.h.
            The API functions in this header can be retrieved using reaper_plugin_info_t.GetFunc() or by using the Action "\[developer\] Write C++ API functions header" directly in Reaper.

            VST plugins: see [http://www.cockos.com/reaper/sdk/vst/vst_ext.php](http://www.cockos.com/reaper/sdk/vst/vst_ext.php)
            The API functions in this header can be retrieved using audioMasterCallback.

            Because the API is dynamic, callers should never assume a function exists.
            Check that a non-NULL function pointer was returned before using it (unless
            loaded functions are verified using REAPERAPI_LoadAPI(), see note below).

            New (4.76+) usage of this file:
           -  1) most source files should just #include "reaper_plugin_functions.h" as is.
           -  2) one file should #define REAPERAPI_IMPLEMENT before including this file.
           -  3) the plug-in should call REAPERAPI_LoadAPI(rec->GetFunc) from REAPER_PLUGIN_ENTRYPOINT
           -     and check the return value for errors (REAPERAPI_LoadAPI will return 0 on success).

              By default, all functions listed in this file are loaded. This means that an older version
              of REAPER may not succeed in loading, and also it may bloat your plug-in. If you wish to only load
              needed functions, #define REAPERAPI_MINIMAL and various #define REAPERAPI_WANT_<functionname> lines
              before including this file. You must put these definitions where REAPERAPI_IMPLEMENT is defined
              and you can optionally put them elsewhere (to detect needed REAPERAPI_WANT_xxx lines at compile-
              time rather than link-time).

        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, eel</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>2.2.eel_desc</slug>
        <title>2.2 EEL Description</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            ###ReaScript/EEL API
            
            For information on the EEL2 language, please see the [EEL2 User Guide](https://www.cockos.com/EEL2/)

            ReaScript/EEL scripts can call API functions using functionname().

            Parameters that return information are effectively passed by reference, not value. If an API returns a string value, it will usually be as the first parameter.

            Examples:
                // function returning a single (scalar) value:
                sec = [parse_timestr("1:12")](#parse_timestr);

                // function returning information in the first parameter (function returns void):
                [GetProjectPath(#string)](#GetProjectPath);

                // lower volume of track 3 by half:
                tr = [GetTrack(0, 2)](#GetTrack);
                [GetTrackUIVolPan(tr, vol, pan)](#GetTrackUIVolPan);
                [SetMediaTrackInfo_Value(tr, "D_VOL", vol*0.5)](#SetMediaTrackInfo_Value);

            ReaScript/EEL can import functions from other reascripts using @import filename.eel -- note that only the file's functions will be imported, normal code in that file will not be executed.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, eel</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="python">
        <slug>
        2.3.python_desc
        </slug>
        <title>2.3 Python Description</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            ###ReaScript/Python API            

            ReaScript/Python requires a recent version of Python installed on this machine. Python is available from multiple sources [as a free download](http://www.python.org/download). After installing Python, REAPER may detect the Python dynamic library automatically. If not, you can enter the path in the ReaScript preferences page, at Options/Preferences/Plug-Ins/ReaScript.

            ReaScript/Python scripts can call API functions using RPR_functionname().

            All parameters are passed by value, not reference. API functions that cannot return information in the parameter list will return a single value. API functions that can return any information in the parameter list will return a list of values; The first value in the list will be the function return value (unless the function is declared to return void).

            Examples:
                # function returning a single (scalar) value:
                sec = [RPR_parse_timestr("1:12")](#parse_timestr)

                # function returning information in the first parameter (function returns void):
                (str) = [RPR_GetProjectPath("", 512)](#GetProjectPath)

                # lower volume of track 3 by half (RPR_GetTrackUIVolPan returns Bool):
                tr = [RPR_GetTrack(0, 2)](#GetTrack)
                (ok, tr, vol, pan) = [RPR_GetTrackUIVolPan(tr, 0, 0)](#GetTrackUIVolPan)
                # this also works, if you only care about one of the returned values:
                vol = [RPR_GetTrackUIVolPan(tr, 0, 0)[2]](#GetTrackUIVolPan)
                [RPR_SetMediaTrackInfo_Value(tr, "D_VOL", vol*0.5)](#SetMediaTrackInfo_Value)

            You can create and save modules of useful functions that you can import into other ReaScripts. For example, if you create a file called reascript_utility.py that contains the function helpful_function(), you can import that file into any Python ReaScript with the line:
            import reascript_utility
            and call the function by using:
            reascript_utility.helpful_function()

            Note that ReaScripts must explicitly import the REAPER python module, even if the script is imported into another ReaScript:
            from reaper_python import *
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, python</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>2.4.lua_desc</slug>
        <title>2.4 Lua Description</title>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            ###ReaScript/Lua API

            ReaScript/Lua scripts can call API functions using reaper.functionname().

            Some functions return multiple values. In many cases, some function parameters are ignored, especially when similarly named parameters are present in the returned values.

            Examples:
                -- function returning a single (scalar) value:
                sec = reaper.[parse_timestr("1:12")](#parse_timestr)

                -- function with an ignored (dummy) parameter:
                path = reaper.[GetProjectPath("")](#GetProjectPath)

                -- lower volume of track 3 by half:
                tr = reaper.[GetTrack(0, 2)](#GetTrack)
                ok, vol, pan = reaper.[GetTrackUIVolPan(tr, 0, 0)](#GetTrackUIVolPan)
                reaper.[SetMediaTrackInfo_Value(tr, "D_VOL", vol*0.5)](#SetMediaTrackInfo_Value)

            ReaScript/Lua can import functions from other ReaScripts using require. If the files are not being found, it is probably a path problem (remember that lua paths are wildcard patterns, not just directory listings, see details [here](http://www.lua.org/pil/8.1.html)). 
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            API-Documentation
        </chapter_context>
        <tags>documentation, introduction, lua</tags>
    </US_DocBloc>


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddMediaItemToTrack</slug>
        <title>AddMediaItemToTrack</title>
        <functioncall prog_lang="cpp">MediaItem* item AddMediaItemToTrack(MediaTrack* tr)</functioncall>
        <functioncall prog_lang="eel">MediaItem item AddMediaItemToTrack(MediaTrack tr)</functioncall>
        <functioncall prog_lang="lua">MediaItem item = reaper.AddMediaItemToTrack(MediaTrack tr)</functioncall>
        <functioncall prog_lang="python">MediaItem item RPR_AddMediaItemToTrack(MediaTrack tr)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Creates a new media item. It will be empty and therefore not be shown in the arrange-view, until you associate a mediafile(audio, picture, video, etc) or a length and position to it using [SetMediaItemInfo_Value](#SetMediaItemInfo_Value)
        </description>
        <retvals markup_type="markdown" markup_version="1.0.1">
            MediaItem item - the newly created MediaItem-object
        </retvals>
        <parameters>
            MediaTrack tr - tracknumber(zero based), with 0 for track 1, 1 for track 2, etc.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, mediaitem, item, track, empty</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddProjectMarker</slug>
        <title>AddProjectMarker</title>
        <functioncall prog_lang="cpp">int AddProjectMarker(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx)</functioncall>
        <functioncall prog_lang="eel">int AddProjectMarker(ReaProject proj, bool isrgn, pos, rgnend, "name", int wantidx)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.AddProjectMarker(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx)</functioncall>
        <functioncall prog_lang="python">Int RPR_AddProjectMarker(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Creates a new Projectmarker/Region.
            Returns the index of the created marker/region, or -1 on failure. Supply wantidx&gt;=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.
        </description>
        <retvals>
            integer - the shown-number of the newly created marker/region
        </retvals>
        <parameters>
            ReaProject proj - the project, in which to add the new marker; use 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            boolean isrgn - true, if it shall be a region; false, if a normal marker
            number pos - the position of the newly created marker/region in seconds
            number rgnend - if the marker is a region, this is the end of the region in seconds
            string name - the shown name of the marker
            integer wantidx - the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, region, marker, name, shownnumber, pos, project, add</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddProjectMarker2</slug>
        <title>AddProjectMarker2</title>
        <functioncall prog_lang="cpp">int AddProjectMarker2(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx, int color)</functioncall>
        <functioncall prog_lang="eel">int AddProjectMarker2(ReaProject proj, bool isrgn, pos, rgnend, "name", int wantidx, int color)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.AddProjectMarker2(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx, integer color)</functioncall>
        <functioncall prog_lang="python">Int RPR_AddProjectMarker2(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx, Int color)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the index of the created marker/region, or -1 on failure. Supply wantidx&gt;=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or [ColorToNative(r,g,b)|0x1000000](#ColorToNative)
        </description>
        <retvals>
            integer - the shown-number of the newly created marker/region
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1" indent="default">
            ReaProject proj - the project, in which to add the new marker; use 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            boolean isrgn - true, if it shall be a region; false, if a normal marker
            number pos - the position of the newly created marker/region in seconds
            number rgnend - if the marker is a region, this is the end of the region in seconds
            string name - the shown name of the marker
            integer wantidx - the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given.
            integer color - the color as returned by the function [ColorToNative(r,g,b)|0x1000000](#ColorToNative)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, region, marker, name, shownnumber, pos, project, add</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddRemoveReaScript</slug>
        <title>AddRemoveReaScript</title>
        <functioncall prog_lang="cpp">int AddRemoveReaScript(bool add, int sectionID, const char* scriptfn, bool commit)</functioncall>
        <functioncall prog_lang="eel">int AddRemoveReaScript(bool add, int sectionID, "scriptfn", bool commit)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.AddRemoveReaScript(boolean add, integer sectionID, string scriptfn, boolean commit)</functioncall>
        <functioncall prog_lang="python">Int RPR_AddRemoveReaScript(Boolean add, Int sectionID, String scriptfn, Boolean commit)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Adds a ReaScript (returns the new command ID, or 0 if failed) or removes a ReaScript
            Returns &gt;0 on success. 
            Use commit==true when adding/removing a single script. 
            When bulk adding/removing multiple scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.            
            The commandID returned, might change, when addng this script into an other Reaper-installation. 
            To be sure to use the right command-id, use [ReverseNamedCommandLookup()](#ReverseNamedCommandLookup) to get the ActionCommandID, which will never change, until you remove the script.
            
            If you want to add a script to several sections, you need to add them individually, by calling the function again with the changed section-number.
        </description>
        <retvals>
            integer - the command ID for this script.
        </retvals>
        <parameters>
            boolean add - true, if it shall be added, false if it shall be removed
            integer sectionID - the section, in which this script shall appear(e.g. in the Show Actions-Dialog)
            -   0, Main
            -   100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
            -   32060, MIDI Editor
            -   32061, MIDI Event List Editor
            -   32062, MIDI Inline Editor
            -   32063, Media Explorer
            string scriptfn - the filename of the Reascript to be added
            boolean commit - true, if it shall be committed, false, if you want to add new scripts first. 
                - Committing means, that Reaper stores the Reascript-information into the reaper-kb.ini for permanent use. 
                - It will be committed at Reaper's exit as well, but if Reaper crashes before exiting properly, your added
                - script might get lost. When adding many Reascripts to Reaper, setting commit to false might help prevail 
                - ressources, as you don't rewrite the reaper-kb.ini file over and over again. However, if you only add a 
                - few scripts, this might not be of importance to you.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, reascript, lua, python, eel, add, remove, commandid</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddTakeToMediaItem</slug>
        <title>AddTakeToMediaItem</title>
        <functioncall prog_lang="cpp">MediaItem_Take* AddTakeToMediaItem(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take AddTakeToMediaItem(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take = reaper.AddTakeToMediaItem(MediaItem item)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take RPR_AddTakeToMediaItem(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            creates a new take in an item
        </description>
        <retvals>
            MediaItem_Take - the newly created MediaItem_Take-object
        </retvals>
        <parameters>
            MediaItem item - a MediaItem-object, in which you want to add the new take
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, mediaitem, item, track, empty, take</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AddTempoTimeSigMarker</slug>
        <title>AddTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">bool AddTempoTimeSigMarker(ReaProject* proj, double timepos, double bpm, int timesig_num, int timesig_denom, bool lineartempochange)</functioncall>
        <functioncall prog_lang="eel">bool AddTempoTimeSigMarker(ReaProject proj, timepos, bpm, int timesig_num, int timesig_denom, bool lineartempochange)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.AddTempoTimeSigMarker(ReaProject proj, number timepos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempochange)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_AddTempoTimeSigMarker(ReaProject proj, Float timepos, Float bpm, Int timesig_num, Int timesig_denom, Boolean lineartempochange)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Deprecated. Use [SetTempoTimeSigMarker](#SetTempoTimeSigMarker) with ptidx=-1.
        </description>
        <retvals>
            boolean - true, if adding was successful; false, if not
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project in which to add the TempoTimesigMarker, 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            number timepos - the position in seconds
            number bpm - the speed in bpm
            integer timesig_num - timesignature number : timesig_num/timesig_denom, e.g. 3/4
            integer timesig_denom - timesignature denominator : timesig_num/timesig_denom, e.g. 3/4
            boolean lineartempochange - true, linear tempo change, false not
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, timesignature, tempo, marker, add</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>adjustZoom</slug>
        <title>adjustZoom</title>
        <functioncall prog_lang="cpp">void adjustZoom(double amt, int forceset, bool doupd, int centermode)</functioncall>
        <functioncall prog_lang="eel">adjustZoom(amt, int forceset, bool doupd, int centermode)</functioncall>
        <functioncall prog_lang="lua">reaper.adjustZoom(number amt, integer forceset, boolean doupd, integer centermode)</functioncall>
        <functioncall prog_lang="python">RPR_adjustZoom(Float amt, Int forceset, Boolean doupd, Int centermode)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets horizontal zoom in track view.
        </description>
        <parameters>
        number amt - the zoom factor, positive values=zoom in, negative values=zoom out, 0=no zoom
        integer forceset - forces one amt-zoomfactor(non zero) or allows repeatable zoom-in/zoomout(0)
        boolean doupd - true, updates the track-view instantly; false, or only when mouse hovers over trackview
        integer centermode - decides, what shall be in the center of the view. The following are available:
            -  -1, default selection, as set in the reaper-prefs, 
            -   0, edit-cursor or playcursor(if it's in the current zoomfactor of the view during playback/recording) in center,
            -   1, keeps edit-cursor in center of zoom
            -   2, keeps center of view in the center during zoom
            -   3, keeps in center of zoom, what is beneath the mousecursor
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, view, zoom, center</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AnyTrackSolo</slug>
        <title>AnyTrackSolo</title>
        <functioncall prog_lang="cpp">bool AnyTrackSolo(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">bool AnyTrackSolo(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.AnyTrackSolo(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_AnyTrackSolo(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns, whether any of the tracks is solo in Project proj
        </description>
        <retvals>
            boolean - true if any track is solo; false if not. Covers all solo-states(solo in place, ignore routing, exclusive solo, solo defeat).
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project to be checked for. 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, states, solo</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>APIExists</slug>
        <title>APIExists</title>
        <functioncall prog_lang="cpp">bool APIExists(const char* function_name)</functioncall>
        <functioncall prog_lang="eel">bool APIExists("function_name")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.APIExists(string function_name)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_APIExists(String function_name)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns true if function_name exists in the REAPER API
        </description>
        <retvals>
            boolean - true, if function_name exists, false if not
        </retvals>
        <parameters>
            string function_name - the name of the function you want to check the existence for
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>api, exists, check, helper</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>APITest</slug>
        <title>APITest</title>
        <functioncall prog_lang="cpp">void APITest()</functioncall>
        <functioncall prog_lang="eel">APITest()</functioncall>
        <functioncall prog_lang="lua">reaper.APITest()</functioncall>
        <functioncall prog_lang="python">RPR_APITest()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Displays a message window with "Hello World", if the API was successfully called.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>api, test, check, hello world</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ApplyNudge</slug>
        <title>ApplyNudge</title>
        <functioncall prog_lang="cpp">bool ApplyNudge(ReaProject* project, int nudgeflag, int nudgewhat, int nudgeunits, double value, bool reverse, int copies)</functioncall>
        <functioncall prog_lang="eel">bool ApplyNudge(ReaProject project, int nudgeflag, int nudgewhat, int nudgeunits, value, bool reverse, int copies)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.ApplyNudge(ReaProject project, integer nudgeflag, integer nudgewhat, integer nudgeunits, number value, boolean reverse, integer copies)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_ApplyNudge(ReaProject project, Int nudgeflag, Int nudgewhat, Int nudgeunits, Float value, Boolean reverse, Int copies)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Nudges elements like items, cursor, contents, etc to or by a value you want. Nudges only selected mediaitems.
        </description>
        <retvals>
            boolean - true, if it worked; false, if it didn't
        </retvals>
        <parameters>
            ReaProject project - the project, in which to nudge; 0 for the current project
            integer nudgeflag - the way to nudge
                - &1, set to value(otherwise nudge by values)
                - &2, snap
            integer nudgewhat - what to nudge
                - 0, position
                - 1, left trim
                - 2, left edge
                - 3, right edge
                - 4, contents
                - 5, duplicate
                - 6, editcursor
            integer nudgeunits - the unit, in which to nudge
                - 0, ms
                - 1, seconds
                - 2, grid
                - 3, 256th notes
                - ...
                - 15, whole notes
                - 16, measures.beats (1.15 = 1 measure + 1.5 beats)
                - 17, samples
                - 18, frames
                - 19, pixels 
                - 20, item lengths
                - 21, item selections
            number value - amount to nudge by, or value to set to(depending on the settings in nudgeflag and the unit in nudgeunits)
            boolean reverse - in nudge mode: true nudges left; right doesn't nudge to left
            integer copies - in nudge duplicate mode, number of copies (otherwise ignored)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>arrangeviewmanagement, nudge, snap, value, units, trim, position, content, duplicate, editcursor, ms, grid, pixels, frames, samples, measures, beats, length, selection</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Audio_Init</slug>
        <title>Audio_Init</title>
        <functioncall prog_lang="cpp">void Audio_Init()</functioncall>
        <functioncall prog_lang="eel">Audio_Init()</functioncall>
        <functioncall prog_lang="lua">reaper.Audio_Init()</functioncall>
        <functioncall prog_lang="python">RPR_Audio_Init()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            open all audio and MIDI devices, if not open
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>audio, midi, audiomanagement, open, devices</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Audio_IsPreBuffer</slug>
        <title>Audio_IsPreBuffer</title>
        <functioncall prog_lang="cpp">int Audio_IsPreBuffer()</functioncall>
        <functioncall prog_lang="eel">int Audio_IsPreBuffer()</functioncall>
        <functioncall prog_lang="lua">integer = reaper.Audio_IsPreBuffer()</functioncall>
        <functioncall prog_lang="python">Int RPR_Audio_IsPreBuffer()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            is in pre-buffer? threadsafe
        </description>
        <retvals>
            integer - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Audio_IsRunning</slug>
        <title>Audio_IsRunning</title>
        <functioncall prog_lang="cpp">int Audio_IsRunning()</functioncall>
        <functioncall prog_lang="eel">int Audio_IsRunning()</functioncall>
        <functioncall prog_lang="lua">integer = reaper.Audio_IsRunning()</functioncall>
        <functioncall prog_lang="python">Int RPR_Audio_IsRunning()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            is audio running at all? threadsafe
        </description>
        <retvals>
            integer - 0, audio is not running; 1, audio is running
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>audio, midi, audiomanagement, running, devices</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Audio_Quit</slug>
        <title>Audio_Quit</title>
        <functioncall prog_lang="cpp">void Audio_Quit()</functioncall>
        <functioncall prog_lang="eel">Audio_Quit()</functioncall>
        <functioncall prog_lang="lua">reaper.Audio_Quit()</functioncall>
        <functioncall prog_lang="python">RPR_Audio_Quit()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            close all audio and MIDI devices, if open
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>audio, midi, audiomanagement, quit, devices</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>AudioAccessorValidateState</slug>
        <title>AudioAccessorValidateState</title>
        <functioncall prog_lang="cpp">bool AudioAccessorValidateState(AudioAccessor* accessor)</functioncall>
        <functioncall prog_lang="eel">bool AudioAccessorValidateState(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.AudioAccessorValidateState(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_AudioAccessorValidateState(AudioAccessor accessor)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.
        </description>
        <retvals>
            boolean - true, if state has changed; false, if state hasn't changed
        </retvals>
        <parameters>
            AudioAccessor accessor - the AudioAccessor for a MediaTrack or a MediaItem_take
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags>audiomanagement, validate, audio, accessor, item, take</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BypassFxAllTracks</slug>
        <title>BypassFxAllTracks</title>
        <functioncall prog_lang="cpp">void BypassFxAllTracks(int bypass)</functioncall>
        <functioncall prog_lang="eel">BypassFxAllTracks(int bypass)</functioncall>
        <functioncall prog_lang="lua">reaper.BypassFxAllTracks(integer bypass)</functioncall>
        <functioncall prog_lang="python">RPR_BypassFxAllTracks(Int bypass)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Does bypassing of the fx of all tracks.
        </description>
        <parameters>
            integer bypass - -1, bypass all if not all bypassed,otherwise unbypass all
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, track, bypass, fx</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ClearAllRecArmed</slug>
        <title>ClearAllRecArmed</title>
        <functioncall prog_lang="cpp">void ClearAllRecArmed()</functioncall>
        <functioncall prog_lang="eel">ClearAllRecArmed()</functioncall>
        <functioncall prog_lang="lua">reaper.ClearAllRecArmed()</functioncall>
        <functioncall prog_lang="python">RPR_ClearAllRecArmed()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Clears all armed states of all tracks.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, rec, arm, state, clear, off</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ClearConsole</slug>
        <title>ClearConsole</title>
        <functioncall prog_lang="cpp">void ClearConsole()</functioncall>
        <functioncall prog_lang="eel">ClearConsole()</functioncall>
        <functioncall prog_lang="lua">reaper.ClearConsole()</functioncall>
        <functioncall prog_lang="python">RPR_ClearConsole()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Clear the ReaScript console. See [ShowConsoleMsg](#ShowConsoleMsg)
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, console, clear, reaconsole</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ClearPeakCache</slug>
        <title>ClearPeakCache</title>
        <functioncall prog_lang="cpp">void ClearPeakCache()</functioncall>
        <functioncall prog_lang="eel">ClearPeakCache()</functioncall>
        <functioncall prog_lang="lua">reaper.ClearPeakCache()</functioncall>
        <functioncall prog_lang="python">RPR_ClearPeakCache()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            resets the global peak caches
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, peak, cache, clear</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ColorFromNative</slug>
        <title>ColorFromNative</title>
        <functioncall prog_lang="cpp">void ColorFromNative(int col, int* rOut, int* gOut, int* bOut)</functioncall>
        <functioncall prog_lang="eel">ColorFromNative(int col, int &amp;r, int &amp;g, int &amp;b)</functioncall>
        <functioncall prog_lang="lua">integer r, integer g, integer b = reaper.ColorFromNative(integer col)</functioncall>
        <functioncall prog_lang="python">(Int col, Int rOut, Int gOut, Int bOut) = RPR_ColorFromNative(col, rOut, gOut, bOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Extract RGB values from an OS dependent color. See [ColorToNative](#ColorToNative).
            
            As Reaper treats colors differently on Mac and Windows, you should always use [ColorFromNative](#ColorFromNative) and [ColorToNative](#ColorToNative).
        </description>
        <retvals>
            integer r - the value for red, from 0 to 255
            integer g - the value for green, from 0 to 255
            integer b - the value for blue, from 0 to 255
        </retvals>
        <parameters>
            integer col - the colorvalue to convert from
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>colormanagement, native, from, conversion</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ColorToNative</slug>
        <title>ColorToNative</title>
        <functioncall prog_lang="cpp">int ColorToNative(int r, int g, int b)</functioncall>
        <functioncall prog_lang="eel">int ColorToNative(int r, int g, int b)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.ColorToNative(integer r, integer g, integer b)</functioncall>
        <functioncall prog_lang="python">Int RPR_ColorToNative(Int r, Int g, Int b)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See [ColorFromNative](#ColorFromNative)
            As Reaper treats colors differently on Mac and Windows, you should always use [ColorFromNative](#ColorFromNative) and [ColorToNative](ColorToNative).
            
            When using the returned colorvalue, you need to add |0x1000000 at the end of it, like ColorToNative(20,30,40)|0x1000000.
        </description>
        <retvals>
            integer col - the correct colorvalue, fitting to your system.
        </retvals>
        <parameters>
            integer r - the value for red, from 0 to 255
            integer g - the value for green, from 0 to 255
            integer b - the value for blue, from 0 to 255
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>colormanagement, native, from, conversion</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountAutomationItems</slug>
        <title>CountAutomationItems</title>
        <functioncall prog_lang="cpp">int CountAutomationItems(TrackEnvelope* env)</functioncall>
        <functioncall prog_lang="eel">int CountAutomationItems(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountAutomationItems(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountAutomationItems(TrackEnvelope env)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the number of automation items on this envelope. See [GetSetAutomationItemInfo](#GetSetAutomationItemInfo).
        </description>
        <retvals>
            integer - number of automation items
        </retvals>
        <parameters>
            TrackEnvelope env - the envelope-object for the envelope-lane
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Automation Management
        </chapter_context>
        <tags>envelopemanagement, automation items, count, envelopes</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountEnvelopePoints</slug>
        <title>CountEnvelopePoints</title>
        <functioncall prog_lang="cpp">int CountEnvelopePoints(TrackEnvelope* envelope)</functioncall>
        <functioncall prog_lang="eel">int CountEnvelopePoints(TrackEnvelope envelope)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountEnvelopePoints(TrackEnvelope envelope)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountEnvelopePoints(TrackEnvelope envelope)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the number of points in the envelope.
        </description>
        <retvals>
            integer - the number of envelope-points in the envelopeobject envelope
        </retvals>
        <parameters>
            TrackEnvelope envelope - the TrackEnvelope-object, in which to count for the envelope-points
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, envelopes, count, points</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountEnvelopePointsEx</slug>
        <title>CountEnvelopePointsEx</title>
        <functioncall prog_lang="cpp">int CountEnvelopePointsEx(TrackEnvelope* envelope, int autoitem_idx)</functioncall>
        <functioncall prog_lang="eel">int CountEnvelopePointsEx(TrackEnvelope envelope, int autoitem_idx)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountEnvelopePointsEx(TrackEnvelope envelope, integer autoitem_idx)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountEnvelopePointsEx(TrackEnvelope envelope, Int autoitem_idx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the number of points in the envelope. Automation Items can be selected with autoitem_idx.
        </description>
        <retvals>
            integer - the number of envelope-points in the envelopeobject envelope
        </retvals>
        <parameters>
            TrackEnvelope envelope - the TrackEnvelope-object, in which to count for the envelope-points
            integer autoitem_idx - -1, for the underlying envelope, 0, for the first automation item on the envelope, etc.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, envelopes, count, points, automation items</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountMediaItems</slug>
        <title>CountMediaItems</title>
        <functioncall prog_lang="cpp">int CountMediaItems(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int CountMediaItems(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountMediaItems(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountMediaItems(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            count the number of items in the project (proj=0 for active project)
        </description>
        <retvals>
            integer - the number of MediaItems in a project
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project, in which to count for the number of items; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, count, mediaitems</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountProjectMarkers</slug>
        <title>CountProjectMarkers</title>
        <functioncall prog_lang="cpp">int CountProjectMarkers(ReaProject* proj, int* num_markersOut, int* num_regionsOut)</functioncall>
        <functioncall prog_lang="eel">int CountProjectMarkers(ReaProject proj, int &amp;num_markers, int &amp;num_regions)</functioncall>
        <functioncall prog_lang="lua">integer retval, number num_markers, number num_regions = reaper.CountProjectMarkers(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, Int num_markersOut, Int num_regionsOut) = RPR_CountProjectMarkers(proj, num_markersOut, num_regionsOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns the number of all markers and regions, as well as all markers and all regions in a project.
            num_markersOut and num_regionsOut may be NULL.
        </description>
        <retvals>
            integer retval - all markers and regions in the project
            integer num_markers - the number of markers in the project
            integer num_regions - the number of regions in the project
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project, in which to count the markers; 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, count, all, markers, regions</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountSelectedMediaItems</slug>
        <title>CountSelectedMediaItems</title>
        <functioncall prog_lang="cpp">int CountSelectedMediaItems(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int CountSelectedMediaItems(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountSelectedMediaItems(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountSelectedMediaItems(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            count the number of selected items in the project (proj=0 for active project)
        </description>
        <retvals>
            integer - the number of selected items in the project
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project, in which to count for the selected mediaitems; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, count, selected, mediaitem</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountSelectedTracks</slug>
        <title>CountSelectedTracks</title>
        <functioncall prog_lang="cpp">int CountSelectedTracks(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int CountSelectedTracks(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountSelectedTracks(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountSelectedTracks(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Count the number of selected tracks in the project. 
            This function ignores the master track, see [CountSelectedTracks2](#CountSelectedTracks2)
        </description>
        <retvals>
            integer - the number of selected tracks in the project
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project in which to count the selected tracks; 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, track, selected, count</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountSelectedTracks2</slug>
        <title>CountSelectedTracks2</title>
        <functioncall prog_lang="cpp">int CountSelectedTracks2(ReaProject* proj, bool wantmaster)</functioncall>
        <functioncall prog_lang="eel">int CountSelectedTracks2(ReaProject proj, bool wantmaster)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountSelectedTracks2(ReaProject proj, boolean wantmaster)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountSelectedTracks2(ReaProject proj, Boolean wantmaster)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Count the number of selected tracks in the project.
            if you set wantmaster to true, it will include the master track as well.
        </description>
        <retvals>
            integer - the number of selected tracks in your project
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the number of the project in which to count the selected tracks; 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            boolean wantmaster - true, if you want to count the master-track as well; false, if you don't want to count it
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, selected, track, master, count</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTakeEnvelopes</slug>
        <title>CountTakeEnvelopes</title>
        <functioncall prog_lang="cpp">int CountTakeEnvelopes(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int CountTakeEnvelopes(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountTakeEnvelopes(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountTakeEnvelopes(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [GetTakeEnvelope](#GetTakeEnvelope)
        </description>
        <retvals>
            integer - number of envelopes of this take of a mediaitem
        </retvals>
        <parameters>
            MediaItem_Take take - the mediaitem-object for a certain take
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, take, envelope</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTakes</slug>
        <title>CountTakes</title>
        <functioncall prog_lang="cpp">int CountTakes(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">int CountTakes(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountTakes(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountTakes(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            count the number of takes in the item
        </description>
        <retvals>
            integer - the number of takes in a mediaitem
        </retvals>
        <parameters>
            MediaItem item - the mediaitem to count the takes of
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, count, takes, mediaitem</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTCPFXParms</slug>
        <title>CountTCPFXParms</title>
        <functioncall prog_lang="cpp">int CountTCPFXParms(ReaProject* project, MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int CountTCPFXParms(ReaProject project, MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountTCPFXParms(ReaProject project, MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountTCPFXParms(ReaProject project, MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Count the number of FX parameter knobs displayed on the track control panel.
        </description>
        <retvals>
            integer - the number of FX-parameter-knobs 
        </retvals>
        <parameters>
            ReaProject project - the project, in which to count the knobs
            MediaTrack track - the track of which to count the knobs
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, count, fx, parameter, knobs, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTempoTimeSigMarkers</slug>
        <title>CountTempoTimeSigMarkers</title>
        <functioncall prog_lang="cpp">int CountTempoTimeSigMarkers(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int CountTempoTimeSigMarkers(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountTempoTimeSigMarkers(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountTempoTimeSigMarkers(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Count the number of tempo/time signature markers in the project. See [GetTempoTimeSigMarker](#GetTempoTimeSigMarker), [SetTempoTimeSigMarker](#SetTempoTimeSigMarker), [AddTempoTimeSigMarker](#AddTempoTimeSigMarker), [DeleteTempoTimeSigMarker](#DeleteTempoTimeSigMarker).
        </description>
        <retvals>
            integer - the number of tempo/time-signature markers in the project.
        </retvals>
        <parameters>
            ReaProject proj - project number; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, tempo, timesignature, count</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTrackEnvelopes</slug>
        <title>CountTrackEnvelopes</title>
        <functioncall prog_lang="cpp">int CountTrackEnvelopes(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int CountTrackEnvelopes(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountTrackEnvelopes(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountTrackEnvelopes(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Counts the number of track-envelopes of a certain track.
            see [GetTrackEnvelope](#GetTrackEnvelope)
        </description>
        <retvals>
            integer - the number of track-envelopes in a track
        </retvals>
        <parameters>
            MediaTrack track - the object of the track to count it's envelopes
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, count, track-envelopes, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTrackMediaItems</slug>
        <title>CountTrackMediaItems</title>
        <functioncall prog_lang="cpp">int CountTrackMediaItems(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int CountTrackMediaItems(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountTrackMediaItems(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountTrackMediaItems(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            count the number of items in the track
        </description>
        <retvals>
            integer - the number of mediaitems in the track
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack to count the items of
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, track, count, mediaitem</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CountTracks</slug>
        <title>CountTracks</title>
        <functioncall prog_lang="cpp">int CountTracks(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int CountTracks(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CountTracks(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int RPR_CountTracks(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            count the number of tracks in the project (proj=0 for active project)
        </description>
        <retvals>
            integer - the number of tracks in the project, excluding the master-track.
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project in which to count the tracks; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, count, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CreateNewMIDIItemInProj</slug>
        <title>CreateNewMIDIItemInProj</title>
        <functioncall prog_lang="cpp">MediaItem* CreateNewMIDIItemInProj(MediaTrack* track, double starttime, double endtime, const bool* qnInOptional)</functioncall>
        <functioncall prog_lang="eel">MediaItem CreateNewMIDIItemInProj(MediaTrack track, starttime, endtime, optional bool qnIn)</functioncall>
        <functioncall prog_lang="lua">MediaItem = reaper.CreateNewMIDIItemInProj(MediaTrack track, number starttime, number endtime, optional boolean qnIn)</functioncall>
        <functioncall prog_lang="python">MediaItem RPR_CreateNewMIDIItemInProj(MediaTrack track, Float starttime, Float endtime, const bool qnInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.
        </description>
        <retvals>
            MediaItem - the newly created MIDI-mediaitem.
        </retvals>
        <parameters>
            MediaTrack track - the object of the track, in which to create this mediaitem
            number starttime - starttime of the item in seconds, unless qnIn is set to true
            number endtime - endtime of the item in seconds, unless qnIn is set to true
            boolean qnIn - unknown; can be set to true, or false or be omitted
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, midi, track, mediaitem</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CreateTakeAudioAccessor</slug>
        <title>CreateTakeAudioAccessor</title>
        <functioncall prog_lang="cpp">AudioAccessor* CreateTakeAudioAccessor(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">AudioAccessor CreateTakeAudioAccessor(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">AudioAccessor = reaper.CreateTakeAudioAccessor(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">AudioAccessor RPR_CreateTakeAudioAccessor(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Create an audio accessor object for this take. Must only call from the main thread. See [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [GetAudioAccessorHash](#GetAudioAccessorHash), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).
        </description>
        <retvals>
            AudioAccessor - the newly created AudioAccessor
        </retvals>
        <parameters>
            MediaItem_Take take - the take from a MediaItem-object, of which you want to create a new AudioAccessor
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags>audiomanagement, audio, accessor, create, item, take</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CreateTrackAudioAccessor</slug>
        <title>CreateTrackAudioAccessor</title>
        <functioncall prog_lang="cpp">AudioAccessor* CreateTrackAudioAccessor(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">AudioAccessor CreateTrackAudioAccessor(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">AudioAccessor = reaper.CreateTrackAudioAccessor(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">AudioAccessor RPR_CreateTrackAudioAccessor(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Create an audio accessor object for this track. Must only call from the main thread. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [GetAudioAccessorHash](#GetAudioAccessorHash), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).
        </description>
        <retvals>
            AudioAccessor - the newly created AudioAccessor for this MediaTrack
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack, of which you want to create an AudioAccessor
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags>audiomanagement, audio, accessor, create, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CreateTrackSend</slug>
        <title>CreateTrackSend</title>
        <functioncall prog_lang="cpp">int CreateTrackSend(MediaTrack* tr, MediaTrack* desttrInOptional)</functioncall>
        <functioncall prog_lang="eel">int CreateTrackSend(MediaTrack tr, MediaTrack desttrIn)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CreateTrackSend(MediaTrack tr, MediaTrack desttrIn)</functioncall>
        <functioncall prog_lang="python">Int RPR_CreateTrackSend(MediaTrack tr, MediaTrack desttrInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return &gt;=0 on success (== new send/receive index). See [RemoveTrackSend](#RemoveTrackSend), [GetSetTrackSendInfo](#GetSetTrackSendInfo), [GetTrackSendInfo_Value](#GetTrackSendInfo_Value), [SetTrackSendInfo_Value](#SetTrackSendInfo_Value).
        </description>
        <retvals>
            integer - the id of the new HWOut or Send created. HWOut and Send have their own individual index-numbering.
        </retvals>
        <parameters>
            MediaTrack tr - the MediaTrack in which to create the send/hwout
            MediaTrack desttrIn - destination track input; 
                                - a MediaTrack-object, creates a new send to tr from MediaTrack-object; 
                                - nil(or no MediaTrack-object), creates a new hardware-output
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, create, routing, hwout, hardware out, send, receive</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_FlushUndo</slug>
        <title>CSurf_FlushUndo</title>
        <functioncall prog_lang="cpp">void CSurf_FlushUndo(bool force)</functioncall>
        <functioncall prog_lang="eel">CSurf_FlushUndo(bool force)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_FlushUndo(boolean force)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_FlushUndo(Boolean force)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            call this to force flushing of the undo states after using CSurf_On*Change()
        </description>
        <parameters>
            boolean force - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_GetTouchState</slug>
        <title>CSurf_GetTouchState</title>
        <functioncall prog_lang="cpp">bool CSurf_GetTouchState(MediaTrack* trackid, int isPan)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_GetTouchState(MediaTrack trackid, int isPan)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.CSurf_GetTouchState(MediaTrack trackid, integer isPan)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_CSurf_GetTouchState(MediaTrack trackid, Int isPan)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            MediaTrack trackid - 
            integer isPan - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_GoEnd</slug>
        <title>CSurf_GoEnd</title>
        <functioncall prog_lang="cpp">void CSurf_GoEnd()</functioncall>
        <functioncall prog_lang="eel">CSurf_GoEnd()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_GoEnd()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_GoEnd()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Moves the cursor to the end of the last item in the project.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, move, cursor, end, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_GoStart</slug>
        <title>CSurf_GoStart</title>
        <functioncall prog_lang="cpp">void CSurf_GoStart()</functioncall>
        <functioncall prog_lang="eel">CSurf_GoStart()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_GoStart()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_GoStart()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Moves the cursor to the start of the project.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, move, cursor, start, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_NumTracks</slug>
        <title>CSurf_NumTracks</title>
        <functioncall prog_lang="cpp">int CSurf_NumTracks(bool mcpView)</functioncall>
        <functioncall prog_lang="eel">int CSurf_NumTracks(bool mcpView)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CSurf_NumTracks(boolean mcpView)</functioncall>
        <functioncall prog_lang="python">Int RPR_CSurf_NumTracks(Boolean mcpView)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            counts the number of tracks, or the number of visible tracks, when mcpView is set to true.
        </description>
        <retvals>
            integer - number of tracks
        </retvals>
        <parameters>
            boolean mcpView - true, only return the number of tracks visible in MCP; false, count all tracks, incl. invisible
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, count, tracks, visible, invisible</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnArrow</slug>
        <title>CSurf_OnArrow</title>
        <functioncall prog_lang="cpp">void CSurf_OnArrow(int whichdir, bool wantzoom)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnArrow(int whichdir, bool wantzoom)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnArrow(integer whichdir, boolean wantzoom)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnArrow(Int whichdir, Boolean wantzoom)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Zoom or scroll the Arrangeview vertically. 
            The stepsize with scrolling is track by track.
        </description>
        <parameters>
            integer whichdir - into which (zoom-)direction to change
                     -   0, move arrangeview upward(one track each step)/zoom in
                     -   1, move arrangeview downward(one track each step)/zoom out
            boolean wantzoom - true, adjust vertical zoom; false, adjust vertical scrolling
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, zoom, vertical, scroll, arrange, view</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnFwd</slug>
        <title>CSurf_OnFwd</title>
        <functioncall prog_lang="cpp">void CSurf_OnFwd(int seekplay)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnFwd(int seekplay)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnFwd(integer seekplay)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnFwd(Int seekplay)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Moves editcursor forward, and optionally with seekplay.
        </description>
        <parameters>
            integer seekplay - how to move the editcursor forward
                     -   0, move cursor forward in small steps. Stepsize depends on horizontal zoomfactor.
                     -   1, move cursor forward, in half-second steps when stopped; when playing it jumps ahead with playing restarting at editcursor
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, cursor, forward, jump, seekplay</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnFXChange</slug>
        <title>CSurf_OnFXChange</title>
        <functioncall prog_lang="cpp">bool CSurf_OnFXChange(MediaTrack* trackid, int en)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnFXChange(MediaTrack trackid, int en)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.CSurf_OnFXChange(MediaTrack trackid, integer en)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_CSurf_OnFXChange(MediaTrack trackid, Int en)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/toggles activation of FX-Chain.
        </description>
        <retvals>
            boolean - true, if FX-chain is activated; false, if FX-chain is deactivated
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack, whose FX-chain you want to de-/activate
            integer en - activation state of FX-chain
                -   -1, toggle FX-chain on/off
                -    0, set FX-chain off
                -    1, set FX-chain on
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, fx, set, toggle, chain</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnInputMonitorChange</slug>
        <title>CSurf_OnInputMonitorChange</title>
        <functioncall prog_lang="cpp">int CSurf_OnInputMonitorChange(MediaTrack* trackid, int monitor)</functioncall>
        <functioncall prog_lang="eel">int CSurf_OnInputMonitorChange(MediaTrack trackid, int monitor)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CSurf_OnInputMonitorChange(MediaTrack trackid, integer monitor)</functioncall>
        <functioncall prog_lang="python">Int RPR_CSurf_OnInputMonitorChange(MediaTrack trackid, Int monitor)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            sets rec-monitoring of a specific track.
        </description>
        <retvals>
            integer - the new input-monitor-state (refer to parameter monitor for description)
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack, of which you want to toggle the monitor-button
            integer monitor - monitor-input-state
                -   -1, monitor input on(tape auto style) (can be set with negative values, and 2 as well)
                -    0, monitor off (can be set with 3 and higher as well)
                -    1, monitor input on
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, rec, toggle, monitoring</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnInputMonitorChangeEx</slug>
        <title>CSurf_OnInputMonitorChangeEx</title>
        <functioncall prog_lang="cpp">int CSurf_OnInputMonitorChangeEx(MediaTrack* trackid, int monitor, bool allowgang)</functioncall>
        <functioncall prog_lang="eel">int CSurf_OnInputMonitorChangeEx(MediaTrack trackid, int monitor, bool allowgang)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CSurf_OnInputMonitorChangeEx(MediaTrack trackid, integer monitor, boolean allowgang)</functioncall>
        <functioncall prog_lang="python">Int RPR_CSurf_OnInputMonitorChangeEx(MediaTrack trackid, Int monitor, Boolean allowgang)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets monitor-input-state. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            integer - the new input-monitor-state (refer to parameter monitor for description)
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack, whose monitor-input-state you want to set
            integer monitor - monitor-input-state
                -   -1, monitor input on(tape auto style) (can be set with negative values, and 2 as well)
                -    0, monitor off (can be set with 3 and higher as well)
                -    1, monitor input on
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, set, monitor, input, tape auto style, allowgang</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnMuteChange</slug>
        <title>CSurf_OnMuteChange</title>
        <functioncall prog_lang="cpp">bool CSurf_OnMuteChange(MediaTrack* trackid, int mute)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnMuteChange(MediaTrack trackid, int mute)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.CSurf_OnMuteChange(MediaTrack trackid, integer mute)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_CSurf_OnMuteChange(MediaTrack trackid, Int mute)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets mute state of a MediaTrack.
        </description>
        <retvals>
            boolean - the new mute-state; true, mute is on; false, mute is off
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack to be muted
            integer mute - mute state
            -   0, mute off
            -   1 and higher, mute on
            -   negative values toggle mute-state
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, mute, set, toggle</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnMuteChangeEx</slug>
        <title>CSurf_OnMuteChangeEx</title>
        <functioncall prog_lang="cpp">bool CSurf_OnMuteChangeEx(MediaTrack* trackid, int mute, bool allowgang)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnMuteChangeEx(MediaTrack trackid, int mute, bool allowgang)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.CSurf_OnMuteChangeEx(MediaTrack trackid, integer mute, boolean allowgang)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_CSurf_OnMuteChangeEx(MediaTrack trackid, Int mute, Boolean allowgang)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/toggles mute-state for a MediaTrack. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            boolean - the new mute-state; true, mute is on; false, mute is off
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack to be muted
            integer mute - mute state
            -   0, mute off
            -   1, and higher, mute on
            -   negative values toggle mute-state
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, mute, set, toggle</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnPanChange</slug>
        <title>CSurf_OnPanChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnPanChange(MediaTrack* trackid, double pan, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnPanChange(MediaTrack trackid, pan, bool relative)</functioncall>
        <functioncall prog_lang="lua">number = reaper.CSurf_OnPanChange(MediaTrack trackid, number pan, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float RPR_CSurf_OnPanChange(MediaTrack trackid, Float pan, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Changes the pan-value of a track.
        </description>
        <retvals>
            number - the new pan-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to change the pan
            number pan - -1, full pan left; 1, full pan right; 0, pan centered
            boolean relative - true, add/subtract pan to the currently set pan-value
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, pan, value, center, relative, set, change</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnPanChangeEx</slug>
        <title>CSurf_OnPanChangeEx</title>
        <functioncall prog_lang="cpp">double CSurf_OnPanChangeEx(MediaTrack* trackid, double pan, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnPanChangeEx(MediaTrack trackid, pan, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="lua">number = reaper.CSurf_OnPanChangeEx(MediaTrack trackid, number pan, boolean relative, boolean allowGang)</functioncall>
        <functioncall prog_lang="python">Float RPR_CSurf_OnPanChangeEx(MediaTrack trackid, Float pan, Boolean relative, Boolean allowGang)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Changes the pan-value of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            number - the new pan-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to change the pan
            number pan - -1, full pan left; 1, full pan right; 0, pan centered
            boolean relative - true, add/subtract pan to the currently set pan-value
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, pan, value, center, relative, set, change, allowgang</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnPause</slug>
        <title>CSurf_OnPause</title>
        <functioncall prog_lang="cpp">void CSurf_OnPause()</functioncall>
        <functioncall prog_lang="eel">CSurf_OnPause()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnPause()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnPause()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Toggles between pause and play or when recording has started between pause and rec. Unlike [CSurf_OnPlay()](#CSurf_OnPlay) it toggles pause first, then plays.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, toggle, play, rec, pause</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnPlay</slug>
        <title>CSurf_OnPlay</title>
        <functioncall prog_lang="cpp">void CSurf_OnPlay()</functioncall>
        <functioncall prog_lang="eel">CSurf_OnPlay()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnPlay()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnPlay()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Toggles between play and pause or, when recording, rec and pause. Unlike [CSurf_OnPause()](#CSurf_OnPause) it toggles play first, then pauses.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, toggle, play, rec, pause</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnPlayRateChange</slug>
        <title>CSurf_OnPlayRateChange</title>
        <functioncall prog_lang="cpp">void CSurf_OnPlayRateChange(double playrate)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnPlayRateChange(playrate)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnPlayRateChange(number playrate)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnPlayRateChange(Float playrate)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets the playbackrate of the current project. Can be between 0.25x to 4x.
        </description>
        <parameters>
            number playrate - the playbackrate of the current project. 0.25 to 4.00
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, playback, rate, playrate</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRecArmChange</slug>
        <title>CSurf_OnRecArmChange</title>
        <functioncall prog_lang="cpp">bool CSurf_OnRecArmChange(MediaTrack* trackid, int recarm)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnRecArmChange(MediaTrack trackid, int recarm)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.CSurf_OnRecArmChange(MediaTrack trackid, integer recarm)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_CSurf_OnRecArmChange(MediaTrack trackid, Int recarm)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets a MediaTrack's armed state.
        </description>
        <retvals>
            boolean - true, if set to armed; false, if not
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to set the armed-state
            integer recarm - the armstate; 
                   -    0, set to unarmed
                   -    1 and higher, set to armed
                   -   -1 and lower, toggle recarm
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, arm, state, set</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRecArmChangeEx</slug>
        <title>CSurf_OnRecArmChangeEx</title>
        <functioncall prog_lang="cpp">bool CSurf_OnRecArmChangeEx(MediaTrack* trackid, int recarm, bool allowgang)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnRecArmChangeEx(MediaTrack trackid, int recarm, bool allowgang)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.CSurf_OnRecArmChangeEx(MediaTrack trackid, integer recarm, boolean allowgang)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_CSurf_OnRecArmChangeEx(MediaTrack trackid, Int recarm, Boolean allowgang)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets a MediaTrack's armed state. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            boolean - true, if set to armed; false, if not
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to set the armed-state
            integer recarm - the armstate; 
                   -    0, set to unarmed
                   -    1 and higher, set to armed
                   -   -1 and lower, toggle recarm
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, arm, state, set, allowgang</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRecord</slug>
        <title>CSurf_OnRecord</title>
        <functioncall prog_lang="cpp">void CSurf_OnRecord()</functioncall>
        <functioncall prog_lang="eel">CSurf_OnRecord()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnRecord()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnRecord()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Toggles recording on and off. Starts recording from edit-cursor-position.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, recording, toggle, on, off</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRecvPanChange</slug>
        <title>CSurf_OnRecvPanChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnRecvPanChange(MediaTrack* trackid, int recv_index, double pan, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnRecvPanChange(MediaTrack trackid, int recv_index, pan, bool relative)</functioncall>
        <functioncall prog_lang="lua">number = reaper.CSurf_OnRecvPanChange(MediaTrack trackid, integer recv_index, number pan, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float RPR_CSurf_OnRecvPanChange(MediaTrack trackid, Int recv_index, Float pan, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/alters a pan-value for a received-track. Will also change pan in the accompanying send-track!
        </description>
        <retvals>
            number - the new receive-pan-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack-object whose receive-pan you want to change
            integer recv_index - the receive to be changed. 0 for the first receive, 1 for the second, etc
            number pan - the new pan value; -1, full left; 1, full right; 0, center
            boolean relative - false, set pan to new value; true, alter pan by new value
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, routing, receive, pan, set, alter, relative</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRecvVolumeChange</slug>
        <title>CSurf_OnRecvVolumeChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnRecvVolumeChange(MediaTrack* trackid, int recv_index, double volume, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnRecvVolumeChange(MediaTrack trackid, int recv_index, volume, bool relative)</functioncall>
        <functioncall prog_lang="lua">number = reaper.CSurf_OnRecvVolumeChange(MediaTrack trackid, integer recv_index, number volume, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float RPR_CSurf_OnRecvVolumeChange(MediaTrack trackid, Int recv_index, Float volume, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Sets/alters the volume-value of a received track. Will also change volume in the accompanying send-track!
            
            Note: You can't(!) use SLIDER2DB or DB2SLIDER for getting the volume-values, you want to set here! Use [mkvolstr](#mkvolstr) instead.
        </description>
        <retvals>
            number - the new receive-volume-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack-object whose receive-pan you want to change
            integer recv_index - the receive to be changed. 0 for the first receive, 1 for the second, etc
            number volume - the volume-level of the receive; 0, -inf; 1, 0dB; 4, ca +12 db; higher values are possible, though fader will not reflect them. but higher values will still be applied.           
            boolean relative - false, set volume to new value; true, alter volume by new value
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, routing, receive, volume, set, alter, relative</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRew</slug>
        <title>CSurf_OnRew</title>
        <functioncall prog_lang="cpp">void CSurf_OnRew(int seekplay)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnRew(int seekplay)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnRew(integer seekplay)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnRew(Int seekplay)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Moves editcursor backward, and optionally with seekplay.
        </description>
        <parameters>
            integer seekplay - how to move the editcursor backward
                       -   0, move cursor backward in small steps. Stepsize depends on horizontal zoomfactor.
                       -   1, move cursor backward, in half-second steps when stopped; when playing, playing will restart at playcursor
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, cursor, backward, jump, seekplay</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnRewFwd</slug>
        <title>CSurf_OnRewFwd</title>
        <functioncall prog_lang="cpp">void CSurf_OnRewFwd(int seekplay, int dir)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnRewFwd(int seekplay, int dir)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnRewFwd(integer seekplay, integer dir)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnRewFwd(Int seekplay, Int dir)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Will move editcursor for or backward, depending on parameter dir.
            During play and whith seekplay set, the movement of the editcursor depends on the playcursor-position at the time of calling CSurf_OnRewFwd.
        </description>
        <parameters>
            integer seekplay - turns seekplay on or off; has no effect during recording
                     -   0, when stopped, jump for/backwards in small steps(stepsize depending on zoom-factor)
                     -   1, when stopped, jump for/backwards in 0.5 seconds steps. When play/rec
            integer dir - the direction; -1, move backwards; 0, keep the position; 1, move forwards
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, move, editcursor, seekplay, forward, backward</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnScroll</slug>
        <title>CSurf_OnScroll</title>
        <functioncall prog_lang="cpp">void CSurf_OnScroll(int xdir, int ydir)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnScroll(int xdir, int ydir)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnScroll(integer xdir, integer ydir)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnScroll(Int xdir, Int ydir)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Scroll arrangeview relative to it's current view-settings.
        </description>
        <parameters>
            integer xdir - scroll horizontally(timeline) through the project. Negative values toward the beginning, positive toward the end. The higher the values, the farther the movement.
            integer ydir - scroll vertically(tracks) through the project. Negative values toward the top, positive toward the bottom. The higher the values, the farther the movement.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, scroll, horizontal, vertical, relative</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnSelectedChange</slug>
        <title>CSurf_OnSelectedChange</title>
        <functioncall prog_lang="cpp">bool CSurf_OnSelectedChange(MediaTrack* trackid, int selected)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnSelectedChange(MediaTrack trackid, int selected)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.CSurf_OnSelectedChange(MediaTrack trackid, integer selected)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_CSurf_OnSelectedChange(MediaTrack trackid, Int selected)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets a track selected or not.
        </description>
        <retvals>
            boolean - true, track is selected; false, track is unselected
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack to be selected/unselected
            integer selected - select-state; 0, track is selected; 1, track is unselected
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, select, deselect, unselect, set</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnSendPanChange</slug>
        <title>CSurf_OnSendPanChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnSendPanChange(MediaTrack* trackid, int send_index, double pan, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnSendPanChange(MediaTrack trackid, int send_index, pan, bool relative)</functioncall>
        <functioncall prog_lang="lua">number = reaper.CSurf_OnSendPanChange(MediaTrack trackid, integer send_index, number pan, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float RPR_CSurf_OnSendPanChange(MediaTrack trackid, Int send_index, Float pan, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/alters the pan-volume of a send-track. Will also change the volume of the accompanying receive-track!
        </description>
        <retvals>
            number - the new pan-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrackObject, whose pan-value you want to change
            integer send_index - the index-number of the send-track. 0 for the first, 2 for the second, etc
            number pan - the pan value; -1 for hard left; 1 for hard right; 0 for center
            boolean relative - false, set pan to new value; true, alter pan by new value
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, receive, pan, routing, set, alter, relative</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnSendVolumeChange</slug>
        <title>CSurf_OnSendVolumeChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnSendVolumeChange(MediaTrack* trackid, int send_index, double volume, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnSendVolumeChange(MediaTrack trackid, int send_index, volume, bool relative)</functioncall>
        <functioncall prog_lang="lua">number = reaper.CSurf_OnSendVolumeChange(MediaTrack trackid, integer send_index, number volume, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float RPR_CSurf_OnSendVolumeChange(MediaTrack trackid, Int send_index, Float volume, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/alters the volume-value of a send-track. Will also alter the volume of the accompanying receive-track.
            
            Note: You can't(!) use SLIDER2DB or DB2SLIDER for getting the volume-values, you want to set here!
        </description>
        <retvals>
            number - the new volume-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrackObject, whose volume-value you want to change
            integer send_index - the index-number of the send-track. 0 for the first, 2 for the second, etc
            number volume - the volume-level of the receive; 0, -inf; 1, 0dB; 4, ca +12 db; higher values are possible, though fader will not reflect them. but higher values will still be applied.
            boolean relative - false, set volume to new value; true, alter volume by new value
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, routing, receive, volume, set, alter, relative</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnSoloChange</slug>
        <title>CSurf_OnSoloChange</title>
        <functioncall prog_lang="cpp">bool CSurf_OnSoloChange(MediaTrack* trackid, int solo)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnSoloChange(MediaTrack trackid, int solo)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.CSurf_OnSoloChange(MediaTrack trackid, integer solo)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_CSurf_OnSoloChange(MediaTrack trackid, Int solo)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/toggles solo state of a track.
        </description>
        <retvals>
            boolean - true, solo has been turned on; false, solo has been turned off
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to toggle solo state
            integer solo - solo state. 
                -    0, solo off
                -    1 and higher, solo on
                -   -1 and lower, toggle solo on/off
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, solo, toggle, set</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnSoloChangeEx</slug>
        <title>CSurf_OnSoloChangeEx</title>
        <functioncall prog_lang="cpp">bool CSurf_OnSoloChangeEx(MediaTrack* trackid, int solo, bool allowgang)</functioncall>
        <functioncall prog_lang="eel">bool CSurf_OnSoloChangeEx(MediaTrack trackid, int solo, bool allowgang)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.CSurf_OnSoloChangeEx(MediaTrack trackid, integer solo, boolean allowgang)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_CSurf_OnSoloChangeEx(MediaTrack trackid, Int solo, Boolean allowgang)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/toggles solo state of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            boolean retval - true, solo has been turned on; false, solo has been turned off
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack in which to toggle solo state
            integer solo - solo state. 
                         -   0, solo off
                         -   1 and higher, solo on
                         -  -1 and lower, toggle solo on/off
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, solo, toggle, set, allowgang</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnStop</slug>
        <title>CSurf_OnStop</title>
        <functioncall prog_lang="cpp">void CSurf_OnStop()</functioncall>
        <functioncall prog_lang="eel">CSurf_OnStop()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnStop()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnStop()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Stops playing/recording in current project.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, stop, recording, play, pause</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnTempoChange</slug>
        <title>CSurf_OnTempoChange</title>
        <functioncall prog_lang="cpp">void CSurf_OnTempoChange(double bpm)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnTempoChange(bpm)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnTempoChange(number bpm)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnTempoChange(Float bpm)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets the tempo of the project in beats per minute.
        </description>
        <parameters>
            number bpm - the beats per minute value; 1 to 1000
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, tempo, bpm, beats per minute</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnTrackSelection</slug>
        <title>CSurf_OnTrackSelection</title>
        <functioncall prog_lang="cpp">void CSurf_OnTrackSelection(MediaTrack* trackid)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnTrackSelection(MediaTrack trackid)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnTrackSelection(MediaTrack trackid)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnTrackSelection(MediaTrack trackid)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            MediaTrack trackid - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnVolumeChange</slug>
        <title>CSurf_OnVolumeChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnVolumeChange(MediaTrack* trackid, double volume, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnVolumeChange(MediaTrack trackid, volume, bool relative)</functioncall>
        <functioncall prog_lang="lua">number = reaper.CSurf_OnVolumeChange(MediaTrack trackid, number volume, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float RPR_CSurf_OnVolumeChange(MediaTrack trackid, Float volume, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Sets or alters volume of a track to a new value.
            
            Use [DB2SLIDER](#DB2SLIDER) to convert dB-value to fitting numbers of the volume-parameter.
        </description>
        <retvals>
            number - the new volume-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack, whose volume you want to change.
            number volume - volume-value; 3.1622776601684e-008(minimum) to 3.981071705535(maximum). Higher values are possible to set but are out of fader-range.
            boolean relative - false, set volume to new value; true, alter volume by new value
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, volume, set, alter, relative, value</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnVolumeChangeEx</slug>
        <title>CSurf_OnVolumeChangeEx</title>
        <functioncall prog_lang="cpp">double CSurf_OnVolumeChangeEx(MediaTrack* trackid, double volume, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnVolumeChangeEx(MediaTrack trackid, volume, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="lua">number = reaper.CSurf_OnVolumeChangeEx(MediaTrack trackid, number volume, boolean relative, boolean allowGang)</functioncall>
        <functioncall prog_lang="python">Float RPR_CSurf_OnVolumeChangeEx(MediaTrack trackid, Float volume, Boolean relative, Boolean allowGang)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Sets or alters volume of a track to a new value. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
            
            Use [DB2SLIDER](#DB2SLIDER) to convert dB-value to fitting numbers of the volume-parameter.
        </description>
        <retvals>
            number - the new volume-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaTrack, whose volume you want to change.
            number volume - volume-value; 3.1622776601684e-008(minimum) to 3.981071705535(maximum). Higher values are possible to set but are out of fader-range.
            boolean relative - false, set volume to new value; true, alter volume by new value
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, volume, set, alter, relative, value, allowgang</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnWidthChange</slug>
        <title>CSurf_OnWidthChange</title>
        <functioncall prog_lang="cpp">double CSurf_OnWidthChange(MediaTrack* trackid, double width, bool relative)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnWidthChange(MediaTrack trackid, width, bool relative)</functioncall>
        <functioncall prog_lang="lua">number = reaper.CSurf_OnWidthChange(MediaTrack trackid, number width, boolean relative)</functioncall>
        <functioncall prog_lang="python">Float RPR_CSurf_OnWidthChange(MediaTrack trackid, Float width, Boolean relative)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/alters the width-value of a track.
        </description>
        <retvals>
            number - the new width-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaItem, whose width you want to change
            number width - the width-value; -1 to 1; 0 is no width/mono
            boolean relative - false, set width to the new width-value; true, alter width by the new width-value
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, width, set, alter</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnWidthChangeEx</slug>
        <title>CSurf_OnWidthChangeEx</title>
        <functioncall prog_lang="cpp">double CSurf_OnWidthChangeEx(MediaTrack* trackid, double width, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="eel">double CSurf_OnWidthChangeEx(MediaTrack trackid, width, bool relative, bool allowGang)</functioncall>
        <functioncall prog_lang="lua">number = reaper.CSurf_OnWidthChangeEx(MediaTrack trackid, number width, boolean relative, boolean allowGang)</functioncall>
        <functioncall prog_lang="python">Float RPR_CSurf_OnWidthChangeEx(MediaTrack trackid, Float width, Boolean relative, Boolean allowGang)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/alters the width-value of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
        </description>
        <retvals>
            number - the new width-value
        </retvals>
        <parameters>
            MediaTrack trackid - the MediaItem, whose width you want to change
            number width - the width-value; -1 to 1; 0 is no width/mono
            boolean relative - false, set width to the new width-value; true, alter width by the new width-value
            boolean allowgang - true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, width, set, alter, allowgang</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_OnZoom</slug>
        <title>CSurf_OnZoom</title>
        <functioncall prog_lang="cpp">void CSurf_OnZoom(int xdir, int ydir)</functioncall>
        <functioncall prog_lang="eel">CSurf_OnZoom(int xdir, int ydir)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_OnZoom(integer xdir, integer ydir)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_OnZoom(Int xdir, Int ydir)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Changes horizontal/vertical zoom.
        </description>
        <parameters>
            integer xdir - horizontal zoom; 0, no change; negative values, zoom out; positive values, zoom in; the higher the values, the bigger the zoom-stepsize.
            integer ydir - vertical zoom; 0, no change; negative values, zoom out; positive values, zoom in; the higher the values, the bigger the zoom-stepsize.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, zoom, vertical, horizontal</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_ResetAllCachedVolPanStates</slug>
        <title>CSurf_ResetAllCachedVolPanStates</title>
        <functioncall prog_lang="cpp">void CSurf_ResetAllCachedVolPanStates()</functioncall>
        <functioncall prog_lang="eel">CSurf_ResetAllCachedVolPanStates()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_ResetAllCachedVolPanStates()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_ResetAllCachedVolPanStates()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Resets all cached vol-pan-states.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, reset, vol, pan, state, cache</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_ScrubAmt</slug>
        <title>CSurf_ScrubAmt</title>
        <functioncall prog_lang="cpp">void CSurf_ScrubAmt(double amt)</functioncall>
        <functioncall prog_lang="eel">CSurf_ScrubAmt(amt)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_ScrubAmt(number amt)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_ScrubAmt(Float amt)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Changes position of the editcursor by amt-value in seconds. When playing, the playposition changes to the editcursor-position.
            During recording, it changes only the position of the editcursor.
        </description>
        <parameters>
            number amt - how far to change position of the editcursor in seconds. Positive values toward the end, negative toward the beginning of the project.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, playcursor, editcursor, move</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetAutoMode</slug>
        <title>CSurf_SetAutoMode</title>
        <functioncall prog_lang="cpp">void CSurf_SetAutoMode(int mode, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetAutoMode(int mode, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetAutoMode(integer mode, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetAutoMode(Int mode, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            integer mode - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetPlayState</slug>
        <title>CSurf_SetPlayState</title>
        <functioncall prog_lang="cpp">void CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetPlayState(boolean play, boolean pause, boolean rec, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetPlayState(Boolean play, Boolean pause, Boolean rec, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            boolean play - 
            boolean pause - 
            boolean rec - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetRepeatState</slug>
        <title>CSurf_SetRepeatState</title>
        <functioncall prog_lang="cpp">void CSurf_SetRepeatState(bool rep, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetRepeatState(bool rep, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetRepeatState(boolean rep, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetRepeatState(Boolean rep, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            boolean rep - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfaceMute</slug>
        <title>CSurf_SetSurfaceMute</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfaceMute(MediaTrack* trackid, bool mute, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfaceMute(MediaTrack trackid, bool mute, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceMute(MediaTrack trackid, boolean mute, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfaceMute(MediaTrack trackid, Boolean mute, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            MediaTrack trackid - 
            integer mute - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfacePan</slug>
        <title>CSurf_SetSurfacePan</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfacePan(MediaTrack* trackid, double pan, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfacePan(MediaTrack trackid, pan, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfacePan(MediaTrack trackid, number pan, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfacePan(MediaTrack trackid, Float pan, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            MediaTrack trackid - 
            number pan - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfaceRecArm</slug>
        <title>CSurf_SetSurfaceRecArm</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfaceRecArm(MediaTrack* trackid, bool recarm, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfaceRecArm(MediaTrack trackid, bool recarm, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceRecArm(MediaTrack trackid, boolean recarm, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfaceRecArm(MediaTrack trackid, Boolean recarm, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            MediaTrack trackid - 
            boolean recarm - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfaceSelected</slug>
        <title>CSurf_SetSurfaceSelected</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfaceSelected(MediaTrack* trackid, bool selected, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfaceSelected(MediaTrack trackid, bool selected, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceSelected(MediaTrack trackid, boolean selected, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfaceSelected(MediaTrack trackid, Boolean selected, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            MediaTrack trackid - 
            boolean selected - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfaceSolo</slug>
        <title>CSurf_SetSurfaceSolo</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfaceSolo(MediaTrack* trackid, bool solo, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfaceSolo(MediaTrack trackid, bool solo, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceSolo(MediaTrack trackid, boolean solo, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfaceSolo(MediaTrack trackid, Boolean solo, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            MediaTrack trackid - 
            boolean solo - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetSurfaceVolume</slug>
        <title>CSurf_SetSurfaceVolume</title>
        <functioncall prog_lang="cpp">void CSurf_SetSurfaceVolume(MediaTrack* trackid, double volume, IReaperControlSurface* ignoresurf)</functioncall>
        <functioncall prog_lang="eel">CSurf_SetSurfaceVolume(MediaTrack trackid, volume, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceVolume(MediaTrack trackid, number volume, IReaperControlSurface ignoresurf)</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetSurfaceVolume(MediaTrack trackid, Float volume, IReaperControlSurface ignoresurf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            MediaTrack trackid - 
            number volume - 
            IReaperControlSurface ignoresurf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_SetTrackListChange</slug>
        <title>CSurf_SetTrackListChange</title>
        <functioncall prog_lang="cpp">void CSurf_SetTrackListChange()</functioncall>
        <functioncall prog_lang="eel">CSurf_SetTrackListChange()</functioncall>
        <functioncall prog_lang="lua">reaper.CSurf_SetTrackListChange()</functioncall>
        <functioncall prog_lang="python">RPR_CSurf_SetTrackListChange()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_TrackFromID</slug>
        <title>CSurf_TrackFromID</title>
        <functioncall prog_lang="cpp">MediaTrack* CSurf_TrackFromID(int idx, bool mcpView)</functioncall>
        <functioncall prog_lang="eel">MediaTrack CSurf_TrackFromID(int idx, bool mcpView)</functioncall>
        <functioncall prog_lang="lua">MediaTrack = reaper.CSurf_TrackFromID(integer idx, boolean mcpView)</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_CSurf_TrackFromID(Int idx, Boolean mcpView)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets a MediaTrack-object by it's number.
        </description>
        <retvals>
            MediaTrack - the MediaTrack-object of the track you requested
        </retvals>
        <parameters>
            integer idx - the tracknumber of the track you want to have; 0 for track 1, 1 for track 2, etc.
            boolean mcpView - true, count only tracks, that are visible in MixerControlPanel
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, id, tracknumber, mediatrack, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CSurf_TrackToID</slug>
        <title>CSurf_TrackToID</title>
        <functioncall prog_lang="cpp">int CSurf_TrackToID(MediaTrack* track, bool mcpView)</functioncall>
        <functioncall prog_lang="eel">int CSurf_TrackToID(MediaTrack track, bool mcpView)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.CSurf_TrackToID(MediaTrack track, boolean mcpView)</functioncall>
        <functioncall prog_lang="python">Int RPR_CSurf_TrackToID(MediaTrack track, Boolean mcpView)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the tracknumber of a MediaTrack-object.
        </description>
        <retvals>
            integer - the tracknumber of the MediaTrack; when mcpView is true, invisible tracks will return -1 as number
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack-object, whose number you want to know
            boolean mcpView - true, only tracks visible in MixerControlPanel; false, all tracks visible in MixerControlPanel
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, id, tracknumber, mediatrack, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DB2SLIDER</slug>
        <title>DB2SLIDER</title>
        <functioncall prog_lang="cpp">double DB2SLIDER(double x)</functioncall>
        <functioncall prog_lang="eel">double DB2SLIDER(x)</functioncall>
        <functioncall prog_lang="lua">number = reaper.DB2SLIDER(number x)</functioncall>
        <functioncall prog_lang="python">Float RPR_DB2SLIDER(Float x)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Converts dB-value into a slider-value. Good for converting envelope-point-values.
        </description>
        <retvals>
            number - the slider-value
        </retvals>
        <parameters>
            number x - the dB-value to be converted. Minimum -332db for position 0
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, db, slider, converter, value</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteEnvelopePointRange</slug>
        <title>DeleteEnvelopePointRange</title>
        <functioncall prog_lang="cpp">bool DeleteEnvelopePointRange(TrackEnvelope* envelope, double time_start, double time_end)</functioncall>
        <functioncall prog_lang="eel">bool DeleteEnvelopePointRange(TrackEnvelope envelope, time_start, time_end)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.DeleteEnvelopePointRange(TrackEnvelope envelope, number time_start, number time_end)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_DeleteEnvelopePointRange(TrackEnvelope envelope, Float time_start, Float time_end)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Delete a range of envelope points.
        </description>
        <retvals>
            boolean - true, if it succeeded
        </retvals>
        <parameters>
            TrackEnvelope envelope - the envelope-point-object, in which to delete the envelope-points
            number time_start - the starttime of the deletionrange in seconds
            number time_end - the endtime of the deletionrange in seconds
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, envelopepoints, delete, range</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteEnvelopePointRangeEx</slug>
        <title>DeleteEnvelopePointRangeEx</title>
        <functioncall prog_lang="cpp">bool DeleteEnvelopePointRangeEx(TrackEnvelope* envelope, int autoitem_idx, double time_start, double time_end)</functioncall>
        <functioncall prog_lang="eel">bool DeleteEnvelopePointRangeEx(TrackEnvelope envelope, int autoitem_idx, time_start, time_end)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.DeleteEnvelopePointRangeEx(TrackEnvelope envelope, integer autoitem_idx, number time_start, number time_end)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_DeleteEnvelopePointRangeEx(TrackEnvelope envelope, Int autoitem_idx, Float time_start, Float time_end)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Deletes a range of envelope points. You can delete the points in either the envelope or the automation-items existing in this TrackEnvelope
        </description>
        <retvals>
            boolean - true, if deleting was successful; false, if not
        </retvals>
        <parameters>
            TrackEnvelope envelope - the envelope-point-object, in which to delete the envelope-points
            integer autoitem_idx - the automation item to be affected by deletion; -1, for the underlying envelope itself; 0, for the first automation item on the envelope; 1 for the second, etc
            number time_start - the starttime of the deletionrange in seconds
            number time_end - the endtime of the deletionrange in seconds
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, envelopepoints, delete, range, automation item</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteExtState</slug>
        <title>DeleteExtState</title>
        <functioncall prog_lang="cpp">void DeleteExtState(const char* section, const char* key, bool persist)</functioncall>
        <functioncall prog_lang="eel">DeleteExtState("section", "key", bool persist)</functioncall>
        <functioncall prog_lang="lua">reaper.DeleteExtState(string section, string key, boolean persist)</functioncall>
        <functioncall prog_lang="python">RPR_DeleteExtState(String section, String key, Boolean persist)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. If persistent, the value will be deleted from the file reaper-extstate.ini in the ressources-folder.
            See [SetExtState](#SetExtState), [GetExtState](#GetExtState), [HasExtState](#HasExtState).
        </description>
        <parameters>
            string section - the section, in which the value is stored
            string key - the key, with which the value is stored
            boolean persist - true, the value shall be deleted permanently; false, delete it only temporarily.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Extended States
        </chapter_context>
        <tags>extendedstates, state, value, delete, section, key</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteProjectMarker</slug>
        <title>DeleteProjectMarker</title>
        <functioncall prog_lang="cpp">bool DeleteProjectMarker(ReaProject* proj, int markrgnindexnumber, bool isrgn)</functioncall>
        <functioncall prog_lang="eel">bool DeleteProjectMarker(ReaProject proj, int markrgnindexnumber, bool isrgn)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.DeleteProjectMarker(ReaProject proj, integer markrgnindexnumber, boolean isrgn)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_DeleteProjectMarker(ReaProject proj, Int markrgnindexnumber, Boolean isrgn)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Deletes a marker or a region. proj==NULL for the active project.
            
            Does not delete tempo/timesignature markers!
        </description>
        <retvals>
            boolean - true, deleting was successful; false, deleting was unsuccessful.
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            integer markrgnindexnumber - the shown number of the marker to be deleted
            boolean isrgn - true, marker is a region; false, marker is a normal marker
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, delete, marker, regions, shown number</tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteProjectMarkerByIndex</slug>
        <title>DeleteProjectMarkerByIndex</title>
        <functioncall prog_lang="cpp">bool DeleteProjectMarkerByIndex(ReaProject* proj, int markrgnidx)</functioncall>
        <functioncall prog_lang="eel">bool DeleteProjectMarkerByIndex(ReaProject proj, int markrgnidx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.DeleteProjectMarkerByIndex(ReaProject proj, integer markrgnidx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_DeleteProjectMarkerByIndex(ReaProject proj, Int markrgnidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region in the project, 1 for the next, etc, rather than representing the displayed marker/region ID number.
            See [EnumProjectMarkers3](#EnumProjectMarkers3)) and [SetProjectMarker4](#SetProjectMarker4).
        </description>
        <retvals>
            boolean - true, deleting was successful; false, deleting was unsuccessful.
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            integer markrgnidx - the id of the marker within the project, 0 for the first, 1 for the second, etc. Ignores the shown marker-index!
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, delete, marker, regions, shown number</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteTakeStretchMarkers</slug>
        <title>DeleteTakeStretchMarkers</title>
        <functioncall prog_lang="cpp">int DeleteTakeStretchMarkers(MediaItem_Take* take, int idx, const int* countInOptional)</functioncall>
        <functioncall prog_lang="eel">int DeleteTakeStretchMarkers(MediaItem_Take take, int idx, optional int countIn)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.DeleteTakeStretchMarkers(MediaItem_Take take, integer idx, optional number countIn)</functioncall>
        <functioncall prog_lang="python">Int RPR_DeleteTakeStretchMarkers(MediaItem_Take take, Int idx, const int countInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Deletes one or more stretch markers. Returns number of stretch markers deleted.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer idx - 
            optional number countIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteTempoTimeSigMarker</slug>
        <title>DeleteTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">bool DeleteTempoTimeSigMarker(ReaProject* project, int markerindex)</functioncall>
        <functioncall prog_lang="eel">bool DeleteTempoTimeSigMarker(ReaProject project, int markerindex)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.DeleteTempoTimeSigMarker(ReaProject project, integer markerindex)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_DeleteTempoTimeSigMarker(ReaProject project, Int markerindex)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Delete a tempo/time signature marker. 
            
            See [CountTempoTimeSigMarkers](#CountTempoTimeSigMarkers), [GetTempoTimeSigMarker](#GetTempoTimeSigMarker), [SetTempoTimeSigMarker](#SetTempoTimeSigMarker), [AddTempoTimeSigMarker](#AddTempoTimeSigMarker).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject project - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            integer markerindex - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteTrack</slug>
        <title>DeleteTrack</title>
        <functioncall prog_lang="cpp">void DeleteTrack(MediaTrack* tr)</functioncall>
        <functioncall prog_lang="eel">DeleteTrack(MediaTrack tr)</functioncall>
        <functioncall prog_lang="lua">reaper.DeleteTrack(MediaTrack tr)</functioncall>
        <functioncall prog_lang="python">RPR_DeleteTrack(MediaTrack tr)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            deletes a track
        </description>
        <parameters>
            MediaTrack tr - the MediaTrack to be deleted
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, delete, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DeleteTrackMediaItem</slug>
        <title>DeleteTrackMediaItem</title>
        <functioncall prog_lang="cpp">bool DeleteTrackMediaItem(MediaTrack* tr, MediaItem* it)</functioncall>
        <functioncall prog_lang="eel">bool DeleteTrackMediaItem(MediaTrack tr, MediaItem it)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.DeleteTrackMediaItem(MediaTrack tr, MediaItem it)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_DeleteTrackMediaItem(MediaTrack tr, MediaItem it)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Deletes a MediaItem.
        </description>
        <retvals>
            boolean - true, deleting was successful; false, deleting was unsuccessful
        </retvals>
        <parameters>
            MediaTrack tr - the MediaTrack, in which the MediaItem lies, that you want to delete
            MediaItem it - the MediaItem-object you want to delete
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, delete</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DestroyAudioAccessor</slug>
        <title>DestroyAudioAccessor</title>
        <functioncall prog_lang="cpp">void DestroyAudioAccessor(AudioAccessor* accessor)</functioncall>
        <functioncall prog_lang="eel">DestroyAudioAccessor(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="lua">reaper.DestroyAudioAccessor(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="python">RPR_DestroyAudioAccessor(AudioAccessor accessor)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Destroy an audio accessor. Must only call from the main thread. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [GetAudioAccessorHash](#GetAudioAccessorHash), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples). 
        </description>
        <parameters>
            AudioAccessor accessor - the AudioAccessor to be destroyed
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags>audiomanagement, audio, accessor, destroy</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Dock_UpdateDockID</slug>
        <title>Dock_UpdateDockID</title>
        <functioncall prog_lang="cpp">void Dock_UpdateDockID(const char* ident_str, int whichDock)</functioncall>
        <functioncall prog_lang="eel">Dock_UpdateDockID("ident_str", int whichDock)</functioncall>
        <functioncall prog_lang="lua">reaper.Dock_UpdateDockID(string ident_str, integer whichDock)</functioncall>
        <functioncall prog_lang="python">RPR_Dock_UpdateDockID(String ident_str, Int whichDock)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            updates preference for docker window ident_str to be in dock whichDock on next open
        </description>
        <parameters>
            string ident_str - 
            integer whichDock - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockIsChildOfDock</slug>
        <title>DockIsChildOfDock</title>
        <functioncall prog_lang="cpp">int DockIsChildOfDock(HWND hwnd, bool* isFloatingDockerOut)</functioncall>
        <functioncall prog_lang="eel">int DockIsChildOfDock(HWND hwnd, bool &amp;isFloatingDocker)</functioncall>
        <functioncall prog_lang="lua">integer retval, boolean isFloatingDocker = reaper.DockIsChildOfDock(HWND hwnd)</functioncall>
        <functioncall prog_lang="python">(Int retval, HWND hwnd, Boolean isFloatingDockerOut) = RPR_DockIsChildOfDock(hwnd, isFloatingDockerOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns dock index that contains hwnd, or -1
        </description>
        <retvals>
            integer retval - 
            boolean isFloatingDocker - 
        </retvals>
        <parameters>
            HWND hwnd - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowActivate</slug>
        <title>DockWindowActivate</title>
        <functioncall prog_lang="cpp">void DockWindowActivate(HWND hwnd)</functioncall>
        <functioncall prog_lang="eel">DockWindowActivate(HWND hwnd)</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowActivate(HWND hwnd)</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowActivate(HWND hwnd)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            HWND hwnd - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowAdd</slug>
        <title>DockWindowAdd</title>
        <functioncall prog_lang="cpp">void DockWindowAdd(HWND hwnd, const char* name, int pos, bool allowShow)</functioncall>
        <functioncall prog_lang="eel">DockWindowAdd(HWND hwnd, "name", int pos, bool allowShow)</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowAdd(HWND hwnd, string name, integer pos, boolean allowShow)</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowAdd(HWND hwnd, String name, Int pos, Boolean allowShow)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            HWND hwnd - 
            string name - 
            integer pos - 
            boolean allowShow - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowAddEx</slug>
        <title>DockWindowAddEx</title>
        <functioncall prog_lang="cpp">void DockWindowAddEx(HWND hwnd, const char* name, const char* identstr, bool allowShow)</functioncall>
        <functioncall prog_lang="eel">DockWindowAddEx(HWND hwnd, "name", "identstr", bool allowShow)</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowAddEx(HWND hwnd, string name, string identstr, boolean allowShow)</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowAddEx(HWND hwnd, String name, String identstr, Boolean allowShow)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            HWND hwnd - 
            string name - 
            string identstr - 
            boolean allowShow - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowRefresh</slug>
        <title>DockWindowRefresh</title>
        <functioncall prog_lang="cpp">void DockWindowRefresh()</functioncall>
        <functioncall prog_lang="eel">DockWindowRefresh()</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowRefresh()</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowRefresh()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Refreshes docked windows.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, window, refresh, docking</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowRefreshForHWND</slug>
        <title>DockWindowRefreshForHWND</title>
        <functioncall prog_lang="cpp">void DockWindowRefreshForHWND(HWND hwnd)</functioncall>
        <functioncall prog_lang="eel">DockWindowRefreshForHWND(HWND hwnd)</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowRefreshForHWND(HWND hwnd)</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowRefreshForHWND(HWND hwnd)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            HWND hwnd - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>DockWindowRemove</slug>
        <title>DockWindowRemove</title>
        <functioncall prog_lang="cpp">void DockWindowRemove(HWND hwnd)</functioncall>
        <functioncall prog_lang="eel">DockWindowRemove(HWND hwnd)</functioncall>
        <functioncall prog_lang="lua">reaper.DockWindowRemove(HWND hwnd)</functioncall>
        <functioncall prog_lang="python">RPR_DockWindowRemove(HWND hwnd)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            HWND hwnd - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EditTempoTimeSigMarker</slug>
        <title>EditTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">bool EditTempoTimeSigMarker(ReaProject* project, int markerindex)</functioncall>
        <functioncall prog_lang="eel">bool EditTempoTimeSigMarker(ReaProject project, int markerindex)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.EditTempoTimeSigMarker(ReaProject project, integer markerindex)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_EditTempoTimeSigMarker(ReaProject project, Int markerindex)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Open the tempo/time signature marker editor dialog.
        </description>
        <retvals>
            boolean - true, if user clicked OK button; false if user clicked cancel
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject project - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            integer markerindex - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnsureNotCompletelyOffscreen</slug>
        <title>EnsureNotCompletelyOffscreen</title>
        <functioncall prog_lang="cpp">void EnsureNotCompletelyOffscreen(RECT* rInOut)</functioncall>
        <functioncall prog_lang="eel">EnsureNotCompletelyOffscreen(int &amp;r.left, int &amp;r.top, int &amp;r.right, int &amp;r.bot)</functioncall>
        <functioncall prog_lang="lua">integer r.left, integer r.top, integer r.right, integer r.bot = reaper.EnsureNotCompletelyOffscreen()</functioncall>
        <functioncall prog_lang="python">RPR_EnsureNotCompletelyOffscreen(RECT rOut)</functioncall>
        <requires>
            Reaper=5.92
            Lua=5.3
        </requires>
        <description prog_lang="*">
            call with a saved window rect for your window and it'll correct any positioning info.
        </description>
        <retvals>
            integer r.left - 
            integer r.top - 
            integer r.right - 
            integer r.bot - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumerateFiles</slug>
        <title>EnumerateFiles</title>
        <functioncall prog_lang="cpp">const char* EnumerateFiles(const char* path, int fileindex)</functioncall>
        <functioncall prog_lang="eel">bool EnumerateFiles(#retval, "path", int fileindex)</functioncall>
        <functioncall prog_lang="lua">string = reaper.EnumerateFiles(string path, integer fileindex)</functioncall>
        <functioncall prog_lang="python">String RPR_EnumerateFiles(String path, Int fileindex)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            List the files in the "path" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See [EnumerateSubdirectories](#EnumerateSubdirectories)
        </description>
        <retvals>
            string - the filename in path, with index fileindex
        </retvals>
        <parameters>
            string path - the path, where the filenames will be read from
            integer fileindex - the number of the file, with 0 the first file. Ordered by first letter in ascending order.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>filemanagement, enumerate, files, path, fileindex, folder</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumerateSubdirectories</slug>
        <title>EnumerateSubdirectories</title>
        <functioncall prog_lang="cpp">const char* EnumerateSubdirectories(const char* path, int subdirindex)</functioncall>
        <functioncall prog_lang="eel">bool EnumerateSubdirectories(#retval, "path", int subdirindex)</functioncall>
        <functioncall prog_lang="lua">string = reaper.EnumerateSubdirectories(string path, integer subdirindex)</functioncall>
        <functioncall prog_lang="python">String RPR_EnumerateSubdirectories(String path, Int subdirindex)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            List the subdirectories in the "path" directory. Returns NULL (or empty string, in Lua) when all subdirectories have been listed. See [EnumerateFiles](#EnumerateFiles)
        </description>
        <retvals>
            string - the filename in path, with index fileindex
        </retvals>
        <parameters>
            string path - the path, where the directorynames will be read from
            integer subdirindex - the number of the directory, with 0 the first directory. Ordered by first letter in ascending order.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>filemanagement, enumerate, directory, folder, path, directoryindex</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumPitchShiftModes</slug>
        <title>EnumPitchShiftModes</title>
        <functioncall prog_lang="cpp">bool EnumPitchShiftModes(int mode, const char** strOut)</functioncall>
        <functioncall prog_lang="eel">bool EnumPitchShiftModes(int mode, #str)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.EnumPitchShiftModes(integer mode)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_EnumPitchShiftModes(Int mode, String strOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported
        </description>
        <retvals>
            boolean retval - 
            string str - 
        </retvals>
        <parameters>
            integer mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Pitchshifting
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumPitchShiftSubModes</slug>
        <title>EnumPitchShiftSubModes</title>
        <functioncall prog_lang="cpp">const char* EnumPitchShiftSubModes(int mode, int submode)</functioncall>
        <functioncall prog_lang="eel">bool EnumPitchShiftSubModes(#retval, int mode, int submode)</functioncall>
        <functioncall prog_lang="lua">string = reaper.EnumPitchShiftSubModes(integer mode, integer submode)</functioncall>
        <functioncall prog_lang="python">String RPR_EnumPitchShiftSubModes(Int mode, Int submode)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns submode name, or NULL
        </description>
        <retvals>
            string - 
        </retvals>
        <parameters>
            integer mode - 
            integer submode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Pitchshifting
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumProjectMarkers</slug>
        <title>EnumProjectMarkers</title>
        <functioncall prog_lang="cpp">int EnumProjectMarkers(int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)</functioncall>
        <functioncall prog_lang="eel">int EnumProjectMarkers(int idx, bool &amp;isrgn, &amp;pos, &amp;rgnend, #name, int &amp;markrgnindexnumber)</functioncall>
        <functioncall prog_lang="lua">integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers(integer idx)</functioncall>
        <functioncall prog_lang="python">(Int retval, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut) = RPR_EnumProjectMarkers(idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the values of a given marker or region idx.
        </description>
        <retvals>
            integer retval - number of marker beginning with 1 for the first marker; ignore the order of first,second,etc creation of markers but counts from position 00:00:00 to end of project. So if you created a marker at position 00:00:00 and move the first created marker to the end of the timeline, it will be the last one, NOT the first one in the retval!
            boolean isgrn - is the marker a region?
            number pos - the time-position in seconds with 12 digits precision (1.123456789012)
            number rgnend - if it's a region, the position of the end of the region in seconds with 12 digits precision(123.123456789012); if it's just a marker it's 0.0
            string name - name of the marker
            integer markrgnindexnumber - marker/region index number. 
                                       - Note: the numbering of markers and regions is independent. If you have one region and one marker, 
                                       - both share the number 1, even though you have 2 in your project(one marker and one region).
        </retvals>
        <parameters>
            integer idx - the number of the marker, beginning with 0 for the first marker
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, enum, project, markers, region</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumProjectMarkers2</slug>
        <title>EnumProjectMarkers2</title>
        <functioncall prog_lang="cpp">int EnumProjectMarkers2(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)</functioncall>
        <functioncall prog_lang="eel">int EnumProjectMarkers2(ReaProject proj, int idx, bool &amp;isrgn, &amp;pos, &amp;rgnend, #name, int &amp;markrgnindexnumber)</functioncall>
        <functioncall prog_lang="lua">integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers2(ReaProject proj, integer idx)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut) = RPR_EnumProjectMarkers2(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the values of a given marker or region idx from a given project proj.
        </description>
        <retvals>
            integer retval - number of marker beginning with 1 for the first marker; ignore the order of first,second,etc creation of markers but counts from position 00:00:00 to end of project. So if you created a marker at position 00:00:00 and move the first created marker to the end of the timeline, it will be the last one, NOT the first one in the retval!
            boolean isgrn - is the marker a region?
            number pos - the time-position in seconds with 12 digits precision (1.123456789012)
            number rgnend - if it's a region, the end of the region in seconds with 12 digits precision(123.123456789012); if just marker it's 0.0
            string name - name of the marker
            integer markrgnindexnumber - marker/region index number. 
                                       - Note: the numbering of markers and regions is independent. If you have one region and one marker, 
                                       - both share the number 1, even though you have 2 in your project(one marker and one region).
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - Projectnumber. 0, current project; 1 to x the first(1) to the last project(x) (in tabs for example); can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            integer idx - the number of the marker, beginning with 0 for the first marker
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, enum, project, markers, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumProjectMarkers3</slug>
        <title>EnumProjectMarkers3</title>
        <functioncall prog_lang="cpp">int EnumProjectMarkers3(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut, int* colorOut)</functioncall>
        <functioncall prog_lang="eel">int EnumProjectMarkers3(ReaProject proj, int idx, bool &amp;isrgn, &amp;pos, &amp;rgnend, #name, int &amp;markrgnindexnumber, int &amp;color)</functioncall>
        <functioncall prog_lang="lua">integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber, integer color = reaper.EnumProjectMarkers3(ReaProject proj, integer idx)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut, Int colorOut) = RPR_EnumProjectMarkers3(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut, colorOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the values of a given marker or region idx from a given project proj.
        </description>
        <retvals>
            integer retval - number of marker beginning with 1 for the first marker; ignore the order of first,second,etc creation of markers but counts from position 00:00:00 to end of project. So if you created a marker at position 00:00:00 and move the first created marker to the end of the timeline, it will be the last one, NOT the first one in the retval!
            boolean isgrn - is the marker a region?
            number pos - the time-position in seconds with 12 digits precision (1.123456789012)
            number rgnend - if it's a region, the end of the region in seconds with 12 digits precision(123.123456789012); if just marker it's 0.0
            string name - name of the marker
            integer markrgnindexnumber - marker/region index number. 
                                       - Note: the numbering of markers and regions is independent. If you have one region and one marker, 
                                       - both share the number 1, even though you have 2 in your project(one marker and one region).
            integer color - number of color of the marker/region
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - Projectnumber. 0, current project; 1 to x the first(1) to the last project(x) (in tabs for example); can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            integer idx - the number of the marker, beginning with 0 for the first marker
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, enum, project, markers, project, color</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumProjects</slug>
        <title>EnumProjects</title>
        <functioncall prog_lang="cpp">ReaProject* EnumProjects(int idx, char* projfn, int projfn_sz)</functioncall>
        <functioncall prog_lang="eel">ReaProject EnumProjects(int idx, #projfn)</functioncall>
        <functioncall prog_lang="lua">ReaProject retval, string projfn = reaper.EnumProjects(integer idx, string projfn)</functioncall>
        <functioncall prog_lang="python">(ReaProject retval, Int idx, String projfn, Int projfn_sz) = RPR_EnumProjects(idx, projfn, projfn_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Get ReaProject-object and filename of a project.
            idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.
            
            If you need the path to the recording-folder, use [GetProjectPath](#GetProjectPath) instead.
        </description>
        <retvals>
            ReaProject retval - a ReaProject-object of the project you requested
            string projfn - the path+filename.rpp of the project. returns "" if no filename exists
        </retvals>
        <parameters>
            integer idx - -1 for current project; 0 and higher for the projects; 0x40000000 for currently rendering project, if any.
            string projfn - unknown
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, enumerate, projects, filename</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumProjExtState</slug>
        <title>EnumProjExtState</title>
        <functioncall prog_lang="cpp">bool EnumProjExtState(ReaProject* proj, const char* extname, int idx, char* keyOutOptional, int keyOutOptional_sz, char* valOutOptional, int valOutOptional_sz)</functioncall>
        <functioncall prog_lang="eel">bool EnumProjExtState(ReaProject proj, "extname", int idx, optional #key, optional #val)</functioncall>
        <functioncall prog_lang="lua">boolean retval, optional string key, optional string val = reaper.EnumProjExtState(ReaProject proj, string extname, integer idx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, ReaProject proj, String extname, Int idx, String keyOutOptional, Int keyOutOptional_sz, String valOutOptional, Int valOutOptional_sz) = RPR_EnumProjExtState(proj, extname, idx, keyOutOptional, keyOutOptional_sz, valOutOptional, valOutOptional_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See [SetProjExtState](#SetProjExtState), [GetProjExtState](#GetProjExtState).
        </description>
        <retvals>
            boolean retval - true, key and value to this section exist; false, no such key and value exists
            string key - the idx'th key in the section
            string val - the accompanying value to key
        </retvals>
        <parameters>
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            string extname - the section of the extended-states
            integer idx - the id of the entry within "extname"-section to be returned; 0 for the first, 1 for the second, etc.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, extended, state, section, extname, value, key, enumerate, enum</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumRegionRenderMatrix</slug>
        <title>EnumRegionRenderMatrix</title>
        <functioncall prog_lang="cpp">MediaTrack* EnumRegionRenderMatrix(ReaProject* proj, int regionindex, int rendertrack)</functioncall>
        <functioncall prog_lang="eel">MediaTrack EnumRegionRenderMatrix(ReaProject proj, int regionindex, int rendertrack)</functioncall>
        <functioncall prog_lang="lua">MediaTrack = reaper.EnumRegionRenderMatrix(ReaProject proj, integer regionindex, integer rendertrack)</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_EnumRegionRenderMatrix(ReaProject proj, Int regionindex, Int rendertrack)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.
        </description>
        <retvals>
            MediaTrack - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            integer regionindex - 
            integer rendertrack - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumTrackMIDIProgramNames</slug>
        <title>EnumTrackMIDIProgramNames</title>
        <functioncall prog_lang="cpp">bool EnumTrackMIDIProgramNames(int track, int programNumber, char* programName, int programName_sz)</functioncall>
        <functioncall prog_lang="eel">bool EnumTrackMIDIProgramNames(int track, int programNumber, #programName)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string programName = reaper.EnumTrackMIDIProgramNames(integer track, integer programNumber, string programName)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int track, Int programNumber, String programName, Int programName_sz) = RPR_EnumTrackMIDIProgramNames(track, programNumber, programName, programName_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
        </description>
        <retvals>
            boolean retval - 
            string programName - 
        </retvals>
        <parameters>
            integer track - 
            string programNumber - 
            string programName - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>EnumTrackMIDIProgramNamesEx</slug>
        <title>EnumTrackMIDIProgramNamesEx</title>
        <functioncall prog_lang="cpp">bool EnumTrackMIDIProgramNamesEx(ReaProject* proj, MediaTrack* track, int programNumber, char* programName, int programName_sz)</functioncall>
        <functioncall prog_lang="eel">bool EnumTrackMIDIProgramNamesEx(ReaProject proj, MediaTrack track, int programNumber, #programName)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string programName = reaper.EnumTrackMIDIProgramNamesEx(ReaProject proj, MediaTrack track, integer programNumber, string programName)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, ReaProject proj, MediaTrack track, Int programNumber, String programName, Int programName_sz) = RPR_EnumTrackMIDIProgramNamesEx(proj, track, programNumber, programName, programName_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
        </description>
        <retvals>
            boolean retval - 
            string programName - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            MediaTrack track - 
            integer programNumber - 
            string programName - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_Evaluate</slug>
        <title>Envelope_Evaluate</title>
        <functioncall prog_lang="cpp">int Envelope_Evaluate(TrackEnvelope* envelope, double time, double samplerate, int samplesRequested, double* valueOutOptional, double* dVdSOutOptional, double* ddVdSOutOptional, double* dddVdSOutOptional)</functioncall>
        <functioncall prog_lang="eel">int Envelope_Evaluate(TrackEnvelope envelope, time, samplerate, int samplesRequested, optional &amp;value, optional &amp;dVdS, optional &amp;ddVdS, optional &amp;dddVdS)</functioncall>
        <functioncall prog_lang="lua">integer retval, optional number value, optional number dVdS, optional number ddVdS, optional number dddVdS = reaper.Envelope_Evaluate(TrackEnvelope envelope, number time, number samplerate, integer samplesRequested)</functioncall>
        <functioncall prog_lang="python">(Int retval, TrackEnvelope envelope, Float time, Float samplerate, Int samplesRequested, Float valueOutOptional, Float dVdSOutOptional, Float ddVdSOutOptional, Float dddVdSOutOptional) = RPR_Envelope_Evaluate(envelope, time, samplerate, samplesRequested, valueOutOptional, dVdSOutOptional, ddVdSOutOptional, dddVdSOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. 
            See [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).
        </description>
        <retvals>
            integer retval - 
            optional number value - 
            optional number dVdS - the change in value per sample (first derivative)
            optional number ddVdS - the second derivative
            optional number dddVdS - is the third derivative
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            number time - 
            number samplerate - 
            integer samplesRequested - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_FormatValue</slug>
        <title>Envelope_FormatValue</title>
        <functioncall prog_lang="cpp">void Envelope_FormatValue(TrackEnvelope* env, double value, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">Envelope_FormatValue(TrackEnvelope env, value, #buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.Envelope_FormatValue(TrackEnvelope env, number value)</functioncall>
        <functioncall prog_lang="python">(TrackEnvelope env, Float value, String bufOut, Int bufOut_sz) = RPR_Envelope_FormatValue(env, value, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Formats the value of an envelope to a user-readable form
        </description>
        <retvals>
            string buf - 
        </retvals>
        <parameters>
            TrackEnvelope env - 
            number value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_GetParentTake</slug>
        <title>Envelope_GetParentTake</title>
        <functioncall prog_lang="cpp">MediaItem_Take* Envelope_GetParentTake(TrackEnvelope* env, int* indexOutOptional, int* index2OutOptional)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take Envelope_GetParentTake(TrackEnvelope env, optional int &amp;index, optional int &amp;index2)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take retval, optional number index, optional number index2 = reaper.Envelope_GetParentTake(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="python">(MediaItem_Take retval, TrackEnvelope env, Int indexOutOptional, Int index2OutOptional) = RPR_Envelope_GetParentTake(env, indexOutOptional, index2OutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            If take envelope, gets the take from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.
        </description>
        <retvals>
            MediaItem_Take retval - 
            optional number index - 
            optional number index2 - 
        </retvals>
        <parameters>
            TrackEnvelope env - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_GetParentTrack</slug>
        <title>Envelope_GetParentTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* Envelope_GetParentTrack(TrackEnvelope* env, int* indexOutOptional, int* index2OutOptional)</functioncall>
        <functioncall prog_lang="eel">MediaTrack Envelope_GetParentTrack(TrackEnvelope env, optional int &amp;index, optional int &amp;index2)</functioncall>
        <functioncall prog_lang="lua">MediaTrack retval, optional number index, optional number index2 = reaper.Envelope_GetParentTrack(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="python">(MediaTrack retval, TrackEnvelope env, Int indexOutOptional, Int index2OutOptional) = RPR_Envelope_GetParentTrack(env, indexOutOptional, index2OutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            If track envelope, gets the track from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.
        </description>
        <retvals>
            MediaTrack retval - 
            optional number index - 
            optional number index2 - 
        </retvals>
        <parameters>
            TrackEnvelope env - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_SortPoints</slug>
        <title>Envelope_SortPoints</title>
        <functioncall prog_lang="cpp">bool Envelope_SortPoints(TrackEnvelope* envelope)</functioncall>
        <functioncall prog_lang="eel">bool Envelope_SortPoints(TrackEnvelope envelope)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.Envelope_SortPoints(TrackEnvelope envelope)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_Envelope_SortPoints(TrackEnvelope envelope)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Sort envelope points by time. See [SetEnvelopePoint](#SetEnvelopePoint), [InsertEnvelopePoint](#InsertEnvelopePoint).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Envelope_SortPointsEx</slug>
        <title>Envelope_SortPointsEx</title>
        <functioncall prog_lang="cpp">bool Envelope_SortPointsEx(TrackEnvelope* envelope, int autoitem_idx)</functioncall>
        <functioncall prog_lang="eel">bool Envelope_SortPointsEx(TrackEnvelope envelope, int autoitem_idx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.Envelope_SortPointsEx(TrackEnvelope envelope, integer autoitem_idx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_Envelope_SortPointsEx(TrackEnvelope envelope, Int autoitem_idx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Sort envelope points by time. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See [SetEnvelopePoint](#SetEnvelopePoint), [InsertEnvelopePoint](#InsertEnvelopePoint).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            integer autoitem_idx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ExecProcess</slug>
        <title>ExecProcess</title>
        <functioncall prog_lang="cpp">const char* ExecProcess(const char* cmdline, int timeoutmsec)</functioncall>
        <functioncall prog_lang="eel">bool ExecProcess(#retval, "cmdline", int timeoutmsec)</functioncall>
        <functioncall prog_lang="lua">string = reaper.ExecProcess(string cmdline, integer timeoutmsec)</functioncall>
        <functioncall prog_lang="python">String RPR_ExecProcess(String cmdline, Int timeoutmsec)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" indent="default">
            Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command.             
        
            Commands executed with ExecProcess() don't benefit from PATH-system-variables. That said, you must give the full path to a command, even if you can usually just type the command into a shell. You also may need to set a codepage manually to get the correct character-encoding. So in some cases, writing a batch-script and executing it with ExecProcess() might be a good idea.
            
            The base-directory is Reaper's appdirectory.
            
            On Windows, you can not use command-line-internal commands, like dir or cd, directly. To use them, you need to use cmd.exe. 
            You can do it like:
            
            -    "$Path_to_Command_Exe\\cmd.exe /Q /C command"
            
            where "/Q" executes cmd.exe silently(otherwise a command-line-window pops up; but output of commands will show anyway) and "/C command" executes command.
            
            To get a full directory-listing of c:\\ in a file c:\\directorylisting.txt, you can use:
            -   "c:\\windows\\system32\\cmd.exe /Q /C dir c:\ >c:\\directorylisting.txt"
        </description>            
        <retvals>
            string - return value, newline and output of the command; otherwise nil
        </retvals>
        <parameters>
            string cmdline - the command to execute 
            integer timeoutmsec - how long to wait, until termination of execution
                -positive value, the time to wait for execution in milliseconds
                -    0, command will be allowed to run indefinitely (recommended for large amounts of returned output).
                -   -1, for no wait/terminate
                -   -2, for no wait and minimize
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, shell, exec, process, command, terminate</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>file_exists</slug>
        <title>file_exists</title>
        <functioncall prog_lang="cpp">bool file_exists(const char* path)</functioncall>
        <functioncall prog_lang="eel">bool file_exists("path")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.file_exists(string path)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_file_exists(String path)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Checks, if a specified file exists and is readable.
            
            returns true if path points to a valid, readable file
        </description>
        <retvals>
            boolean - true, if file exists; false, if it doesn't
        </retvals>
        <parameters>
            string path - filename with path
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>filemanagement, check, file, existing, existence</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FindTempoTimeSigMarker</slug>
        <title>FindTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">int FindTempoTimeSigMarker(ReaProject* project, double time)</functioncall>
        <functioncall prog_lang="eel">int FindTempoTimeSigMarker(ReaProject project, time)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.FindTempoTimeSigMarker(ReaProject project, number time)</functioncall>
        <functioncall prog_lang="python">Int RPR_FindTempoTimeSigMarker(ReaProject project, Float time)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject project - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            number time - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>format_timestr</slug>
        <title>format_timestr</title>
        <functioncall prog_lang="cpp">void format_timestr(double tpos, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">format_timestr(tpos, #buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.format_timestr(number tpos, string buf)</functioncall>
        <functioncall prog_lang="python">(Float tpos, String buf, Int buf_sz) = RPR_format_timestr(tpos, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Creates a timestring and formats it as hh:mm:ss.sss. See [format_timestr_pos](#format_timestr_pos), [format_timestr_len](#format_timestr_len).
        </description>
        <retvals>
            string buf - the formatted timestring
        </retvals>
        <parameters>
            number tpos - the position in seconds, that you want to have formatted
            string buf - unknown
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, format, timestring</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>format_timestr_len</slug>
        <title>format_timestr_len</title>
        <functioncall prog_lang="cpp">void format_timestr_len(double tpos, char* buf, int buf_sz, double offset, int modeoverride)</functioncall>
        <functioncall prog_lang="eel">format_timestr_len(tpos, #buf, offset, int modeoverride)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.format_timestr_len(number tpos, string buf, number offset, integer modeoverride)</functioncall>
        <functioncall prog_lang="python">(Float tpos, String buf, Int buf_sz, Float offset, Int modeoverride) = RPR_format_timestr_len(tpos, buf, buf_sz, offset, modeoverride)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            time formatting mode overrides: -1=proj default.
            0=time
            1=measures.beats + time
            2=measures.beats
            3=seconds
            4=samples
            5=h:m:s:f
            offset is start of where the length will be calculated from
        </description>
        <retvals>
            string buf - 
        </retvals>
        <parameters>
            number tpos - 
            string buf - 
            number offset - 
            integer modeoverride - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>format_timestr_pos</slug>
        <title>format_timestr_pos</title>
        <functioncall prog_lang="cpp">void format_timestr_pos(double tpos, char* buf, int buf_sz, int modeoverride)</functioncall>
        <functioncall prog_lang="eel">format_timestr_pos(tpos, #buf, int modeoverride)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.format_timestr_pos(number tpos, string buf, integer modeoverride)</functioncall>
        <functioncall prog_lang="python">(Float tpos, String buf, Int buf_sz, Int modeoverride) = RPR_format_timestr_pos(tpos, buf, buf_sz, modeoverride)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            time formatting mode overrides: -1=proj default.
                0=time
                1=measures.beats + time
                2=measures.beats
                3=seconds
                4=samples
                5=h:m:s:f
        </description>
        <retvals>
            string buf - 
        </retvals>
        <parameters>
            number tpos - 
            string buf - 
            integer modeoverride - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>genGuid</slug>
        <title>genGuid</title>
        <functioncall prog_lang="cpp">void genGuid(GUID* g)</functioncall>
        <functioncall prog_lang="eel">genGuid(#gGUID)</functioncall>
        <functioncall prog_lang="lua">string gGUID = reaper.genGuid(string gGUID)</functioncall>
        <functioncall prog_lang="python">RPR_genGuid(GUID g)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Generates a GUID.
        </description>
        <retvals>
            string gGUID - the generated GUID
        </retvals>
        <parameters>
            string gGUID - unknown
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, guid, generate, create</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>get_ini_file</slug>
        <title>get_ini_file</title>
        <functioncall prog_lang="cpp">const char* get_ini_file()</functioncall>
        <functioncall prog_lang="eel">bool get_ini_file(#retval)</functioncall>
        <functioncall prog_lang="lua">string = reaper.get_ini_file()</functioncall>
        <functioncall prog_lang="python">String RPR_get_ini_file()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get reaper.ini full filename+path.
        </description>
        <retvals>
            string - the reaper.ini with path
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, reaper.ini, get, path</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetActiveTake</slug>
        <title>GetActiveTake</title>
        <functioncall prog_lang="cpp">MediaItem_Take* GetActiveTake(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take GetActiveTake(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take = reaper.GetActiveTake(MediaItem item)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take RPR_GetActiveTake(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get the active take in this item
        </description>
        <retvals>
            MediaItem_Take - the active take of the MediaItem
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose active take you want to have returned
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, get, active, take, item</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAllProjectPlayStates</slug>
        <title>GetAllProjectPlayStates</title>
        <functioncall prog_lang="cpp">int GetAllProjectPlayStates(ReaProject* ignoreProject)</functioncall>
        <functioncall prog_lang="eel">int GetAllProjectPlayStates(ReaProject ignoreProject)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetAllProjectPlayStates(ReaProject ignoreProject)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetAllProjectPlayStates(ReaProject ignoreProject)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns the bitwise OR of all project play states, eg. and project is playing/pausing/recording (1=playing, 2=pause, 4=recording)
        </description>
        <retvals>
            integer - the bitwise play-state of alle projects
                    -&1, at least one project is playing
                    -&2, at least one project is paused
                    -&4, at least one project is recording
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject ignoreProject - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, get, play, pause, recording, state</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAppVersion</slug>
        <title>GetAppVersion</title>
        <functioncall prog_lang="cpp">const char* GetAppVersion()</functioncall>
        <functioncall prog_lang="eel">bool GetAppVersion(#retval)</functioncall>
        <functioncall prog_lang="lua">string = reaper.GetAppVersion()</functioncall>
        <functioncall prog_lang="python">String RPR_GetAppVersion()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the current version of Reaper, e.g "5.62/x64"
        </description>
        <retvals>
            string - the returned version-number of Reaper
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, reaper, app, version</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAudioAccessorEndTime</slug>
        <title>GetAudioAccessorEndTime</title>
        <functioncall prog_lang="cpp">double GetAudioAccessorEndTime(AudioAccessor* accessor)</functioncall>
        <functioncall prog_lang="eel">double GetAudioAccessorEndTime(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="lua">number = reaper.GetAudioAccessorEndTime(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetAudioAccessorEndTime(AudioAccessor accessor)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the end time of the audio that can be returned from this accessor. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [GetAudioAccessorHash](#GetAudioAccessorHash), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).
        </description>
        <retvals>
            number - the length of the AudioAccessor
        </retvals>
        <parameters>
            AudioAccessor accessor - the AudioAccessor, whose end-time you want to have
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags>audiomanagement, accessor, end, length</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAudioAccessorHash</slug>
        <title>GetAudioAccessorHash</title>
        <functioncall prog_lang="cpp">void GetAudioAccessorHash(AudioAccessor* accessor, char* hashNeed128)</functioncall>
        <functioncall prog_lang="eel">GetAudioAccessorHash(AudioAccessor accessor, #hashNeed128)</functioncall>
        <functioncall prog_lang="lua">string hashNeed128 = reaper.GetAudioAccessorHash(AudioAccessor accessor, string hashNeed128)</functioncall>
        <functioncall prog_lang="python">(AudioAccessor accessor, String hashNeed128) = RPR_GetAudioAccessorHash(accessor, hashNeed128)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get a short hash string (128 chars or less) that will change only if the underlying samples change. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).
        </description>
        <retvals>
            string hashNeed128 - 
        </retvals>
        <parameters>
            AudioAccessor accessor - 
            string hashNeed128 - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAudioAccessorSamples</slug>
        <title>GetAudioAccessorSamples</title>
        <functioncall prog_lang="cpp">int GetAudioAccessorSamples(AudioAccessor* accessor, int samplerate, int numchannels, double starttime_sec, int numsamplesperchannel, double* samplebuffer)</functioncall>
        <functioncall prog_lang="eel">int GetAudioAccessorSamples(AudioAccessor accessor, int samplerate, int numchannels, starttime_sec, int numsamplesperchannel, buffer_ptr samplebuffer)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetAudioAccessorSamples(AudioAccessor accessor, integer samplerate, integer numchannels, number starttime_sec, integer numsamplesperchannel, reaper.array samplebuffer)</functioncall>
        <functioncall prog_lang="python">(Int retval, AudioAccessor accessor, Int samplerate, Int numchannels, Float starttime_sec, Int numsamplesperchannel, Float samplebuffer) = RPR_GetAudioAccessorSamples(accessor, samplerate, numchannels, starttime_sec, numsamplesperchannel, samplebuffer)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [GetAudioAccessorHash](#GetAudioAccessorHash), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime).

            This function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:

            <code>tr = RPR_GetTrack(0, 0)
            aa = RPR_CreateTrackAudioAccessor(tr)
            buf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero
            pos = 0.0
            (ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)
            # buf now holds the first 2*1024 audio samples from the track.
            # typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.
            </code>
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            AudioAcessor accessor - 
            integer samplerate - 
            integer numchannels - 
            number starttime_sec - 
            integer numsamplesperchannel - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAudioAccessorStartTime</slug>
        <title>GetAudioAccessorStartTime</title>
        <functioncall prog_lang="cpp">double GetAudioAccessorStartTime(AudioAccessor* accessor)</functioncall>
        <functioncall prog_lang="eel">double GetAudioAccessorStartTime(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="lua">number = reaper.GetAudioAccessorStartTime(AudioAccessor accessor)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetAudioAccessorStartTime(AudioAccessor accessor)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the start time of the audio that can be returned from this accessor. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [GetAudioAccessorHash](#GetAudioAccessorHash), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            AudioAccessor accessor - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetAudioDeviceInfo</slug>
        <title>GetAudioDeviceInfo</title>
        <functioncall prog_lang="cpp">bool GetAudioDeviceInfo(const char* attribute, char* desc, int desc_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetAudioDeviceInfo("attribute", #desc)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string desc = reaper.GetAudioDeviceInfo(string attribute, string desc)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String attribute, String desc, Int desc_sz) = RPR_GetAudioDeviceInfo(attribute, desc, desc_sz)</functioncall>
        <requires>
            Reaper=5.96
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            get information about the currently open audio device. 
            Attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open.
        </description>
        <retvals>
            boolean retval - true, if returning a value is possible; false, if not(unknown attribute or device not open)
            string desc - the returned value; will not return a value, if Preferences are opened
        </retvals>
        <parameters>
            string attribute - the attribute to get, as set in Preferences -> Device
                             - MODE - the Audio system selected 
                             - IDENT_IN - the selected Input device
                             - IDENT_OUT - the selected Output device 
                             - BSIZE - the Buffer-sample-size (not the multiplier!)
                             - SRATE - the samplerate in Hz
                             - BPS - the sample-format (e.g 16, 24, 32 bit)
            string desc - a string the API needs to return the value; in Lua set it to ""
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetConfigWantsDock</slug>
        <title>GetConfigWantsDock</title>
        <functioncall prog_lang="cpp">int GetConfigWantsDock(const char* ident_str)</functioncall>
        <functioncall prog_lang="eel">int GetConfigWantsDock("ident_str")</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetConfigWantsDock(string ident_str)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetConfigWantsDock(String ident_str)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            gets the dock ID desired by ident_str, if any
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            string ident_str - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetCurrentProjectInLoadSave</slug>
        <title>GetCurrentProjectInLoadSave</title>
        <functioncall prog_lang="cpp">ReaProject* GetCurrentProjectInLoadSave()</functioncall>
        <functioncall prog_lang="eel">ReaProject GetCurrentProjectInLoadSave()</functioncall>
        <functioncall prog_lang="lua">ReaProject = reaper.GetCurrentProjectInLoadSave()</functioncall>
        <functioncall prog_lang="python">ReaProject RPR_GetCurrentProjectInLoadSave()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns current project if in load/save (usually only used from project_config_extension_t)
        </description>
        <retvals>
            ReaProject - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetCursorContext</slug>
        <title>GetCursorContext</title>
        <functioncall prog_lang="cpp">int GetCursorContext()</functioncall>
        <functioncall prog_lang="eel">int GetCursorContext()</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetCursorContext()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetCursorContext()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            return the current cursor context.
        </description>
        <retvals>
            integer - the cursor context
                -   -1, unknown
                -    0, track panels
                -    1, items
                -    2, envelopes                
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, cursor, context, track, item, envelope, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetCursorContext2</slug>
        <title>GetCursorContext2</title>
        <functioncall prog_lang="cpp">int GetCursorContext2(bool want_last_valid)</functioncall>
        <functioncall prog_lang="eel">int GetCursorContext2(bool want_last_valid)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetCursorContext2(boolean want_last_valid)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetCursorContext2(Boolean want_last_valid)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)
        </description>
        <retvals>
            integer - the cursor context
                -   -1, unknown
                -    0, track panels
                -    1, items
                -    2, envelopes                
        </retvals>
        <parameters>
            boolean want_last_valid - true, get the last valid context; false, get the current context
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, cursor, context, track, item, envelope, get, valid</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetCursorPosition</slug>
        <title>GetCursorPosition</title>
        <functioncall prog_lang="cpp">double GetCursorPosition()</functioncall>
        <functioncall prog_lang="eel">double GetCursorPosition()</functioncall>
        <functioncall prog_lang="lua">number = reaper.GetCursorPosition()</functioncall>
        <functioncall prog_lang="python">Float RPR_GetCursorPosition()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            edit cursor position
        </description>
        <retvals>
            number - the editcursor-position in seconds
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, edit, cursor, get, last, position</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetCursorPositionEx</slug>
        <title>GetCursorPositionEx</title>
        <functioncall prog_lang="cpp">double GetCursorPositionEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">double GetCursorPositionEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">number = reaper.GetCursorPositionEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetCursorPositionEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the edit cursor position in a given project
        </description>
        <retvals>
            number - the position in seconds
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, edit, cursor, position, get, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetDisplayedMediaItemColor</slug>
        <title>GetDisplayedMediaItemColor</title>
        <functioncall prog_lang="cpp">int GetDisplayedMediaItemColor(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">int GetDisplayedMediaItemColor(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetDisplayedMediaItemColor(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetDisplayedMediaItemColor(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            see [GetDisplayedMediaItemColor2](#GetDisplayedMediaItemColor2).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            MediaItem item - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetDisplayedMediaItemColor2</slug>
        <title>GetDisplayedMediaItemColor2</title>
        <functioncall prog_lang="cpp">int GetDisplayedMediaItemColor2(MediaItem* item, MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means "no color", not black.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            MediaItem item - 
            MediaItem_Take take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopeName</slug>
        <title>GetEnvelopeName</title>
        <functioncall prog_lang="cpp">bool GetEnvelopeName(TrackEnvelope* env, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetEnvelopeName(TrackEnvelope env, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.GetEnvelopeName(TrackEnvelope env, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String buf, Int buf_sz) = RPR_GetEnvelopeName(env, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            boolean retval - 
            string buf - 
        </retvals>
        <parameters>
            TrackEnvelope env - 
            string buf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopePoint</slug>
        <title>GetEnvelopePoint</title>
        <functioncall prog_lang="cpp">bool GetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeOutOptional, double* valueOutOptional, int* shapeOutOptional, double* tensionOutOptional, bool* selectedOutOptional)</functioncall>
        <functioncall prog_lang="eel">bool GetEnvelopePoint(TrackEnvelope envelope, int ptidx, optional &amp;time, optional &amp;value, optional int &amp;shape, optional &amp;tension, optional bool &amp;selected)</functioncall>
        <functioncall prog_lang="lua">boolean retval, optional number time, optional number value, optional number shape, optional number tension, optional boolean selected = reaper.GetEnvelopePoint(TrackEnvelope envelope, integer ptidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int ptidx, Float timeOutOptional, Float valueOutOptional, Int shapeOutOptional, Float tensionOutOptional, Boolean selectedOutOptional) = RPR_GetEnvelopePoint(envelope, ptidx, timeOutOptional, valueOutOptional, shapeOutOptional, tensionOutOptional, selectedOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the attributes of an envelope point. See [GetEnvelopePointByTime](#GetEnvelopePointByTime), [SetEnvelopePoint](#SetEnvelopePoint).
        </description>
        <retvals>
            boolean retval - 
            optional number time - 
            optional number value - 
            optional number shape - 
            optional number tension - 
            optional boolean selected - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            integer ptidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopePointByTime</slug>
        <title>GetEnvelopePointByTime</title>
        <functioncall prog_lang="cpp">int GetEnvelopePointByTime(TrackEnvelope* envelope, double time)</functioncall>
        <functioncall prog_lang="eel">int GetEnvelopePointByTime(TrackEnvelope envelope, time)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetEnvelopePointByTime(TrackEnvelope envelope, number time)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetEnvelopePointByTime(TrackEnvelope envelope, Float time)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the envelope point at or immediately prior to the given time position. See [GetEnvelopePoint](#GetEnvelopePoint), [SetEnvelopePoint](#SetEnvelopePoint), [Envelope_Evaluate](#Envelope_Evaluate).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            number time - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopePointByTimeEx</slug>
        <title>GetEnvelopePointByTimeEx</title>
        <functioncall prog_lang="cpp">int GetEnvelopePointByTimeEx(TrackEnvelope* envelope, int autoitem_idx, double time)</functioncall>
        <functioncall prog_lang="eel">int GetEnvelopePointByTimeEx(TrackEnvelope envelope, int autoitem_idx, time)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetEnvelopePointByTimeEx(TrackEnvelope envelope, integer autoitem_idx, number time)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetEnvelopePointByTimeEx(TrackEnvelope envelope, Int autoitem_idx, Float time)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the envelope point at or immediately prior to the given time position. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See [GetEnvelopePoint](#GetEnvelopePoint), [SetEnvelopePoint](#SetEnvelopePoint), [Envelope_Evaluate](#Envelope_Evaluate).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            integer autoitem_idx - 
            number time - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopePointEx</slug>
        <title>GetEnvelopePointEx</title>
        <functioncall prog_lang="cpp">bool GetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeOutOptional, double* valueOutOptional, int* shapeOutOptional, double* tensionOutOptional, bool* selectedOutOptional)</functioncall>
        <functioncall prog_lang="eel">bool GetEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx, optional &amp;time, optional &amp;value, optional int &amp;shape, optional &amp;tension, optional bool &amp;selected)</functioncall>
        <functioncall prog_lang="lua">boolean retval, optional number time, optional number value, optional number shape, optional number tension, optional boolean selected = reaper.GetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Int ptidx, Float timeOutOptional, Float valueOutOptional, Int shapeOutOptional, Float tensionOutOptional, Boolean selectedOutOptional) = RPR_GetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeOutOptional, valueOutOptional, shapeOutOptional, tensionOutOptional, selectedOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the attributes of an envelope point. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See [GetEnvelopePointByTime](#GetEnvelopePointByTime), [SetEnvelopePoint](#SetEnvelopePoint).
        </description>
        <retvals>
            boolean retval - 
            optional number time - 
            optional number value - 
            optional number shape - 
            optional number tension - 
            optional boolean selected - 
        </retvals>
        <parameters>
            TrackEnvelope envelope - 
            integer autoitem_idx - 
            integer ptidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopeScalingMode</slug>
        <title>GetEnvelopeScalingMode</title>
        <functioncall prog_lang="cpp">int GetEnvelopeScalingMode(TrackEnvelope* env)</functioncall>
        <functioncall prog_lang="eel">int GetEnvelopeScalingMode(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetEnvelopeScalingMode(TrackEnvelope env)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetEnvelopeScalingMode(TrackEnvelope env)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see [ScaleFromEnvelopeMode](#ScaleFromEnvelopeMode), [ScaleToEnvelopeMode](#ScaleToEnvelopeMode).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            TrackEnvelope env - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetEnvelopeStateChunk</slug>
        <title>GetEnvelopeStateChunk</title>
        <functioncall prog_lang="cpp">bool GetEnvelopeStateChunk(TrackEnvelope* env, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool GetEnvelopeStateChunk(TrackEnvelope env, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetEnvelopeStateChunk(env, strNeedBig, strNeedBig_sz, isundoOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Gets the RPPXML state of an envelope.
            
            This function has a limitation: if a returned statechunk. Use [SNM_GetSetObjectState](#SNM_GetSetObjectState) instead in that case.
        </description>
        <retvals>
            boolean retval - true, if it's successful; false, if unsuccessful
            string str - the state-chunk
        </retvals>
        <parameters>
            TrackEnvelope env - the Track-Envelope-object, whose trackstate you want to have
            string str - unknown
            boolean isundo - Undo flag is a performance/caching hint.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, get, statechunk</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetExePath</slug>
        <title>GetExePath</title>
        <functioncall prog_lang="cpp">const char* GetExePath()</functioncall>
        <functioncall prog_lang="eel">bool GetExePath(#retval)</functioncall>
        <functioncall prog_lang="lua">string = reaper.GetExePath()</functioncall>
        <functioncall prog_lang="python">String RPR_GetExePath()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER
        </description>
        <retvals>
            string - the path to the reaper.exe or reaper.app
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, reaper, get, exe, path</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetExtState</slug>
        <title>GetExtState</title>
        <functioncall prog_lang="cpp">const char* GetExtState(const char* section, const char* key)</functioncall>
        <functioncall prog_lang="eel">bool GetExtState(#retval, "section", "key")</functioncall>
        <functioncall prog_lang="lua">string = reaper.GetExtState(string section, string key)</functioncall>
        <functioncall prog_lang="python">String RPR_GetExtState(String section, String key)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the extended state value for a specific section and key. See [SetExtState](#SetExtState), [DeleteExtState](#DeleteExtState), [HasExtState](#HasExtState).
        </description>
        <retvals>
            string - the value
        </retvals>
        <parameters>
            string section - the section, in which the key and value is stored 
            string key - the key, that contains the value
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Extended States
        </chapter_context>
        <tags>extendedstates, state, value, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetFocusedFX</slug>
        <title>GetFocusedFX</title>
        <functioncall prog_lang="cpp">int GetFocusedFX(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)</functioncall>
        <functioncall prog_lang="eel">int GetFocusedFX(int &amp;tracknumber, int &amp;itemnumber, int &amp;fxnumber)</functioncall>
        <functioncall prog_lang="lua">integer retval, integer tracknumber, integer itemnumber, integer fxnumber = reaper.GetFocusedFX()</functioncall>
        <functioncall prog_lang="python">(Int retval, Int tracknumberOut, Int itemnumberOut, Int fxnumberOut) = RPR_GetFocusedFX(tracknumberOut, itemnumberOut, fxnumberOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get focused FX.
            If item FX, fxnumber will have the high word be the take index, the low word the FX index. See [GetLastTouchedFX](#GetLastTouchedFX).
        </description>
        <retvals>
            integer retval - 1, track FX window has focus; 2, item FX window has focus; 0, no FX window has focus
            integer tracknumber - tracknumber; 0, master track; 1, track 1; etc. 
            integer itemnumber - -1, if it's a track-fx; 0 and higher, the mediaitem-number
            integer fxnumber - the FX-idx within the fxchain of tracknumber; 0, first fx; 1, second fx; 2, third fx; etc
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags>fxmanagement, get, focused, fx</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetFreeDiskSpaceForRecordPath</slug>
        <title>GetFreeDiskSpaceForRecordPath</title>
        <functioncall prog_lang="cpp">int GetFreeDiskSpaceForRecordPath(ReaProject* proj, int pathidx)</functioncall>
        <functioncall prog_lang="eel">int GetFreeDiskSpaceForRecordPath(ReaProject proj, int pathidx)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetFreeDiskSpaceForRecordPath(ReaProject proj, integer pathidx)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetFreeDiskSpaceForRecordPath(ReaProject proj, Int pathidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.
        </description>
        <retvals>
            integer - the freedisk-size in megabytes
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            integer pathidx - recording path; 0, primary recording path; 1, secondary recording path
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, free disk space, get, primary recording path, secondary recording path</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetFXEnvelope</slug>
        <title>GetFXEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetFXEnvelope(MediaTrack* track, int fxindex, int parameterindex, bool create)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetFXEnvelope(MediaTrack track, int fxindex, int parameterindex, bool create)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope = reaper.GetFXEnvelope(MediaTrack track, integer fxindex, integer parameterindex, boolean create)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope RPR_GetFXEnvelope(MediaTrack track, Int fxindex, Int parameterindex, Boolean create)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
        </description>
        <retvals>
            TrackEnvelope - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fxindex - 
            integer parameterindex - 
            boolean create - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetGlobalAutomationOverride</slug>
        <title>GetGlobalAutomationOverride</title>
        <functioncall prog_lang="cpp">int GetGlobalAutomationOverride()</functioncall>
        <functioncall prog_lang="eel">int GetGlobalAutomationOverride()</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetGlobalAutomationOverride()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetGlobalAutomationOverride()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass
        </description>
        <retvals>
            integer - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetHZoomLevel</slug>
        <title>GetHZoomLevel</title>
        <functioncall prog_lang="cpp">double GetHZoomLevel()</functioncall>
        <functioncall prog_lang="eel">double GetHZoomLevel()</functioncall>
        <functioncall prog_lang="lua">number = reaper.GetHZoomLevel()</functioncall>
        <functioncall prog_lang="python">Float RPR_GetHZoomLevel()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns pixels/second
        </description>
        <retvals>
            number - pixels/shown arrange-view-second
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, zoom, horizontal, get, factor</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetInputChannelName</slug>
        <title>GetInputChannelName</title>
        <functioncall prog_lang="cpp">const char* GetInputChannelName(int channelIndex)</functioncall>
        <functioncall prog_lang="eel">bool GetInputChannelName(#retval, int channelIndex)</functioncall>
        <functioncall prog_lang="lua">string = reaper.GetInputChannelName(integer channelIndex)</functioncall>
        <functioncall prog_lang="python">String RPR_GetInputChannelName(Int channelIndex)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the name of a input-channel.
        </description>
        <retvals>
            string - the name of the input-channel.
        </retvals>
        <parameters>
            integer channelIndex - the index of the input-channels, with 0 for the first, 1 for the second, etc.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>audio, audiomanagement, input, channels, name, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetInputOutputLatency</slug>
        <title>GetInputOutputLatency</title>
        <functioncall prog_lang="cpp">void GetInputOutputLatency(int* inputlatencyOut, int* outputLatencyOut)</functioncall>
        <functioncall prog_lang="eel">GetInputOutputLatency(int &amp;inputlatency, int &amp;outputLatency)</functioncall>
        <functioncall prog_lang="lua">number inputlatency retval, number outputLatency = reaper.GetInputOutputLatency()</functioncall>
        <functioncall prog_lang="python">(Int inputlatencyOut, Int outputLatencyOut) = RPR_GetInputOutputLatency(inputlatencyOut, outputLatencyOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets the audio device input/output latency in samples
        </description>
        <retvals>
            integer inputlatency retval - the input-latency
            integer outputLatency - the output-latency
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>audio, device, management, input, output, latency</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetItemEditingTime2</slug>
        <title>GetItemEditingTime2</title>
        <functioncall prog_lang="cpp">double GetItemEditingTime2(PCM_source** which_itemOut, int* flagsOut)</functioncall>
        <functioncall prog_lang="eel">double GetItemEditingTime2(PCM_source &amp;which_item, int &amp;flags)</functioncall>
        <functioncall prog_lang="lua">number position, PCM_source which_item, number flags = reaper.GetItemEditingTime2()</functioncall>
        <functioncall prog_lang="python">(Float retval, PCM_source* which_itemOut, Int flagsOut) = RPR_GetItemEditingTime2(which_itemOut, flagsOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move
        </description>
        <retvals>
            number position - 
            PCM_source which_item - 
            number flags - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetItemProjectContext</slug>
        <title>GetItemProjectContext</title>
        <functioncall prog_lang="cpp">ReaProject* GetItemProjectContext(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">ReaProject GetItemProjectContext(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">ReaProject = reaper.GetItemProjectContext(MediaItem item)</functioncall>
        <functioncall prog_lang="python">ReaProject RPR_GetItemProjectContext(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the project, in which a MediaItem is located.
        </description>
        <retvals>
            ReaProject - the project, in which the MediaItem is located; returned as a reaper-object
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose project-location you want to know
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, get, project, context, item</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetItemStateChunk</slug>
        <title>GetItemStateChunk</title>
        <functioncall prog_lang="cpp">bool GetItemStateChunk(MediaItem* item, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool GetItemStateChunk(MediaItem item, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetItemStateChunk(MediaItem item, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetItemStateChunk(item, strNeedBig, strNeedBig_sz, isundoOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
            
            This function has a limitation: if a returned statechunk. Use [SNM_GetSetObjectState](#SNM_GetSetObjectState) instead in that case.
        </description>
        <retvals>
            boolean retval - true, getting statechunk was successful
            string str - the statechunk of the MediaItem
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose statechunk you want
            string str - unknown
            boolean isundo - Undo flag is a performance/caching hint.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, statechunk, item, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetLastColorThemeFile</slug>
        <title>GetLastColorThemeFile</title>
        <functioncall prog_lang="cpp">const char* GetLastColorThemeFile()</functioncall>
        <functioncall prog_lang="eel">bool GetLastColorThemeFile(#retval)</functioncall>
        <functioncall prog_lang="lua">string = reaper.GetLastColorThemeFile()</functioncall>
        <functioncall prog_lang="python">String RPR_GetLastColorThemeFile()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the last used color-theme-file.
        </description>
        <retvals>
            string - the path and filename of the last used theme
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, get, color, theme, file, path</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetLastMarkerAndCurRegion</slug>
        <title>GetLastMarkerAndCurRegion</title>
        <functioncall prog_lang="cpp">void GetLastMarkerAndCurRegion(ReaProject* proj, double time, int* markeridxOut, int* regionidxOut)</functioncall>
        <functioncall prog_lang="eel">GetLastMarkerAndCurRegion(ReaProject proj, time, int &amp;markeridx, int &amp;regionidx)</functioncall>
        <functioncall prog_lang="lua">integer markeridx retval, integer regionidx = reaper.GetLastMarkerAndCurRegion(ReaProject proj, number time)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Float time, Int markeridxOut, Int regionidxOut) = RPR_GetLastMarkerAndCurRegion(proj, time, markeridxOut, regionidxOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the last project marker before time, and/or the project region that includes time. 
            markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See [EnumProjectMarkers](#EnumProjectMarkers).
        </description>
        <retvals>
            integer markeridx retval - the last marker-number(not shown number!) before parameter time
            integer regionidx - the region, in which parameter time lies
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            number time - the position to check in seconds
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, get, last, current, region, marker</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetLastTouchedFX</slug>
        <title>GetLastTouchedFX</title>
        <functioncall prog_lang="cpp">bool GetLastTouchedFX(int* tracknumberOut, int* fxnumberOut, int* paramnumberOut)</functioncall>
        <functioncall prog_lang="eel">bool GetLastTouchedFX(int &amp;tracknumber, int &amp;fxnumber, int &amp;paramnumber)</functioncall>
        <functioncall prog_lang="lua">boolean retval, integer tracknumber, integer fxnumber, integer paramnumber = reaper.GetLastTouchedFX()</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int tracknumberOut, Int fxnumberOut, Int paramnumberOut) = RPR_GetLastTouchedFX(tracknumberOut, fxnumberOut, paramnumberOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the last touched track, it's last touched parameter and tracknumber.
            See [GetFocusedFX](#GetFocusedFX).
        </description>
        <retvals>
            boolean retval - true, if last touched FX parameter is valid; false, if otherwise
            integer tracknumber - the tracknumber; 0 means the master track, 1 means track 1, etc.
            integer fxnumber - the id of the FX in the track tracknumber, zero-based
            integer paramnumber - the id of the last parameter touched, zero-based
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags>fxmanagement, last, touched, get, parameter, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetLastTouchedTrack</slug>
        <title>GetLastTouchedTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetLastTouchedTrack()</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetLastTouchedTrack()</functioncall>
        <functioncall prog_lang="lua">MediaTrack = reaper.GetLastTouchedTrack()</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_GetLastTouchedTrack()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets the MediaTrack, that has been last touched.
        </description>
        <retvals>
            MediaTrack - the last touched MediaTrack as an object
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, last, touched, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMainHwnd</slug>
        <title>GetMainHwnd</title>
        <functioncall prog_lang="cpp">HWND GetMainHwnd()</functioncall>
        <functioncall prog_lang="eel">HWND GetMainHwnd()</functioncall>
        <functioncall prog_lang="lua">HWND hwnd = reaper.GetMainHwnd()</functioncall>
        <functioncall prog_lang="python">HWND RPR_GetMainHwnd()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the Reaper-window as an HWND-object
        </description>
        <retvals>
            HWND hwnd - the Reaper-Window
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, get, reaper, window</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMasterMuteSoloFlags</slug>
        <title>GetMasterMuteSoloFlags</title>
        <functioncall prog_lang="cpp">int GetMasterMuteSoloFlags()</functioncall>
        <functioncall prog_lang="eel">int GetMasterMuteSoloFlags()</functioncall>
        <functioncall prog_lang="lua">integer mastermutesolo = reaper.GetMasterMuteSoloFlags()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetMasterMuteSoloFlags()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Deprecated: Get the mute/solo-state of the master-track. This is deprecated as you can just query the master track as well.
        </description>
        <retvals>
            integer mastermutesolo - state of mute/solo of the master-track; &amp;1=master mute,&amp;2=master solo.
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, master, track, mute, solo, flag</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMasterTrack</slug>
        <title>GetMasterTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetMasterTrack(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetMasterTrack(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">MediaTrack track = reaper.GetMasterTrack(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_GetMasterTrack(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get a MediaTrack-object of the MasterTrack.
        </description>
        <retvals>
            MediaTrack track - the MediaTrack-object of the MasterTrack
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, master, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMasterTrackVisibility</slug>
        <title>GetMasterTrackVisibility</title>
        <functioncall prog_lang="cpp">int GetMasterTrackVisibility()</functioncall>
        <functioncall prog_lang="eel">int GetMasterTrackVisibility()</functioncall>
        <functioncall prog_lang="lua">integer master_visibility = reaper.GetMasterTrackVisibility()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetMasterTrackVisibility()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the visibility of the master-track in mixer and track-control-panel. See [SetMasterTrackVisibility](#SetMasterTrackVisibility).
        </description>
        <retvals>
            integer master_visibility - state of visibility of the master-track
                    &1 - 1, master track visible in tcp; 0, master track invisible in mixer
                    &2 - 2, master track invisible in mixer; 0, master track visible in mixer
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, master, visibility, tcp, mcp</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMaxMidiInputs</slug>
        <title>GetMaxMidiInputs</title>
        <functioncall prog_lang="cpp">int GetMaxMidiInputs()</functioncall>
        <functioncall prog_lang="eel">int GetMaxMidiInputs()</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetMaxMidiInputs()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetMaxMidiInputs()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns max dev for midi inputs
        </description>
        <retvals>
            integer - the number of max midi inputs
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>midimanagement, device, input, get, maximum</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMaxMidiOutputs</slug>
        <title>GetMaxMidiOutputs</title>
        <functioncall prog_lang="cpp">int GetMaxMidiOutputs()</functioncall>
        <functioncall prog_lang="eel">int GetMaxMidiOutputs()</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetMaxMidiOutputs()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetMaxMidiOutputs()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns max dev for midi outputs
        </description>
        <retvals>
            integer - the number of max midi outputs
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>midimanagement, device, output, get, maximum</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItem</slug>
        <title>GetMediaItem</title>
        <functioncall prog_lang="cpp">MediaItem* GetMediaItem(ReaProject* proj, int itemidx)</functioncall>
        <functioncall prog_lang="eel">MediaItem GetMediaItem(ReaProject proj, int itemidx)</functioncall>
        <functioncall prog_lang="lua">MediaItem = reaper.GetMediaItem(ReaProject proj, integer itemidx)</functioncall>
        <functioncall prog_lang="python">MediaItem RPR_GetMediaItem(ReaProject proj, Int itemidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get an item from a project by item count (zero-based)
        </description>
        <retvals>
            MediaItem - the requested MediaItem as a MediaItem-object
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            integer itemidx - the number of the item within the whole project; 0 for the first, 1 for the second, etc; numberingorder depending on, when was a MediaItem added to the project(recording, import, etc)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, get, item, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItem_Track</slug>
        <title>GetMediaItem_Track</title>
        <functioncall prog_lang="cpp">MediaTrack* GetMediaItem_Track(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetMediaItem_Track(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">MediaTrack track = reaper.GetMediaItem_Track(MediaItem item)</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_GetMediaItem_Track(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get parent track of media item
        </description>
        <retvals>
            MediaTrack track - the returned MediaTrack, in which the MediaItem lies
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose track you want to know
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, mediaitemmanagement, get, track, mediaitem</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetArmedCommand</slug>
        <title>GetArmedCommand</title>
        <functioncall prog_lang="cpp">int GetArmedCommand(char* secOut, int secOut_sz)</functioncall>
        <functioncall prog_lang="eel">int GetArmedCommand(#sec)</functioncall>
        <functioncall prog_lang="lua">integer retval, string sec = reaper.GetArmedCommand()</functioncall>
        <functioncall prog_lang="python">(Int retval, String secOut, Int secOut_sz) = RPR_GetArmedCommand(secOut, secOut_sz)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.
        </description>
        <retvals>
            integer retval - 
            string sec - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags>miscellaneous, get, armed, command</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ArmCommand</slug>
        <title>ArmCommand</title>
        <functioncall prog_lang="cpp">void ArmCommand(int cmd, const char* sectionname)</functioncall>
        <functioncall prog_lang="eel">ArmCommand(int cmd, "sectionname")</functioncall>
        <functioncall prog_lang="lua">reaper.ArmCommand(integer cmd, string sectionname)</functioncall>
        <functioncall prog_lang="python">RPR_ArmCommand(Int cmd, String sectionname)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            arms a command (or disarms if 0 passed) in section sectionname (empty string for main)
        </description>
        <parameters>
            integer cmd - 
            string sectionname - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags>miscellaneous, get, armed, command</tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemInfo_Value</slug>
        <title>GetMediaItemInfo_Value</title>
        <functioncall prog_lang="cpp">double GetMediaItemInfo_Value(MediaItem* item, const char* parmname)</functioncall>
        <functioncall prog_lang="eel">double GetMediaItemInfo_Value(MediaItem item, "parmname")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.GetMediaItemInfo_Value(MediaItem item, string parmname)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetMediaItemInfo_Value(MediaItem item, String parmname)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get media item numerical-value attributes.
        </description>
        <retvals>
            number retval - the value you requested
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose value you want to have
            string parmname - the parametername, whose value you want to have:
                        -  B_MUTE : bool * to muted state
                        -  B_LOOPSRC : bool * to loop source
                        -  B_ALLTAKESPLAY : bool * to all takes play
                        -  B_UISEL : bool * to ui selected
                        -  C_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly
                        -  C_LOCK : char * to one char of lock flags (&amp;1 is locked, currently)
                        -  D_VOL : double * of item volume (volume bar)
                        -  D_POSITION : double * of item position (seconds)
                        -  D_LENGTH : double * of item length (seconds)
                        -  D_SNAPOFFSET : double * of item snap offset (seconds)
                        -  D_FADEINLEN : double * of item fade in length (manual, seconds)
                        -  D_FADEOUTLEN : double * of item fade out length (manual, seconds)
                        -  D_FADEINDIR : double * of item fade in curve [-1; 1]
                        -  D_FADEOUTDIR : double * of item fade out curve [-1; 1]
                        -  D_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)
                        -  D_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)
                        -  C_FADEINSHAPE : int * to fadein shape, 0=linear, ...
                        -  C_FADEOUTSHAPE : int * to fadeout shape
                        -  I_GROUPID : int * to group ID (0 = no group)
                        -  I_LASTY : int * to last y position in track (readonly)
                        -  I_LASTH : int * to last height in track (readonly)
                        -  I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).
                        -  I_CURTAKE : int * to active take
                        -  IP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)
                        -  F_FREEMODE_Y : float * to free mode y position (0..1)
                        -  F_FREEMODE_H : float * to free mode height (0..1)
                        -  P_TRACK : MediaTrack * (read only)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, get, parameter, numerical values</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemNumTakes</slug>
        <title>GetMediaItemNumTakes</title>
        <functioncall prog_lang="cpp">int GetMediaItemNumTakes(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">int GetMediaItemNumTakes(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">integer itemnumtakes = reaper.GetMediaItemNumTakes(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetMediaItemNumTakes(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the number of takes in a MediaItem-object.
        </description>
        <retvals>
            integer itemnumtakes- the number of takes within the MediaItem-object
        </retvals>
        <parameters>
            MediaItem item - the MediaItem-object, whose number of takes you want to know.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, take, count, number</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTake</slug>
        <title>GetMediaItemTake</title>
        <functioncall prog_lang="cpp">MediaItem_Take* GetMediaItemTake(MediaItem* item, int tk)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take GetMediaItemTake(MediaItem item, int tk)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take = reaper.GetMediaItemTake(MediaItem item, integer tk)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take RPR_GetMediaItemTake(MediaItem item, Int tk)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get a take from a MediaItem as a MediaItem_Take-object.
        </description>
        <retvals>
            MediaItem_Take - the returned take as a MediaItem_Take-object
        </retvals>
        <parameters>
            MediaItem item - the MediaItem, whose take you want to request
            integer tk - the id of the take, that you want to request
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, item, take, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTake_Item</slug>
        <title>GetMediaItemTake_Item</title>
        <functioncall prog_lang="cpp">MediaItem* GetMediaItemTake_Item(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">MediaItem GetMediaItemTake_Item(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">MediaItem item = reaper.GetMediaItemTake_Item(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">MediaItem RPR_GetMediaItemTake_Item(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get parent item of media item take.
        </description>
        <retvals>
            MediaItem item - the MediaItem, in which the MediaItem_Take takes place.
        </retvals>
        <parameters>
            MediaItem_Take take - the MediaItem_Take-object, whose accompanying MediaItem you want to request.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, take, get, item</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTake_Peaks</slug>
        <title>GetMediaItemTake_Peaks</title>
        <functioncall prog_lang="cpp">int GetMediaItemTake_Peaks(MediaItem_Take* take, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)</functioncall>
        <functioncall prog_lang="eel">int GetMediaItemTake_Peaks(MediaItem_Take take, peakrate, starttime, int numchannels, int numsamplesperchannel, int want_extra_type, buffer_ptr buf)</functioncall>
        <functioncall prog_lang="lua">integer peaks = reaper.GetMediaItemTake_Peaks(MediaItem_Take take, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Float peakrate, Float starttime, Int numchannels, Int numsamplesperchannel, Int want_extra_type, Float buf) = RPR_GetMediaItemTake_Peaks(take, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.
        </description>
        <retvals>
            integer peaks - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            number peakrate - 
            number starttime - 
            integer numchannels - 
            integer numsamplesperchannel - 
            integer want_extra_type - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTake_Source</slug>
        <title>GetMediaItemTake_Source</title>
        <functioncall prog_lang="cpp">PCM_source* GetMediaItemTake_Source(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">PCM_source GetMediaItemTake_Source(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">PCM_source source = reaper.GetMediaItemTake_Source(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">PCM_source RPR_GetMediaItemTake_Source(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get media source of media item take
        </description>
        <retvals>
            PCM_source source - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTake_Track</slug>
        <title>GetMediaItemTake_Track</title>
        <functioncall prog_lang="cpp">MediaTrack* GetMediaItemTake_Track(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetMediaItemTake_Track(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">MediaTrack track = reaper.GetMediaItemTake_Track(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_GetMediaItemTake_Track(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get parent track of media item take
        </description>
        <retvals>
            MediaTrack track - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTakeByGUID</slug>
        <title>GetMediaItemTakeByGUID</title>
        <functioncall prog_lang="cpp">MediaItem_Take* GetMediaItemTakeByGUID(ReaProject* project, const GUID* guid)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take GetMediaItemTakeByGUID(ReaProject project, "guidGUID")</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take take = reaper.GetMediaItemTakeByGUID(ReaProject project, string guidGUID)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take RPR_GetMediaItemTakeByGUID(ReaProject project, const GUID guid)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            MediaItem_Take - take
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject project - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            string guidGUID - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTakeInfo_Value</slug>
        <title>GetMediaItemTakeInfo_Value</title>
        <functioncall prog_lang="cpp">double GetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname)</functioncall>
        <functioncall prog_lang="eel">double GetMediaItemTakeInfo_Value(MediaItem_Take take, "parmname")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.GetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetMediaItemTakeInfo_Value(MediaItem_Take take, String parmname)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get media item take numerical-value attributes.
            D_STARTOFFS : double *, start offset in take of item
            D_VOL : double *, take volume
            D_PAN : double *, take pan
            D_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)
            D_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)
            D_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)
            B_PPITCH, bool *, preserve pitch when changing rate
            I_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)
            I_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter
            I_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).
            IP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)
            P_TRACK : pointer to MediaTrack (read-only)
            P_ITEM : pointer to MediaItem (read-only)
            P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            string parmname - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaItemTrack</slug>
        <title>GetMediaItemTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetMediaItemTrack(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetMediaItemTrack(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">MediaTrack = reaper.GetMediaItemTrack(MediaItem item)</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_GetMediaItemTrack(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the associated MediaTrack of a MediaItem.
        </description>
        <retvals>
            MediaTrack - the MediaTrack, where the MediaItem is located in 
        </retvals>
        <parameters>
            MediaItem - the MediaItem, whose associated MediaTrack you want to have
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, item, track, associated</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceFileName</slug>
        <title>GetMediaSourceFileName</title>
        <functioncall prog_lang="cpp">void GetMediaSourceFileName(PCM_source* source, char* filenamebuf, int filenamebuf_sz)</functioncall>
        <functioncall prog_lang="eel">GetMediaSourceFileName(PCM_source source, #filenamebuf)</functioncall>
        <functioncall prog_lang="lua">string filenamebuf = reaper.GetMediaSourceFileName(PCM_source source, string filenamebuf)</functioncall>
        <functioncall prog_lang="python">(PCM_source source, String filenamebuf, Int filenamebuf_sz) = RPR_GetMediaSourceFileName(source, filenamebuf, filenamebuf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See [GetMediaSourceParent](#GetMediaSourceParent).
        </description>
        <retvals>
            string filenamebuf - 
        </retvals>
        <parameters>
            PCM_source source - 
            string filenamebuf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceLength</slug>
        <title>GetMediaSourceLength</title>
        <functioncall prog_lang="cpp">double GetMediaSourceLength(PCM_source* source, bool* lengthIsQNOut)</functioncall>
        <functioncall prog_lang="eel">double GetMediaSourceLength(PCM_source source, bool &amp;lengthIsQN)</functioncall>
        <functioncall prog_lang="lua">number retval, boolean lengthIsQN = reaper.GetMediaSourceLength(PCM_source source)</functioncall>
        <functioncall prog_lang="python">(Float retval, PCM_source source, Boolean lengthIsQNOut) = RPR_GetMediaSourceLength(source, lengthIsQNOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.
        </description>
        <retvals>
            number retval - 
            boolean lengthIsQN - 
        </retvals>
        <parameters>
            PCM_source source - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceNumChannels</slug>
        <title>GetMediaSourceNumChannels</title>
        <functioncall prog_lang="cpp">int GetMediaSourceNumChannels(PCM_source* source)</functioncall>
        <functioncall prog_lang="eel">int GetMediaSourceNumChannels(PCM_source source)</functioncall>
        <functioncall prog_lang="lua">integer mediasourcenumchans = reaper.GetMediaSourceNumChannels(PCM_source source)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetMediaSourceNumChannels(PCM_source source)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the number of channels in the source media.
        </description>
        <retvals>
            integer mediasourcenumchans - 
        </retvals>
        <parameters>
            PCM_source source - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceParent</slug>
        <title>GetMediaSourceParent</title>
        <functioncall prog_lang="cpp">PCM_source* GetMediaSourceParent(PCM_source* src)</functioncall>
        <functioncall prog_lang="eel">PCM_source GetMediaSourceParent(PCM_source src)</functioncall>
        <functioncall prog_lang="lua">PCM_source = reaper.GetMediaSourceParent(PCM_source src)</functioncall>
        <functioncall prog_lang="python">PCM_source RPR_GetMediaSourceParent(PCM_source src)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.
        </description>
        <retvals>
            PCM_source - 
        </retvals>
        <parameters>
            PCM_source src - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceSampleRate</slug>
        <title>GetMediaSourceSampleRate</title>
        <functioncall prog_lang="cpp">int GetMediaSourceSampleRate(PCM_source* source)</functioncall>
        <functioncall prog_lang="eel">int GetMediaSourceSampleRate(PCM_source source)</functioncall>
        <functioncall prog_lang="lua">integer mediasourcesamplerate = reaper.GetMediaSourceSampleRate(PCM_source source)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetMediaSourceSampleRate(PCM_source source)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the sample rate. MIDI source media will return zero.
        </description>
        <retvals>
            integer mediasourcesamplerate - 
        </retvals>
        <parameters>
            PCM_source source - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaSourceType</slug>
        <title>GetMediaSourceType</title>
        <functioncall prog_lang="cpp">void GetMediaSourceType(PCM_source* source, char* typebuf, int typebuf_sz)</functioncall>
        <functioncall prog_lang="eel">GetMediaSourceType(PCM_source source, #typebuf)</functioncall>
        <functioncall prog_lang="lua">string typebuf = reaper.GetMediaSourceType(PCM_source source, string typebuf)</functioncall>
        <functioncall prog_lang="python">(PCM_source source, String typebuf, Int typebuf_sz) = RPR_GetMediaSourceType(source, typebuf, typebuf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            copies the media source type ("WAV", "MIDI", etc) to typebuf
        </description>
        <retvals>
            string typebuf - a string-buffer needed by the function, use "" in Lua
        </retvals>
        <parameters>
           PCM_source source - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMediaTrackInfo_Value</slug>
        <title>GetMediaTrackInfo_Value</title>
        <functioncall prog_lang="cpp">double GetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname)</functioncall>
        <functioncall prog_lang="eel">double GetMediaTrackInfo_Value(MediaTrack tr, "parmname")</functioncall>
        <functioncall prog_lang="lua">number retval = reaper.GetMediaTrackInfo_Value(MediaTrack tr, string parmname)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetMediaTrackInfo_Value(MediaTrack tr, String parmname)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get track numerical-value attributes.
            B_MUTE : bool * : mute flag
            B_PHASE : bool * : invert track phase
            IP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)
            I_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place
            I_FXEN : int * : 0=fx bypassed, nonzero = fx active
            I_RECARM : int * : 0=not record armed, 1=record armed
            I_RECINPUT : int * : record input. &lt;0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 6 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)
            I_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace
            I_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))
            I_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)
            I_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
            I_NCHAN : int * : number of track channels, must be 2-64, even
            I_SELECTED : int * : track selected? 0 or 1
            I_WNDH : int * : current TCP window height (Read-only)
            I_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc
            I_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children
            I_MIDIHWOUT : int * : track midi hardware output index (&gt;0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))
            I_PERFFLAGS : int * : track perf flags (&amp;1=no media buffering, &amp;2=no anticipative FX)
            I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).
            I_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels
            B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
            D_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)
            D_PAN : double * : trim pan of track (-1..1)
            D_WIDTH : double * : width of track (-1..1)
            D_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6
            D_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6
            I_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)
            D_PANLAW : double * : pan law of track. &gt;0 for project default, 1.0 for +0dB, etc
            P_ENV : read only, returns TrackEnvelope *, setNewValue=&gt;VOLENV, &gt;PANENV, etc
            B_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master
            B_SHOWINTCP : bool * : show track panel in tcp -- do not use on master
            B_MAINSEND : bool * : track sends audio to parent
            C_MAINSEND_OFFS : char * : track send to parent channel offset
            B_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)
            C_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly
            F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)
            F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)
            P_PARTRACK : MediaTrack * : parent track (read-only)
            P_PROJECT : ReaProject * : parent project (read-only)
        </description>
        <retvals>
            number retval - 
        </retvals>
        <parameters>
            MediaTrack tr - 
            string parmname - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMIDIInputName</slug>
        <title>GetMIDIInputName</title>
        <functioncall prog_lang="cpp">bool GetMIDIInputName(int dev, char* nameout, int nameout_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetMIDIInputName(int dev, #nameout)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string nameout = reaper.GetMIDIInputName(integer dev, string nameout)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int dev, String nameout, Int nameout_sz) = RPR_GetMIDIInputName(dev, nameout, nameout_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns true if device present
        </description>
        <retvals>
            boolean retval - 
            string nameout - 
        </retvals>
        <parameters>
            integer dev - 
            string nameout - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMIDIOutputName</slug>
        <title>GetMIDIOutputName</title>
        <functioncall prog_lang="cpp">bool GetMIDIOutputName(int dev, char* nameout, int nameout_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetMIDIOutputName(int dev, #nameout)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string nameout = reaper.GetMIDIOutputName(integer dev, string nameout)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int dev, String nameout, Int nameout_sz) = RPR_GetMIDIOutputName(dev, nameout, nameout_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns true if device present
        </description>
        <retvals>
            boolean retval - 
            string nameout - 
        </retvals>
        <parameters>
            integer dev - 
            string nameout - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMixerScroll</slug>
        <title>GetMixerScroll</title>
        <functioncall prog_lang="cpp">MediaTrack* GetMixerScroll()</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetMixerScroll()</functioncall>
        <functioncall prog_lang="lua">MediaTrack leftmosttrack = reaper.GetMixerScroll()</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_GetMixerScroll()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the leftmost track visible in the mixer
        </description>
        <retvals>
            MediaTrack leftmosttrack - the leftmost track in the MCP
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, get, visible, leftmost, mcp, mixer, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMouseModifier</slug>
        <title>GetMouseModifier</title>
        <functioncall prog_lang="cpp">void GetMouseModifier(const char* context, int modifier_flag, char* action, int action_sz)</functioncall>
        <functioncall prog_lang="eel">GetMouseModifier("context", int modifier_flag, #action)</functioncall>
        <functioncall prog_lang="lua">string action = reaper.GetMouseModifier(string context, integer modifier_flag, string action)</functioncall>
        <functioncall prog_lang="python">(String context, Int modifier_flag, String action, Int action_sz) = RPR_GetMouseModifier(context, modifier_flag, action, action_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.
            action will be filled in with the command ID number for a built-in mouse modifier
            or built-in REAPER command ID, or the custom action ID string.
            See [SetMouseModifier](#SetMouseModifier) for more information.
        </description>
        <retvals>
            string action - 
        </retvals>
        <parameters>
            string context - 
            integer modifier_flag - 
            string action - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetMousePosition</slug>
        <title>GetMousePosition</title>
        <functioncall prog_lang="cpp">void GetMousePosition(int* xOut, int* yOut)</functioncall>
        <functioncall prog_lang="eel">GetMousePosition(int &amp;x, int &amp;y)</functioncall>
        <functioncall prog_lang="lua">integer x, integer y = reaper.GetMousePosition()</functioncall>
        <functioncall prog_lang="python">(Int xOut, Int yOut) = RPR_GetMousePosition(xOut, yOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get mouse position in screen coordinates
        </description>
        <retvals>
            integer x - horizontal position of the mouse in pixels
            integer y - vertical position of the mouse in pixels
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, mouse, position, vertical, horizontal, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetNumAudioInputs</slug>
        <title>GetNumAudioInputs</title>
        <functioncall prog_lang="cpp">int GetNumAudioInputs()</functioncall>
        <functioncall prog_lang="eel">int GetNumAudioInputs()</functioncall>
        <functioncall prog_lang="lua">integer numAudioIns = reaper.GetNumAudioInputs()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetNumAudioInputs()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Return number of normal audio hardware inputs available
        </description>
        <retvals>
            integer numAudioIns - the number of audio hardware outputs available
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>audio, count, input, hardware</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetNumAudioOutputs</slug>
        <title>GetNumAudioOutputs</title>
        <functioncall prog_lang="cpp">int GetNumAudioOutputs()</functioncall>
        <functioncall prog_lang="eel">int GetNumAudioOutputs()</functioncall>
        <functioncall prog_lang="lua">integer numAudioOuts = reaper.GetNumAudioOutputs()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetNumAudioOutputs()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Return number of normal audio hardware outputs available
        </description>
        <retvals>
            integer numAudioOuts - the number of audio hardware outputs available
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>audio, count, output, hardware</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetNumMIDIInputs</slug>
        <title>GetNumMIDIInputs</title>
        <functioncall prog_lang="cpp">int GetNumMIDIInputs()</functioncall>
        <functioncall prog_lang="eel">int GetNumMIDIInputs()</functioncall>
        <functioncall prog_lang="lua">integer numMidiIns = reaper.GetNumMIDIInputs()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetNumMIDIInputs()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns max number of real midi hardware inputs
        </description>
        <retvals>
            integer numMidiIns - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>audio, midi, count, input, hardware</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetNumMIDIOutputs</slug>
        <title>GetNumMIDIOutputs</title>
        <functioncall prog_lang="cpp">int GetNumMIDIOutputs()</functioncall>
        <functioncall prog_lang="eel">int GetNumMIDIOutputs()</functioncall>
        <functioncall prog_lang="lua">integer numMidiOuts = reaper.GetNumMIDIOutputs()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetNumMIDIOutputs()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns max number of real midi hardware outputs
        </description>
        <retvals>
            integer numMidiOuts - the number of real midi hardware outputs
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>audio, midi, count, output, hardware</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetNumTracks</slug>
        <title>GetNumTracks</title>
        <functioncall prog_lang="cpp">int GetNumTracks()</functioncall>
        <functioncall prog_lang="eel">int GetNumTracks()</functioncall>
        <functioncall prog_lang="lua">integer numtracks = reaper.GetNumTracks()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetNumTracks()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the number of tracks. Excluding the master-track.
        </description>
        <retvals>
            integer numtracks - the number of tracks in the current project.
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, count, tracks</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetOS</slug>
        <title>GetOS</title>
        <functioncall prog_lang="cpp">const char* GetOS()</functioncall>
        <functioncall prog_lang="eel">bool GetOS(#retval)</functioncall>
        <functioncall prog_lang="lua">string os = reaper.GetOS()</functioncall>
        <functioncall prog_lang="python">String RPR_GetOS()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the current operating-system. Good for determining, e.g. the correct filesystem-separators.
        </description>
        <retvals>
            string os - "Win32", "Win64", "OSX32", "OSX64", or "Other"
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, get, operating system, os, osx, windows</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetOutputChannelName</slug>
        <title>GetOutputChannelName</title>
        <functioncall prog_lang="cpp">const char* GetOutputChannelName(int channelIndex)</functioncall>
        <functioncall prog_lang="eel">bool GetOutputChannelName(#retval, int channelIndex)</functioncall>
        <functioncall prog_lang="lua">string outputchanname= reaper.GetOutputChannelName(integer channelIndex)</functioncall>
        <functioncall prog_lang="python">String RPR_GetOutputChannelName(Int channelIndex)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the name of a specific output-channel.
        </description>
        <retvals>
            string outputchanname - the name of the output-channel.
        </retvals>
        <parameters>
            integer channelIndex - the index of the output-channel
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>audio, audiomanagement, output, channels, name, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetOutputLatency</slug>
        <title>GetOutputLatency</title>
        <functioncall prog_lang="cpp">double GetOutputLatency()</functioncall>
        <functioncall prog_lang="eel">double GetOutputLatency()</functioncall>
        <functioncall prog_lang="lua">number outputlatency = reaper.GetOutputLatency()</functioncall>
        <functioncall prog_lang="python">Float RPR_GetOutputLatency()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns output latency in seconds
        </description>
        <retvals>
            number outputlatency - output-latency in seconds
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags>audiomanagement, get, output, latency, seconds</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetParentTrack</slug>
        <title>GetParentTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetParentTrack(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetParentTrack(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">MediaTrack parenttrack = reaper.GetParentTrack(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_GetParentTrack(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the parent MediaTrack, if a MediaTrack is a track of a foldered track.
        </description>
        <retvals>
            MediaTrack parenttrack- the returned parent MediaTrack of a foldered MediaTrack
        </retvals>
        <parameters>
            MediaTrack track - the MediaTrack in a folder, whose parent MediaTrack you want
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, parent, track, folder</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPeakFileName</slug>
        <title>GetPeakFileName</title>
        <functioncall prog_lang="cpp">void GetPeakFileName(const char* fn, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">GetPeakFileName("fn", #buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.GetPeakFileName(string fn, string buf)</functioncall>
        <functioncall prog_lang="python">(String fn, String buf, Int buf_sz) = RPR_GetPeakFileName(fn, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
        </description>
        <retvals>
            string buf - 
        </retvals>
        <parameters>
            string fn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPeakFileNameEx</slug>
        <title>GetPeakFileNameEx</title>
        <functioncall prog_lang="cpp">void GetPeakFileNameEx(const char* fn, char* buf, int buf_sz, bool forWrite)</functioncall>
        <functioncall prog_lang="eel">GetPeakFileNameEx("fn", #buf, bool forWrite)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.GetPeakFileNameEx(string fn, string buf, boolean forWrite)</functioncall>
        <functioncall prog_lang="python">(String fn, String buf, Int buf_sz, Boolean forWrite) = RPR_GetPeakFileNameEx(fn, buf, buf_sz, forWrite)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
        </description>
        <retvals>
            string buf - the peak-filename
        </retvals>
        <parameters>
            string fn - 
            string buf - a string-buffer needed by the function, just give "" in Lua
            boolean forWrite - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPeakFileNameEx2</slug>
        <title>GetPeakFileNameEx2</title>
        <functioncall prog_lang="cpp">void GetPeakFileNameEx2(const char* fn, char* buf, int buf_sz, bool forWrite, const char* peaksfileextension)</functioncall>
        <functioncall prog_lang="eel">GetPeakFileNameEx2("fn", #buf, bool forWrite, "peaksfileextension")</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.GetPeakFileNameEx2(string fn, string buf, boolean forWrite, string peaksfileextension)</functioncall>
        <functioncall prog_lang="python">(String fn, String buf, Int buf_sz, Boolean forWrite, String peaksfileextension) = RPR_GetPeakFileNameEx2(fn, buf, buf_sz, forWrite, peaksfileextension)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Like GetPeakFileNameEx, but you can specify peaksfileextension such as ".reapeaks"
        </description>
        <retvals>
           string buf - the peak-filename
        </retvals>
        <parameters>
           string fn - 
           string buf - a string-buffer needed by the function, just give "" in Lua
           boolean forWrite - 
           string peaksfileextension - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayPosition</slug>
        <title>GetPlayPosition</title>
        <functioncall prog_lang="cpp">double GetPlayPosition()</functioncall>
        <functioncall prog_lang="eel">double GetPlayPosition()</functioncall>
        <functioncall prog_lang="lua">number playposition = reaper.GetPlayPosition()</functioncall>
        <functioncall prog_lang="python">Float RPR_GetPlayPosition()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns latency-compensated actual-what-you-hear position
        </description>
        <retvals>
            number playposition - the playposition in seconds
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, get, play, position, latency compensated</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayPosition2</slug>
        <title>GetPlayPosition2</title>
        <functioncall prog_lang="cpp">double GetPlayPosition2()</functioncall>
        <functioncall prog_lang="eel">double GetPlayPosition2()</functioncall>
        <functioncall prog_lang="lua">number playposition = reaper.GetPlayPosition2()</functioncall>
        <functioncall prog_lang="python">Float RPR_GetPlayPosition2()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns position of next audio block being processed
        </description>
        <retvals>
            number playposition - the playposition in seconds
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, get, play, position, next audio block</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayPosition2Ex</slug>
        <title>GetPlayPosition2Ex</title>
        <functioncall prog_lang="cpp">double GetPlayPosition2Ex(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">double GetPlayPosition2Ex(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">number playposition = reaper.GetPlayPosition2Ex(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetPlayPosition2Ex(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns position of next audio block being processed from a specific project
        </description>
        <retvals>
            number playposition - the playposition in seconds
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, get, play, position, next audio block</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayPositionEx</slug>
        <title>GetPlayPositionEx</title>
        <functioncall prog_lang="cpp">double GetPlayPositionEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">double GetPlayPositionEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">number playposition = reaper.GetPlayPositionEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetPlayPositionEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns latency-compensated actual-what-you-hear position from a specific project
        </description>
        <retvals>
            number playposition - the playposition in seconds
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, get, play, position, latency compensated</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayState</slug>
        <title>GetPlayState</title>
        <functioncall prog_lang="cpp">int GetPlayState()</functioncall>
        <functioncall prog_lang="eel">int GetPlayState()</functioncall>
        <functioncall prog_lang="lua">integer playstate = reaper.GetPlayState()</functioncall>
        <functioncall prog_lang="python">Int RPR_GetPlayState()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns, in which play-state the current project is
        </description>
        <retvals>
            integer playstate - Either bitwise: &amp;1=playing,&amp;2=pause,&amp;=4 is recording, or
            -0, stop
            -1, play
            -2, paused play
            -5, recording
            -6, paused recording
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, play, state, rec, pause, stop</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetPlayStateEx</slug>
        <title>GetPlayStateEx</title>
        <functioncall prog_lang="cpp">int GetPlayStateEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int GetPlayStateEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer playstate = reaper.GetPlayStateEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetPlayStateEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns, in which play-state a certain project is
        </description>
        <retvals>
            integer playstate - Either bitwise: &amp;1=playing,&amp;2=pause,&amp;=4 is recording, or
            -0, stop
            -1, play
            -2, paused play
            -5, recording
            -6, paused recording
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, stop, play, state, rec, pause, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectLength</slug>
        <title>GetProjectLength</title>
        <functioncall prog_lang="cpp">double GetProjectLength(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">double GetProjectLength(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">number length = reaper.GetProjectLength(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetProjectLength(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns length of project (maximum of end of media item, markers, end of regions, tempo map)
        </description>
        <retvals>
            number length - the length of the project in seconds
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, length, get, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectName</slug>
        <title>GetProjectName</title>
        <functioncall prog_lang="cpp">void GetProjectName(ReaProject* proj, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">GetProjectName(ReaProject proj, #buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.GetProjectName(ReaProject proj, string buf)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, String buf, Int buf_sz) = RPR_GetProjectName(proj, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the name of the projectfile.
        </description>
        <retvals>
            string buf - a string-buffer needed by the function; just give "" in Lua
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, get, project, name</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectPath</slug>
        <title>GetProjectPath</title>
        <functioncall prog_lang="cpp">void GetProjectPath(char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">GetProjectPath(#buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.GetProjectPath(string buf)</functioncall>
        <functioncall prog_lang="python">(String buf, Int buf_sz) = RPR_GetProjectPath(buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Get the path of the project. Will return the defaults project-path's recording-folder, when the project hasn't been saved yet; when the project has been saved, it will return the path to the recording-folder.
            
            If you need the filename of the path+projectfile itself, use [EnumProjects](#EnumProjects) instead.            
        </description>
        <retvals>
            string buf - the returned path
        </retvals>
        <parmeters>
            string buf - a string-buffer needed by the function, just give "" in Lua
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, get, path, projectpath</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectPathEx</slug>
        <title>GetProjectPathEx</title>
        <functioncall prog_lang="cpp">void GetProjectPathEx(ReaProject* proj, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">GetProjectPathEx(ReaProject proj, #buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.GetProjectPathEx(ReaProject proj, string buf)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, String buf, Int buf_sz) = RPR_GetProjectPathEx(proj, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the path of a specific project, usually the recordings-folder.
        </description>
        <retvals>
            string buf - a string-buffer needed by the function, just use "" in Lua
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, get, path, projectpath, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectStateChangeCount</slug>
        <title>GetProjectStateChangeCount</title>
        <functioncall prog_lang="cpp">int GetProjectStateChangeCount(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int GetProjectStateChangeCount(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetProjectStateChangeCount(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetProjectStateChangeCount(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns an integer that changes when the project state changes, e.g. undoable-actions have been made.
        </description>
        <retvals>
            integer - the number of changes, since (re-)opening of the project.
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, get, state, changes, undo</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectTimeOffset</slug>
        <title>GetProjectTimeOffset</title>
        <functioncall prog_lang="cpp">double GetProjectTimeOffset(ReaProject* proj, bool rndframe)</functioncall>
        <functioncall prog_lang="eel">double GetProjectTimeOffset(ReaProject proj, bool rndframe)</functioncall>
        <functioncall prog_lang="lua">number = reaper.GetProjectTimeOffset(ReaProject proj, boolean rndframe)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetProjectTimeOffset(ReaProject proj, Boolean rndframe)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets project time offset in seconds (project settings -> project start time). 
        </description>
        <retvals>
            number - the project-time-offset
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            rndframe - true, the offset is rounded to a multiple of the project frame size; false, no rounding happening
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, get, project, time, offset</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectTimeSignature</slug>
        <title>GetProjectTimeSignature</title>
        <functioncall prog_lang="cpp">void GetProjectTimeSignature(double* bpmOut, double* bpiOut)</functioncall>
        <functioncall prog_lang="eel">GetProjectTimeSignature(&amp;bpm, &amp;bpi)</functioncall>
        <functioncall prog_lang="lua">number bpm retval, number bpi = reaper.GetProjectTimeSignature()</functioncall>
        <functioncall prog_lang="python">(Float bpmOut, Float bpiOut) = RPR_GetProjectTimeSignature(bpmOut, bpiOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            deprecated
        </description>
        <retvals>
            bpm retval - 
            bpi - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjectTimeSignature2</slug>
        <title>GetProjectTimeSignature2</title>
        <functioncall prog_lang="cpp">void GetProjectTimeSignature2(ReaProject* proj, double* bpmOut, double* bpiOut)</functioncall>
        <functioncall prog_lang="eel">GetProjectTimeSignature2(ReaProject proj, &amp;bpm, &amp;bpi)</functioncall>
        <functioncall prog_lang="lua">number bpm retval, number bpi = reaper.GetProjectTimeSignature2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Float bpmOut, Float bpiOut) = RPR_GetProjectTimeSignature2(proj, bpmOut, bpiOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets basic time signature (beats per minute, numerator of time signature in bpi)
            this does not reflect tempo envelopes but is purely what is set in the project settings.
        </description>
        <retvals>
            bpm retval - 
            bpi - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetProjExtState</slug>
        <title>GetProjExtState</title>
        <functioncall prog_lang="cpp">int GetProjExtState(ReaProject* proj, const char* extname, const char* key, char* valOutNeedBig, int valOutNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">int GetProjExtState(ReaProject proj, "extname", "key", #val)</functioncall>
        <functioncall prog_lang="lua">integer retval, string val = reaper.GetProjExtState(ReaProject proj, string extname, string key)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, String extname, String key, String valOutNeedBig, Int valOutNeedBig_sz) = RPR_GetProjExtState(proj, extname, key, valOutNeedBig, valOutNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the value previously associated with this extname and key, the last time the project was saved or the value was changed. See [SetProjExtState](#SetProjExtState), [EnumProjExtState](#EnumProjExtState).
        </description>
        <retvals>
            retval - true, if such an extended-state exists; false, if not
            val - the value, as stored in extname->key
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            extname - the section, in which the key requested is stored
            key - the key, in which the requested value is stored
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, extended, state, value, section, key, extname, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetResourcePath</slug>
        <title>GetResourcePath</title>
        <functioncall prog_lang="cpp">const char* GetResourcePath()</functioncall>
        <functioncall prog_lang="eel">bool GetResourcePath(#retval)</functioncall>
        <functioncall prog_lang="lua">string = reaper.GetResourcePath()</functioncall>
        <functioncall prog_lang="python">String RPR_GetResourcePath()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns path where ini files are stored, other things are in subdirectories.
        </description>
        <retvals>
            string - the path to the resource-folder
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, get, resource, path</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSelectedEnvelope</slug>
        <title>GetSelectedEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetSelectedEnvelope(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetSelectedEnvelope(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope = reaper.GetSelectedEnvelope(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope RPR_GetSelectedEnvelope(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get the currently selected envelope, returns 0 if no envelope is selected
        </description>
        <retvals>
            TrackEnvelope - the TrackEnvelope-object of the selected envelope-lane requested; 0, if no envelope is selected
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, get, selected, envelope</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSelectedMediaItem</slug>
        <title>GetSelectedMediaItem</title>
        <functioncall prog_lang="cpp">MediaItem* GetSelectedMediaItem(ReaProject* proj, int selitem)</functioncall>
        <functioncall prog_lang="eel">MediaItem GetSelectedMediaItem(ReaProject proj, int selitem)</functioncall>
        <functioncall prog_lang="lua">MediaItem = reaper.GetSelectedMediaItem(ReaProject proj, integer selitem)</functioncall>
        <functioncall prog_lang="python">MediaItem RPR_GetSelectedMediaItem(ReaProject proj, Int selitem)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            get a selected item by selected item count (zero-based)
            See [CountSelectedMediaItems](#CountSelectedMediaItems).
        </description>
        <retvals>
            MediaItem - the requested MediaItem as a MediaItem-object
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            selitem - the id of the selected MediaItem, as multiple items can be selected. See [CountSelectedMediaItems](#CountSelectedMediaItems)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, get, selected, item, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSelectedTrack</slug>
        <title>GetSelectedTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetSelectedTrack(ReaProject* proj, int seltrackidx)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetSelectedTrack(ReaProject proj, int seltrackidx)</functioncall>
        <functioncall prog_lang="lua">MediaTrack = reaper.GetSelectedTrack(ReaProject proj, integer seltrackidx)</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_GetSelectedTrack(ReaProject proj, Int seltrackidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get a selected track from a project by selected track count (zero-based). 
            This function ignores the master track, see [GetSelectedTrack2](#GetSelectedTrack2) and [CountSelectedTracks](#CountSelectedTracks).
        </description>
        <retvals>
            MediaTrack - the requested, selected MediaTrack
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            seltrackidx - the idx of within the selected tracks, zero based, as multiple tracks can be selected by the user. 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, selected, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSelectedTrack2</slug>
        <title>GetSelectedTrack2</title>
        <functioncall prog_lang="cpp">MediaTrack* GetSelectedTrack2(ReaProject* proj, int seltrackidx, bool wantmaster)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetSelectedTrack2(ReaProject proj, int seltrackidx, bool wantmaster)</functioncall>
        <functioncall prog_lang="lua">MediaTrack = reaper.GetSelectedTrack2(ReaProject proj, integer seltrackidx, boolean wantmaster)</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_GetSelectedTrack2(ReaProject proj, Int seltrackidx, Boolean wantmaster)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).
        </description>
        <retvals>
            MediaTrack - the requested, selected MediaTrack
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            seltrackidx - the idx of within the selected tracks, zero based, as multiple tracks can be selected by the user. 
            wantmaster - true, seltrackidx=0 is the master track, if selected; false, seltrackidx=0 is the first selected normal track
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, master, track, get, selected</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSelectedTrackEnvelope</slug>
        <title>GetSelectedTrackEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetSelectedTrackEnvelope(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetSelectedTrackEnvelope(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope = reaper.GetSelectedTrackEnvelope(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope RPR_GetSelectedTrackEnvelope(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get the currently selected track envelope, returns 0 if no envelope is selected
        </description>
        <retvals>
            TrackEnvelope - the selected TrackEnvelope as an object; nil if no TrackEnvelope is selected
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, get, selected, envelope</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSet_ArrangeView2</slug>
        <title>GetSet_ArrangeView2</title>
        <functioncall prog_lang="cpp">void GetSet_ArrangeView2(ReaProject* proj, bool isSet, int screen_x_start, int screen_x_end, double* start_timeOut, double* end_timeOut)</functioncall>
        <functioncall prog_lang="eel">GetSet_ArrangeView2(ReaProject proj, bool isSet, int screen_x_start, int screen_x_end, &amp;start_time, &amp;end_time)</functioncall>
        <functioncall prog_lang="lua">number start_time retval, number end_time = reaper.GetSet_ArrangeView2(ReaProject proj, boolean isSet, integer screen_x_start, integer screen_x_end)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Boolean isSet, Int screen_x_start, Int screen_x_end, Float start_timeOut, Float end_timeOut) = RPR_GetSet_ArrangeView2(proj, isSet, screen_x_start, screen_x_end, start_timeOut, end_timeOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time
        </description>
        <retvals>
            start_time retval - 
            end_time - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            isSet - 
            screen_x_start - 
            screen_x_end - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSet_LoopTimeRange</slug>
        <title>GetSet_LoopTimeRange</title>
        <functioncall prog_lang="cpp">void GetSet_LoopTimeRange(bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)</functioncall>
        <functioncall prog_lang="eel">GetSet_LoopTimeRange(bool isSet, bool isLoop, &amp;start, &amp;end, bool allowautoseek)</functioncall>
        <functioncall prog_lang="lua">number start retval, number end = reaper.GetSet_LoopTimeRange(boolean isSet, boolean isLoop, number start, number end, boolean allowautoseek)</functioncall>
        <functioncall prog_lang="python">(Boolean isSet, Boolean isLoop, Float startOut, Float endOut, Boolean allowautoseek) = RPR_GetSet_LoopTimeRange(isSet, isLoop, startOut, endOut, allowautoseek)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            start retval - 
            end - 
        </retvals>
        <parameters>
            isSet - 
            isLoop - 
            start - 
            end - 
            allowautoseek - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSet_LoopTimeRange2</slug>
        <title>GetSet_LoopTimeRange2</title>
        <functioncall prog_lang="cpp">void GetSet_LoopTimeRange2(ReaProject* proj, bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)</functioncall>
        <functioncall prog_lang="eel">GetSet_LoopTimeRange2(ReaProject proj, bool isSet, bool isLoop, &amp;start, &amp;end, bool allowautoseek)</functioncall>
        <functioncall prog_lang="lua">number start retval, number end = reaper.GetSet_LoopTimeRange2(ReaProject proj, boolean isSet, boolean isLoop, number start, number end, boolean allowautoseek)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Boolean isSet, Boolean isLoop, Float startOut, Float endOut, Boolean allowautoseek) = RPR_GetSet_LoopTimeRange2(proj, isSet, isLoop, startOut, endOut, allowautoseek)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            start retval - 
            end - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            isSet - 
            isLoop - 
            start - 
            end - 
            allowautoseek - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetAutomationItemInfo</slug>
        <title>GetSetAutomationItemInfo</title>
        <functioncall prog_lang="cpp">double GetSetAutomationItemInfo(TrackEnvelope* env, int autoitem_idx, const char* desc, double value, bool is_set)</functioncall>
        <functioncall prog_lang="eel">double GetSetAutomationItemInfo(TrackEnvelope env, int autoitem_idx, "desc", value, bool is_set)</functioncall>
        <functioncall prog_lang="lua">number = reaper.GetSetAutomationItemInfo(TrackEnvelope env, integer autoitem_idx, string desc, number value, boolean is_set)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetSetAutomationItemInfo(TrackEnvelope env, Int autoitem_idx, String desc, Float value, Boolean is_set)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get or set automation item information. autoitem_idx==0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:
            D_POOL_ID: double *, automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID
            D_POSITION: double *, automation item timeline position in seconds
            D_LENGTH: double *, automation item length in seconds
            D_STARTOFFS: double *, automation item start offset in seconds
            D_PLAYRATE: double *, automation item playback rate
            D_BASELINE: double *, automation item baseline value in the range [0,1]
            D_AMPLITUDE: double *, automation item amplitude in the range [-1,1]
            D_LOOPSRC: double *, nonzero if the automation item contents are looped
            D_UISEL: double *, nonzero if the automation item is selected in the arrange view
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            env - 
            autoitem_idx - 
            desc - 
            value - 
            is_set - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Automation Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetEnvelopeState</slug>
        <title>GetSetEnvelopeState</title>
        <functioncall prog_lang="cpp">bool GetSetEnvelopeState(TrackEnvelope* env, char* str, int str_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetSetEnvelopeState(TrackEnvelope env, #str)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetEnvelopeState(TrackEnvelope env, string str)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String str, Int str_sz) = RPR_GetSetEnvelopeState(env, str, str_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            deprecated -- see [SetEnvelopeStateChunk](#SetEnvelopeStateChunk), [GetEnvelopeStateChunk](#GetEnvelopeStateChunk)
        </description>
        <retvals>
            retval - 
            str - 
        </retvals>
        <parameters>
            env - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetEnvelopeState2</slug>
        <title>GetSetEnvelopeState2</title>
        <functioncall prog_lang="cpp">bool GetSetEnvelopeState2(TrackEnvelope* env, char* str, int str_sz, bool isundo)</functioncall>
        <functioncall prog_lang="eel">bool GetSetEnvelopeState2(TrackEnvelope env, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetEnvelopeState2(TrackEnvelope env, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String str, Int str_sz, Boolean isundo) = RPR_GetSetEnvelopeState2(env, str, str_sz, isundo)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            deprecated -- see [SetEnvelopeStateChunk](#SetEnvelopeStateChunk), [GetEnvelopeStateChunk](#GetEnvelopeStateChunk)
        </description>
        <retvals>
             retval - 
            str - 
        </retvals>
        <parameters>
            env - 
            isundo - 
            isundo - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetItemState</slug>
        <title>GetSetItemState</title>
        <functioncall prog_lang="cpp">bool GetSetItemState(MediaItem* item, char* str, int str_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetSetItemState(MediaItem item, #str)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetItemState(MediaItem item, string str)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, String str, Int str_sz) = RPR_GetSetItemState(item, str, str_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            deprecated -- see [SetItemStateChunk](#SetItemStateChunk), [GetItemStateChunk](#GetItemStateChunk)
        </description>
        <retvals>
             retval - 
            str - 
        </retvals>
        <parameters>
            item - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetItemState2</slug>
        <title>GetSetItemState2</title>
        <functioncall prog_lang="cpp">bool GetSetItemState2(MediaItem* item, char* str, int str_sz, bool isundo)</functioncall>
        <functioncall prog_lang="eel">bool GetSetItemState2(MediaItem item, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetItemState2(MediaItem item, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, String str, Int str_sz, Boolean isundo) = RPR_GetSetItemState2(item, str, str_sz, isundo)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            deprecated -- see [SetItemStateChunk](#SetItemStateChunk), [GetItemStateChunk](#GetItemStateChunk)
        </description>
        <retvals>
             retval - 
            str - 
        </retvals>
        <parameters>
            item - 
            isundo - 
            isundo - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetMediaItemInfo_String</slug>
        <title>GetSetMediaItemInfo_String</title>
        <functioncall prog_lang="cpp">bool GetSetMediaItemInfo_String(MediaItem* item, const char* parmname, char* stringNeedBig, bool setNewValue)</functioncall>
        <functioncall prog_lang="eel">bool GetSetMediaItemInfo_String(MediaItem item, "parmname", #stringNeedBig, bool setNewValue)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetMediaItemInfo_String(MediaItem item, string parmname, string stringNeedBig, boolean setNewValue)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetMediaItemInfo_String(item, parmname, stringNeedBig, setNewValue)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets/sets an item attribute string:
                P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)
                GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
        </description>
        <retvals>
            boolean retval - 
            string stringNeedBig - 
        </retvals>
        <parameters>
            MediaItem item - 
            string parmname - 
            string stringNeedBig - 
            boolean setNewValue - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetMediaItemTakeInfo_String</slug>
        <title>GetSetMediaItemTakeInfo_String</title>
        <functioncall prog_lang="cpp">bool GetSetMediaItemTakeInfo_String(MediaItem_Take* tk, const char* parmname, char* stringNeedBig, bool setnewvalue)</functioncall>
        <functioncall prog_lang="eel">bool GetSetMediaItemTakeInfo_String(MediaItem_Take tk, "parmname", #stringNeedBig, bool setnewvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetMediaItemTakeInfo_String(MediaItem_Take tk, string parmname, string stringNeedBig, boolean setnewvalue)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take tk, String parmname, String stringNeedBig, Boolean setnewvalue) = RPR_GetSetMediaItemTakeInfo_String(tk, parmname, stringNeedBig, setnewvalue)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets/sets a take attribute string:
                P_NAME : char * to take name
                GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
        </description>
        <retvals>
            boolean retval - 
            string stringNeedBig - 
        </retvals>
        <parameters>
            MediaItem_Take tk - 
            string parmname - 
            string stringNeedBig - 
            boolean setnewvalue - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetMediaTrackInfo_String</slug>
        <title>GetSetMediaTrackInfo_String</title>
        <functioncall prog_lang="cpp">bool GetSetMediaTrackInfo_String(MediaTrack* tr, const char* parmname, char* stringNeedBig, bool setnewvalue)</functioncall>
        <functioncall prog_lang="eel">bool GetSetMediaTrackInfo_String(MediaTrack tr, "parmname", #stringNeedBig, bool setnewvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetMediaTrackInfo_String(MediaTrack tr, string parmname, string stringNeedBig, boolean setnewvalue)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack tr, String parmname, String stringNeedBig, Boolean setnewvalue) = RPR_GetSetMediaTrackInfo_String(tr, parmname, stringNeedBig, setnewvalue)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get or set track string attributes.
            P_NAME : char * : track name (on master returns NULL)
            P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)
            P_MCP_LAYOUT : const char * : layout name
            P_TCP_LAYOUT : const char * : layout name
            GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
        </description>
        <retvals>
            boolean  retval - 
            string stringNeedBig - 
        </retvals>
        <parameters>
            MediaTrack tr - 
            string parmname - 
            string stringNeedBig - 
            boolean setnewvalue - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetProjectAuthor</slug>
        <title>GetSetProjectAuthor</title>
        <functioncall prog_lang="cpp">void GetSetProjectAuthor(ReaProject* proj, bool set, char* author, int author_sz)</functioncall>
        <functioncall prog_lang="eel">GetSetProjectAuthor(ReaProject proj, bool set, #author)</functioncall>
        <functioncall prog_lang="lua">string author = reaper.GetSetProjectAuthor(ReaProject proj, boolean set, string author)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Boolean set, String author, Int author_sz) = RPR_GetSetProjectAuthor(proj, set, author, author_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            gets or sets project author, author_sz is ignored when setting
        </description>
        <retvals>
            author - the (new) project's author
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            set - true, set new author; false, get current project's author
            author - the new project author, when set is true. When set is false, author will be ignored.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, project, author, get, set</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetProjectGrid</slug>
        <title>GetSetProjectGrid</title>
        <functioncall prog_lang="cpp">int GetSetProjectGrid(ReaProject* project, bool set, double* divisionInOutOptional, int* swingmodeInOutOptional, double* swingamtInOutOptional)</functioncall>
        <functioncall prog_lang="eel">int GetSetProjectGrid(ReaProject project, bool set, optional &amp;divisionIn, optional int &amp;swingmodeIn, optional &amp;swingamtIn)</functioncall>
        <functioncall prog_lang="lua">integer retval, optional number divisionIn, optional number swingmodeIn, optional number swingamtIn = reaper.GetSetProjectGrid(ReaProject project, boolean set)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject project, Boolean set, Float divisionInOutOptional, Int swingmodeInOutOptional, Float swingamtInOutOptional) = RPR_GetSetProjectGrid(project, set, divisionInOutOptional, swingmodeInOutOptional, swingamtInOutOptional)</functioncall>
        <requires>
            Reaper=5.965
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags<br><br>
        </description>
        <retvals>
            retval - 
            divisionIn - 
            swingmodeIn - 
            swingamtIn - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            project - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            set - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetProjectNotes</slug>
        <title>GetSetProjectNotes</title>
        <functioncall prog_lang="cpp">void GetSetProjectNotes(ReaProject* proj, bool set, char* notesNeedBig, int notesNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">GetSetProjectNotes(ReaProject proj, bool set, #notes)</functioncall>
        <functioncall prog_lang="lua">string notes = reaper.GetSetProjectNotes(ReaProject proj, boolean set, string notes)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Boolean set, String notesNeedBig, Int notesNeedBig_sz) = RPR_GetSetProjectNotes(proj, set, notesNeedBig, notesNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            gets or sets project notes, notesNeedBig_sz is ignored when setting
        </description>
        <retvals>
            notes - the notes stored in the project's notes.
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            set - true, set the project's notes; false, get the project's notes
            notes - the new project's notes, when set is set to true
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, get, set, project, notes</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetRepeat</slug>
        <title>GetSetRepeat</title>
        <functioncall prog_lang="cpp">int GetSetRepeat(int val)</functioncall>
        <functioncall prog_lang="eel">int GetSetRepeat(int val)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetSetRepeat(integer val)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetSetRepeat(Int val)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets or gets repeat-state of the current project.
        </description>
        <retvals>
            integer - new/current repeat state; 0, repeat is off; 1, repeat is on
        </retvals>
        <parameters>
            val - -1, query repeat-state
                - 0, clear repeat state
                - 1, set repeat to repeat
                - 2 and higher, toggle repeat state
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, get, set, repeat</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetRepeatEx</slug>
        <title>GetSetRepeatEx</title>
        <functioncall prog_lang="cpp">int GetSetRepeatEx(ReaProject* proj, int val)</functioncall>
        <functioncall prog_lang="eel">int GetSetRepeatEx(ReaProject proj, int val)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetSetRepeatEx(ReaProject proj, integer val)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetSetRepeatEx(ReaProject proj, Int val)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets or gets repeat-state in a specific project.
        </description>
        <retvals>
            integer - new/current repeat state; 0, repeat is off; 1, repeat is on
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            val - -1, query repeat-state
                - 0, clear repeat state
                - 1, set repeat to repeat
                - 2 and higher, toggle repeat state
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, get, set, repeat</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetTrackGroupMembership</slug>
        <title>GetSetTrackGroupMembership</title>
        <functioncall prog_lang="cpp">unsigned int GetSetTrackGroupMembership(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)</functioncall>
        <functioncall prog_lang="eel">uint GetSetTrackGroupMembership(MediaTrack tr, "groupname", uint setmask, uint setvalue)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetSetTrackGroupMembership(MediaTrack tr, string groupname, integer setmask, integer setvalue)</functioncall>
        <functioncall prog_lang="python">Unknown RPR_GetSetTrackGroupMembership(MediaTrack tr, String groupname, Unknown setmask, Unknown setvalue)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:
                VOLUME_MASTER
                VOLUME_SLAVE
                VOLUME_VCA_MASTER
                VOLUME_VCA_SLAVE
                PAN_MASTER
                PAN_SLAVE
                WIDTH_MASTER
                WIDTH_SLAVE
                MUTE_MASTER
                MUTE_SLAVE
                SOLO_MASTER
                SOLO_SLAVE
                RECARM_MASTER
                RECARM_SLAVE
                POLARITY_MASTER
                POLARITY_SLAVE
                AUTOMODE_MASTER
                AUTOMODE_SLAVE
                VOLUME_REVERSE
                PAN_REVERSE
                WIDTH_REVERSE
                NO_MASTER_WHEN_SLAVE
                VOLUME_VCA_SLAVE_ISPREFX
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            tr - 
            groupname - 
            setmask - 
            setvalue - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetTrackState</slug>
        <title>GetSetTrackState</title>
        <functioncall prog_lang="cpp">bool GetSetTrackState(MediaTrack* track, char* str, int str_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetSetTrackState(MediaTrack track, #str)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetTrackState(MediaTrack track, string str)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String str, Int str_sz) = RPR_GetSetTrackState(track, str, str_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            deprecated -- see [SetTrackStateChunk](#SetTrackStateChunk), [GetTrackStateChunk](#GetTrackStateChunk)
        </description>
        <retvals>
             retval - 
            str - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetTrackState2</slug>
        <title>GetSetTrackState2</title>
        <functioncall prog_lang="cpp">bool GetSetTrackState2(MediaTrack* track, char* str, int str_sz, bool isundo)</functioncall>
        <functioncall prog_lang="eel">bool GetSetTrackState2(MediaTrack track, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetTrackState2(MediaTrack track, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String str, Int str_sz, Boolean isundo) = RPR_GetSetTrackState2(track, str, str_sz, isundo)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            deprecated -- see [SetTrackStateChunk](#SetTrackStateChunk), [GetTrackStateChunk](#GetTrackStateChunk)
        </description>
        <retvals>
             retval - 
            str - 
        </retvals>
        <parameters>
            track - 
            str - 
            isundo - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSubProjectFromSource</slug>
        <title>GetSubProjectFromSource</title>
        <functioncall prog_lang="cpp">ReaProject* GetSubProjectFromSource(PCM_source* src)</functioncall>
        <functioncall prog_lang="eel">ReaProject GetSubProjectFromSource(PCM_source src)</functioncall>
        <functioncall prog_lang="lua">ReaProject = reaper.GetSubProjectFromSource(PCM_source src)</functioncall>
        <functioncall prog_lang="python">ReaProject RPR_GetSubProjectFromSource(PCM_source src)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals markup_type="markdown" markup_version="1.0.1">
            ReaProject - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </retvals>
        <parameters>
            src - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTake</slug>
        <title>GetTake</title>
        <functioncall prog_lang="cpp">MediaItem_Take* GetTake(MediaItem* item, int takeidx)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take GetTake(MediaItem item, int takeidx)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take = reaper.GetTake(MediaItem item, integer takeidx)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take RPR_GetTake(MediaItem item, Int takeidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get a take from an item by take count (zero-based)
        </description>
        <retvals>
            MediaItem_Take - the requested MediaItem_Take
        </retvals>
        <parameters>
            item - the MediaItem, whose take you want to request
            takeidx - the index of the takes in a MediaItem
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, get, take, idx, item</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeEnvelope</slug>
        <title>GetTakeEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetTakeEnvelope(MediaItem_Take* take, int envidx)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetTakeEnvelope(MediaItem_Take take, int envidx)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope = reaper.GetTakeEnvelope(MediaItem_Take take, integer envidx)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope RPR_GetTakeEnvelope(MediaItem_Take take, Int envidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            TrackEnvelope - 
        </retvals>
        <parameters>
            take - 
            envidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeEnvelopeByName</slug>
        <title>GetTakeEnvelopeByName</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetTakeEnvelopeByName(MediaItem_Take* take, const char* envname)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetTakeEnvelopeByName(MediaItem_Take take, "envname")</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope = reaper.GetTakeEnvelopeByName(MediaItem_Take take, string envname)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope RPR_GetTakeEnvelopeByName(MediaItem_Take take, String envname)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            TrackEnvelope - 
        </retvals>
        <parameters>
            take - 
            envname - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeName</slug>
        <title>GetTakeName</title>
        <functioncall prog_lang="cpp">const char* GetTakeName(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">bool GetTakeName(#retval, MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">string = reaper.GetTakeName(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">String RPR_GetTakeName(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Retruns the filename of the mediafile in a take. returns NULL if the take is not valid
        </description>
        <retvals>
            string - the filename of the mediafile in the take
        </retvals>
        <parameters>
            take - the MediaItem_Take, whose mediafilename you want to have
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, get, filename, media, take, item</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeNumStretchMarkers</slug>
        <title>GetTakeNumStretchMarkers</title>
        <functioncall prog_lang="cpp">int GetTakeNumStretchMarkers(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int GetTakeNumStretchMarkers(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetTakeNumStretchMarkers(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetTakeNumStretchMarkers(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns number of stretch markers in take
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeStretchMarker</slug>
        <title>GetTakeStretchMarker</title>
        <functioncall prog_lang="cpp">int GetTakeStretchMarker(MediaItem_Take* take, int idx, double* posOut, double* srcposOutOptional)</functioncall>
        <functioncall prog_lang="eel">int GetTakeStretchMarker(MediaItem_Take take, int idx, &amp;pos, optional &amp;srcpos)</functioncall>
        <functioncall prog_lang="lua">integer retval, number pos, optional number srcpos = reaper.GetTakeStretchMarker(MediaItem_Take take, integer idx)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int idx, Float posOut, Float srcposOutOptional) = RPR_GetTakeStretchMarker(take, idx, posOut, srcposOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets information on a stretch marker, idx is 0..n. Returns false if stretch marker not valid. 
            posOut will be set to position in item, srcposOutOptional will be set to source media position. 
            Returns index. if input index is -1, next marker is found using position (or source position if position is -1). 
            If position/source position are used to find marker position, their values are not updated.
        </description>
        <retvals>
             retval - 
            pos - 
            srcpos - 
        </retvals>
        <parameters>
            take - 
            idx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTakeStretchMarkerSlope</slug>
        <title>GetTakeStretchMarkerSlope</title>
        <functioncall prog_lang="cpp">double GetTakeStretchMarkerSlope(MediaItem_Take* take, int idx)</functioncall>
        <functioncall prog_lang="eel">double GetTakeStretchMarkerSlope(MediaItem_Take take, int idx)</functioncall>
        <functioncall prog_lang="lua">number = reaper.GetTakeStretchMarkerSlope(MediaItem_Take take, integer idx)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetTakeStretchMarkerSlope(MediaItem_Take take, Int idx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [SetTakeStretchMarkerSlope](#SetTakeStretchMarkerSlope)
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            take - 
            idx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTCPFXParm</slug>
        <title>GetTCPFXParm</title>
        <functioncall prog_lang="cpp">bool GetTCPFXParm(ReaProject* project, MediaTrack* track, int index, int* fxindexOut, int* parmidxOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTCPFXParm(ReaProject project, MediaTrack track, int index, int &amp;fxindex, int &amp;parmidx)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number fxindex, number parmidx = reaper.GetTCPFXParm(ReaProject project, MediaTrack track, integer index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, ReaProject project, MediaTrack track, Int index, Int fxindexOut, Int parmidxOut) = RPR_GetTCPFXParm(project, track, index, fxindexOut, parmidxOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get information about a specific FX parameter knob (see [CountTCPFXParms](#CountTCPFXParms)).
        </description>
        <retvals>
             retval - 
            fxindex - 
            parmidx - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            project - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            track - 
            index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTempoMatchPlayRate</slug>
        <title>GetTempoMatchPlayRate</title>
        <functioncall prog_lang="cpp">bool GetTempoMatchPlayRate(PCM_source* source, double srcscale, double position, double mult, double* rateOut, double* targetlenOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTempoMatchPlayRate(PCM_source source, srcscale, position, mult, &amp;rate, &amp;targetlen)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number rate, number targetlen = reaper.GetTempoMatchPlayRate(PCM_source source, number srcscale, number position, number mult)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, PCM_source source, Float srcscale, Float position, Float mult, Float rateOut, Float targetlenOut) = RPR_GetTempoMatchPlayRate(source, srcscale, position, mult, rateOut, targetlenOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256
        </description>
        <retvals>
             retval - 
            rate - 
            targetlen - 
        </retvals>
        <parameters>
            source - 
            srcscale - 
            position - 
            mult - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTempoTimeSigMarker</slug>
        <title>GetTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">bool GetTempoTimeSigMarker(ReaProject* proj, int ptidx, double* timeposOut, int* measureposOut, double* beatposOut, double* bpmOut, int* timesig_numOut, int* timesig_denomOut, bool* lineartempoOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTempoTimeSigMarker(ReaProject proj, int ptidx, &amp;timepos, int &amp;measurepos, &amp;beatpos, &amp;bpm, int &amp;timesig_num, int &amp;timesig_denom, bool &amp;lineartempo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number timepos, number measurepos, number beatpos, number bpm, number timesig_num, number timesig_denom, boolean lineartempo = reaper.GetTempoTimeSigMarker(ReaProject proj, integer ptidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, ReaProject proj, Int ptidx, Float timeposOut, Int measureposOut, Float beatposOut, Float bpmOut, Int timesig_numOut, Int timesig_denomOut, Boolean lineartempoOut) = RPR_GetTempoTimeSigMarker(proj, ptidx, timeposOut, measureposOut, beatposOut, bpmOut, timesig_numOut, timesig_denomOut, lineartempoOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get information about a tempo/time signature marker. See [CountTempoTimeSigMarkers](#CountTempoTimeSigMarkers), [SetTempoTimeSigMarker](#SetTempoTimeSigMarker), [AddTempoTimeSigMarker](#AddTempoTimeSigMarker), [DeleteTempoTimeSigMarker](#DeleteTempoTimeSigMarker).
        </description>
        <retvals>
             retval - 
            timepos - 
            measurepos - 
            beatpos - 
            bpm - 
            timesig_num - 
            timesig_denom - 
            lineartempo - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            ptidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetToggleCommandState</slug>
        <title>GetToggleCommandState</title>
        <functioncall prog_lang="cpp">int GetToggleCommandState(int command_id)</functioncall>
        <functioncall prog_lang="eel">int GetToggleCommandState(int command_id)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetToggleCommandState(integer command_id)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetToggleCommandState(Int command_id)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Return toggle-state of an action. See [GetToggleCommandStateEx](#GetToggleCommandStateEx).
            See [NamedCommandLookup](#NamedCommandLookup)() for the correct command_id.
        </description>
        <retvals>
            integer - toggle-state 
                -0, off
                -1, on
                --1, NA because the action does not have on/off states.
        </retvals>
        <parameters>
            command_id - the command_id, whose toggle-state you want to know.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, toggle, get, command, state</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetToggleCommandStateEx</slug>
        <title>GetToggleCommandStateEx</title>
        <functioncall prog_lang="cpp">int GetToggleCommandStateEx(int section_id, int command_id)</functioncall>
        <functioncall prog_lang="eel">int GetToggleCommandStateEx(int section_id, int command_id)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetToggleCommandStateEx(integer section_id, integer command_id)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetToggleCommandStateEx(Int section_id, Int command_id)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Return toggle-state of an action.
            For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. For the MIDI editor, the action state for the most recently focused window will be returned.
            See [NamedCommandLookup](#NamedCommandLookup)() for the correct command_id.
        </description>
        <retvals>
            integer - toggle-state 
                -0, off
                -1, on
                --1, NA because the action does not have on/off states.
        </retvals>
        <parameters>
            section_id - the section, in which the action lies
                        -0, Main
                        -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
                        -32060, MIDI Editor
                        -32061, MIDI Event List Editor
                        -32062, MIDI Inline Editor
                        -32063, Media Explorer
            command_id - the command_id, whose toggle-state you want to know.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, toggle, get, command, state, section</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTooltipWindow</slug>
        <title>GetTooltipWindow</title>
        <functioncall prog_lang="cpp">HWND GetTooltipWindow()</functioncall>
        <functioncall prog_lang="eel">HWND GetTooltipWindow()</functioncall>
        <functioncall prog_lang="lua">HWND = reaper.GetTooltipWindow()</functioncall>
        <functioncall prog_lang="python">HWND RPR_GetTooltipWindow()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            gets a tooltip window,in case you want to ask it for font information. Can return NULL.
        </description>
        <retvals>
            HWND - the tooltip-window
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, hwnd, tooltip, window, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrack</slug>
        <title>GetTrack</title>
        <functioncall prog_lang="cpp">MediaTrack* GetTrack(ReaProject* proj, int trackidx)</functioncall>
        <functioncall prog_lang="eel">MediaTrack GetTrack(ReaProject proj, int trackidx)</functioncall>
        <functioncall prog_lang="lua">MediaTrack = reaper.GetTrack(ReaProject proj, integer trackidx)</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_GetTrack(ReaProject proj, Int trackidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get a track from a project by track count (zero-based) (proj=0 for active project)
        </description>
        <retvals>
            MediaTrack - the requested MediaTrack as an object
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            trackidx - the tracknumber; 0 for the first track, 1 for the second track, etc.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackAutomationMode</slug>
        <title>GetTrackAutomationMode</title>
        <functioncall prog_lang="cpp">int GetTrackAutomationMode(MediaTrack* tr)</functioncall>
        <functioncall prog_lang="eel">int GetTrackAutomationMode(MediaTrack tr)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetTrackAutomationMode(MediaTrack tr)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetTrackAutomationMode(MediaTrack tr)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            return the track mode, regardless of global override
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            tr - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackColor</slug>
        <title>GetTrackColor</title>
        <functioncall prog_lang="cpp">int GetTrackColor(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int GetTrackColor(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetTrackColor(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetTrackColor(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the track custom color as OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no color setting is returned as 0.
        </description>
        <retvals>
            integer - the os-dependent color
        </retvals>
        <parameters>
            track - the MediaTrack, whose color you want to request
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, color, track, dependent</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackDepth</slug>
        <title>GetTrackDepth</title>
        <functioncall prog_lang="cpp">int GetTrackDepth(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int GetTrackDepth(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetTrackDepth(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetTrackDepth(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the depth of a track within a folder structure
        </description>
        <retvals>
            integer - the position in the track-folder-structure; 0 for the highest level or unfoldered tracks
        </retvals>
        <parameters>
            track - the MediaTrack whose position in the track-folder-structure you want to request
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, track, depth, folder, depth</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackEnvelope</slug>
        <title>GetTrackEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetTrackEnvelope(MediaTrack* track, int envidx)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetTrackEnvelope(MediaTrack track, int envidx)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope = reaper.GetTrackEnvelope(MediaTrack track, integer envidx)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope RPR_GetTrackEnvelope(MediaTrack track, Int envidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            TrackEnvelope - 
        </retvals>
        <parameters>
            track - 
            envidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackEnvelopeByChunkName</slug>
        <title>GetTrackEnvelopeByChunkName</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetTrackEnvelopeByChunkName(MediaTrack* tr, const char* cfgchunkname)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetTrackEnvelopeByChunkName(MediaTrack tr, "cfgchunkname")</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope = reaper.GetTrackEnvelopeByChunkName(MediaTrack tr, string cfgchunkname)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope RPR_GetTrackEnvelopeByChunkName(MediaTrack tr, String cfgchunkname)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets a built-in track envelope by configuration chunk name, e.g. "&gt;VOLENV".

        </description>
        <retvals>
            TrackEnvelope - 
        </retvals>
        <parameters>
            tr - 
            cfgchunkname - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackEnvelopeByName</slug>
        <title>GetTrackEnvelopeByName</title>
        <functioncall prog_lang="cpp">TrackEnvelope* GetTrackEnvelopeByName(MediaTrack* track, const char* envname)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope GetTrackEnvelopeByName(MediaTrack track, "envname")</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope = reaper.GetTrackEnvelopeByName(MediaTrack track, string envname)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope RPR_GetTrackEnvelopeByName(MediaTrack track, String envname)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            TrackEnvelope - 
        </retvals>
        <parameters>
            track - 
            envname - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackGUID</slug>
        <title>GetTrackGUID</title>
        <functioncall prog_lang="cpp">GUID* GetTrackGUID(MediaTrack* tr)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackGUID(#retguid, MediaTrack tr)</functioncall>
        <functioncall prog_lang="lua">string GUID = reaper.GetTrackGUID(MediaTrack tr)</functioncall>
        <functioncall prog_lang="python">GUID RPR_GetTrackGUID(MediaTrack tr)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             GUID - 
        </retvals>
        <parameters>
            tr - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackMediaItem</slug>
        <title>GetTrackMediaItem</title>
        <functioncall prog_lang="cpp">MediaItem* GetTrackMediaItem(MediaTrack* tr, int itemidx)</functioncall>
        <functioncall prog_lang="eel">MediaItem GetTrackMediaItem(MediaTrack tr, int itemidx)</functioncall>
        <functioncall prog_lang="lua">MediaItem = reaper.GetTrackMediaItem(MediaTrack tr, integer itemidx)</functioncall>
        <functioncall prog_lang="python">MediaItem RPR_GetTrackMediaItem(MediaTrack tr, Int itemidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            MediaItem - 
        </retvals>
        <parameters>
            tr - 
            itemidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackMIDILyrics</slug>
        <title>GetTrackMIDILyrics</title>
        <functioncall prog_lang="cpp">bool GetTrackMIDILyrics(MediaTrack* track, int flag, char* bufWantNeedBig, int* bufWantNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackMIDILyrics(MediaTrack track, int flag, #bufWant)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string bufWant = reaper.GetTrackMIDILyrics(MediaTrack track, integer flag, string bufWant)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int flag, String bufWantNeedBig, Int bufWantNeedBig_sz) = RPR_GetTrackMIDILyrics(track, flag, bufWantNeedBig, bufWantNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.965
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&amp;1: double tabs at the end of each measure and triple tabs when skipping measures, flag&amp;2: each lyric is preceded by its beat position in the project (example with flag=2: "1.1.2\tLyric for measure 1 beat 2\t.1.1\tLyric for measure 2 beat 1   "). See [SetTrackMIDILyrics](#SetTrackMIDILyrics)
        </description>
        <retvals>
            retval - 
            bufWantNeedBig_sz - 
        </retvals>
        <parameters>
            track - 
            flag - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackMIDINoteName</slug>
        <title>GetTrackMIDINoteName</title>
        <functioncall prog_lang="cpp">const char* GetTrackMIDINoteName(int track, int pitch, int chan)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackMIDINoteName(#retval, int track, int pitch, int chan)</functioncall>
        <functioncall prog_lang="lua">string = reaper.GetTrackMIDINoteName(integer track, integer pitch, integer chan)</functioncall>
        <functioncall prog_lang="python">String RPR_GetTrackMIDINoteName(Int track, Int pitch, Int chan)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            see [GetTrackMIDINoteNameEx](#GetTrackMIDINoteNameEx)
        </description>
        <retvals>
            string - 
        </retvals>
        <parameters>
            track - 
            pitch - 
            chan - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackMIDINoteNameEx</slug>
        <title>GetTrackMIDINoteNameEx</title>
        <functioncall prog_lang="cpp">const char* GetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackMIDINoteNameEx(#retval, ReaProject proj, MediaTrack track, int pitch, int chan)</functioncall>
        <functioncall prog_lang="lua">string = reaper.GetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan)</functioncall>
        <functioncall prog_lang="python">String RPR_GetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, Int pitch, Int chan)</functioncall>
        <requires>
            Reaper=5.92
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See [SetTrackMIDINoteNameEx](#SetTrackMIDINoteNameEx)
        </description>
        <retvals>
            string - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            track - 
            pitch - 
            chan - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackMIDINoteRange</slug>
        <title>GetTrackMIDINoteRange</title>
        <functioncall prog_lang="cpp">void GetTrackMIDINoteRange(ReaProject* proj, MediaTrack* track, int* note_loOut, int* note_hiOut)</functioncall>
        <functioncall prog_lang="eel">GetTrackMIDINoteRange(ReaProject proj, MediaTrack track, int &amp;note_lo, int &amp;note_hi)</functioncall>
        <functioncall prog_lang="lua">number note_lo retval, number note_hi = reaper.GetTrackMIDINoteRange(ReaProject proj, MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, MediaTrack track, Int note_loOut, Int note_hiOut) = RPR_GetTrackMIDINoteRange(proj, track, note_loOut, note_hiOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            note_lo retval - 
            note_hi - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackName</slug>
        <title>GetTrackName</title>
        <functioncall prog_lang="cpp">bool GetTrackName(MediaTrack* track, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackName(MediaTrack track, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.GetTrackName(MediaTrack track, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String buf, Int buf_sz) = RPR_GetTrackName(track, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns "MASTER" for master track, "Track N" if track has no name.
        </description>
        <retvals>
            retval - true, if successful
            buf - the name of the track; "MASTER" for master-track; "Track N" if the track has no given name yet(N=tracknumber)
        </retvals>
        <parameters>
            track - the MediaTrack, whose name you want to know
            buf - unknown
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, name</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackNumMediaItems</slug>
        <title>GetTrackNumMediaItems</title>
        <functioncall prog_lang="cpp">int GetTrackNumMediaItems(MediaTrack* tr)</functioncall>
        <functioncall prog_lang="eel">int GetTrackNumMediaItems(MediaTrack tr)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetTrackNumMediaItems(MediaTrack tr)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetTrackNumMediaItems(MediaTrack tr)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the number of MediaItems of a MediaTrack
        </description>
        <retvals>
            integer - the number of MediaItems in the MediaTrack
        </retvals>
        <parameters>
            tr - the MediaTrack, whose number of MediaItems you want to count
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, count, item, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackNumSends</slug>
        <title>GetTrackNumSends</title>
        <functioncall prog_lang="cpp">int GetTrackNumSends(MediaTrack* tr, int category)</functioncall>
        <functioncall prog_lang="eel">int GetTrackNumSends(MediaTrack tr, int category)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GetTrackNumSends(MediaTrack tr, integer category)</functioncall>
        <functioncall prog_lang="python">Int RPR_GetTrackNumSends(MediaTrack tr, Int category)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns number of sends/receives/hardware outputs
        </description>
        <retvals>
            integer - the number of sends/receives/hardware outputs
        </retvals>
        <parameters>
            tr - the MediaTrack, whose number of sends/receives/hardware outputs you want to know
            category - &gt;0 for receives; 0=sends; &gt;0 for hardware outputs
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, count, send, receive, hardware output, hwout</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackReceiveName</slug>
        <title>GetTrackReceiveName</title>
        <functioncall prog_lang="cpp">bool GetTrackReceiveName(MediaTrack* track, int recv_index, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackReceiveName(MediaTrack track, int recv_index, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.GetTrackReceiveName(MediaTrack track, integer recv_index, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int recv_index, String buf, Int buf_sz) = RPR_GetTrackReceiveName(track, recv_index, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [GetTrackSendName](#GetTrackSendName).
        </description>
        <retvals>
            retval - 
            buf - 
        </retvals>
        <parameters>
            track - 
            recv_index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackReceiveUIMute</slug>
        <title>GetTrackReceiveUIMute</title>
        <functioncall prog_lang="cpp">bool GetTrackReceiveUIMute(MediaTrack* track, int recv_index, bool* muteOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackReceiveUIMute(MediaTrack track, int recv_index, bool &amp;mute)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean mute = reaper.GetTrackReceiveUIMute(MediaTrack track, integer recv_index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int recv_index, Boolean muteOut) = RPR_GetTrackReceiveUIMute(track, recv_index, muteOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [GetTrackSendUIMute](#GetTrackSendUIMute).
        </description>
        <retvals>
             retval - 
            mute - 
        </retvals>
        <parameters>
            track - 
            recv_index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackReceiveUIVolPan</slug>
        <title>GetTrackReceiveUIVolPan</title>
        <functioncall prog_lang="cpp">bool GetTrackReceiveUIVolPan(MediaTrack* track, int recv_index, double* volumeOut, double* panOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackReceiveUIVolPan(MediaTrack track, int recv_index, &amp;volume, &amp;pan)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number volume, number pan = reaper.GetTrackReceiveUIVolPan(MediaTrack track, integer recv_index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int recv_index, Float volumeOut, Float panOut) = RPR_GetTrackReceiveUIVolPan(track, recv_index, volumeOut, panOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [GetTrackSendUIVolPan](#GetTrackSendUIVolPan).
        </description>
        <retvals>
             retval - 
            volume - 
            pan - 
        </retvals>
        <parameters>
            track - 
            recv_index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackSendInfo_Value</slug>
        <title>GetTrackSendInfo_Value</title>
        <functioncall prog_lang="cpp">double GetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname)</functioncall>
        <functioncall prog_lang="eel">double GetTrackSendInfo_Value(MediaTrack tr, int category, int sendidx, "parmname")</functioncall>
        <functioncall prog_lang="lua">number = reaper.GetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname)</functioncall>
        <functioncall prog_lang="python">Float RPR_GetTrackSendInfo_Value(MediaTrack tr, Int category, Int sendidx, String parmname)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get send/receive/hardware output numerical-value attributes.
            category is &gt;0 for receives, 0=sends, &gt;0 for hardware outputs
            parameter names:
            B_MUTE : returns bool *
            B_PHASE : returns bool *, true to flip phase
            B_MONO : returns bool *
            D_VOL : returns double *, 1.0 = +0dB etc
            D_PAN : returns double *, -1..+1
            D_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
            I_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
            I_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
            I_SRCCHAN : returns int *, index,&amp;1024=mono, -1 for none
            I_DSTCHAN : returns int *, index, &amp;1024=mono, otherwise stereo pair, hwout:&amp;512=rearoute
            I_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan
            P_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs
            P_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs
            P_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc
            See [CreateTrackSend](#CreateTrackSend), [RemoveTrackSend](#RemoveTrackSend), [GetTrackNumSends](#GetTrackNumSends).
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            tr - 
            category - 
            sendidx - 
            parmname - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackSendName</slug>
        <title>GetTrackSendName</title>
        <functioncall prog_lang="cpp">bool GetTrackSendName(MediaTrack* track, int send_index, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackSendName(MediaTrack track, int send_index, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.GetTrackSendName(MediaTrack track, integer send_index, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int send_index, String buf, Int buf_sz) = RPR_GetTrackSendName(track, send_index, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            send_idx&gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. See [GetTrackReceiveName](#GetTrackReceiveName).
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            track - 
            send_index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackSendUIMute</slug>
        <title>GetTrackSendUIMute</title>
        <functioncall prog_lang="cpp">bool GetTrackSendUIMute(MediaTrack* track, int send_index, bool* muteOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackSendUIMute(MediaTrack track, int send_index, bool &amp;mute)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean mute = reaper.GetTrackSendUIMute(MediaTrack track, integer send_index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int send_index, Boolean muteOut) = RPR_GetTrackSendUIMute(track, send_index, muteOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            send_idx&gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. See [GetTrackReceiveUIMute](#GetTrackReceiveUIMute).
        </description>
        <retvals>
             retval - 
            mute - 
        </retvals>
        <parameters>
            track - 
            send_index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackSendUIVolPan</slug>
        <title>GetTrackSendUIVolPan</title>
        <functioncall prog_lang="cpp">bool GetTrackSendUIVolPan(MediaTrack* track, int send_index, double* volumeOut, double* panOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackSendUIVolPan(MediaTrack track, int send_index, &amp;volume, &amp;pan)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number volume, number pan = reaper.GetTrackSendUIVolPan(MediaTrack track, integer send_index)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int send_index, Float volumeOut, Float panOut) = RPR_GetTrackSendUIVolPan(track, send_index, volumeOut, panOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            send_idx&gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. See [GetTrackReceiveUIVolPan](#GetTrackReceiveUIVolPan).
        </description>
        <retvals>
             retval - 
            volume - 
            pan - 
        </retvals>
        <parameters>
            track - 
            send_index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackState</slug>
        <title>GetTrackState</title>
        <functioncall prog_lang="cpp">const char* GetTrackState(MediaTrack* track, int* flagsOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackState(#retval, MediaTrack track, int &amp;flags)</functioncall>
        <functioncall prog_lang="lua">string retval, number flags = reaper.GetTrackState(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(String retval, MediaTrack track, Int flagsOut) = RPR_GetTrackState(track, flagsOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets track state, returns track name.
            flags will be set to:
            &amp;1=folder
            &amp;2=selected
            &amp;4=has fx enabled
            &amp;8=muted
            &amp;16=soloed
            &amp;32=SIP'd (with &amp;16)
            &amp;64=rec armed
            &amp;128=rec monitoring on
            &amp;256=rec monitoring auto
            &amp;512=hide from TCP
            &amp;1024=hide from MCP
        </description>
        <retvals>
             retval - 
            flags - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackStateChunk</slug>
        <title>GetTrackStateChunk</title>
        <functioncall prog_lang="cpp">bool GetTrackStateChunk(MediaTrack* track, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackStateChunk(MediaTrack track, #str, bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string str = reaper.GetTrackStateChunk(MediaTrack track, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetTrackStateChunk(track, strNeedBig, strNeedBig_sz, isundoOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
            
            This function has a limitation: if a returned statechunk. Use [SNM_GetSetObjectState](#SNM_GetSetObjectState) instead in that case.
        </description>
        <retvals>
             retval - 
            str - 
        </retvals>
        <parameters>
            track - 
            isundo - 
            isundo - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackUIMute</slug>
        <title>GetTrackUIMute</title>
        <functioncall prog_lang="cpp">bool GetTrackUIMute(MediaTrack* track, bool* muteOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackUIMute(MediaTrack track, bool &amp;mute)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean mute = reaper.GetTrackUIMute(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Boolean muteOut) = RPR_GetTrackUIMute(track, muteOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            mute - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackUIPan</slug>
        <title>GetTrackUIPan</title>
        <functioncall prog_lang="cpp">bool GetTrackUIPan(MediaTrack* track, double* pan1Out, double* pan2Out, int* panmodeOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackUIPan(MediaTrack track, &amp;pan1, &amp;pan2, int &amp;panmode)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number pan1, number pan2, number panmode = reaper.GetTrackUIPan(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Float pan1Out, Float pan2Out, Int panmodeOut) = RPR_GetTrackUIPan(track, pan1Out, pan2Out, panmodeOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            pan1 - 
            pan2 - 
            panmode - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetTrackUIVolPan</slug>
        <title>GetTrackUIVolPan</title>
        <functioncall prog_lang="cpp">bool GetTrackUIVolPan(MediaTrack* track, double* volumeOut, double* panOut)</functioncall>
        <functioncall prog_lang="eel">bool GetTrackUIVolPan(MediaTrack track, &amp;volume, &amp;pan)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number volume, number pan = reaper.GetTrackUIVolPan(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Float volumeOut, Float panOut) = RPR_GetTrackUIVolPan(track, volumeOut, panOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            volume - 
            pan - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetUnderrunTime</slug>
        <title>GetUnderrunTime</title>
        <functioncall prog_lang="cpp">void GetUnderrunTime(unsigned int* audio_xrunOutOptional, unsigned int* media_xrunOutOptional, unsigned int* curtimeOutOptional)</functioncall>
        <functioncall prog_lang="eel">GetUnderrunTime(optional unsigned int &amp;audio_xrun, optional unsigned int &amp;media_xrun, optional unsigned int &amp;curtime)</functioncall>
        <functioncall prog_lang="lua">optional number audio_xrun retval, optional number media_xrun, optional number curtime = reaper.GetUnderrunTime()</functioncall>
        <functioncall prog_lang="python">RPR_GetUnderrunTime(unsigned int audio_xrunOutOptional, unsigned int media_xrunOutOptional, unsigned int curtimeOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)
        </description>
        <retvals>
            audio_xrun retval - 
            media_xrun - 
            curtime - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetUserFileNameForRead</slug>
        <title>GetUserFileNameForRead</title>
        <functioncall prog_lang="cpp">bool GetUserFileNameForRead(char* filenameNeed4096, const char* title, const char* defext)</functioncall>
        <functioncall prog_lang="eel">bool GetUserFileNameForRead(#filenameNeed4096, "title", "defext")</functioncall>
        <functioncall prog_lang="lua">boolean retval, string filenameNeed4096 = reaper.GetUserFileNameForRead(string filenameNeed4096, string title, string defext)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String filenameNeed4096, String title, String defext) = RPR_GetUserFileNameForRead(filenameNeed4096, title, defext)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Opens a filerequester, where a user can select a file.
            The requester only returns the file, but doesn't open or write to it. That said, this function can be used for both use-cases, BUT: keep in mind, that it shows an "open"-button, even if you want to use it in code for saving a file. You also can't use it for "create new file"-usecases, as you can't choose nonexisting files.
        </description>
        <retvals>
            retval - true, if the user selected a file; false if the user cancelled the dialog
            filenameNeed4096 - the filename including the full absolute path of the file the user selected
        </retvals>
        <parameters>
            filenameNeed4096 - default-filename the requester uses, until the user selects another file.
            title - title of the file-requester-window
            defext - the filter for the fileextensions. Only files with an extension defined in defext are shown.
            - examples:
            -"", all files
            -"*", all files
            -"ini", only .ini-files
            -"*.ini", only .ini-files
            -"*.txt; *.ini; *.exe", shows .txt; .ini; .exe-files
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>user, interface, file, requester, dialog, open</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetUserInputs</slug>
        <title>GetUserInputs</title>
        <functioncall prog_lang="cpp">bool GetUserInputs(const char* title, int num_inputs, const char* captions_csv, char* retvals_csv, int retvals_csv_sz)</functioncall>
        <functioncall prog_lang="eel">bool GetUserInputs("title", int num_inputs, "captions_csv", #retvals_csv)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string retvals_csv = reaper.GetUserInputs(string title, integer num_inputs, string captions_csv, string retvals_csv)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String title, Int num_inputs, String captions_csv, String retvals_csv, Int retvals_csv_sz) = RPR_GetUserInputs(title, num_inputs, captions_csv, retvals_csv, retvals_csv_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Opens a window with input-fields to get values from the user.
            If a caption begins with *, for example "*password", the edit field will not display the input text.
            Maximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. To increase text field width, add an extra caption field, and specify extrawidth=(number of characters for the inputfields; 0 to 1000 and higher)

            You can type maximum 1023 characters into one inputfield, everything longer will be cut to 1023 characters!
            The user can input a comma (,), which is not escaped by Reaper. This could cause trouble, when analysing multiple returned retvals_csv.
        </description>
        <retvals>
            retval - did the user click OK in the dialog(true) or close/cancel the dialog(false)
            retvals_csv - the data from each of the input-fields, seperated by a comma ,
        </retvals>
        <parameters>
            title - title of the window
            num_inputs - number of input-fields, 1-16.
            captions_csv - a string with the captions for each input-field, each seperated by a comma. Can be fewer than num_inputs. If a caption begins with *, the inputfield will display * instead of characters(for i.e. passwords).
            retvals_csv - default-values for each input-field, seperated by a comma.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>user, interface, input, values, csv, dialog</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GoToMarker</slug>
        <title>GoToMarker</title>
        <functioncall prog_lang="cpp">void GoToMarker(ReaProject* proj, int marker_index, bool use_timeline_order)</functioncall>
        <functioncall prog_lang="eel">GoToMarker(ReaProject proj, int marker_index, bool use_timeline_order)</functioncall>
        <functioncall prog_lang="lua">reaper.GoToMarker(ReaProject proj, integer marker_index, boolean use_timeline_order)</functioncall>
        <functioncall prog_lang="python">RPR_GoToMarker(ReaProject proj, Int marker_index, Boolean use_timeline_order)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Go to marker. 
            Move Editcursor to a given marker. When playing, the playcursor moves to the marker as well.
            
            For Regions, use [GoToRegion](#GoToRegion).
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            marker_index - the markerindex, where you want to go to.
            use_timeline_order - false, use the shown-markernumber as marker_index; true, use markers in timelineorder, ignoring the shown-markernumber
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, goto, marker, play, cursor, editcursor, playcursor</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GoToRegion</slug>
        <title>GoToRegion</title>
        <functioncall prog_lang="cpp">void GoToRegion(ReaProject* proj, int region_index, bool use_timeline_order)</functioncall>
        <functioncall prog_lang="eel">GoToRegion(ReaProject proj, int region_index, bool use_timeline_order)</functioncall>
        <functioncall prog_lang="lua">reaper.GoToRegion(ReaProject proj, integer region_index, boolean use_timeline_order)</functioncall>
        <functioncall prog_lang="python">RPR_GoToRegion(ReaProject proj, Int region_index, Boolean use_timeline_order)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Go to beginning of a region.
            Seek to region after current region finishes playing (smooth seek). 
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            region_index - the regionindex, where you want to got to.
            use_timeline_order - false, use the shown-regionnumber as region_index; true, use regions in timelineorder, ignoring the shown-regionnumber
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, goto, region, play, cursor, editcursor, playcursor</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GR_SelectColor</slug>
        <title>GR_SelectColor</title>
        <functioncall prog_lang="cpp">int GR_SelectColor(HWND hwnd, int* colorOut)</functioncall>
        <functioncall prog_lang="eel">int GR_SelectColor(HWND hwnd, int &amp;color)</functioncall>
        <functioncall prog_lang="lua">integer retval, number color = reaper.GR_SelectColor(HWND hwnd)</functioncall>
        <functioncall prog_lang="python">(Int retval, HWND hwnd, Int colorOut) = RPR_GR_SelectColor(hwnd, colorOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Runs the system color chooser dialog. Returns 0 if the user cancels the dialog.
        </description>
        <retvals>
            retval - 1, user chose a color; 0, user cancelled dialog
            color - the returned color as a native-color-value.
        </retvals>
        <parameters>
            hwnd - the window, in which to open the dialog. Nil is allowed in Lua.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, color, dialog, chooser, native, hwnd</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GSC_mainwnd</slug>
        <title>GSC_mainwnd</title>
        <functioncall prog_lang="cpp">int GSC_mainwnd(int t)</functioncall>
        <functioncall prog_lang="eel">int GSC_mainwnd(int t)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.GSC_mainwnd(integer t)</functioncall>
        <functioncall prog_lang="python">Int RPR_GSC_mainwnd(Int t)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            this is just like win32 GetSysColor() but can have overrides.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            t - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>guidToString</slug>
        <title>guidToString</title>
        <functioncall prog_lang="cpp">void guidToString(const GUID* g, char* destNeed64)</functioncall>
        <functioncall prog_lang="eel">guidToString("gGUID", #destNeed64)</functioncall>
        <functioncall prog_lang="lua">string destNeed64 = reaper.guidToString(string gGUID, string destNeed64)</functioncall>
        <functioncall prog_lang="python">(const GUID g, String destNeed64) = RPR_guidToString(g, destNeed64)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            dest should be at least 64 chars long to be safe
        </description>
        <retvals>
            destNeed64 - 
        </retvals>
        <parameters>
            gGUID - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>HasExtState</slug>
        <title>HasExtState</title>
        <functioncall prog_lang="cpp">bool HasExtState(const char* section, const char* key)</functioncall>
        <functioncall prog_lang="eel">bool HasExtState("section", "key")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.HasExtState(string section, string key)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_HasExtState(String section, String key)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns true if there exists an extended state value for a specific section and key. See [SetExtState](#SetExtState), [GetExtState](#GetExtState), [DeleteExtState](#DeleteExtState).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            section - 
            key - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Extended States
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>HasTrackMIDIPrograms</slug>
        <title>HasTrackMIDIPrograms</title>
        <functioncall prog_lang="cpp">const char* HasTrackMIDIPrograms(int track)</functioncall>
        <functioncall prog_lang="eel">bool HasTrackMIDIPrograms(#retval, int track)</functioncall>
        <functioncall prog_lang="lua">string = reaper.HasTrackMIDIPrograms(integer track)</functioncall>
        <functioncall prog_lang="python">String RPR_HasTrackMIDIPrograms(Int track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns name of track plugin that is supplying MIDI programs,or NULL if there is none
        </description>
        <retvals>
            string - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>HasTrackMIDIProgramsEx</slug>
        <title>HasTrackMIDIProgramsEx</title>
        <functioncall prog_lang="cpp">const char* HasTrackMIDIProgramsEx(ReaProject* proj, MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">bool HasTrackMIDIProgramsEx(#retval, ReaProject proj, MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">string = reaper.HasTrackMIDIProgramsEx(ReaProject proj, MediaTrack track)</functioncall>
        <functioncall prog_lang="python">String RPR_HasTrackMIDIProgramsEx(ReaProject proj, MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns name of track plugin that is supplying MIDI programs,or NULL if there is none
        </description>
        <retvals>
            string - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Help_Set</slug>
        <title>Help_Set</title>
        <functioncall prog_lang="cpp">void Help_Set(const char* helpstring, bool is_temporary_help)</functioncall>
        <functioncall prog_lang="eel">Help_Set("helpstring", bool is_temporary_help)</functioncall>
        <functioncall prog_lang="lua">reaper.Help_Set(string helpstring, boolean is_temporary_help)</functioncall>
        <functioncall prog_lang="python">RPR_Help_Set(String helpstring, Boolean is_temporary_help)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Displays an information in the help and information-display, underneath the TCP(might be missing, in certain themes).
        </description>
        <parameters>
            helpstring - the string to display
            is_temporary_help - true, show until another message is displayed; false, show permanently, every time no other message is displayed.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags>reaper, api, helper, display, help, information, message</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>image_resolve_fn</slug>
        <title>image_resolve_fn</title>
        <functioncall prog_lang="cpp">void image_resolve_fn(const char* in, char* out, int out_sz)</functioncall>
        <functioncall prog_lang="eel">image_resolve_fn("in", #out)</functioncall>
        <functioncall prog_lang="lua">string out = reaper.image_resolve_fn(string in, string out)</functioncall>
        <functioncall prog_lang="python">(String in, String out, Int out_sz) = RPR_image_resolve_fn(in, out, out_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            out - 
        </retvals>
        <parameters>
            in - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertAutomationItem</slug>
        <title>InsertAutomationItem</title>
        <functioncall prog_lang="cpp">int InsertAutomationItem(TrackEnvelope* env, int pool_id, double position, double length)</functioncall>
        <functioncall prog_lang="eel">int InsertAutomationItem(TrackEnvelope env, int pool_id, position, length)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.InsertAutomationItem(TrackEnvelope env, integer pool_id, number position, number length)</functioncall>
        <functioncall prog_lang="python">Int RPR_InsertAutomationItem(TrackEnvelope env, Int pool_id, Float position, Float length)</functioncall>
        <requires>
            Reaper=5.96
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Insert a new automation item. pool_id &lt; 0 collects existing envelope points into the automation item; if pool_id is &gt;= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See [GetSetAutomationItemInfo](#GetSetAutomationItemInfo).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            env - 
            pool_id - 
            position - 
            length - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Automation Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertEnvelopePoint</slug>
        <title>InsertEnvelopePoint</title>
        <functioncall prog_lang="cpp">bool InsertEnvelopePoint(TrackEnvelope* envelope, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool InsertEnvelopePoint(TrackEnvelope envelope, time, value, int shape, tension, bool selected, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.InsertEnvelopePoint(TrackEnvelope envelope, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Float time, Float value, Int shape, Float tension, Boolean selected, Boolean noSortInOptional) = RPR_InsertEnvelopePoint(envelope, time, value, shape, tension, selected, noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See [GetEnvelopePoint](#GetEnvelopePoint), [SetEnvelopePoint](#SetEnvelopePoint), [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            envelope - 
            time - 
            value - 
            shape - 
            tension - 
            selected - 
            noSortIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertEnvelopePointEx</slug>
        <title>InsertEnvelopePointEx</title>
        <functioncall prog_lang="cpp">bool InsertEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool InsertEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, time, value, int shape, tension, bool selected, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.InsertEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Float time, Float value, Int shape, Float tension, Boolean selected, Boolean noSortInOptional) = RPR_InsertEnvelopePointEx(envelope, autoitem_idx, time, value, shape, tension, selected, noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See [GetEnvelopePoint](#GetEnvelopePoint), [SetEnvelopePoint](#SetEnvelopePoint), [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            envelope - 
            autoitem_idx - 
            time - 
            value - 
            shape - 
            tension - 
            selected - 
            noSortIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertMedia</slug>
        <title>InsertMedia</title>
        <functioncall prog_lang="cpp">int InsertMedia(const char* file, int mode)</functioncall>
        <functioncall prog_lang="eel">int InsertMedia("file", int mode)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.InsertMedia(string file, integer mode)</functioncall>
        <functioncall prog_lang="python">Int RPR_InsertMedia(String file, Int mode)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            mode: 
            0=add to current track, 
            1=add new track, 
            3=add to selected items as takes, 
            &amp;4=stretch/loop to fit time sel, 
            &amp;8=try to match tempo 1x, 
            &amp;16=try to match tempo 0.5x, 
            &amp;32=try to match tempo 2x, 
            &amp;64=don't preserve pitch when matching tempo, 
            &amp;128=no loop/section if startpct/endpct set, 
            &amp;256=force loop regardless of global preference for looping imported items. 
            &amp;512=use high word as absolute track index if mode&amp;3==0.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            file - 
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertMediaSection</slug>
        <title>InsertMediaSection</title>
        <functioncall prog_lang="cpp">int InsertMediaSection(const char* file, int mode, double startpct, double endpct, double pitchshift)</functioncall>
        <functioncall prog_lang="eel">int InsertMediaSection("file", int mode, startpct, endpct, pitchshift)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.InsertMediaSection(string file, integer mode, number startpct, number endpct, number pitchshift)</functioncall>
        <functioncall prog_lang="python">Int RPR_InsertMediaSection(String file, Int mode, Float startpct, Float endpct, Float pitchshift)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            file - 
            mode - 
            startpct - 
            endpct - 
            pitchshift - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>InsertTrackAtIndex</slug>
        <title>InsertTrackAtIndex</title>
        <functioncall prog_lang="cpp">void InsertTrackAtIndex(int idx, bool wantDefaults)</functioncall>
        <functioncall prog_lang="eel">InsertTrackAtIndex(int idx, bool wantDefaults)</functioncall>
        <functioncall prog_lang="lua">reaper.InsertTrackAtIndex(integer idx, boolean wantDefaults)</functioncall>
        <functioncall prog_lang="python">RPR_InsertTrackAtIndex(Int idx, Boolean wantDefaults)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            inserts a track at idx,of course this will be clamped to 0..[GetNumTracks](#GetNumTracks)().
        </description>
        <parameters>
            idx - the index, in which to insert the track; 0, insert before the first track.
            wantDefaults - true, default envelopes/FX; false, no enabled FX/envelopes
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, insert, track, index, default</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>IsMediaExtension</slug>
        <title>IsMediaExtension</title>
        <functioncall prog_lang="cpp">bool IsMediaExtension(const char* ext, bool wantOthers)</functioncall>
        <functioncall prog_lang="eel">bool IsMediaExtension("ext", bool wantOthers)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.IsMediaExtension(string ext, boolean wantOthers)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_IsMediaExtension(String ext, Boolean wantOthers)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Tests a file extension (i.e. "wav" or "mid") to see if it's a media extension.
            If wantOthers is set, then "RPP", "TXT" and other project-type formats will also pass.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            ext - 
            wantOthers - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>IsMediaItemSelected</slug>
        <title>IsMediaItemSelected</title>
        <functioncall prog_lang="cpp">bool IsMediaItemSelected(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">bool IsMediaItemSelected(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.IsMediaItemSelected(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_IsMediaItemSelected(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get, if a MediaItem is selected or not.
        </description>
        <retvals>
            boolean - true, MediaItem is selected; false, MediaItem is not selected
        </retvals>
        <parameters>
            item - the MediaItem, whose selected-state you want to know
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, get, selected, state, unselected</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>IsProjectDirty</slug>
        <title>IsProjectDirty</title>
        <functioncall prog_lang="cpp">int IsProjectDirty(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int IsProjectDirty(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.IsProjectDirty(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int RPR_IsProjectDirty(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.
            
            A project becomes dirty, as soon as it was changed since creation/last saving.
        </description>
        <retvals>
            integer - the state, if a project needs saving or not; 0, needs no saving; 1, needs saving
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, get, dirty, state, saved, unsaved</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>IsTrackSelected</slug>
        <title>IsTrackSelected</title>
        <functioncall prog_lang="cpp">bool IsTrackSelected(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">bool IsTrackSelected(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.IsTrackSelected(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_IsTrackSelected(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get, if a MediaTrack is selected or not.
        </description>
        <retvals>
            boolean - true, MediaTrack is selected; false, MediaTrack is not selected
        </retvals>
        <parameters>
            track - the MediaTrack, whose selection-state you want to know
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, state, selection, deselection</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>IsTrackVisible</slug>
        <title>IsTrackVisible</title>
        <functioncall prog_lang="cpp">bool IsTrackVisible(MediaTrack* track, bool mixer)</functioncall>
        <functioncall prog_lang="eel">bool IsTrackVisible(MediaTrack track, bool mixer)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.IsTrackVisible(MediaTrack track, boolean mixer)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_IsTrackVisible(MediaTrack track, Boolean mixer)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets visibility-state of a MediaTrack.
        </description>
        <retvals>
            boolean - true, MediaTrack is visible; false, MediaTrack is invisible
        </retvals>
        <parameters>
            track - the MediaTrack, whose visibility-state you want to know
            mixer - true, visibility-state of the MediaTrack in the mixer; false, visibility-state of the MediaTrack in the TrackControlPanel
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, visible, get, invisible, mixer, track control panel, tcp, mcp</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_create</slug>
        <title>joystick_create</title>
        <functioncall prog_lang="cpp">joystick_device* joystick_create(const GUID* guid)</functioncall>
        <functioncall prog_lang="eel">joystick_device joystick_create("guidGUID")</functioncall>
        <functioncall prog_lang="lua">joystick_device = reaper.joystick_create(string guidGUID)</functioncall>
        <functioncall prog_lang="python">joystick_device RPR_joystick_create(const GUID guid)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            creates a joystick device
        </description>
        <retvals>
            joystick_device - 
        </retvals>
        <parameters>
            guidGUID - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Joystick Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_destroy</slug>
        <title>joystick_destroy</title>
        <functioncall prog_lang="cpp">void joystick_destroy(joystick_device* device)</functioncall>
        <functioncall prog_lang="eel">joystick_destroy(joystick_device device)</functioncall>
        <functioncall prog_lang="lua">reaper.joystick_destroy(joystick_device device)</functioncall>
        <functioncall prog_lang="python">RPR_joystick_destroy(joystick_device device)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            destroys a joystick device
        </description>
        <parameters>
            device - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Joystick Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_enum</slug>
        <title>joystick_enum</title>
        <functioncall prog_lang="cpp">const char* joystick_enum(int index, const char** namestrOutOptional)</functioncall>
        <functioncall prog_lang="eel">bool joystick_enum(#retval, int index, optional #namestr)</functioncall>
        <functioncall prog_lang="lua">string retval, optional string namestr = reaper.joystick_enum(integer index)</functioncall>
        <functioncall prog_lang="python">String RPR_joystick_enum(Int index, String namestrOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            enumerates installed devices, returns GUID as a string
        </description>
        <retvals>
             retval - 
            string namestr - 
        </retvals>
        <parameters>
            index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Joystick Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_getaxis</slug>
        <title>joystick_getaxis</title>
        <functioncall prog_lang="cpp">double joystick_getaxis(joystick_device* dev, int axis)</functioncall>
        <functioncall prog_lang="eel">double joystick_getaxis(joystick_device dev, int axis)</functioncall>
        <functioncall prog_lang="lua">number = reaper.joystick_getaxis(joystick_device dev, integer axis)</functioncall>
        <functioncall prog_lang="python">Float RPR_joystick_getaxis(joystick_device dev, Int axis)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns axis value (-1..1)
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            dev - 
            axis - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Joystick Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_getbuttonmask</slug>
        <title>joystick_getbuttonmask</title>
        <functioncall prog_lang="cpp">unsigned int joystick_getbuttonmask(joystick_device* dev)</functioncall>
        <functioncall prog_lang="eel">uint joystick_getbuttonmask(joystick_device dev)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.joystick_getbuttonmask(joystick_device dev)</functioncall>
        <functioncall prog_lang="python">Unknown RPR_joystick_getbuttonmask(joystick_device dev)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns button pressed mask, 1=first button, 2=second...
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            dev - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Joystick Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_getinfo</slug>
        <title>joystick_getinfo</title>
        <functioncall prog_lang="cpp">int joystick_getinfo(joystick_device* dev, int* axesOutOptional, int* povsOutOptional)</functioncall>
        <functioncall prog_lang="eel">int joystick_getinfo(joystick_device dev, optional int &amp;axes, optional int &amp;povs)</functioncall>
        <functioncall prog_lang="lua">integer retval, optional number axes, optional number povs = reaper.joystick_getinfo(joystick_device dev)</functioncall>
        <functioncall prog_lang="python">(Int retval, joystick_device dev, Int axesOutOptional, Int povsOutOptional) = RPR_joystick_getinfo(dev, axesOutOptional, povsOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns button count
        </description>
        <retvals>
             retval - 
            axes - 
            povs - 
        </retvals>
        <parameters>
            dev - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Joystick Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_getpov</slug>
        <title>joystick_getpov</title>
        <functioncall prog_lang="cpp">double joystick_getpov(joystick_device* dev, int pov)</functioncall>
        <functioncall prog_lang="eel">double joystick_getpov(joystick_device dev, int pov)</functioncall>
        <functioncall prog_lang="lua">number = reaper.joystick_getpov(joystick_device dev, integer pov)</functioncall>
        <functioncall prog_lang="python">Float RPR_joystick_getpov(joystick_device dev, Int pov)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns POV value (usually 0..655.35, or 655.35 on error)
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            dev - 
            pov - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Joystick Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>joystick_update</slug>
        <title>joystick_update</title>
        <functioncall prog_lang="cpp">bool joystick_update(joystick_device* dev)</functioncall>
        <functioncall prog_lang="eel">bool joystick_update(joystick_device dev)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.joystick_update(joystick_device dev)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_joystick_update(joystick_device dev)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            dev - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Joystick Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>LICE_ClipLine</slug>
        <title>LICE_ClipLine</title>
        <functioncall prog_lang="cpp">bool LICE_ClipLine(int* pX1Out, int* pY1Out, int* pX2Out, int* pY2Out, int xLo, int yLo, int xHi, int yHi)</functioncall>
        <functioncall prog_lang="eel">bool LICE_ClipLine(int &amp;pX1, int &amp;pY1, int &amp;pX2, int &amp;pY2, int xLo, int yLo, int xHi, int yHi)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number pX1, number pY1, number pX2, number pY2 = reaper.LICE_ClipLine(number pX1, number pY1, number pX2, number pY2, integer xLo, integer yLo, integer xHi, integer yHi)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, Int pX1Out, Int pY1Out, Int pX2Out, Int pY2Out, Int xLo, Int yLo, Int xHi, Int yHi) = RPR_LICE_ClipLine(pX1Out, pY1Out, pX2Out, pY2Out, xLo, yLo, xHi, yHi)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns false if the line is entirely offscreen.
        </description>
        <retvals>
             retval - 
            pX1 - 
            pY1 - 
            pX2 - 
            pY2 - 
        </retvals>
        <parameters>
            xLo - 
            xLo - 
            xLo - 
            xLo - 
            xLo - 
            yLo - 
            xHi - 
            yHi - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Loop_OnArrow</slug>
        <title>Loop_OnArrow</title>
        <functioncall prog_lang="cpp">bool Loop_OnArrow(ReaProject* project, int direction)</functioncall>
        <functioncall prog_lang="eel">bool Loop_OnArrow(ReaProject project, int direction)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.Loop_OnArrow(ReaProject project, integer direction)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_Loop_OnArrow(ReaProject project, Int direction)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Move the loop selection left or right in steps according to snap-settings(when snap is enabled).
        </description>
        <retvals>
            boolean - true, snap is enabled; false, snap is disabled
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            project - the project to be checked for. 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            direction - the direction to move; negative values, move towards start of project; positive values, move towards end of project; 0, keep position
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, loop, on arrow, move, selection, snap</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Main_OnCommand</slug>
        <title>Main_OnCommand</title>
        <functioncall prog_lang="cpp">void Main_OnCommand(int command, int flag)</functioncall>
        <functioncall prog_lang="eel">Main_OnCommand(int command, int flag)</functioncall>
        <functioncall prog_lang="lua">reaper.Main_OnCommand(integer command, integer flag)</functioncall>
        <functioncall prog_lang="python">RPR_Main_OnCommand(Int command, Int flag)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see [NamedCommandLookup](#NamedCommandLookup)().
            See [Main_OnCommandEx](#Main_OnCommandEx).
        </description>
        <parameters>
            command -  the command-id of the action, you want to run
            flag - set to 0
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, run, command, action, script</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Main_OnCommandEx</slug>
        <title>Main_OnCommandEx</title>
        <functioncall prog_lang="cpp">void Main_OnCommandEx(int command, int flag, ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">Main_OnCommandEx(int command, int flag, ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.Main_OnCommandEx(integer command, integer flag, ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_Main_OnCommandEx(Int command, Int flag, ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see [NamedCommandLookup](#NamedCommandLookup)().
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            command -  the command-id of the action, you want to run
            flag - 0
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, run, command, action, script, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Main_openProject</slug>
        <title>Main_openProject</title>
        <functioncall prog_lang="cpp">void Main_openProject(const char* name)</functioncall>
        <functioncall prog_lang="eel">Main_openProject("name")</functioncall>
        <functioncall prog_lang="lua">reaper.Main_openProject(string name)</functioncall>
        <functioncall prog_lang="python">RPR_Main_openProject(String name)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            opens a project. will prompt the user to save, etc.
            if you pass a .RTrackTemplate file then it adds that to the project instead.
        </description>
        <parameters>
            string name - the path and filename of the project/template you want to open
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, open, project, template, filename</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Main_SaveProject</slug>
        <title>Main_SaveProject</title>
        <functioncall prog_lang="cpp">void Main_SaveProject(ReaProject* proj, bool forceSaveAsInOptional)</functioncall>
        <functioncall prog_lang="eel">Main_SaveProject(ReaProject proj, bool forceSaveAsIn)</functioncall>
        <functioncall prog_lang="lua">reaper.Main_SaveProject(ReaProject proj, boolean forceSaveAsIn)</functioncall>
        <functioncall prog_lang="python">RPR_Main_SaveProject(ReaProject proj, Boolean forceSaveAsInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Save the project.
            Optional with a save-dialog.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            forceSaveAsIn - false, save the project; true, open save-file-dialog first
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, save, project, save dialog</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Main_UpdateLoopInfo</slug>
        <title>Main_UpdateLoopInfo</title>
        <functioncall prog_lang="cpp">void Main_UpdateLoopInfo(int ignoremask)</functioncall>
        <functioncall prog_lang="eel">Main_UpdateLoopInfo(int ignoremask)</functioncall>
        <functioncall prog_lang="lua">reaper.Main_UpdateLoopInfo(integer ignoremask)</functioncall>
        <functioncall prog_lang="python">RPR_Main_UpdateLoopInfo(Int ignoremask)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            ignoremask - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MarkProjectDirty</slug>
        <title>MarkProjectDirty</title>
        <functioncall prog_lang="cpp">void MarkProjectDirty(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">MarkProjectDirty(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.MarkProjectDirty(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_MarkProjectDirty(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, need save, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MarkTrackItemsDirty</slug>
        <title>MarkTrackItemsDirty</title>
        <functioncall prog_lang="cpp">void MarkTrackItemsDirty(MediaTrack* track, MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">MarkTrackItemsDirty(MediaTrack track, MediaItem item)</functioncall>
        <functioncall prog_lang="lua">reaper.MarkTrackItemsDirty(MediaTrack track, MediaItem item)</functioncall>
        <functioncall prog_lang="python">RPR_MarkTrackItemsDirty(MediaTrack track, MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            If track is supplied, item is ignored
        </description>
        <parameters>
            track - the MediaTrack that you want to mark as dirty
            item - if no MediaTrack is given, use this MediaItem to mark as dirty
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags>miscellaneous, track, item, dirty</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Master_GetPlayRate</slug>
        <title>Master_GetPlayRate</title>
        <functioncall prog_lang="cpp">double Master_GetPlayRate(ReaProject* project)</functioncall>
        <functioncall prog_lang="eel">double Master_GetPlayRate(ReaProject project)</functioncall>
        <functioncall prog_lang="lua">number = reaper.Master_GetPlayRate(ReaProject project)</functioncall>
        <functioncall prog_lang="python">Float RPR_Master_GetPlayRate(ReaProject project)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the playrate of the project.
        </description>
        <retvals>
            number - the playrate of the project, between 0.25 and 10.0
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            project - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, get, playrate</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Master_GetPlayRateAtTime</slug>
        <title>Master_GetPlayRateAtTime</title>
        <functioncall prog_lang="cpp">double Master_GetPlayRateAtTime(double time_s, ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">double Master_GetPlayRateAtTime(time_s, ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">number = reaper.Master_GetPlayRateAtTime(number time_s, ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Float RPR_Master_GetPlayRateAtTime(Float time_s, ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            time_s - 
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Master_GetTempo</slug>
        <title>Master_GetTempo</title>
        <functioncall prog_lang="cpp">double Master_GetTempo()</functioncall>
        <functioncall prog_lang="eel">double Master_GetTempo()</functioncall>
        <functioncall prog_lang="lua">number = reaper.Master_GetTempo()</functioncall>
        <functioncall prog_lang="python">Float RPR_Master_GetTempo()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            number - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Master_NormalizePlayRate</slug>
        <title>Master_NormalizePlayRate</title>
        <functioncall prog_lang="cpp">double Master_NormalizePlayRate(double playrate, bool isnormalized)</functioncall>
        <functioncall prog_lang="eel">double Master_NormalizePlayRate(playrate, bool isnormalized)</functioncall>
        <functioncall prog_lang="lua">number = reaper.Master_NormalizePlayRate(number playrate, boolean isnormalized)</functioncall>
        <functioncall prog_lang="python">Float RPR_Master_NormalizePlayRate(Float playrate, Boolean isnormalized)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            playrate - 
            isnormalized - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Master_NormalizeTempo</slug>
        <title>Master_NormalizeTempo</title>
        <functioncall prog_lang="cpp">double Master_NormalizeTempo(double bpm, bool isnormalized)</functioncall>
        <functioncall prog_lang="eel">double Master_NormalizeTempo(bpm, bool isnormalized)</functioncall>
        <functioncall prog_lang="lua">number = reaper.Master_NormalizeTempo(number bpm, boolean isnormalized)</functioncall>
        <functioncall prog_lang="python">Float RPR_Master_NormalizeTempo(Float bpm, Boolean isnormalized)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            bpm - 
            isnormalized - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MB</slug>
        <title>MB</title>
        <functioncall prog_lang="cpp">int MB(const char* msg, const char* title, int type)</functioncall>
        <functioncall prog_lang="eel">int MB("msg", "title", int type)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.MB(string msg, string title, integer type)</functioncall>
        <functioncall prog_lang="python">Int RPR_MB(String msg, String title, Int type)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Shows Messagebox with user-clickable buttons.           
        </description>
        <retvals>
            integer - the button pressed by the user
                    -1, OK
                    -2, CANCEL
                    -3, ABORT
                    -4, RETRY
                    -5, IGNORE
                    -6, YES
                    -7, NO
        </retvals>
        <parameters>
            msg - the message, that shall be shown in messagebox
            title - the title of the messagebox
            type - which buttons shall be shown in the messagebox
                -0, OK
                -1, OK CANCEL
                -2, ABORT RETRY IGNORE
                -3, YES NO CANCEL
                -4, YES NO
                -5, RETRY CANCEL
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>user, interface, input, dialog, messagebox</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MediaItemDescendsFromTrack</slug>
        <title>MediaItemDescendsFromTrack</title>
        <functioncall prog_lang="cpp">int MediaItemDescendsFromTrack(MediaItem* item, MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int RPR_MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            item - 
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_CountEvts</slug>
        <title>MIDI_CountEvts</title>
        <functioncall prog_lang="cpp">int MIDI_CountEvts(MediaItem_Take* take, int* notecntOut, int* ccevtcntOut, int* textsyxevtcntOut)</functioncall>
        <functioncall prog_lang="eel">int MIDI_CountEvts(MediaItem_Take take, int &amp;notecnt, int &amp;ccevtcnt, int &amp;textsyxevtcnt)</functioncall>
        <functioncall prog_lang="lua">integer retval, number notecnt, number ccevtcnt, number textsyxevtcnt = reaper.MIDI_CountEvts(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int notecntOut, Int ccevtcntOut, Int textsyxevtcntOut) = RPR_MIDI_CountEvts(take, notecntOut, ccevtcntOut, textsyxevtcntOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Count the number of notes, CC events, and text/sysex events in a given MIDI item.
        </description>
        <retvals>
             retval - 
            notecnt - 
            ccevtcnt - 
            textsyxevtcnt - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_DeleteCC</slug>
        <title>MIDI_DeleteCC</title>
        <functioncall prog_lang="cpp">bool MIDI_DeleteCC(MediaItem_Take* take, int ccidx)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_DeleteCC(MediaItem_Take take, int ccidx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_DeleteCC(MediaItem_Take take, integer ccidx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_DeleteCC(MediaItem_Take take, Int ccidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Delete a MIDI CC event.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            ccidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_DeleteEvt</slug>
        <title>MIDI_DeleteEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_DeleteEvt(MediaItem_Take* take, int evtidx)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_DeleteEvt(MediaItem_Take take, int evtidx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_DeleteEvt(MediaItem_Take take, integer evtidx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_DeleteEvt(MediaItem_Take take, Int evtidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Delete a MIDI event.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            evtidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_DeleteNote</slug>
        <title>MIDI_DeleteNote</title>
        <functioncall prog_lang="cpp">bool MIDI_DeleteNote(MediaItem_Take* take, int noteidx)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_DeleteNote(MediaItem_Take take, int noteidx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_DeleteNote(MediaItem_Take take, integer noteidx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_DeleteNote(MediaItem_Take take, Int noteidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Delete a MIDI note.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            noteidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_DeleteTextSysexEvt</slug>
        <title>MIDI_DeleteTextSysexEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_DeleteTextSysexEvt(MediaItem_Take* take, int textsyxevtidx)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_DeleteTextSysexEvt(MediaItem_Take take, int textsyxevtidx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_DeleteTextSysexEvt(MediaItem_Take take, integer textsyxevtidx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_DeleteTextSysexEvt(MediaItem_Take take, Int textsyxevtidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Delete a MIDI text or sysex event.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            textsyxevtidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_EnumSelCC</slug>
        <title>MIDI_EnumSelCC</title>
        <functioncall prog_lang="cpp">int MIDI_EnumSelCC(MediaItem_Take* take, int ccidx)</functioncall>
        <functioncall prog_lang="eel">int MIDI_EnumSelCC(MediaItem_Take take, int ccidx)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.MIDI_EnumSelCC(MediaItem_Take take, integer ccidx)</functioncall>
        <functioncall prog_lang="python">Int RPR_MIDI_EnumSelCC(MediaItem_Take take, Int ccidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            take - 
            ccidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_EnumSelEvts</slug>
        <title>MIDI_EnumSelEvts</title>
        <functioncall prog_lang="cpp">int MIDI_EnumSelEvts(MediaItem_Take* take, int evtidx)</functioncall>
        <functioncall prog_lang="eel">int MIDI_EnumSelEvts(MediaItem_Take take, int evtidx)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.MIDI_EnumSelEvts(MediaItem_Take take, integer evtidx)</functioncall>
        <functioncall prog_lang="python">Int RPR_MIDI_EnumSelEvts(MediaItem_Take take, Int evtidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            take - 
            evtidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_EnumSelNotes</slug>
        <title>MIDI_EnumSelNotes</title>
        <functioncall prog_lang="cpp">int MIDI_EnumSelNotes(MediaItem_Take* take, int noteidx)</functioncall>
        <functioncall prog_lang="eel">int MIDI_EnumSelNotes(MediaItem_Take take, int noteidx)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.MIDI_EnumSelNotes(MediaItem_Take take, integer noteidx)</functioncall>
        <functioncall prog_lang="python">Int RPR_MIDI_EnumSelNotes(MediaItem_Take take, Int noteidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            take - 
            noteidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_EnumSelTextSysexEvts</slug>
        <title>MIDI_EnumSelTextSysexEvts</title>
        <functioncall prog_lang="cpp">int MIDI_EnumSelTextSysexEvts(MediaItem_Take* take, int textsyxidx)</functioncall>
        <functioncall prog_lang="eel">int MIDI_EnumSelTextSysexEvts(MediaItem_Take take, int textsyxidx)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.MIDI_EnumSelTextSysexEvts(MediaItem_Take take, integer textsyxidx)</functioncall>
        <functioncall prog_lang="python">Int RPR_MIDI_EnumSelTextSysexEvts(MediaItem_Take take, Int textsyxidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            take - 
            textsyxidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetAllEvts</slug>
        <title>MIDI_GetAllEvts</title>
        <functioncall prog_lang="cpp">bool MIDI_GetAllEvts(MediaItem_Take* take, char* bufNeedBig, int* bufNeedBig_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetAllEvts(MediaItem_Take take, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.MIDI_GetAllEvts(MediaItem_Take take, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, String bufNeedBig, Int bufNeedBig_sz) = RPR_MIDI_GetAllEvts(take, bufNeedBig, bufNeedBig_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg\[\] }. offset: MIDI ticks from previous event, flag: &amp;1=selected &amp;2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See [MIDI_SetAllEvts](#MIDI_SetAllEvts).
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetCC</slug>
        <title>MIDI_GetCC</title>
        <functioncall prog_lang="cpp">bool MIDI_GetCC(MediaItem_Take* take, int ccidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, int* chanmsgOut, int* chanOut, int* msg2Out, int* msg3Out)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetCC(MediaItem_Take take, int ccidx, bool &amp;selected, bool &amp;muted, &amp;ppqpos, int &amp;chanmsg, int &amp;chan, int &amp;msg2, int &amp;msg3)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean selected, boolean muted, number ppqpos, number chanmsg, number chan, number msg2, number msg3 = reaper.MIDI_GetCC(MediaItem_Take take, integer ccidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int ccidx, Boolean selectedOut, Boolean mutedOut, Float ppqposOut, Int chanmsgOut, Int chanOut, Int msg2Out, Int msg3Out) = RPR_MIDI_GetCC(take, ccidx, selectedOut, mutedOut, ppqposOut, chanmsgOut, chanOut, msg2Out, msg3Out)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get MIDI CC event properties.
        </description>
        <retvals>
             retval - 
            selected - 
            muted - 
            ppqpos - 
            chanmsg - 
            chan - 
            msg2 - 
            msg3 - 
        </retvals>
        <parameters>
            take - 
            ccidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetEvt</slug>
        <title>MIDI_GetEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_GetEvt(MediaItem_Take* take, int evtidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, char* msg, int* msg_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetEvt(MediaItem_Take take, int evtidx, bool &amp;selected, bool &amp;muted, &amp;ppqpos, #msg)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean selected, boolean muted, number ppqpos, string msg = reaper.MIDI_GetEvt(MediaItem_Take take, integer evtidx, boolean selected, boolean muted, number ppqpos, string msg)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int evtidx, Boolean selectedOut, Boolean mutedOut, Float ppqposOut, String msg, Int msg_sz) = RPR_MIDI_GetEvt(take, evtidx, selectedOut, mutedOut, ppqposOut, msg, msg_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get MIDI event properties.
        </description>
        <retvals>
             retval - 
            selected - 
            muted - 
            ppqpos - 
            msg - 
        </retvals>
        <parameters>
            take - 
            evtidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetGrid</slug>
        <title>MIDI_GetGrid</title>
        <functioncall prog_lang="cpp">double MIDI_GetGrid(MediaItem_Take* take, double* swingOutOptional, double* noteLenOutOptional)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetGrid(MediaItem_Take take, optional &amp;swing, optional &amp;noteLen)</functioncall>
        <functioncall prog_lang="lua">number retval, optional number swing, optional number noteLen = reaper.MIDI_GetGrid(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Float retval, MediaItem_Take take, Float swingOutOptional, Float noteLenOutOptional) = RPR_MIDI_GetGrid(take, swingOutOptional, noteLenOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.
        </description>
        <retvals>
             retval - 
            swing - 
            noteLen - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetHash</slug>
        <title>MIDI_GetHash</title>
        <functioncall prog_lang="cpp">bool MIDI_GetHash(MediaItem_Take* take, bool notesonly, char* hash, int hash_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetHash(MediaItem_Take take, bool notesonly, #hash)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string hash = reaper.MIDI_GetHash(MediaItem_Take take, boolean notesonly, string hash)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean notesonly, String hash, Int hash_sz) = RPR_MIDI_GetHash(take, notesonly, hash, hash_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See [MIDI_GetTrackHash](#MIDI_GetTrackHash)
        </description>
        <retvals>
             retval - 
            hash - 
        </retvals>
        <parameters>
            take - 
            notesonly - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetNote</slug>
        <title>MIDI_GetNote</title>
        <functioncall prog_lang="cpp">bool MIDI_GetNote(MediaItem_Take* take, int noteidx, bool* selectedOut, bool* mutedOut, double* startppqposOut, double* endppqposOut, int* chanOut, int* pitchOut, int* velOut)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetNote(MediaItem_Take take, int noteidx, bool &amp;selected, bool &amp;muted, &amp;startppqpos, &amp;endppqpos, int &amp;chan, int &amp;pitch, int &amp;vel)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean selected, boolean muted, number startppqpos, number endppqpos, number chan, number pitch, number vel = reaper.MIDI_GetNote(MediaItem_Take take, integer noteidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int noteidx, Boolean selectedOut, Boolean mutedOut, Float startppqposOut, Float endppqposOut, Int chanOut, Int pitchOut, Int velOut) = RPR_MIDI_GetNote(take, noteidx, selectedOut, mutedOut, startppqposOut, endppqposOut, chanOut, pitchOut, velOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get MIDI note properties.
        </description>
        <retvals>
             retval - 
            selected - 
            muted - 
            startppqpos - 
            endppqpos - 
            chan - 
            pitch - 
            vel - 
        </retvals>
        <parameters>
            take - 
            noteidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetPPQPos_EndOfMeasure</slug>
        <title>MIDI_GetPPQPos_EndOfMeasure</title>
        <functioncall prog_lang="cpp">double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take* take, double ppqpos)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, ppqpos)</functioncall>
        <functioncall prog_lang="lua">number = reaper.MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, number ppqpos)</functioncall>
        <functioncall prog_lang="python">Float RPR_MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, Float ppqpos)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the MIDI tick (ppq) position corresponding to the end of the measure.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            take - 
            ppqpos - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetPPQPos_StartOfMeasure</slug>
        <title>MIDI_GetPPQPos_StartOfMeasure</title>
        <functioncall prog_lang="cpp">double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take* take, double ppqpos)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, ppqpos)</functioncall>
        <functioncall prog_lang="lua">number = reaper.MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, number ppqpos)</functioncall>
        <functioncall prog_lang="python">Float RPR_MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, Float ppqpos)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the MIDI tick (ppq) position corresponding to the start of the measure.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            take - 
            ppqpos - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetPPQPosFromProjQN</slug>
        <title>MIDI_GetPPQPosFromProjQN</title>
        <functioncall prog_lang="cpp">double MIDI_GetPPQPosFromProjQN(MediaItem_Take* take, double projqn)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetPPQPosFromProjQN(MediaItem_Take take, projqn)</functioncall>
        <functioncall prog_lang="lua">number = reaper.MIDI_GetPPQPosFromProjQN(MediaItem_Take take, number projqn)</functioncall>
        <functioncall prog_lang="python">Float RPR_MIDI_GetPPQPosFromProjQN(MediaItem_Take take, Float projqn)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            take - 
            projqn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetPPQPosFromProjTime</slug>
        <title>MIDI_GetPPQPosFromProjTime</title>
        <functioncall prog_lang="cpp">double MIDI_GetPPQPosFromProjTime(MediaItem_Take* take, double projtime)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetPPQPosFromProjTime(MediaItem_Take take, projtime)</functioncall>
        <functioncall prog_lang="lua">number = reaper.MIDI_GetPPQPosFromProjTime(MediaItem_Take take, number projtime)</functioncall>
        <functioncall prog_lang="python">Float RPR_MIDI_GetPPQPosFromProjTime(MediaItem_Take take, Float projtime)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            take - 
            projtime - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetProjQNFromPPQPos</slug>
        <title>MIDI_GetProjQNFromPPQPos</title>
        <functioncall prog_lang="cpp">double MIDI_GetProjQNFromPPQPos(MediaItem_Take* take, double ppqpos)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetProjQNFromPPQPos(MediaItem_Take take, ppqpos)</functioncall>
        <functioncall prog_lang="lua">number = reaper.MIDI_GetProjQNFromPPQPos(MediaItem_Take take, number ppqpos)</functioncall>
        <functioncall prog_lang="python">Float RPR_MIDI_GetProjQNFromPPQPos(MediaItem_Take take, Float ppqpos)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            take - 
            ppqpos - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetProjTimeFromPPQPos</slug>
        <title>MIDI_GetProjTimeFromPPQPos</title>
        <functioncall prog_lang="cpp">double MIDI_GetProjTimeFromPPQPos(MediaItem_Take* take, double ppqpos)</functioncall>
        <functioncall prog_lang="eel">double MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, ppqpos)</functioncall>
        <functioncall prog_lang="lua">number = reaper.MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, number ppqpos)</functioncall>
        <functioncall prog_lang="python">Float RPR_MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, Float ppqpos)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            take - 
            ppqpos - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetScale</slug>
        <title>MIDI_GetScale</title>
        <functioncall prog_lang="cpp">bool MIDI_GetScale(MediaItem_Take* take, int* rootOut, int* scaleOut, char* name, int name_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetScale(MediaItem_Take take, int &amp;root, int &amp;scale, #name)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number root, number scale, string name = reaper.MIDI_GetScale(MediaItem_Take take, number root, number scale, string name)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int rootOut, Int scaleOut, String name, Int name_sz) = RPR_MIDI_GetScale(take, rootOut, scaleOut, name, name_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &amp;0x1=root, &amp;0x2=minor 2nd, &amp;0x4=major 2nd, &amp;0x8=minor 3rd, &amp;0xF=fourth, etc.
        </description>
        <retvals>
             retval - 
            root - 
            scale - 
            name - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetTextSysexEvt</slug>
        <title>MIDI_GetTextSysexEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_GetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, bool* selectedOutOptional, bool* mutedOutOptional, double* ppqposOutOptional, int* typeOutOptional, char* msgOptional, int* msgOptional_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetTextSysexEvt(MediaItem_Take take, int textsyxevtidx, optional bool &amp;selected, optional bool &amp;muted, optional &amp;ppqpos, optional int &amp;type, optional #msg)</functioncall>
        <functioncall prog_lang="lua">boolean retval, optional boolean selected, optional boolean muted, optional number ppqpos, optional number type, optional string msg = reaper.MIDI_GetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selected, optional boolean muted, optional number ppqpos, optional number type, optional string msg)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int textsyxevtidx, Boolean selectedOutOptional, Boolean mutedOutOptional, Float ppqposOutOptional, Int typeOutOptional, String msgOptional, Int msgOptional_sz) = RPR_MIDI_GetTextSysexEvt(take, textsyxevtidx, selectedOutOptional, mutedOutOptional, ppqposOutOptional, typeOutOptional, msgOptional, msgOptional_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.
        </description>
        <retvals>
             retval - 
            selected - 
            muted - 
            ppqpos - 
            type - 
            string msg - 
        </retvals>
        <parameters>
            take - 
            textsyxevtidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_GetTrackHash</slug>
        <title>MIDI_GetTrackHash</title>
        <functioncall prog_lang="cpp">bool MIDI_GetTrackHash(MediaTrack* track, bool notesonly, char* hash, int hash_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_GetTrackHash(MediaTrack track, bool notesonly, #hash)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string hash = reaper.MIDI_GetTrackHash(MediaTrack track, boolean notesonly, string hash)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Boolean notesonly, String hash, Int hash_sz) = RPR_MIDI_GetTrackHash(track, notesonly, hash, hash_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See [MIDI_GetHash](#MIDI_GetHash)
        </description>
        <retvals>
             retval - 
            hash - 
        </retvals>
        <parameters>
            track - 
            notesonly - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_InsertCC</slug>
        <title>MIDI_InsertCC</title>
        <functioncall prog_lang="cpp">bool MIDI_InsertCC(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int chanmsg, int chan, int msg2, int msg3)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_InsertCC(MediaItem_Take take, bool selected, bool muted, ppqpos, int chanmsg, int chan, int msg2, int msg3)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_InsertCC(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer chanmsg, integer chan, integer msg2, integer msg3)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_InsertCC(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, Int chanmsg, Int chan, Int msg2, Int msg3)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Insert a new MIDI CC event.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            selected - 
            muted - 
            ppqpos - 
            chanmsg - 
            chan - 
            msg2 - 
            msg3 - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_InsertEvt</slug>
        <title>MIDI_InsertEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_InsertEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, const char* bytestr, int bytestr_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_InsertEvt(MediaItem_Take take, bool selected, bool muted, ppqpos, "bytestr")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_InsertEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, string bytestr)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_InsertEvt(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, String bytestr, Int bytestr_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Insert a new MIDI event.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            selected - 
            muted - 
            ppqpos - 
            bytestr - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_InsertNote</slug>
        <title>MIDI_InsertNote</title>
        <functioncall prog_lang="cpp">bool MIDI_InsertNote(MediaItem_Take* take, bool selected, bool muted, double startppqpos, double endppqpos, int chan, int pitch, int vel, const bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_InsertNote(MediaItem_Take take, bool selected, bool muted, startppqpos, endppqpos, int chan, int pitch, int vel, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_InsertNote(MediaItem_Take take, boolean selected, boolean muted, number startppqpos, number endppqpos, integer chan, integer pitch, integer vel, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_InsertNote(MediaItem_Take take, Boolean selected, Boolean muted, Float startppqpos, Float endppqpos, Int chan, Int pitch, Int vel, const bool noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            selected - 
            muted - 
            startppqpos - 
            endppqpos - 
            chan - 
            pitch - 
            vel - 
            noSortIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_InsertTextSysexEvt</slug>
        <title>MIDI_InsertTextSysexEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_InsertTextSysexEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int type, const char* bytestr, int bytestr_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_InsertTextSysexEvt(MediaItem_Take take, bool selected, bool muted, ppqpos, int type, "bytestr")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_InsertTextSysexEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer type, string bytestr)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_InsertTextSysexEvt(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, Int type, String bytestr, Int bytestr_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            selected - 
            muted - 
            ppqpos - 
            type - 
            bytestr - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>midi_reinit</slug>
        <title>midi_reinit</title>
        <functioncall prog_lang="cpp">void midi_reinit()</functioncall>
        <functioncall prog_lang="eel">midi_reinit()</functioncall>
        <functioncall prog_lang="lua">reaper.midi_reinit()</functioncall>
        <functioncall prog_lang="python">RPR_midi_reinit()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Reset all MIDI devices
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SelectAll</slug>
        <title>MIDI_SelectAll</title>
        <functioncall prog_lang="cpp">void MIDI_SelectAll(MediaItem_Take* take, bool select)</functioncall>
        <functioncall prog_lang="eel">MIDI_SelectAll(MediaItem_Take take, bool select)</functioncall>
        <functioncall prog_lang="lua">reaper.MIDI_SelectAll(MediaItem_Take take, boolean select)</functioncall>
        <functioncall prog_lang="python">RPR_MIDI_SelectAll(MediaItem_Take take, Boolean select)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Select or deselect all MIDI content.
        </description>
        <parameters>
            take - 
            select - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetAllEvts</slug>
        <title>MIDI_SetAllEvts</title>
        <functioncall prog_lang="cpp">bool MIDI_SetAllEvts(MediaItem_Take* take, const char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetAllEvts(MediaItem_Take take, "buf")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_SetAllEvts(MediaItem_Take take, string buf)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_SetAllEvts(MediaItem_Take take, String buf, Int buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg\[\] }. offset: MIDI ticks from previous event, flag: &amp;1=selected &amp;2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See [MIDI_GetAllEvts](#MIDI_GetAllEvts).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            buf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetCC</slug>
        <title>MIDI_SetCC</title>
        <functioncall prog_lang="cpp">bool MIDI_SetCC(MediaItem_Take* take, int ccidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* chanmsgInOptional, const int* chanInOptional, const int* msg2InOptional, const int* msg3InOptional, const bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetCC(MediaItem_Take take, int ccidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional int chanmsgIn, optional int chanIn, optional int msg2In, optional int msg3In, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_SetCC(MediaItem_Take take, integer ccidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional number chanmsgIn, optional number chanIn, optional number msg2In, optional number msg3In, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_SetCC(MediaItem_Take take, Int ccidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, const int chanmsgInOptional, const int chanInOptional, const int msg2InOptional, const int msg3InOptional, const bool noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            ccidx - 
            selectedIn - 
            mutedIn - 
            chanmsgIn - 
            chanmsgIn - 
            chanIn - 
            msg2In - 
            msg3In - 
            noSortIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetEvt</slug>
        <title>MIDI_SetEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_SetEvt(MediaItem_Take* take, int evtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetEvt(MediaItem_Take take, int evtidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional "msg", optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_SetEvt(MediaItem_Take take, integer evtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional string msg, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_SetEvt(MediaItem_Take take, Int evtidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, String msgOptional, Int msgOptional_sz, const bool noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set MIDI event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            evtidx - 
            selectedIn - 
            mutedIn - 
            msg - 
            ppqposIn - 
            noSortIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetItemExtents</slug>
        <title>MIDI_SetItemExtents</title>
        <functioncall prog_lang="cpp">bool MIDI_SetItemExtents(MediaItem* item, double startQN, double endQN)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetItemExtents(MediaItem item, startQN, endQN)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_SetItemExtents(MediaItem item, number startQN, number endQN)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_SetItemExtents(MediaItem item, Float startQN, Float endQN)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set the start/end positions of a media item that contains a MIDI take.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            item - 
            startQN - 
            endQN - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetNote</slug>
        <title>MIDI_SetNote</title>
        <functioncall prog_lang="cpp">bool MIDI_SetNote(MediaItem_Take* take, int noteidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* startppqposInOptional, const double* endppqposInOptional, const int* chanInOptional, const int* pitchInOptional, const int* velInOptional, const bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetNote(MediaItem_Take take, int noteidx, optional bool selectedIn, optional bool mutedIn, optional startppqposIn, optional endppqposIn, optional int chanIn, optional int pitchIn, optional int velIn, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_SetNote(MediaItem_Take take, integer noteidx, optional boolean selectedIn, optional boolean mutedIn, optional number startppqposIn, optional number endppqposIn, optional number chanIn, optional number pitchIn, optional number velIn, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_SetNote(MediaItem_Take take, Int noteidx, const bool selectedInOptional, const bool mutedInOptional, const double startppqposInOptional, const double endppqposInOptional, const int chanInOptional, const int pitchInOptional, const int velInOptional, const bool noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            noteidx - 
            selectedIn - 
            mutedIn - 
            chanIn - 
            chanIn - 
            chanIn - 
            pitchIn - 
            velIn - 
            noSortIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_SetTextSysexEvt</slug>
        <title>MIDI_SetTextSysexEvt</title>
        <functioncall prog_lang="cpp">bool MIDI_SetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* typeInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool MIDI_SetTextSysexEvt(MediaItem_Take take, int textsyxevtidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional int typeIn, optional "msg", optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDI_SetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional number typeIn, optional string msg, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDI_SetTextSysexEvt(MediaItem_Take take, Int textsyxevtidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, const int typeInOptional, String msgOptional, Int msgOptional_sz, const bool noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types. set noSort if setting multiple events, then call MIDI_Sort when done.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            textsyxevtidx - 
            selectedIn - 
            mutedIn - 
            typeIn - 
            typeIn - 
            msg - 
            noSortIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDI_Sort</slug>
        <title>MIDI_Sort</title>
        <functioncall prog_lang="cpp">void MIDI_Sort(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">MIDI_Sort(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">reaper.MIDI_Sort(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">RPR_MIDI_Sort(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.
        </description>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_GetActive</slug>
        <title>MIDIEditor_GetActive</title>
        <functioncall prog_lang="cpp">HWND MIDIEditor_GetActive()</functioncall>
        <functioncall prog_lang="eel">HWND MIDIEditor_GetActive()</functioncall>
        <functioncall prog_lang="lua">HWND = reaper.MIDIEditor_GetActive()</functioncall>
        <functioncall prog_lang="python">HWND RPR_MIDIEditor_GetActive()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            get a pointer to the focused MIDI editor window
            see [MIDIEditor_GetMode](#MIDIEditor_GetMode), [MIDIEditor_OnCommand](#MIDIEditor_OnCommand)
        </description>
        <retvals>
            HWND - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_GetMode</slug>
        <title>MIDIEditor_GetMode</title>
        <functioncall prog_lang="cpp">int MIDIEditor_GetMode(HWND midieditor)</functioncall>
        <functioncall prog_lang="eel">int MIDIEditor_GetMode(HWND midieditor)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.MIDIEditor_GetMode(HWND midieditor)</functioncall>
        <functioncall prog_lang="python">Int RPR_MIDIEditor_GetMode(HWND midieditor)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)
            see [MIDIEditor_GetActive](#MIDIEditor_GetActive), [MIDIEditor_OnCommand](#MIDIEditor_OnCommand)
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            midieditor - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_GetSetting_int</slug>
        <title>MIDIEditor_GetSetting_int</title>
        <functioncall prog_lang="cpp">int MIDIEditor_GetSetting_int(HWND midieditor, const char* setting_desc)</functioncall>
        <functioncall prog_lang="eel">int MIDIEditor_GetSetting_int(HWND midieditor, "setting_desc")</functioncall>
        <functioncall prog_lang="lua">integer = reaper.MIDIEditor_GetSetting_int(HWND midieditor, string setting_desc)</functioncall>
        <functioncall prog_lang="python">Int RPR_MIDIEditor_GetSetting_int(HWND midieditor, String setting_desc)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get settings from a MIDI editor. setting_desc can be:
                snap_enabled: returns 0 or 1
                active_note_row: returns 0-127
                last_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity
                default_note_vel: returns 0-127
                default_note_chan: returns 0-15
                default_note_len: returns default length in MIDI ticks
                scale_enabled: returns 0-1
                scale_root: returns 0-12 (0=C)
                if setting_desc is unsupported, the function returns -1.
                See [MIDIEditor_GetActive](#MIDIEditor_GetActive), [MIDIEditor_GetSetting_str](#MIDIEditor_GetSetting_str)
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            midieditor - 
            setting_desc - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_GetSetting_str</slug>
        <title>MIDIEditor_GetSetting_str</title>
        <functioncall prog_lang="cpp">bool MIDIEditor_GetSetting_str(HWND midieditor, const char* setting_desc, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool MIDIEditor_GetSetting_str(HWND midieditor, "setting_desc", #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.MIDIEditor_GetSetting_str(HWND midieditor, string setting_desc, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, HWND midieditor, String setting_desc, String buf, Int buf_sz) = RPR_MIDIEditor_GetSetting_str(midieditor, setting_desc, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get settings from a MIDI editor. setting_desc can be:
            last_clicked_cc_lane: returns text description ("velocity", "pitch", etc)
            scale: returns the scale record, for example "102034050607" for a major scale
            if setting_desc is unsupported, the function returns false.
            See [MIDIEditor_GetActive](#MIDIEditor_GetActive), [MIDIEditor_GetSetting_int](#MIDIEditor_GetSetting_int)
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            midieditor - 
            setting_desc - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_GetTake</slug>
        <title>MIDIEditor_GetTake</title>
        <functioncall prog_lang="cpp">MediaItem_Take* MIDIEditor_GetTake(HWND midieditor)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take MIDIEditor_GetTake(HWND midieditor)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take = reaper.MIDIEditor_GetTake(HWND midieditor)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take RPR_MIDIEditor_GetTake(HWND midieditor)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get the take that is currently being edited in this MIDI editor
        </description>
        <retvals>
            MediaItem_Take - 
        </retvals>
        <parameters>
            midieditor - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_LastFocused_OnCommand</slug>
        <title>MIDIEditor_LastFocused_OnCommand</title>
        <functioncall prog_lang="cpp">bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)</functioncall>
        <functioncall prog_lang="eel">bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDIEditor_LastFocused_OnCommand(integer command_id, boolean islistviewcommand)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDIEditor_LastFocused_OnCommand(Int command_id, Boolean islistviewcommand)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.
            see [MIDIEditor_OnCommand](#MIDIEditor_OnCommand)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            command_id - 
            islistviewcommand - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MIDIEditor_OnCommand</slug>
        <title>MIDIEditor_OnCommand</title>
        <functioncall prog_lang="cpp">bool MIDIEditor_OnCommand(HWND midieditor, int command_id)</functioncall>
        <functioncall prog_lang="eel">bool MIDIEditor_OnCommand(HWND midieditor, int command_id)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MIDIEditor_OnCommand(HWND midieditor, integer command_id)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MIDIEditor_OnCommand(HWND midieditor, Int command_id)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).
            see [MIDIEditor_GetActive](#MIDIEditor_GetActive), [MIDIEditor_LastFocused_OnCommand](#MIDIEditor_LastFocused_OnCommand)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            midieditor - 
            command_id - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>mkpanstr</slug>
        <title>mkpanstr</title>
        <functioncall prog_lang="cpp">void mkpanstr(char* strNeed64, double pan)</functioncall>
        <functioncall prog_lang="eel">mkpanstr(#strNeed64, pan)</functioncall>
        <functioncall prog_lang="lua">string strNeed64 = reaper.mkpanstr(string strNeed64, number pan)</functioncall>
        <functioncall prog_lang="python">(String strNeed64, Float pan) = RPR_mkpanstr(strNeed64, pan)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            strNeed64 - 
        </retvals>
        <parameters>
            strNeed64 - 
            pan - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>mkvolpanstr</slug>
        <title>mkvolpanstr</title>
        <functioncall prog_lang="cpp">void mkvolpanstr(char* strNeed64, double vol, double pan)</functioncall>
        <functioncall prog_lang="eel">mkvolpanstr(#strNeed64, vol, pan)</functioncall>
        <functioncall prog_lang="lua">string strNeed64 = reaper.mkvolpanstr(string strNeed64, number vol, number pan)</functioncall>
        <functioncall prog_lang="python">(String strNeed64, Float vol, Float pan) = RPR_mkvolpanstr(strNeed64, vol, pan)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            strNeed64 - 
        </retvals>
        <parameters>
            strNeed64 - 
            vol - 
            pan - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>mkvolstr</slug>
        <title>mkvolstr</title>
        <functioncall prog_lang="cpp">void mkvolstr(char* strNeed64, double vol)</functioncall>
        <functioncall prog_lang="eel">mkvolstr(#strNeed64, vol)</functioncall>
        <functioncall prog_lang="lua">string strNeed64 = reaper.mkvolstr(string strNeed64, number vol)</functioncall>
        <functioncall prog_lang="python">(String strNeed64, Float vol) = RPR_mkvolstr(strNeed64, vol)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            strNeed64 - 
        </retvals>
        <parameters>
            strNeed64 - 
            vol - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MoveEditCursor</slug>
        <title>MoveEditCursor</title>
        <functioncall prog_lang="cpp">void MoveEditCursor(double adjamt, bool dosel)</functioncall>
        <functioncall prog_lang="eel">MoveEditCursor(adjamt, bool dosel)</functioncall>
        <functioncall prog_lang="lua">reaper.MoveEditCursor(number adjamt, boolean dosel)</functioncall>
        <functioncall prog_lang="python">RPR_MoveEditCursor(Float adjamt, Boolean dosel)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Moves the Edit Cursor.
        </description>
        <parameters>
            adjamt - move of edit cursor by seconds, relative from the current position. positive-values=forward, negative values=backwards
            dosel - true, create selection from old edit-cursor-position to the new position; false, just move the edit cursor
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, edit, cursor, move</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MoveMediaItemToTrack</slug>
        <title>MoveMediaItemToTrack</title>
        <functioncall prog_lang="cpp">bool MoveMediaItemToTrack(MediaItem* item, MediaTrack* desttr)</functioncall>
        <functioncall prog_lang="eel">bool MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Moves a MediaItem-object to a specific MediaTrack.
            
            Call [UpdateArrange](#UpdateArrange) to update the arrangeview after that.
        </description>
        <retvals>
            boolean - true, if move succeeded; false, if not
        </retvals>
        <parameters>
            item - the MediaItem, that shall be moved
            desttr - the MediaTrack, to which the MediaItem shall be moved to
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, move, item, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>MuteAllTracks</slug>
        <title>MuteAllTracks</title>
        <functioncall prog_lang="cpp">void MuteAllTracks(bool mute)</functioncall>
        <functioncall prog_lang="eel">MuteAllTracks(bool mute)</functioncall>
        <functioncall prog_lang="lua">reaper.MuteAllTracks(boolean mute)</functioncall>
        <functioncall prog_lang="python">RPR_MuteAllTracks(Boolean mute)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Mutes all tracks
        </description>
        <parameters>
            mute - true, mutes all tracks; false, unmutes all tracks
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, mute, tracks, set</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>my_getViewport</slug>
        <title>my_getViewport</title>
        <functioncall prog_lang="cpp">void my_getViewport(RECT* r, const RECT* sr, bool wantWorkArea)</functioncall>
        <functioncall prog_lang="eel">my_getViewport(int &amp;r.left, int &amp;r.top, int &amp;r.right, int &amp;r.bot, int sr.left, int sr.top, int sr.right, int sr.bot, bool wantWorkArea)</functioncall>
        <functioncall prog_lang="lua">integer left, integer top, integer right, integer bottom = reaper.my_getViewport(number r.left, number r.top, number r.right, number r.bot, number sr.left, number sr.top, number sr.right, number sr.bot, boolean wantWorkArea)</functioncall>
        <functioncall prog_lang="python">RPR_my_getViewport(RECT r, const RECT sr, Boolean wantWorkArea)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            With r.??? and sr.??? parameters, you can define coordinates of a rectangle. 
            The function will return the left/top/right/bottom coordinates of the viewport that that rectangle is on/closest to.            
        </description>
        <parameters>
            r.left - left coordinate of the rectangle
            r.top - top coordinate of the rectangle
            r.right - right coordinate of the rectangle
            r.bot - bottom coordinate of the rectangle
            sr.left - left coordinate of the rectangle in multimonitor usecases
            sr.top - top coordinate of the rectangle in multimonitor usecases
            sr.right - right coordinate of the rectangle in multimonitor usecases
            sr.bot - bottom coordinate of the rectangle in mutlimonitor usecases
            wantWorkArea - true, returns workspace only; false, full monitor coordinates of the returned viewport
        </parameters>
        <retvals>
            left - left coordinate of the returned viewport
            top - top coordinate of the returned viewport
            right - right coordinate of the returned viewport
            bottom - bottom coordinate of the returned viewport
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, viewport, multi monitor, get, workarea, full screen resolution</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NamedCommandLookup</slug>
        <title>NamedCommandLookup</title>
        <functioncall prog_lang="cpp">int NamedCommandLookup(const char* command_name)</functioncall>
        <functioncall prog_lang="eel">int NamedCommandLookup("command_name")</functioncall>
        <functioncall prog_lang="lua">integer = reaper.NamedCommandLookup(string command_name)</functioncall>
        <functioncall prog_lang="python">Int RPR_NamedCommandLookup(String command_name)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Get the command ID number for named command that was registered by an extension such as "_SWS_ABOUT" or "_113088d11ae641c193a2b7ede3041ad5" for a ReaScript or a custom action.
            
            see [Main_OnCommand](#Main_OnCommand) for executing actions with command-ID-numbers.
        </description>
        <retvals>
            integer - the command-id-number of the script/action, which can be used to e.g. run the action, toggle actions, refresh toolbars, etc.
        </retvals>
        <parameters>
            command_name - the ActionCommandID of the script/action, whose command-id number you want. Must start with _, eg. "SWS_ABOUT" -> "_SWS_ABOUT"
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, command, id, actioncommandid, lookup</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnPauseButton</slug>
        <title>OnPauseButton</title>
        <functioncall prog_lang="cpp">void OnPauseButton()</functioncall>
        <functioncall prog_lang="eel">OnPauseButton()</functioncall>
        <functioncall prog_lang="lua">reaper.OnPauseButton()</functioncall>
        <functioncall prog_lang="python">RPR_OnPauseButton()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Toggles pause/play during play or pause/rec during recording in the current project.
            When stopped, it will start paused play.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, pause, play, rec, toggle</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnPauseButtonEx</slug>
        <title>OnPauseButtonEx</title>
        <functioncall prog_lang="cpp">void OnPauseButtonEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">OnPauseButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.OnPauseButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_OnPauseButtonEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Toggles pause/play during play or pause/rec during recording in a specific project.
            When stopped, it will start paused play.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, pause, play, rec, toggle, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnPlayButton</slug>
        <title>OnPlayButton</title>
        <functioncall prog_lang="cpp">void OnPlayButton()</functioncall>
        <functioncall prog_lang="eel">OnPlayButton()</functioncall>
        <functioncall prog_lang="lua">reaper.OnPlayButton()</functioncall>
        <functioncall prog_lang="python">RPR_OnPlayButton()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Starts playing at edit-cursor. Will stop recording, when executed during recording.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, play, editcursor, start</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnPlayButtonEx</slug>
        <title>OnPlayButtonEx</title>
        <functioncall prog_lang="cpp">void OnPlayButtonEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">OnPlayButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.OnPlayButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_OnPlayButtonEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Starts playing at edit-cursor. Will stop recording, when executed during recording.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, play, editcursor, start, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnStopButton</slug>
        <title>OnStopButton</title>
        <functioncall prog_lang="cpp">void OnStopButton()</functioncall>
        <functioncall prog_lang="eel">OnStopButton()</functioncall>
        <functioncall prog_lang="lua">reaper.OnStopButton()</functioncall>
        <functioncall prog_lang="python">RPR_OnStopButton()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Stops playing/recording.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, stop, play, recording</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OnStopButtonEx</slug>
        <title>OnStopButtonEx</title>
        <functioncall prog_lang="cpp">void OnStopButtonEx(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">OnStopButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.OnStopButtonEx(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_OnStopButtonEx(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Stops playing/recording.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, stop, play, recording</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OpenColorThemeFile</slug>
        <title>OpenColorThemeFile</title>
        <functioncall prog_lang="cpp">bool OpenColorThemeFile(const char* fn)</functioncall>
        <functioncall prog_lang="eel">bool OpenColorThemeFile("fn")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.OpenColorThemeFile(string fn)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_OpenColorThemeFile(String fn)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Open a different installed theme.
        </description>
        <retvals>
            boolean - true, changing theme worked; false, changing theme didn't work
        </retvals>
        <parameters>
            fn - the path+filename of the color-theme-file, usually with the ".ReaperTheme"-extension
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, theme, load, open, filename</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OpenMediaExplorer</slug>
        <title>OpenMediaExplorer</title>
        <functioncall prog_lang="cpp">HWND OpenMediaExplorer(const char* mediafn, bool play)</functioncall>
        <functioncall prog_lang="eel">HWND OpenMediaExplorer("mediafn", bool play)</functioncall>
        <functioncall prog_lang="lua">HWND = reaper.OpenMediaExplorer(string mediafn, boolean play)</functioncall>
        <functioncall prog_lang="python">HWND RPR_OpenMediaExplorer(String mediafn, Boolean play)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Opens mediafn in the Media Explorer.
        </description>
        <retvals>
            HWND - the window of the Media Explorer
        </retvals>
        <parameters>
            mediafn - the filename, to be opened with the Media Explorer
            play - true, start/toggle playing immediately; false, just select file without playing
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, media explorer, open, filename, audio, play</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>OscLocalMessageToHost</slug>
        <title>OscLocalMessageToHost</title>
        <functioncall prog_lang="cpp">void OscLocalMessageToHost(const char* message, const double* valueInOptional)</functioncall>
        <functioncall prog_lang="eel">OscLocalMessageToHost("message", optional valueIn)</functioncall>
        <functioncall prog_lang="lua">reaper.OscLocalMessageToHost(string message, optional number valueIn)</functioncall>
        <functioncall prog_lang="python">RPR_OscLocalMessageToHost(String message, const double valueInOptional)</functioncall>        
        <description prog_lang="*">
            Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns. Only supported if control surface support was enabled when installing REAPER.
        </description>
        <parameters>
            message - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            AudioMidi Devicemanagement
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>parse_timestr</slug>
        <title>parse_timestr</title>
        <functioncall prog_lang="cpp">double parse_timestr(const char* buf)</functioncall>
        <functioncall prog_lang="eel">double parse_timestr("buf")</functioncall>
        <functioncall prog_lang="lua">number = reaper.parse_timestr(string buf)</functioncall>
        <functioncall prog_lang="python">Float RPR_parse_timestr(String buf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See [parse_timestr_pos](#parse_timestr_pos), [parse_timestr_len](#parse_timestr_len).
        </description>
        <retvals>
            number - the converted time in seconds
        </retvals>
        <parameters>
            buf - the timestring to convert (hh:mm:ss.sss). Each position of the time can be one digit only, means: "1:2:3.4" is valid. Milliseconds can be more than 3 digits. Hours, seconds, minutes with more than two digits will be converted correctly "1:120" will be converted to 180 seconds.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, timestring, hour, minute, second, millisecond, parse, convert, time</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>parse_timestr_len</slug>
        <title>parse_timestr_len</title>
        <functioncall prog_lang="cpp">double parse_timestr_len(const char* buf, double offset, int modeoverride)</functioncall>
        <functioncall prog_lang="eel">double parse_timestr_len("buf", offset, int modeoverride)</functioncall>
        <functioncall prog_lang="lua">number = reaper.parse_timestr_len(string buf, number offset, integer modeoverride)</functioncall>
        <functioncall prog_lang="python">Float RPR_parse_timestr_len(String buf, Float offset, Int modeoverride)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            time formatting mode overrides: -1=proj default.
            0, time
            1, measures.beats + time
            2, measures.beats
            3, seconds
            4, samples
            5, h:m:s:f
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            buf - 
            offset - ??Buggy??
            modeoverride - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>parse_timestr_pos</slug>
        <title>parse_timestr_pos</title>
        <functioncall prog_lang="cpp">double parse_timestr_pos(const char* buf, int modeoverride)</functioncall>
        <functioncall prog_lang="eel">double parse_timestr_pos("buf", int modeoverride)</functioncall>
        <functioncall prog_lang="lua">number = reaper.parse_timestr_pos(string buf, integer modeoverride)</functioncall>
        <functioncall prog_lang="python">Float RPR_parse_timestr_pos(String buf, Int modeoverride)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Parse time string and convert it into seconds.
        </description>
        <retvals>
            number - the converted time in seconds
        </retvals>
        <parameters>
            buf - the timestring to be parsed and converted into seconds
            modeoverride - the format of the timestring to parse and convert
                        --1, proj default.
                        -0, time
                        -1, measures.beats + time
                        -2, measures.beats
                        -3, seconds
                        -4, samples
                        -5, h:m:s:f
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, parse, timestring, measures, beats, samples, seconds, hours, time, minutes, seconds</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>parsepanstr</slug>
        <title>parsepanstr</title>
        <functioncall prog_lang="cpp">double parsepanstr(const char* str)</functioncall>
        <functioncall prog_lang="eel">double parsepanstr("str")</functioncall>
        <functioncall prog_lang="lua">number = reaper.parsepanstr(string str)</functioncall>
        <functioncall prog_lang="python">Float RPR_parsepanstr(String str)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">         
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            str - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Sink_Enum</slug>
        <title>PCM_Sink_Enum</title>
        <functioncall prog_lang="cpp">unsigned int PCM_Sink_Enum(int idx, const char** descstrOut)</functioncall>
        <functioncall prog_lang="eel">uint PCM_Sink_Enum(int idx, #descstr)</functioncall>
        <functioncall prog_lang="lua">integer retval, string descstr = reaper.PCM_Sink_Enum(integer idx)</functioncall>
        <functioncall prog_lang="python">Unknown RPR_PCM_Sink_Enum(Int idx, String descstrOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            descstr - 
        </retvals>
        <parameters>
            idx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Sink_GetExtension</slug>
        <title>PCM_Sink_GetExtension</title>
        <functioncall prog_lang="cpp">const char* PCM_Sink_GetExtension(const char* data, int data_sz)</functioncall>
        <functioncall prog_lang="eel">bool PCM_Sink_GetExtension(#retval, "data")</functioncall>
        <functioncall prog_lang="lua">string = reaper.PCM_Sink_GetExtension(string data)</functioncall>
        <functioncall prog_lang="python">String RPR_PCM_Sink_GetExtension(String data, Int data_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            string - 
        </retvals>
        <parameters>
            data - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Sink_ShowConfig</slug>
        <title>PCM_Sink_ShowConfig</title>
        <functioncall prog_lang="cpp">HWND PCM_Sink_ShowConfig(const char* cfg, int cfg_sz, HWND hwndParent)</functioncall>
        <functioncall prog_lang="eel">HWND PCM_Sink_ShowConfig("cfg", HWND hwndParent)</functioncall>
        <functioncall prog_lang="lua">HWND = reaper.PCM_Sink_ShowConfig(string cfg, HWND hwndParent)</functioncall>
        <functioncall prog_lang="python">HWND RPR_PCM_Sink_ShowConfig(String cfg, Int cfg_sz, HWND hwndParent)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            HWND - 
        </retvals>
        <parameters>
            cfg - 
            hwndParent - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_CreateFromFile</slug>
        <title>PCM_Source_CreateFromFile</title>
        <functioncall prog_lang="cpp">PCM_source* PCM_Source_CreateFromFile(const char* filename)</functioncall>
        <functioncall prog_lang="eel">PCM_source PCM_Source_CreateFromFile("filename")</functioncall>
        <functioncall prog_lang="lua">PCM_source = reaper.PCM_Source_CreateFromFile(string filename)</functioncall>
        <functioncall prog_lang="python">PCM_source RPR_PCM_Source_CreateFromFile(String filename)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            See [PCM_Source_CreateFromFileEx">PCM_Source_CreateFromFileEx).
        </description>
        <retvals>
            PCM_source - 
        </retvals>
        <parameters>
            filename - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_CreateFromFileEx</slug>
        <title>PCM_Source_CreateFromFileEx</title>
        <functioncall prog_lang="cpp">PCM_source* PCM_Source_CreateFromFileEx(const char* filename, bool forcenoMidiImp)</functioncall>
        <functioncall prog_lang="eel">PCM_source PCM_Source_CreateFromFileEx("filename", bool forcenoMidiImp)</functioncall>
        <functioncall prog_lang="lua">PCM_source = reaper.PCM_Source_CreateFromFileEx(string filename, boolean forcenoMidiImp)</functioncall>
        <functioncall prog_lang="python">PCM_source RPR_PCM_Source_CreateFromFileEx(String filename, Boolean forcenoMidiImp)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.
        </description>
        <retvals>
            PCM_source - 
        </retvals>
        <parameters>
            filename - 
            forcenoMidiImp - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_CreateFromType</slug>
        <title>PCM_Source_CreateFromType</title>
        <functioncall prog_lang="cpp">PCM_source* PCM_Source_CreateFromType(const char* sourcetype)</functioncall>
        <functioncall prog_lang="eel">PCM_source PCM_Source_CreateFromType("sourcetype")</functioncall>
        <functioncall prog_lang="lua">PCM_source = reaper.PCM_Source_CreateFromType(string sourcetype)</functioncall>
        <functioncall prog_lang="python">PCM_source RPR_PCM_Source_CreateFromType(String sourcetype)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Create a PCM_source from a "type" (use this if you're going to load its state via LoadState/ProjectStateContext).
            Valid types include "WAVE", "MIDI", or whatever plug-ins define as well.
        </description>
        <retvals>
            PCM_source - 
        </retvals>
        <parameters>
            sourcetype - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_Destroy</slug>
        <title>PCM_Source_Destroy</title>
        <functioncall prog_lang="cpp">void PCM_Source_Destroy(PCM_source* src)</functioncall>
        <functioncall prog_lang="eel">PCM_Source_Destroy(PCM_source src)</functioncall>
        <functioncall prog_lang="lua">reaper.PCM_Source_Destroy(PCM_source src)</functioncall>
        <functioncall prog_lang="python">RPR_PCM_Source_Destroy(PCM_source src)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Deletes a PCM_source -- be sure that you remove any project reference before deleting a source
        </description>
        <parameters>
            src - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_GetPeaks</slug>
        <title>PCM_Source_GetPeaks</title>
        <functioncall prog_lang="cpp">int PCM_Source_GetPeaks(PCM_source* src, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)</functioncall>
        <functioncall prog_lang="eel">int PCM_Source_GetPeaks(PCM_source src, peakrate, starttime, int numchannels, int numsamplesperchannel, int want_extra_type, buffer_ptr buf)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.PCM_Source_GetPeaks(PCM_source src, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)</functioncall>
        <functioncall prog_lang="python">(Int retval, PCM_source src, Float peakrate, Float starttime, Int numchannels, Int numsamplesperchannel, Int want_extra_type, Float buf) = RPR_PCM_Source_GetPeaks(src, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). 
            Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). 
            extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            src - 
            peakrate - 
            starttime - 
            numchannels - 
            numsamplesperchannel - 
            want_extra_type - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PCM_Source_GetSectionInfo</slug>
        <title>PCM_Source_GetSectionInfo</title>
        <functioncall prog_lang="cpp">bool PCM_Source_GetSectionInfo(PCM_source* src, double* offsOut, double* lenOut, bool* revOut)</functioncall>
        <functioncall prog_lang="eel">bool PCM_Source_GetSectionInfo(PCM_source src, &amp;offs, &amp;len, bool &amp;rev)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number offs, number len, boolean rev = reaper.PCM_Source_GetSectionInfo(PCM_source src)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, PCM_source src, Float offsOut, Float lenOut, Boolean revOut) = RPR_PCM_Source_GetSectionInfo(src, offsOut, lenOut, revOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            If a section/reverse block, retrieves offset/len/reverse. return true if success
        </description>
        <retvals>
             retval - 
            offs - 
            len - 
            rev - 
        </retvals>
        <parameters>
            src - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PluginWantsAlwaysRunFx</slug>
        <title>PluginWantsAlwaysRunFx</title>
        <functioncall prog_lang="cpp">void PluginWantsAlwaysRunFx(int amt)</functioncall>
        <functioncall prog_lang="eel">PluginWantsAlwaysRunFx(int amt)</functioncall>
        <functioncall prog_lang="lua">reaper.PluginWantsAlwaysRunFx(integer amt)</functioncall>
        <functioncall prog_lang="python">RPR_PluginWantsAlwaysRunFx(Int amt)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            amt - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>PreventUIRefresh</slug>
        <title>PreventUIRefresh</title>
        <functioncall prog_lang="cpp">void PreventUIRefresh(int prevent_count)</functioncall>
        <functioncall prog_lang="eel">PreventUIRefresh(int prevent_count)</functioncall>
        <functioncall prog_lang="lua">reaper.PreventUIRefresh(integer prevent_count)</functioncall>
        <functioncall prog_lang="python">RPR_PreventUIRefresh(Int prevent_count)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur
        </description>
        <parameters>
            prevent_count - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReaScriptError</slug>
        <title>ReaScriptError</title>
        <functioncall prog_lang="cpp">void ReaScriptError(const char* errmsg)</functioncall>
        <functioncall prog_lang="eel">ReaScriptError("errmsg")</functioncall>
        <functioncall prog_lang="lua">reaper.ReaScriptError(string errmsg)</functioncall>
        <functioncall prog_lang="python">RPR_ReaScriptError(String errmsg)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Causes REAPER to display the error message after the current ReaScript finishes. When Reaper's IDE is open, it will display it at the bottom of the IDE.
        </description>
        <parameters>
            errmsg - the message to show
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>RecursiveCreateDirectory</slug>
        <title>RecursiveCreateDirectory</title>
        <functioncall prog_lang="cpp">int RecursiveCreateDirectory(const char* path, size_t ignored)</functioncall>
        <functioncall prog_lang="eel">int RecursiveCreateDirectory("path", size_t ignored)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.RecursiveCreateDirectory(string path, integer ignored)</functioncall>
        <functioncall prog_lang="python">Int RPR_RecursiveCreateDirectory(String path, Unknown ignored)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Creates a new directory. You can recursivly create directories, means: if the higher directories don't exist, the will also be automatically created.
            returns positive value on success, 0 on failure.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            path - the directory-path to be created
            ignored - unknown
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, create, recursive, directory</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>RefreshToolbar</slug>
        <title>RefreshToolbar</title>
        <functioncall prog_lang="cpp">void RefreshToolbar(int command_id)</functioncall>
        <functioncall prog_lang="eel">RefreshToolbar(int command_id)</functioncall>
        <functioncall prog_lang="lua">reaper.RefreshToolbar(integer command_id)</functioncall>
        <functioncall prog_lang="python">RPR_RefreshToolbar(Int command_id)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Refreshes the toolbar-buttons, associated with a specific command_id/action
            See [RefreshToolbar2](#RefreshToolbar2).
        </description>
        <parameters>
            command_id - the command_id-number of the action, whose toolbar button you want to toggle. see [NamedCommandLookup](#NamedCommandLookup) for getting command-ids from scripts and 3rd-party actions
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterfacer, toolbar, toggle, command</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>RefreshToolbar2</slug>
        <title>RefreshToolbar2</title>
        <functioncall prog_lang="cpp">void RefreshToolbar2(int section_id, int command_id)</functioncall>
        <functioncall prog_lang="eel">RefreshToolbar2(int section_id, int command_id)</functioncall>
        <functioncall prog_lang="lua">reaper.RefreshToolbar2(integer section_id, integer command_id)</functioncall>
        <functioncall prog_lang="python">RPR_RefreshToolbar2(Int section_id, Int command_id)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Refreshes the toolbar-buttons, associated with a specific command_id/action within a certain section
        </description>
        <parameters>
            section_id - the section, in which the action lies
                        0, Main
                        100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
                        32060, MIDI Editor
                        32061, MIDI Event List Editor
                        32062, MIDI Inline Editor
                        32063, Media Explorer
            command_id - the command_id-number of the action, whose toolbar button you want to toggle. see [NamedCommandLookup](#NamedCommandLookup) for getting command-ids from scripts and 3rd-party actions
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterfacer, toolbar, toggle, command, section</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>relative_fn</slug>
        <title>relative_fn</title>
        <functioncall prog_lang="cpp">void relative_fn(const char* in, char* out, int out_sz)</functioncall>
        <functioncall prog_lang="eel">relative_fn("in", #out)</functioncall>
        <functioncall prog_lang="lua">string out = reaper.relative_fn(string in, string out)</functioncall>
        <functioncall prog_lang="python">(String in, String out, Int out_sz) = RPR_relative_fn(in, out, out_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Makes a filename "in" relative to the current project, if any.
        </description>
        <retvals>
            out - 
        </retvals>
        <parameters>
            in - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>RemoveTrackSend</slug>
        <title>RemoveTrackSend</title>
        <functioncall prog_lang="cpp">bool RemoveTrackSend(MediaTrack* tr, int category, int sendidx)</functioncall>
        <functioncall prog_lang="eel">bool RemoveTrackSend(MediaTrack tr, int category, int sendidx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.RemoveTrackSend(MediaTrack tr, integer category, integer sendidx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_RemoveTrackSend(MediaTrack tr, Int category, Int sendidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Remove a send/receive/hardware output. See [CreateTrackSend](#CreateTrackSend), [GetSetTrackSendInfo](#GetSetTrackSendInfo), [GetTrackSendInfo_Value](#GetTrackSendInfo_Value), [SetTrackSendInfo_Value](#SetTrackSendInfo_Value), [GetTrackNumSends](#GetTrackNumSends).
        </description>
        <retvals>
            boolean - true, removing worked; false, removing didn't work(e.g. does not exist)
        </retvals>
        <parameters>
            tr - the MediaTrack-object, in which you want to remove send/receive/hwouts
            category - less than 0, receives; 0, sends; greater than 0, hardware outputs
            sendidx - the idx of the send/receive/hwoutput to remove. 0, the first; 1 for the second, etc
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>RenderFileSection</slug>
        <title>RenderFileSection</title>
        <functioncall prog_lang="cpp">bool RenderFileSection(const char* source_filename, const char* target_filename, double start_percent, double end_percent, double playrate)</functioncall>
        <functioncall prog_lang="eel">bool RenderFileSection("source_filename", "target_filename", start_percent, end_percent, playrate)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.RenderFileSection(string source_filename, string target_filename, number start_percent, number end_percent, number playrate)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_RenderFileSection(String source_filename, String target_filename, Float start_percent, Float end_percent, Float playrate)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Not available while playing back.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            source_filename - 
            target_filename - 
            start_percent - 
            end_percent - 
            playrate - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReorderSelectedTracks</slug>
        <title>ReorderSelectedTracks</title>
        <functioncall prog_lang="cpp">bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)</functioncall>
        <functioncall prog_lang="eel">bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.ReorderSelectedTracks(integer beforeTrackIdx, integer makePrevFolder)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_ReorderSelectedTracks(Int beforeTrackIdx, Int makePrevFolder)</functioncall>
        <requires>
            Reaper=5.90
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. 
            makePrevFolder=0 for normal, 
               1 = as child of track preceding track specified by beforeTrackIdx, 
               2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder
        </description>
        <retvals>
            boolean retval - true, if it was successful; false, if not(e.g. no tracks were selected)
        </retvals>
        <parameters>
            integer beforeTrackIdx - the number of track, before which you want to move the selected tracks; zero-based(0 for track 1, 1 for track 2, etc)
            integer makePrevFolder - decides, whether the track before the moved tracks(beforeTrackIdx-1) shall be a folder-track. Does only    
                                   - apply, when beforeTrackIdx>0(a track above the moved tracks exists).
                                   - 0, don't make track beforeTrackIdx-1 a folder track; 
                                   - 1, make track beforeTrackIdx-1 a folder track
                                   - 2, if track beforeTrackIdx-1 is the last track in folder, extend the folder(make the last moved track the last track in folder.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, move, selected, tracks, folder, last folder</tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Resample_EnumModes</slug>
        <title>Resample_EnumModes</title>
        <functioncall prog_lang="cpp">const char* Resample_EnumModes(int mode)</functioncall>
        <functioncall prog_lang="eel">bool Resample_EnumModes(#retval, int mode)</functioncall>
        <functioncall prog_lang="lua">string = reaper.Resample_EnumModes(integer mode)</functioncall>
        <functioncall prog_lang="python">String RPR_Resample_EnumModes(Int mode)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            string - 
        </retvals>
        <parameters>
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>resolve_fn</slug>
        <title>resolve_fn</title>
        <functioncall prog_lang="cpp">void resolve_fn(const char* in, char* out, int out_sz)</functioncall>
        <functioncall prog_lang="eel">resolve_fn("in", #out)</functioncall>
        <functioncall prog_lang="lua">string out = reaper.resolve_fn(string in, string out)</functioncall>
        <functioncall prog_lang="python">(String in, String out, Int out_sz) = RPR_resolve_fn(in, out, out_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [resolve_fn2](#resolve_fn2).
        </description>
        <retvals>
            out - 
        </retvals>
        <parameters>
            in - 
            out - 
            out_sz - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>resolve_fn2</slug>
        <title>resolve_fn2</title>
        <functioncall prog_lang="cpp">void resolve_fn2(const char* in, char* out, int out_sz, const char* checkSubDirOptional)</functioncall>
        <functioncall prog_lang="eel">resolve_fn2("in", #out, optional "checkSubDir")</functioncall>
        <functioncall prog_lang="lua">string out = reaper.resolve_fn2(string in, string out, optional string checkSubDir)</functioncall>
        <functioncall prog_lang="python">(String in, String out, Int out_sz, String checkSubDirOptional) = RPR_resolve_fn2(in, out, out_sz, checkSubDirOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Resolves a filename "in" by using project settings etc. If no file found, out will be a copy of in.
        </description>
        <retvals>
            out - 
        </retvals>
        <parameters>
            in - 
            out - 
            out_sz -
            checkSubDir - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ReverseNamedCommandLookup</slug>
        <title>ReverseNamedCommandLookup</title>
        <functioncall prog_lang="cpp">const char* ReverseNamedCommandLookup(int command_id)</functioncall>
        <functioncall prog_lang="eel">bool ReverseNamedCommandLookup(#retval, int command_id)</functioncall>
        <functioncall prog_lang="lua">string = reaper.ReverseNamedCommandLookup(integer command_id)</functioncall>
        <functioncall prog_lang="python">String RPR_ReverseNamedCommandLookup(Int command_id)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return "SWS_ABOUT"), it will be NULL if command_id is a native action.
        </description>
        <retvals>
            string - the ActionCommandID of the command/script/action
        </retvals>
        <parameters>
            command_id - the command/script/action, whose ActionCommandID you want to have
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, command, id, actioncommand, id, lookup</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ScaleFromEnvelopeMode</slug>
        <title>ScaleFromEnvelopeMode</title>
        <functioncall prog_lang="cpp">double ScaleFromEnvelopeMode(int scaling_mode, double val)</functioncall>
        <functioncall prog_lang="eel">double ScaleFromEnvelopeMode(int scaling_mode, val)</functioncall>
        <functioncall prog_lang="lua">number = reaper.ScaleFromEnvelopeMode(integer scaling_mode, number val)</functioncall>
        <functioncall prog_lang="python">Float RPR_ScaleFromEnvelopeMode(Int scaling_mode, Float val)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            scaling_mode - 
            val - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ScaleToEnvelopeMode</slug>
        <title>ScaleToEnvelopeMode</title>
        <functioncall prog_lang="cpp">double ScaleToEnvelopeMode(int scaling_mode, double val)</functioncall>
        <functioncall prog_lang="eel">double ScaleToEnvelopeMode(int scaling_mode, val)</functioncall>
        <functioncall prog_lang="lua">number = reaper.ScaleToEnvelopeMode(integer scaling_mode, number val)</functioncall>
        <functioncall prog_lang="python">Float RPR_ScaleToEnvelopeMode(Int scaling_mode, Float val)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            scaling_mode - 
            val - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SelectAllMediaItems</slug>
        <title>SelectAllMediaItems</title>
        <functioncall prog_lang="cpp">void SelectAllMediaItems(ReaProject* proj, bool selected)</functioncall>
        <functioncall prog_lang="eel">SelectAllMediaItems(ReaProject proj, bool selected)</functioncall>
        <functioncall prog_lang="lua">reaper.SelectAllMediaItems(ReaProject proj, boolean selected)</functioncall>
        <functioncall prog_lang="python">RPR_SelectAllMediaItems(ReaProject proj, Boolean selected)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Selects or deselects all MediaItems in a project.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            selected - true, select; false, deselect
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, mediaitem, select, deselect, all</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SelectProjectInstance</slug>
        <title>SelectProjectInstance</title>
        <functioncall prog_lang="cpp">void SelectProjectInstance(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">SelectProjectInstance(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.SelectProjectInstance(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_SelectProjectInstance(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Switch to another opened project/projecttab.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, switch, select, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetActiveTake</slug>
        <title>SetActiveTake</title>
        <functioncall prog_lang="cpp">void SetActiveTake(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">SetActiveTake(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">reaper.SetActiveTake(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">RPR_SetActiveTake(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            set this take active in this media item
        </description>
        <parameters>
            take - the MediaItem_Take, you want to set as active-take in the MediaItem it is associated with
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetAutomationMode</slug>
        <title>SetAutomationMode</title>
        <functioncall prog_lang="cpp">void SetAutomationMode(int mode, bool onlySel)</functioncall>
        <functioncall prog_lang="eel">SetAutomationMode(int mode, bool onlySel)</functioncall>
        <functioncall prog_lang="lua">reaper.SetAutomationMode(integer mode, boolean onlySel)</functioncall>
        <functioncall prog_lang="python">RPR_SetAutomationMode(Int mode, Boolean onlySel)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets all or selected tracks to mode.
            
            Includes the master-track.
        </description>
        <parameters>
            mode - the automation-mode
                -0, Trim/read
                -1, Read
                -2, Touch
                -3, Write
                -4, Latch
                -5 and higher no mode selected
            onlySel - true, only selected tracks; false, all tracks including master-track
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, set, mode, trim, read, touch, write, latch, selected, deselected, master</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetCurrentBPM</slug>
        <title>SetCurrentBPM</title>
        <functioncall prog_lang="cpp">void SetCurrentBPM(ReaProject* __proj, double bpm, bool wantUndo)</functioncall>
        <functioncall prog_lang="eel">SetCurrentBPM(ReaProject __proj, bpm, bool wantUndo)</functioncall>
        <functioncall prog_lang="lua">reaper.SetCurrentBPM(ReaProject __proj, number bpm, boolean wantUndo)</functioncall>
        <functioncall prog_lang="python">RPR_SetCurrentBPM(ReaProject __proj, Float bpm, Boolean wantUndo)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            set current BPM in project, set wantUndo=true to add undo point
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            __proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            bpm - the new beats per minute-value
            wantUndo - true, add undo point; false, no undo point added
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, set, bpm, undo</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetCursorContext</slug>
        <title>SetCursorContext</title>
        <functioncall prog_lang="cpp">void SetCursorContext(int mode, TrackEnvelope* envInOptional)</functioncall>
        <functioncall prog_lang="eel">SetCursorContext(int mode, TrackEnvelope envIn)</functioncall>
        <functioncall prog_lang="lua">reaper.SetCursorContext(integer mode, TrackEnvelope envIn)</functioncall>
        <functioncall prog_lang="python">RPR_SetCursorContext(Int mode, TrackEnvelope envInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Change the focus for the cursor.
            You must use this to change the focus for the cursor programmatically. 

            mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or envIn==NULL to clear the current track/take envelope selection)
        </description>
        <parameters>
            mode - the focus to be changed to
                 -0, track panels
                 -1, arrange window
                 -2, arrangewindow and env
            envIn - TrackEnvelope-object of the envelope to select(only when mode=2, else set to nil); nil, clear current track/envelope-selection;
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, envelope, focus, set, cursor, context</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetEditCurPos</slug>
        <title>SetEditCurPos</title>
        <functioncall prog_lang="cpp">void SetEditCurPos(double time, bool moveview, bool seekplay)</functioncall>
        <functioncall prog_lang="eel">SetEditCurPos(time, bool moveview, bool seekplay)</functioncall>
        <functioncall prog_lang="lua">reaper.SetEditCurPos(number time, boolean moveview, boolean seekplay)</functioncall>
        <functioncall prog_lang="python">RPR_SetEditCurPos(Float time, Boolean moveview, Boolean seekplay)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Change the position of the edit-cursor in the current project.
        </description>
        <parameters>
            time - the new editcursor-position in seconds
            moveview - true, change the arrange-view so editcursor is visible; false, just set the edit-cursor without moving the view(editcursor might be out of sight)
            seekplay - true, when playing, restart playing at the new edit-cursor position; false, keep playing at "old" playposition
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, set, edit, cursor, position, seekplay, move view</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetEditCurPos2</slug>
        <title>SetEditCurPos2</title>
        <functioncall prog_lang="cpp">void SetEditCurPos2(ReaProject* proj, double time, bool moveview, bool seekplay)</functioncall>
        <functioncall prog_lang="eel">SetEditCurPos2(ReaProject proj, time, bool moveview, bool seekplay)</functioncall>
        <functioncall prog_lang="lua">reaper.SetEditCurPos2(ReaProject proj, number time, boolean moveview, boolean seekplay)</functioncall>
        <functioncall prog_lang="python">RPR_SetEditCurPos2(ReaProject proj, Float time, Boolean moveview, Boolean seekplay)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Change the position of the edit-cursor in a specific project.       
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            time - the new editcursor-position in seconds
            moveview - true, change the arrange-view so editcursor is visible; false, just set the edit-cursor without moving the view(editcursor might be out of sight)
            seekplay - true, when playing, restart playing at the new edit-cursor position; false, keep playing at "old" playposition
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Transport Management
        </chapter_context>
        <tags>transportmanagement, set, edit, cursor, position, seekplay, move view, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetEnvelopePoint</slug>
        <title>SetEnvelopePoint</title>
        <functioncall prog_lang="cpp">bool SetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool SetEnvelopePoint(TrackEnvelope envelope, int ptidx, optional timeIn, optional valueIn, optional int shapeIn, optional tensionIn, optional bool selectedIn, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetEnvelopePoint(TrackEnvelope envelope, integer ptidx, optional number timeIn, optional number valueIn, optional number shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int ptidx, Float timeInOptional, Float valueInOptional, Int shapeInOptional, Float tensionInOptional, Boolean selectedInOptional, Boolean noSortInOptional) = RPR_SetEnvelopePoint(envelope, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See [GetEnvelopePoint](#GetEnvelopePoint), [InsertEnvelopePoint](#InsertEnvelopePoint), [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            envelope - 
            ptidx - 
            shapeIn - 
            shapeIn - 
            shapeIn - 
            selectedIn - 
            selectedIn - 
            noSortIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetEnvelopePointEx</slug>
        <title>SetEnvelopePointEx</title>
        <functioncall prog_lang="cpp">bool SetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)</functioncall>
        <functioncall prog_lang="eel">bool SetEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx, optional timeIn, optional valueIn, optional int shapeIn, optional tensionIn, optional bool selectedIn, optional bool noSortIn)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx, optional number timeIn, optional number valueIn, optional number shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Int ptidx, Float timeInOptional, Float valueInOptional, Int shapeInOptional, Float tensionInOptional, Boolean selectedInOptional, Boolean noSortInOptional) = RPR_SetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. Tautoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See [GetEnvelopePoint](#GetEnvelopePoint), [InsertEnvelopePoint](#InsertEnvelopePoint), [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            envelope - 
            autoitem_idx - 
            ptidx - 
            shapeIn - 
            shapeIn - 
            shapeIn - 
            selectedIn - 
            selectedIn - 
            noSortIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetEnvelopeStateChunk</slug>
        <title>SetEnvelopeStateChunk</title>
        <functioncall prog_lang="cpp">bool SetEnvelopeStateChunk(TrackEnvelope* env, const char* str, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool SetEnvelopeStateChunk(TrackEnvelope env, "str", bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetEnvelopeStateChunk(TrackEnvelope env, String str, Boolean isundoOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets the RPPXML state of an envelope, returns true if successful. 
        </description>
        <retvals>
            boolean - true, setting worked; false, setting didn't work
        </retvals>
        <parameters>
            env - the TrackEnvelope, whose statechunk you want to set
            str - the new statechunk, that you want to set
            isundo - undo flag is a performance/caching hint.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, set, statechunk, envelope</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetExtState</slug>
        <title>SetExtState</title>
        <functioncall prog_lang="cpp">void SetExtState(const char* section, const char* key, const char* value, bool persist)</functioncall>
        <functioncall prog_lang="eel">SetExtState("section", "key", "value", bool persist)</functioncall>
        <functioncall prog_lang="lua">reaper.SetExtState(string section, string key, string value, boolean persist)</functioncall>
        <functioncall prog_lang="python">RPR_SetExtState(String section, String key, String value, Boolean persist)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Set the extended state value for a specific section and key. 
            
            Persistant states are stored into the reaper-extstate.ini in the resources-folder.
            
            See [GetExtState](#GetExtState), [DeleteExtState](#DeleteExtState), [HasExtState](#HasExtState).
        </description>
        <parameters>
            section - the section, in which the key-value is stored
            key - the key, which stores the value
            value - the new value to be set
            persist - true, means the value should be stored and reloaded the next time REAPER is opened
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Extended States
        </chapter_context>
        <tags>extendedstates, state, value, key, section, set, persist</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetGlobalAutomationOverride</slug>
        <title>SetGlobalAutomationOverride</title>
        <functioncall prog_lang="cpp">void SetGlobalAutomationOverride(int mode)</functioncall>
        <functioncall prog_lang="eel">SetGlobalAutomationOverride(int mode)</functioncall>
        <functioncall prog_lang="lua">reaper.SetGlobalAutomationOverride(integer mode)</functioncall>
        <functioncall prog_lang="python">RPR_SetGlobalAutomationOverride(Int mode)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            mode: see [GetGlobalAutomationOverride">GetGlobalAutomationOverride)
        </description>
        <parameters>
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetItemStateChunk</slug>
        <title>SetItemStateChunk</title>
        <functioncall prog_lang="cpp">bool SetItemStateChunk(MediaItem* item, const char* str, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool SetItemStateChunk(MediaItem item, "str", bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetItemStateChunk(MediaItem item, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetItemStateChunk(MediaItem item, String str, Boolean isundoOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            item - 
            str - 
            isundo - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMasterTrackVisibility</slug>
        <title>SetMasterTrackVisibility</title>
        <functioncall prog_lang="cpp">int SetMasterTrackVisibility(int flag)</functioncall>
        <functioncall prog_lang="eel">int SetMasterTrackVisibility(int flag)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.SetMasterTrackVisibility(integer flag)</functioncall>
        <functioncall prog_lang="python">Int RPR_SetMasterTrackVisibility(Int flag)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            set &amp;1 to show the master track in the TCP, &amp;2 to show in the mixer. Returns the previous visibility state. See [GetMasterTrackVisibility](#GetMasterTrackVisibility).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            flag - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemInfo_Value</slug>
        <title>SetMediaItemInfo_Value</title>
        <functioncall prog_lang="cpp">bool SetMediaItemInfo_Value(MediaItem* item, const char* parmname, double newvalue)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaItemInfo_Value(MediaItem item, "parmname", newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetMediaItemInfo_Value(MediaItem item, string parmname, number newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetMediaItemInfo_Value(MediaItem item, String parmname, Float newvalue)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set media item numerical-value attributes.
            B_MUTE : bool * to muted state
            B_LOOPSRC : bool * to loop source
            B_ALLTAKESPLAY : bool * to all takes play
            B_UISEL : bool * to ui selected
            C_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly
            C_LOCK : char * to one char of lock flags (&amp;1 is locked, currently)
            D_VOL : double * of item volume (volume bar)
            D_POSITION : double * of item position (seconds)
            D_LENGTH : double * of item length (seconds)
            D_SNAPOFFSET : double * of item snap offset (seconds)
            D_FADEINLEN : double * of item fade in length (manual, seconds)
            D_FADEOUTLEN : double * of item fade out length (manual, seconds)
            D_FADEINDIR : double * of item fade in curve [-1; 1]
            D_FADEOUTDIR : double * of item fade out curve [-1; 1]
            D_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)
            D_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)
            C_FADEINSHAPE : int * to fadein shape, 0=linear, ...
            C_FADEOUTSHAPE : int * to fadeout shape
            I_GROUPID : int * to group ID (0 = no group)
            I_LASTY : int * to last y position in track (readonly)
            I_LASTH : int * to last height in track (readonly)
            I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).
            I_CURTAKE : int * to active take
            IP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)
            F_FREEMODE_Y : float * to free mode y position (0..1)
            F_FREEMODE_H : float * to free mode height (0..1)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            item - 
            parmname - 
            newvalue - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemLength</slug>
        <title>SetMediaItemLength</title>
        <functioncall prog_lang="cpp">bool SetMediaItemLength(MediaItem* item, double length, bool refreshUI)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaItemLength(MediaItem item, length, bool refreshUI)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetMediaItemLength(MediaItem item, number length, boolean refreshUI)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetMediaItemLength(MediaItem item, Float length, Boolean refreshUI)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Redraws the screen only if refreshUI == true.
            See [UpdateArrange](#UpdateArrange)().
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            item - 
            length - 
            refreshUI - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemPosition</slug>
        <title>SetMediaItemPosition</title>
        <functioncall prog_lang="cpp">bool SetMediaItemPosition(MediaItem* item, double position, bool refreshUI)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaItemPosition(MediaItem item, position, bool refreshUI)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetMediaItemPosition(MediaItem item, number position, boolean refreshUI)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetMediaItemPosition(MediaItem item, Float position, Boolean refreshUI)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Redraws the screen only if refreshUI == true.
            See [UpdateArrange](#UpdateArrange)().
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            item - 
            position - 
            refreshUI - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemSelected</slug>
        <title>SetMediaItemSelected</title>
        <functioncall prog_lang="cpp">void SetMediaItemSelected(MediaItem* item, bool selected)</functioncall>
        <functioncall prog_lang="eel">SetMediaItemSelected(MediaItem item, bool selected)</functioncall>
        <functioncall prog_lang="lua">reaper.SetMediaItemSelected(MediaItem item, boolean selected)</functioncall>
        <functioncall prog_lang="python">RPR_SetMediaItemSelected(MediaItem item, Boolean selected)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            item - 
            selected - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemTake_Source</slug>
        <title>SetMediaItemTake_Source</title>
        <functioncall prog_lang="cpp">bool SetMediaItemTake_Source(MediaItem_Take* take, PCM_source* source)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)</functioncall>
        <requires>
            Reaper=5.961
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            source - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaItemTakeInfo_Value</slug>
        <title>SetMediaItemTakeInfo_Value</title>
        <functioncall prog_lang="cpp">bool SetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname, double newvalue)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaItemTakeInfo_Value(MediaItem_Take take, "parmname", newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname, number newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetMediaItemTakeInfo_Value(MediaItem_Take take, String parmname, Float newvalue)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set media item take numerical-value attributes.
            D_STARTOFFS : double *, start offset in take of item
            D_VOL : double *, take volume
            D_PAN : double *, take pan
            D_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)
            D_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)
            D_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)
            B_PPITCH, bool *, preserve pitch when changing rate
            I_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)
            I_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter
            I_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).
            IP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            parmname - 
            newvalue - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMediaTrackInfo_Value</slug>
        <title>SetMediaTrackInfo_Value</title>
        <functioncall prog_lang="cpp">bool SetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname, double newvalue)</functioncall>
        <functioncall prog_lang="eel">bool SetMediaTrackInfo_Value(MediaTrack tr, "parmname", newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetMediaTrackInfo_Value(MediaTrack tr, string parmname, number newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetMediaTrackInfo_Value(MediaTrack tr, String parmname, Float newvalue)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set track numerical-value attributes.
            B_MUTE : bool * : mute flag
            B_PHASE : bool * : invert track phase
            IP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)
            I_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place
            I_FXEN : int * : 0=fx bypassed, nonzero = fx active
            I_RECARM : int * : 0=not record armed, 1=record armed
            I_RECINPUT : int * : record input. &lt;0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 6 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)
            I_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace
            I_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))
            I_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)
            I_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
            I_NCHAN : int * : number of track channels, must be 2-64, even
            I_SELECTED : int * : track selected? 0 or 1
            I_WNDH : int * : current TCP window height (Read-only)
            I_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc
            I_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children
            I_MIDIHWOUT : int * : track midi hardware output index (&gt;0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))
            I_PERFFLAGS : int * : track perf flags (&amp;1=no media buffering, &amp;2=no anticipative FX)
            I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).
            I_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels
            B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
            D_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)
            D_PAN : double * : trim pan of track (-1..1)
            D_WIDTH : double * : width of track (-1..1)
            D_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6
            D_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6
            I_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)
            D_PANLAW : double * : pan law of track. &gt;0 for project default, 1.0 for +0dB, etc
            P_ENV : read only, returns TrackEnvelope *, setNewValue=&gt;VOLENV, &gt;PANENV, etc
            B_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master
            B_SHOWINTCP : bool * : show track panel in tcp -- do not use on master
            B_MAINSEND : bool * : track sends audio to parent
            C_MAINSEND_OFFS : char * : track send to parent channel offset
            B_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)
            C_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly
            F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)
            F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            tr - 
            parmname - 
            newvalue - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMIDIEditorGrid</slug>
        <title>SetMIDIEditorGrid</title>
        <functioncall prog_lang="cpp">void SetMIDIEditorGrid(ReaProject* project, double division)</functioncall>
        <functioncall prog_lang="eel">SetMIDIEditorGrid(ReaProject project, division)</functioncall>
        <functioncall prog_lang="lua">reaper.SetMIDIEditorGrid(ReaProject project, number division)</functioncall>
        <functioncall prog_lang="python">RPR_SetMIDIEditorGrid(ReaProject project, Float division)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            project - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            division - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMixerScroll</slug>
        <title>SetMixerScroll</title>
        <functioncall prog_lang="cpp">MediaTrack* SetMixerScroll(MediaTrack* leftmosttrack)</functioncall>
        <functioncall prog_lang="eel">MediaTrack SetMixerScroll(MediaTrack leftmosttrack)</functioncall>
        <functioncall prog_lang="lua">MediaTrack = reaper.SetMixerScroll(MediaTrack leftmosttrack)</functioncall>
        <functioncall prog_lang="python">MediaTrack RPR_SetMixerScroll(MediaTrack leftmosttrack)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.
        </description>
        <retvals>
            MediaTrack - the new leftmost-track as MediaTrack-object
        </retvals>
        <parameters>
            leftmosttrack - the desired leftmost-MediaTrack
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, set, mixer, scroll, leftmost</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetMouseModifier</slug>
        <title>SetMouseModifier</title>
        <functioncall prog_lang="cpp">void SetMouseModifier(const char* context, int modifier_flag, const char* action)</functioncall>
        <functioncall prog_lang="eel">SetMouseModifier("context", int modifier_flag, "action")</functioncall>
        <functioncall prog_lang="lua">reaper.SetMouseModifier(string context, integer modifier_flag, string action)</functioncall>
        <functioncall prog_lang="python">RPR_SetMouseModifier(String context, Int modifier_flag, String action)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.
            Context is a string like "MM_CTX_ITEM". Find these strings by modifying an assignment in 
            Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
            Modifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.
            (macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)
            For left-click and double-click contexts, the action can be any built-in command ID number
            or any custom action ID string. Find built-in command IDs in the REAPER actions window
            (enable "show action IDs" in the context menu), and find custom action ID strings in reaper-kb.ini.
            For built-in mouse modifier behaviors, find action IDs (which will be low numbers)
            by modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
            Assigning an action of -1 will reset that mouse modifier behavior to factory default.
            See [GetMouseModifier](#GetMouseModifier).

        </description>
        <parameters>
            context - 
            modifier_flag - 
            action - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetOnlyTrackSelected</slug>
        <title>SetOnlyTrackSelected</title>
        <functioncall prog_lang="cpp">void SetOnlyTrackSelected(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">SetOnlyTrackSelected(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">reaper.SetOnlyTrackSelected(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">RPR_SetOnlyTrackSelected(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set exactly one track selected, deselect all others
        </description>
        <parameters>
            track - the MediaTrack to be selected
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, set, selected, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectGrid</slug>
        <title>SetProjectGrid</title>
        <functioncall prog_lang="cpp">void SetProjectGrid(ReaProject* project, double division)</functioncall>
        <functioncall prog_lang="eel">SetProjectGrid(ReaProject project, division)</functioncall>
        <functioncall prog_lang="lua">reaper.SetProjectGrid(ReaProject project, number division)</functioncall>
        <functioncall prog_lang="python">RPR_SetProjectGrid(ReaProject project, Float division)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            project - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            division - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarker</slug>
        <title>SetProjectMarker</title>
        <functioncall prog_lang="cpp">bool SetProjectMarker(int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarker(int markrgnindexnumber, bool isrgn, pos, rgnend, "name")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetProjectMarker(integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetProjectMarker(Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/alters an existing project-marker
        </description>
        <retvals>
            boolean - true, setting the marker worked; false, setting the marker didn't work
        </retvals>
        <parameters>
            markrgnindexnumber - the shown number of the marker to be altered
            isrgn - true, marker is a region; false, marker is a normal marker
            pos - the position of the new marker in seconds
            rgnend - the end of a region, if isrgn is true
            name - shown name of the marker
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, set, marker, region, position, name</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarker2</slug>
        <title>SetProjectMarker2</title>
        <functioncall prog_lang="cpp">bool SetProjectMarker2(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarker2(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, "name")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetProjectMarker2(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetProjectMarker2(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/alters an existing project-marker in a given project.
        </description>
        <retvals>
            boolean - true, setting the marker worked; false, setting the marker didn't work
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            markrgnindexnumber - the shown number of the marker to be altered
            isrgn - true, marker is a region; false, marker is a normal marker
            pos - the position of the new marker in seconds
            rgnend - the end of a region, if isrgn is true
            name - shown name of the marker
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, set, marker, region, position, name, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarker3</slug>
        <title>SetProjectMarker3</title>
        <functioncall prog_lang="cpp">bool SetProjectMarker3(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarker3(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, "name", int color)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetProjectMarker3(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetProjectMarker3(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name, Int color)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/alters an existing project-marker in a given project. Differs from SetProjectMarker2 and SetProjectMarker, that you can set color as well.
            Color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000
        </description>
        <retvals>
            boolean - true, setting the marker worked; false, setting the marker didn't work
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            markrgnindexnumber - the shown number of the marker to be altered
            isrgn - true, marker is a region; false, marker is a normal marker
            pos - the position of the new marker in seconds
            rgnend - the end of a region, if isrgn is true
            name - shown name of the marker
            color - the new color-value as native color-value
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, set, marker, region, position, name, project, color</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarker4</slug>
        <title>SetProjectMarker4</title>
        <functioncall prog_lang="cpp">bool SetProjectMarker4(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color, int flags)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarker4(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, "name", int color, int flags)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetProjectMarker4(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color, integer flags)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetProjectMarker4(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name, Int color, Int flags)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets/alters an existing project-marker in a given project.
            color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&amp;1 to clear name
        </description>
        <retvals>
            boolean - true, setting the marker worked; false, setting the marker didn't work
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            markrgnindexnumber - the shown number of the marker to be altered
            isrgn - true, marker is a region; false, marker is a normal marker
            pos - the position of the new marker in seconds
            rgnend - the end of a region, if isrgn is true
            name - shown name of the marker
            color - the new color-value as native color-value
            flags - &1 to clear name
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags>markermanagement, set, marker, region, position, name, project, color, clear name</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarkerByIndex</slug>
        <title>SetProjectMarkerByIndex</title>
        <functioncall prog_lang="cpp">bool SetProjectMarkerByIndex(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarkerByIndex(ReaProject proj, int markrgnidx, bool isrgn, pos, rgnend, int IDnumber, "name", int color)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetProjectMarkerByIndex(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetProjectMarkerByIndex(ReaProject proj, Int markrgnidx, Boolean isrgn, Float pos, Float rgnend, Int IDnumber, String name, Int color)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [SetProjectMarkerByIndex2](#SetProjectMarkerByIndex2).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            markrgnidx - 
            isrgn - 
            pos - 
            rgnend - 
            IDnumber - 
            name - 
            color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjectMarkerByIndex2</slug>
        <title>SetProjectMarkerByIndex2</title>
        <functioncall prog_lang="cpp">bool SetProjectMarkerByIndex2(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color, int flags)</functioncall>
        <functioncall prog_lang="eel">bool SetProjectMarkerByIndex2(ReaProject proj, int markrgnidx, bool isrgn, pos, rgnend, int IDnumber, "name", int color, int flags)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetProjectMarkerByIndex2(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color, integer flags)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetProjectMarkerByIndex2(ReaProject proj, Int markrgnidx, Boolean isrgn, Float pos, Float rgnend, Int IDnumber, String name, Int color, Int flags)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see [EnumProjectMarkers3](#EnumProjectMarkers3)), rather than representing the displayed marker/region ID number (see [SetProjectMarker3](#SetProjectMarker3)). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&amp;1 to clear name.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            markrgnidx - 
            isrgn - 
            pos - 
            rgnend - 
            IDnumber - 
            name - 
            color - 
            flags - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetProjExtState</slug>
        <title>SetProjExtState</title>
        <functioncall prog_lang="cpp">int SetProjExtState(ReaProject* proj, const char* extname, const char* key, const char* value)</functioncall>
        <functioncall prog_lang="eel">int SetProjExtState(ReaProject proj, "extname", "key", "value")</functioncall>
        <functioncall prog_lang="lua">integer = reaper.SetProjExtState(ReaProject proj, string extname, string key, string value)</functioncall>
        <functioncall prog_lang="python">Int RPR_SetProjExtState(ReaProject proj, String extname, String key, String value)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or "", all extended data for that extname will be deleted. If val is NULL or "", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See [GetProjExtState](#GetProjExtState), [EnumProjExtState](#EnumProjExtState).
        </description>
        <retvals>
            integer - the number of key/value-pairs in the extname
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            extname - the section, in which the key/value is stored
            key - the key, that stores the value
            value - the value, that's stored in the key
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, extended, state, value, section, key, extname, set</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetRegionRenderMatrix</slug>
        <title>SetRegionRenderMatrix</title>
        <functioncall prog_lang="cpp">void SetRegionRenderMatrix(ReaProject* proj, int regionindex, MediaTrack* track, int addorremove)</functioncall>
        <functioncall prog_lang="eel">SetRegionRenderMatrix(ReaProject proj, int regionindex, MediaTrack track, int addorremove)</functioncall>
        <functioncall prog_lang="lua">reaper.SetRegionRenderMatrix(ReaProject proj, integer regionindex, MediaTrack track, integer addorremove)</functioncall>
        <functioncall prog_lang="python">RPR_SetRegionRenderMatrix(ReaProject proj, Int regionindex, MediaTrack track, Int addorremove)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Add (addorremove &gt; 0) or remove (addorremove &gt; 0) a track from this region when using the region render matrix.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            regionindex - 
            track - 
            addorremove - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTakeStretchMarker</slug>
        <title>SetTakeStretchMarker</title>
        <functioncall prog_lang="cpp">int SetTakeStretchMarker(MediaItem_Take* take, int idx, double pos, const double* srcposInOptional)</functioncall>
        <functioncall prog_lang="eel">int SetTakeStretchMarker(MediaItem_Take take, int idx, pos, optional srcposIn)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.SetTakeStretchMarker(MediaItem_Take take, integer idx, number pos, optional number srcposIn)</functioncall>
        <functioncall prog_lang="python">Int RPR_SetTakeStretchMarker(MediaItem_Take take, Int idx, Float pos, const double srcposInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Adds or updates a stretch marker. If idx&gt;0, stretch marker will be added. If idx&gt;=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            take - 
            idx - 
            pos - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTakeStretchMarkerSlope</slug>
        <title>SetTakeStretchMarkerSlope</title>
        <functioncall prog_lang="cpp">bool SetTakeStretchMarkerSlope(MediaItem_Take* take, int idx, double slope)</functioncall>
        <functioncall prog_lang="eel">bool SetTakeStretchMarkerSlope(MediaItem_Take take, int idx, slope)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetTakeStretchMarkerSlope(MediaItem_Take take, integer idx, number slope)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetTakeStretchMarkerSlope(MediaItem_Take take, Int idx, Float slope)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [GetTakeStretchMarkerSlope](#GetTakeStretchMarkerSlope)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            idx - 
            slope - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTempoTimeSigMarker</slug>
        <title>SetTempoTimeSigMarker</title>
        <functioncall prog_lang="cpp">bool SetTempoTimeSigMarker(ReaProject* proj, int ptidx, double timepos, int measurepos, double beatpos, double bpm, int timesig_num, int timesig_denom, bool lineartempo)</functioncall>
        <functioncall prog_lang="eel">bool SetTempoTimeSigMarker(ReaProject proj, int ptidx, timepos, int measurepos, beatpos, bpm, int timesig_num, int timesig_denom, bool lineartempo)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetTempoTimeSigMarker(ReaProject proj, integer ptidx, number timepos, integer measurepos, number beatpos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempo)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetTempoTimeSigMarker(ReaProject proj, Int ptidx, Float timepos, Int measurepos, Float beatpos, Float bpm, Int timesig_num, Int timesig_denom, Boolean lineartempo)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See [CountTempoTimeSigMarkers](#CountTempoTimeSigMarkers), [GetTempoTimeSigMarker](#GetTempoTimeSigMarker), [AddTempoTimeSigMarker](#AddTempoTimeSigMarker), [DeleteTempoTimeSigMarker](#DeleteTempoTimeSigMarker).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            ptidx - 
            timepos - 
            measurepos - 
            beatpos - 
            bpm - 
            timesig_num - 
            timesig_denom - 
            lineartempo - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetToggleCommandState</slug>
        <title>SetToggleCommandState</title>
        <functioncall prog_lang="cpp">bool SetToggleCommandState(int section_id, int command_id, int state)</functioncall>
        <functioncall prog_lang="eel">bool SetToggleCommandState(int section_id, int command_id, int state)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetToggleCommandState(integer section_id, integer command_id, integer state)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetToggleCommandState(Int section_id, Int command_id, Int state)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See [RefreshToolbar2](#RefreshToolbar2).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            section_id - 
            command_id - 
            state - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackAutomationMode</slug>
        <title>SetTrackAutomationMode</title>
        <functioncall prog_lang="cpp">void SetTrackAutomationMode(MediaTrack* tr, int mode)</functioncall>
        <functioncall prog_lang="eel">SetTrackAutomationMode(MediaTrack tr, int mode)</functioncall>
        <functioncall prog_lang="lua">reaper.SetTrackAutomationMode(MediaTrack tr, integer mode)</functioncall>
        <functioncall prog_lang="python">RPR_SetTrackAutomationMode(MediaTrack tr, Int mode)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set automation-mode for a specific MediaTrack.
        </description>
        <parameters>
            tr - the MediaTrack, whose automation-mode you want to set
            mode - the automation-mode
                        -0, Trim/read
                        -1, Read
                        -2, Touch
                        -3, Write
                        -4, Latch
                        -5 and higher no mode selected
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, set, mode, trim, read, touch, write, latch, master</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackColor</slug>
        <title>SetTrackColor</title>
        <functioncall prog_lang="cpp">void SetTrackColor(MediaTrack* track, int color)</functioncall>
        <functioncall prog_lang="eel">SetTrackColor(MediaTrack track, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.SetTrackColor(MediaTrack track, integer color)</functioncall>
        <functioncall prog_lang="python">RPR_SetTrackColor(MediaTrack track, Int color)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Set the custom track color, color is OS dependent (i.e. [ColorToNative(r,g,b)](#ColorToNative).
        </description>
        <parameters>
            track - the MediaTrack, whose color you want to change
            color - the new color-value
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, set, color, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackMIDILyrics</slug>
        <title>SetTrackMIDILyrics</title>
        <functioncall prog_lang="cpp">bool SetTrackMIDILyrics(MediaTrack* track, int flag, const char* str)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackMIDILyrics(MediaTrack track, int flag, "str")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetTrackMIDILyrics(MediaTrack track, integer flag, string str)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetTrackMIDILyrics(MediaTrack track, Int flag, String str)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: "1.1.2\tLyric for measure 1 beat 2\t.1.1\tLyric for measure 2 beat 1    "). See [GetTrackMIDILyrics](#GetTrackMIDILyrics)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            flag - 
            str - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackMIDINoteName</slug>
        <title>SetTrackMIDINoteName</title>
        <functioncall prog_lang="cpp">bool SetTrackMIDINoteName(int track, int pitch, int chan, const char* name)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackMIDINoteName(int track, int pitch, int chan, "name")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetTrackMIDINoteName(integer track, integer pitch, integer chan, string name)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetTrackMIDINoteName(Int track, Int pitch, Int chan, String name)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            channel &gt; 0 assigns these note names to all channels.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            pitch - 
            chan - 
            name - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackMIDINoteNameEx</slug>
        <title>SetTrackMIDINoteNameEx</title>
        <functioncall prog_lang="cpp">bool SetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan, const char* name)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, int pitch, int chan, "name")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan, string name)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, Int pitch, Int chan, String name)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            channel &gt; 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            track - 
            pitch - 
            chan - 
            name - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackSelected</slug>
        <title>SetTrackSelected</title>
        <functioncall prog_lang="cpp">void SetTrackSelected(MediaTrack* track, bool selected)</functioncall>
        <functioncall prog_lang="eel">SetTrackSelected(MediaTrack track, bool selected)</functioncall>
        <functioncall prog_lang="lua">reaper.SetTrackSelected(MediaTrack track, boolean selected)</functioncall>
        <functioncall prog_lang="python">RPR_SetTrackSelected(MediaTrack track, Boolean selected)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set a MediaTrack selected/deselected. Will retain already existing selection, so you can set multiple tracks selected that way.
        </description>
        <parameters>
            track - the MediaTrack, whose selection state you want to set
            selected - true, set MediaTrack to selected; false, set MediaTrack to deselected
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, select, deselect, unselect, track, set</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackSendInfo_Value</slug>
        <title>SetTrackSendInfo_Value</title>
        <functioncall prog_lang="cpp">bool SetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname, double newvalue)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackSendInfo_Value(MediaTrack tr, int category, int sendidx, "parmname", newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname, number newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetTrackSendInfo_Value(MediaTrack tr, Int category, Int sendidx, String parmname, Float newvalue)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Set send/receive/hardware output numerical-value attributes, return true on success.
            category is &gt;0 for receives, 0=sends, &gt;0 for hardware outputs
            parameter names:
            B_MUTE : returns bool *
            B_PHASE : returns bool *, true to flip phase
            B_MONO : returns bool *
            D_VOL : returns double *, 1.0 = +0dB etc
            D_PAN : returns double *, -1..+1
            D_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
            I_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
            I_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
            I_SRCCHAN : returns int *, index,&amp;1024=mono, -1 for none
            I_DSTCHAN : returns int *, index, &amp;1024=mono, otherwise stereo pair, hwout:&amp;512=rearoute
            I_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan
            See [CreateTrackSend](#CreateTrackSend), [RemoveTrackSend](#RemoveTrackSend), [GetTrackNumSends](#GetTrackNumSends).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            tr - 
            category - 
            sendidx - 
            parmname - 
            newvalue - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackSendUIPan</slug>
        <title>SetTrackSendUIPan</title>
        <functioncall prog_lang="cpp">bool SetTrackSendUIPan(MediaTrack* track, int send_idx, double pan, int isend)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackSendUIPan(MediaTrack track, int send_idx, pan, int isend)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetTrackSendUIPan(MediaTrack track, integer send_idx, number pan, integer isend)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetTrackSendUIPan(MediaTrack track, Int send_idx, Float pan, Int isend)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            send_idx&gt;0 for receives, &gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            send_idx - 
            pan - 
            isend - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackSendUIVol</slug>
        <title>SetTrackSendUIVol</title>
        <functioncall prog_lang="cpp">bool SetTrackSendUIVol(MediaTrack* track, int send_idx, double vol, int isend)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackSendUIVol(MediaTrack track, int send_idx, vol, int isend)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetTrackSendUIVol(MediaTrack track, integer send_idx, number vol, integer isend)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetTrackSendUIVol(MediaTrack track, Int send_idx, Float vol, Int isend)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            send_idx&gt;0 for receives, &gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            send_idx - 
            vol - 
            isend - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SetTrackStateChunk</slug>
        <title>SetTrackStateChunk</title>
        <functioncall prog_lang="cpp">bool SetTrackStateChunk(MediaTrack* track, const char* str, bool isundoOptional)</functioncall>
        <functioncall prog_lang="eel">bool SetTrackStateChunk(MediaTrack track, "str", bool isundo)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SetTrackStateChunk(MediaTrack track, string str, boolean isundo)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_SetTrackStateChunk(MediaTrack track, String str, Boolean isundoOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
        </description>
        <retvals>
            boolean - true, setting worked; false, setting didn't work
        </retvals>
        <parameters>
            track - the MediaTrack, whose statechunk you want to set
            str - the new trackstatechunk, you want to set this MediaTrack to
            isundo - undo flag is a performance/caching hint
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, set, track, statechunk</tags>
    </US_DocBloc>

    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ShowPopupMenu</slug>
        <title>ShowPopupMenu</title>
        <functioncall prog_lang="cpp">void ShowPopupMenu(const char* name, int x, int y, HWND hwndParentOptional, void* ctxOptional, int ctx2Optional, int ctx3Optional)</functioncall>
        <functioncall prog_lang="eel">ShowPopupMenu("name", int x, int y, HWND hwndParent, void* ctx, int ctx2, int ctx3)</functioncall>
        <functioncall prog_lang="lua">reaper.ShowPopupMenu(string name, integer x, integer y, optional HWND hwndParent, identifier ctx, integer ctx2, integer ctx3)</functioncall>
        <functioncall prog_lang="python">RPR_ShowPopupMenu(String name, Int x, Int y, HWND hwndParentOptional, void ctxOptional, Int ctx2Optional, Int ctx3Optional)</functioncall>
        <requires>
            Reaper=5.92
            Lua=5.3
        </requires>
        <description prog_lang="*">
            shows a Reaper-context menu.
            You can decide, which menu to show and to which track/item/envelope/envelope-point/automation-item you want this context-menu to be applied to.
            e.g. you can decide, whether settings in the context-menu "track_panel" shall be applied to track 1, track 2, etc
            
            You can also apply this to the selected track/mediaitem/envelope.
            The parameters name and ctx influence each other, means: name="item" and ctx=reaper.GetMediaItem(0,1) apply the mediaitem-contextmenu to the Mediaitem-object, given to parameter ctx.
            The choice of the parameter name also influences, whether ctxOptional and ctx2Optional can be set or not and what they mean.

            Blocks further execution of a script, until the context-menu is closed.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            string name - the name of the context-menu to show
                        - can be track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item
            integer x - x-position of the contextmenu-display-position in pixels
            integer y - y-position of the contextmenu-display-position in pixels
            optional HWND hwndParent - the HWND-window in which to display the context-menu. 
                                     - nil, Reaper's main window will be used as HWND
            optional identifier ctx - the object for which to apply the contextmenu. Options selected in the context-menu will be applied to this track/item; 
                                    - nil, use the selected track(s)/item(s)/envelope, depending on the chosen context-menu-name in parameter name; 
                                    -      shows no context-menu, when no track/item/envelope is selected;
                                    - 
                                    - possible objects and their corresponding name-parameter:
                                    -   - MediaTrack(track_input, track_panel, track_routing)
                                    -   - MediaItem(item)
                                    -   - TrackEnvelope(also Take-Envelopes!) (envelope, envelope_point)
                                    - when using any other context-menu-name, this parameter will be ignored by Reaper.
            optional ctxOptional - when ctx is a TrackEnvelope(or nil) and menu="envelope_point", 
                                 -      this is the idx of the envelope-point to which to apply the context-menu
                                 - when ctx is a TrackEnvelope(or nil) and menu="envelope_item", 
                                 -      this reflects the automation-item in chosen envelope, to which to apply the context-menu(1 or higher for automation-item 1 or higher)
            optional ctx2Optional - when ctx is a TrackEnvelope(or nil) and menu="envelope_point", this reflects, 
                                  - 0, whether to apply the context-menu to the point in the envelope-lane or
                                  - 1 or higher, whether to apply the context-menu to the point in automation-item 1 or higher; 
                                  - nil, assumes 0(envelope-lane)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, context, menu, track, envelope, item, automation item, envelope point, position, hwnd</tags>
    </US_DocBloc>
    
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ShowActionList</slug>
        <title>ShowActionList</title>
        <functioncall prog_lang="cpp">void ShowActionList(KbdSectionInfo* caller, HWND callerWnd)</functioncall>
        <functioncall prog_lang="eel">ShowActionList(KbdSectionInfo caller, HWND callerWnd)</functioncall>
        <functioncall prog_lang="lua">reaper.ShowActionList(KbdSectionInfo caller, optional HWND callerWnd)</functioncall>
        <functioncall prog_lang="python">RPR_ShowActionList(KbdSectionInfo caller, HWND callerWnd)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            caller - 
            optional HWND callerWnd - the HWND that shall call the ActionList; can be nil
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ShowConsoleMsg</slug>
        <title>ShowConsoleMsg</title>
        <functioncall prog_lang="cpp">void ShowConsoleMsg(const char* msg)</functioncall>
        <functioncall prog_lang="eel">ShowConsoleMsg("msg")</functioncall>
        <functioncall prog_lang="lua">reaper.ShowConsoleMsg(string msg)</functioncall>
        <functioncall prog_lang="python">RPR_ShowConsoleMsg(String msg)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Show a message to the user (also useful for debugging). Send "\n" for newline, "" to clear the console. See [ClearConsole](#ClearConsole)
        </description>
        <parameters>
            msg - a message to be shown in ReaConsole
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, message, console</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ShowMessageBox</slug>
        <title>ShowMessageBox</title>
        <functioncall prog_lang="cpp">int ShowMessageBox(const char* msg, const char* title, int type)</functioncall>
        <functioncall prog_lang="eel">int ShowMessageBox("msg", "title", int type)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.ShowMessageBox(string msg, string title, integer type)</functioncall>
        <functioncall prog_lang="python">Int RPR_ShowMessageBox(String msg, String title, Int type)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Shows Messagebox with user-clickable buttons.           
        </description>
        <retvals>
            integer - the button pressed by the user
                    -1, OK
                    -2, CANCEL
                    -3, ABORT
                    -4, RETRY
                    -5, IGNORE
                    -6, YES
                    -7, NO
        </retvals>
        <parameters>
            msg - the message, that shall be shown in messagebox
            title - the title of the messagebox
            type - which buttons shall be shown in the messagebox
                -0, OK
                -1, OK CANCEL
                -2, ABORT RETRY IGNORE
                -3, YES NO CANCEL
                -4, YES NO
                -5, RETRY CANCEL
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>user, interface, input, dialog, messagebox</tags>        
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SLIDER2DB</slug>
        <title>SLIDER2DB</title>
        <functioncall prog_lang="cpp">double SLIDER2DB(double y)</functioncall>
        <functioncall prog_lang="eel">double SLIDER2DB(y)</functioncall>
        <functioncall prog_lang="lua">number = reaper.SLIDER2DB(number y)</functioncall>
        <functioncall prog_lang="python">Float RPR_SLIDER2DB(Float y)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Convert slider-value to it's dB-value-equivalent.
        </description>
        <retvals>
            number - the slider-value, you want to convert to dB
        </retvals>
        <parameters>
            y - the dB-value
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, slider, db, convert</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SnapToGrid</slug>
        <title>SnapToGrid</title>
        <functioncall prog_lang="cpp">double SnapToGrid(ReaProject* project, double time_pos)</functioncall>
        <functioncall prog_lang="eel">double SnapToGrid(ReaProject project, time_pos)</functioncall>
        <functioncall prog_lang="lua">number = reaper.SnapToGrid(ReaProject project, number time_pos)</functioncall>
        <functioncall prog_lang="python">Float RPR_SnapToGrid(ReaProject project, Float time_pos)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            project - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            time_pos - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SoloAllTracks</slug>
        <title>SoloAllTracks</title>
        <functioncall prog_lang="cpp">void SoloAllTracks(int solo)</functioncall>
        <functioncall prog_lang="eel">SoloAllTracks(int solo)</functioncall>
        <functioncall prog_lang="lua">reaper.SoloAllTracks(integer solo)</functioncall>
        <functioncall prog_lang="python">RPR_SoloAllTracks(Int solo)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Set solo-state for all tracks.
        </description>
        <parameters>
            solo - the new solo state for all tracks
                    -0, solo off
                    -1, solo, ignore routing
                    -2, solo in place
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, solo, state, set, on, off, solo in place, solo ignore routing</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Splash_GetWnd</slug>
        <title>Splash_GetWnd</title>
        <functioncall prog_lang="cpp">HWND Splash_GetWnd()</functioncall>
        <functioncall prog_lang="eel">HWND Splash_GetWnd()</functioncall>
        <functioncall prog_lang="lua">HWND = reaper.Splash_GetWnd()</functioncall>
        <functioncall prog_lang="python">HWND RPR_Splash_GetWnd()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed.
        </description>
        <retvals>
            HWND - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SplitMediaItem</slug>
        <title>SplitMediaItem</title>
        <functioncall prog_lang="cpp">MediaItem* SplitMediaItem(MediaItem* item, double position)</functioncall>
        <functioncall prog_lang="eel">MediaItem SplitMediaItem(MediaItem item, position)</functioncall>
        <functioncall prog_lang="lua">MediaItem = reaper.SplitMediaItem(MediaItem item, number position)</functioncall>
        <functioncall prog_lang="python">MediaItem RPR_SplitMediaItem(MediaItem item, Float position)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)
        </description>
        <retvals>
            MediaItem - the new MediaItem on the right side of the split
        </retvals>
        <parameters>
            item - the MediaItem so be split
            position - the split-position in seconds
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, split, item</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>stringToGuid</slug>
        <title>stringToGuid</title>
        <functioncall prog_lang="cpp">void stringToGuid(const char* str, GUID* g)</functioncall>
        <functioncall prog_lang="eel">stringToGuid("str", #gGUID)</functioncall>
        <functioncall prog_lang="lua">string gGUID = reaper.stringToGuid(string str, string gGUID)</functioncall>
        <functioncall prog_lang="python">RPR_stringToGuid(String str, GUID g)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            gGUID - 
        </retvals>
        <parameters>
            str - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>StuffMIDIMessage</slug>
        <title>StuffMIDIMessage</title>
        <functioncall prog_lang="cpp">void StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)</functioncall>
        <functioncall prog_lang="eel">StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)</functioncall>
        <functioncall prog_lang="lua">reaper.StuffMIDIMessage(integer mode, integer msg1, integer msg2, integer msg3)</functioncall>
        <functioncall prog_lang="python">RPR_StuffMIDIMessage(Int mode, Int msg1, Int msg2, Int msg3)</functioncall>
        <requires>
            Reaper=5.92
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see [GetNumMIDIOutputs](#GetNumMIDIOutputs), [GetMIDIOutputName](#GetMIDIOutputName).
        </description>
        <parameters>
            mode - 
            msg1 - 
            msg2 - 
            msg3 - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_AddByName</slug>
        <title>TakeFX_AddByName</title>
        <functioncall prog_lang="cpp">int TakeFX_AddByName(MediaItem_Take* take, const char* fxname, int instantiate)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_AddByName(MediaItem_Take take, "fxname", int instantiate)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TakeFX_AddByName(MediaItem_Take take, string fxname, integer instantiate)</functioncall>
        <functioncall prog_lang="python">Int RPR_TakeFX_AddByName(MediaItem_Take take, String fxname, Int instantiate)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Adds or queries the position of a named FX in a take. Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            take - 
            fxname - 
            instantiate - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_EndParamEdit</slug>
        <title>TakeFX_EndParamEdit</title>
        <functioncall prog_lang="cpp">bool TakeFX_EndParamEdit(MediaItem_Take* take, int fx, int param)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_EndParamEdit(MediaItem_Take take, int fx, int param)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TakeFX_EndParamEdit(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeFX_EndParamEdit(MediaItem_Take take, Int fx, Int param)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_FormatParamValue</slug>
        <title>TakeFX_FormatParamValue</title>
        <functioncall prog_lang="cpp">bool TakeFX_FormatParamValue(MediaItem_Take* take, int fx, int param, double val, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_FormatParamValue(MediaItem_Take take, int fx, int param, val, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_FormatParamValue(MediaItem_Take take, integer fx, integer param, number val, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, Float val, String buf, Int buf_sz) = RPR_TakeFX_FormatParamValue(take, fx, param, val, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Note: only works with FX that support Cockos VST extensions.
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            take - 
            fx - 
            param - 
            val - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_FormatParamValueNormalized</slug>
        <title>TakeFX_FormatParamValueNormalized</title>
        <functioncall prog_lang="cpp">bool TakeFX_FormatParamValueNormalized(MediaItem_Take* take, int fx, int param, double value, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_FormatParamValueNormalized(MediaItem_Take take, int fx, int param, value, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_FormatParamValueNormalized(MediaItem_Take take, integer fx, integer param, number value, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, Float value, String buf, Int buf_sz) = RPR_TakeFX_FormatParamValueNormalized(take, fx, param, value, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Note: only works with FX that support Cockos VST extensions.
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            take - 
            fx - 
            param - 
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetChainVisible</slug>
        <title>TakeFX_GetChainVisible</title>
        <functioncall prog_lang="cpp">int TakeFX_GetChainVisible(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetChainVisible(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TakeFX_GetChainVisible(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int RPR_TakeFX_GetChainVisible(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetCount</slug>
        <title>TakeFX_GetCount</title>
        <functioncall prog_lang="cpp">int TakeFX_GetCount(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetCount(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TakeFX_GetCount(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int RPR_TakeFX_GetCount(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetEnabled</slug>
        <title>TakeFX_GetEnabled</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetEnabled(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetEnabled(MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TakeFX_GetEnabled(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeFX_GetEnabled(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TakeFX_SetEnabled](#TakeFX_SetEnabled)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetEnvelope</slug>
        <title>TakeFX_GetEnvelope</title>
        <functioncall prog_lang="cpp">TrackEnvelope* TakeFX_GetEnvelope(MediaItem_Take* take, int fxindex, int parameterindex, bool create)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope TakeFX_GetEnvelope(MediaItem_Take take, int fxindex, int parameterindex, bool create)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope = reaper.TakeFX_GetEnvelope(MediaItem_Take take, integer fxindex, integer parameterindex, boolean create)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope RPR_TakeFX_GetEnvelope(MediaItem_Take take, Int fxindex, Int parameterindex, Boolean create)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
        </description>
        <retvals>
            TrackEnvelope - 
        </retvals>
        <parameters>
            take - 
            fxindex - 
            parameterindex - 
            create - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetFloatingWindow</slug>
        <title>TakeFX_GetFloatingWindow</title>
        <functioncall prog_lang="cpp">HWND TakeFX_GetFloatingWindow(MediaItem_Take* take, int index)</functioncall>
        <functioncall prog_lang="eel">HWND TakeFX_GetFloatingWindow(MediaItem_Take take, int index)</functioncall>
        <functioncall prog_lang="lua">HWND = reaper.TakeFX_GetFloatingWindow(MediaItem_Take take, integer index)</functioncall>
        <functioncall prog_lang="python">HWND RPR_TakeFX_GetFloatingWindow(MediaItem_Take take, Int index)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns HWND of floating window for effect index, if any
        </description>
        <retvals>
            HWND - 
        </retvals>
        <parameters>
            take - 
            index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetFormattedParamValue</slug>
        <title>TakeFX_GetFormattedParamValue</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetFormattedParamValue(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetFormattedParamValue(MediaItem_Take take, int fx, int param, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetFormattedParamValue(MediaItem_Take take, integer fx, integer param, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, String buf, Int buf_sz) = RPR_TakeFX_GetFormattedParamValue(take, fx, param, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            take - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetFXGUID</slug>
        <title>TakeFX_GetFXGUID</title>
        <functioncall prog_lang="cpp">GUID* TakeFX_GetFXGUID(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetFXGUID(#retguid, MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">string GUID = reaper.TakeFX_GetFXGUID(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">GUID RPR_TakeFX_GetFXGUID(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             GUID - 
        </retvals>
        <parameters>
            take - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetFXName</slug>
        <title>TakeFX_GetFXName</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetFXName(MediaItem_Take* take, int fx, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetFXName(MediaItem_Take take, int fx, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetFXName(MediaItem_Take take, integer fx, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, String buf, Int buf_sz) = RPR_TakeFX_GetFXName(take, fx, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            take - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetIOSize</slug>
        <title>TakeFX_GetIOSize</title>
        <functioncall prog_lang="cpp">int TakeFX_GetIOSize(MediaItem_Take* take, int fx, int* inputPinsOutOptional, int* outputPinsOutOptional)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetIOSize(MediaItem_Take take, int fx, optional int &amp;inputPins, optional int &amp;outputPins)</functioncall>
        <functioncall prog_lang="lua">integer retval, optional number inputPins, optional number outputPins = reaper.TakeFX_GetIOSize(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int fx, Int inputPinsOutOptional, Int outputPinsOutOptional) = RPR_TakeFX_GetIOSize(take, fx, inputPinsOutOptional, outputPinsOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
        </description>
        <retvals>
             retval - 
            inputPins - 
            outputPins - 
        </retvals>
        <parameters>
            take - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetNamedConfigParm</slug>
        <title>TakeFX_GetNamedConfigParm</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetNamedConfigParm(MediaItem_Take take, int fx, "parmname", #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetNamedConfigParm(MediaItem_Take take, integer fx, string parmname)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, String parmname, String bufOut, Int bufOut_sz) = RPR_TakeFX_GetNamedConfigParm(take, fx, parmname, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            gets plug-in specific named configuration value (returns true on success)
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            take - 
            fx - 
            parmname - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetNumParams</slug>
        <title>TakeFX_GetNumParams</title>
        <functioncall prog_lang="cpp">int TakeFX_GetNumParams(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetNumParams(MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TakeFX_GetNumParams(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">Int RPR_TakeFX_GetNumParams(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            take - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetOpen</slug>
        <title>TakeFX_GetOpen</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetOpen(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetOpen(MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TakeFX_GetOpen(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeFX_GetOpen(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns true if this FX UI is open in the FX chain window or a floating window. See [TakeFX_SetOpen](#TakeFX_SetOpen)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParam</slug>
        <title>TakeFX_GetParam</title>
        <functioncall prog_lang="cpp">double TakeFX_GetParam(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut)</functioncall>
        <functioncall prog_lang="eel">double TakeFX_GetParam(MediaItem_Take take, int fx, int param, &amp;minval, &amp;maxval)</functioncall>
        <functioncall prog_lang="lua">number retval, number minval, number maxval = reaper.TakeFX_GetParam(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Float retval, MediaItem_Take take, Int fx, Int param, Float minvalOut, Float maxvalOut) = RPR_TakeFX_GetParam(take, fx, param, minvalOut, maxvalOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            minval - 
            maxval - 
        </retvals>
        <parameters>
            take - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParameterStepSizes</slug>
        <title>TakeFX_GetParameterStepSizes</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetParameterStepSizes(MediaItem_Take* take, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetParameterStepSizes(MediaItem_Take take, int fx, int param, &amp;step, &amp;smallstep, &amp;largestep, bool &amp;istoggle)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TakeFX_GetParameterStepSizes(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, Float stepOut, Float smallstepOut, Float largestepOut, Boolean istoggleOut) = RPR_TakeFX_GetParameterStepSizes(take, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            step - 
            smallstep - 
            largestep - 
            istoggle - 
        </retvals>
        <parameters>
            take - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParamEx</slug>
        <title>TakeFX_GetParamEx</title>
        <functioncall prog_lang="cpp">double TakeFX_GetParamEx(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)</functioncall>
        <functioncall prog_lang="eel">double TakeFX_GetParamEx(MediaItem_Take take, int fx, int param, &amp;minval, &amp;maxval, &amp;midval)</functioncall>
        <functioncall prog_lang="lua">number retval, number minval, number maxval, number midval = reaper.TakeFX_GetParamEx(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Float retval, MediaItem_Take take, Int fx, Int param, Float minvalOut, Float maxvalOut, Float midvalOut) = RPR_TakeFX_GetParamEx(take, fx, param, minvalOut, maxvalOut, midvalOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            minval - 
            maxval - 
            midval - 
        </retvals>
        <parameters>
            take - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParamName</slug>
        <title>TakeFX_GetParamName</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetParamName(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetParamName(MediaItem_Take take, int fx, int param, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetParamName(MediaItem_Take take, integer fx, integer param, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, String buf, Int buf_sz) = RPR_TakeFX_GetParamName(take, fx, param, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            take - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetParamNormalized</slug>
        <title>TakeFX_GetParamNormalized</title>
        <functioncall prog_lang="cpp">double TakeFX_GetParamNormalized(MediaItem_Take* take, int fx, int param)</functioncall>
        <functioncall prog_lang="eel">double TakeFX_GetParamNormalized(MediaItem_Take take, int fx, int param)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TakeFX_GetParamNormalized(MediaItem_Take take, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">Float RPR_TakeFX_GetParamNormalized(MediaItem_Take take, Int fx, Int param)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            take - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetPinMappings</slug>
        <title>TakeFX_GetPinMappings</title>
        <functioncall prog_lang="cpp">int TakeFX_GetPinMappings(MediaItem_Take* tr, int fx, int isOutput, int pin, int* high32OutOptional)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetPinMappings(MediaItem_Take tr, int fx, int is, int pin, optional int &amp;high32)</functioncall>
        <functioncall prog_lang="lua">integer retval, optional number high32 = reaper.TakeFX_GetPinMappings(MediaItem_Take tr, integer fx, integer is, integer pin)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take tr, Int fx, Int isOutput, Int pin, Int high32OutOptional) = RPR_TakeFX_GetPinMappings(tr, fx, isOutput, pin, high32OutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
        </description>
        <retvals>
             retval - 
            high32 - 
        </retvals>
        <parameters>
            tr - 
            fx - 
            is - 
            pin - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetPreset</slug>
        <title>TakeFX_GetPreset</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetPreset(MediaItem_Take* take, int fx, char* presetname, int presetname_sz)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetPreset(MediaItem_Take take, int fx, #presetname)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string presetname = reaper.TakeFX_GetPreset(MediaItem_Take take, integer fx, string presetname)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, String presetname, Int presetname_sz) = RPR_TakeFX_GetPreset(take, fx, presetname, presetname_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See [TakeFX_SetPreset](#TakeFX_SetPreset).
        </description>
        <retvals>
             retval - 
            presetname - 
        </retvals>
        <parameters>
            take - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetPresetIndex</slug>
        <title>TakeFX_GetPresetIndex</title>
        <functioncall prog_lang="cpp">int TakeFX_GetPresetIndex(MediaItem_Take* take, int fx, int* numberOfPresetsOut)</functioncall>
        <functioncall prog_lang="eel">int TakeFX_GetPresetIndex(MediaItem_Take take, int fx, int &amp;numberOfPresets)</functioncall>
        <functioncall prog_lang="lua">integer retval, number numberOfPresets = reaper.TakeFX_GetPresetIndex(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int fx, Int numberOfPresetsOut) = RPR_TakeFX_GetPresetIndex(take, fx, numberOfPresetsOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See [TakeFX_SetPresetByIndex](#TakeFX_SetPresetByIndex)
        </description>
        <retvals>
             retval - 
            numberOfPresets - 
        </retvals>
        <parameters>
            take - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetUserPresetFilename</slug>
        <title>TakeFX_GetUserPresetFilename</title>
        <functioncall prog_lang="cpp">void TakeFX_GetUserPresetFilename(MediaItem_Take* take, int fx, char* fn, int fn_sz)</functioncall>
        <functioncall prog_lang="eel">TakeFX_GetUserPresetFilename(MediaItem_Take take, int fx, #fn)</functioncall>
        <functioncall prog_lang="lua">string fn = reaper.TakeFX_GetUserPresetFilename(MediaItem_Take take, integer fx, string fn)</functioncall>
        <functioncall prog_lang="python">(MediaItem_Take take, Int fx, String fn, Int fn_sz) = RPR_TakeFX_GetUserPresetFilename(take, fx, fn, fn_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            fn - 
        </retvals>
        <parameters>
            take - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_NavigatePresets</slug>
        <title>TakeFX_NavigatePresets</title>
        <functioncall prog_lang="cpp">bool TakeFX_NavigatePresets(MediaItem_Take* take, int fx, int presetmove)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_NavigatePresets(MediaItem_Take take, int fx, int presetmove)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TakeFX_NavigatePresets(MediaItem_Take take, integer fx, integer presetmove)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeFX_NavigatePresets(MediaItem_Take take, Int fx, Int presetmove)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            fx - 
            presetmove - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetEnabled</slug>
        <title>TakeFX_SetEnabled</title>
        <functioncall prog_lang="cpp">void TakeFX_SetEnabled(MediaItem_Take* take, int fx, bool enabled)</functioncall>
        <functioncall prog_lang="eel">TakeFX_SetEnabled(MediaItem_Take take, int fx, bool enabled)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_SetEnabled(MediaItem_Take take, integer fx, boolean enabled)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_SetEnabled(MediaItem_Take take, Int fx, Boolean enabled)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TakeFX_GetEnabled](#TakeFX_GetEnabled)
        </description>
        <parameters>
            take - 
            fx - 
            enabled - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetNamedConfigParm</slug>
        <title>TakeFX_SetNamedConfigParm</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, const char* value)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetNamedConfigParm(MediaItem_Take take, int fx, "parmname", "value")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetNamedConfigParm(MediaItem_Take take, integer fx, string parmname, string value)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeFX_SetNamedConfigParm(MediaItem_Take take, Int fx, String parmname, String value)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            gets plug-in specific named configuration value (returns true on success)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            fx - 
            parmname - 
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetOpen</slug>
        <title>TakeFX_SetOpen</title>
        <functioncall prog_lang="cpp">void TakeFX_SetOpen(MediaItem_Take* take, int fx, bool open)</functioncall>
        <functioncall prog_lang="eel">TakeFX_SetOpen(MediaItem_Take take, int fx, bool open)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_SetOpen(MediaItem_Take take, integer fx, boolean open)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_SetOpen(MediaItem_Take take, Int fx, Boolean open)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Open this FX UI. See [TakeFX_GetOpen](#TakeFX_GetOpen)
        </description>
        <parameters>
            take - 
            fx - 
            open - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetParam</slug>
        <title>TakeFX_SetParam</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetParam(MediaItem_Take* take, int fx, int param, double val)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetParam(MediaItem_Take take, int fx, int param, val)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetParam(MediaItem_Take take, integer fx, integer param, number val)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeFX_SetParam(MediaItem_Take take, Int fx, Int param, Float val)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            fx - 
            param - 
            val - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetParamNormalized</slug>
        <title>TakeFX_SetParamNormalized</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetParamNormalized(MediaItem_Take* take, int fx, int param, double value)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetParamNormalized(MediaItem_Take take, int fx, int param, value)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetParamNormalized(MediaItem_Take take, integer fx, integer param, number value)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeFX_SetParamNormalized(MediaItem_Take take, Int fx, Int param, Float value)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            fx - 
            param - 
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetPinMappings</slug>
        <title>TakeFX_SetPinMappings</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetPinMappings(MediaItem_Take* tr, int fx, int isOutput, int pin, int low32bits, int hi32bits)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetPinMappings(MediaItem_Take tr, int fx, int is, int pin, int low32bits, int hi32bits)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetPinMappings(MediaItem_Take tr, integer fx, integer is, integer pin, integer low32bits, integer hi32bits)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeFX_SetPinMappings(MediaItem_Take tr, Int fx, Int isOutput, Int pin, Int low32bits, Int hi32bits)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            tr - 
            fx - 
            is - 
            pin - 
            low32bits - 
            hi32bits - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetPreset</slug>
        <title>TakeFX_SetPreset</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetPreset(MediaItem_Take* take, int fx, const char* presetname)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetPreset(MediaItem_Take take, int fx, "presetname")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetPreset(MediaItem_Take take, integer fx, string presetname)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeFX_SetPreset(MediaItem_Take take, Int fx, String presetname)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See [TakeFX_GetPreset](#TakeFX_GetPreset).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            fx - 
            presetname - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetPresetByIndex</slug>
        <title>TakeFX_SetPresetByIndex</title>
        <functioncall prog_lang="cpp">bool TakeFX_SetPresetByIndex(MediaItem_Take* take, int fx, int idx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_SetPresetByIndex(MediaItem_Take take, int fx, int idx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetPresetByIndex(MediaItem_Take take, integer fx, integer idx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeFX_SetPresetByIndex(MediaItem_Take take, Int fx, Int idx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See [TakeFX_GetPresetIndex](#TakeFX_GetPresetIndex).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            fx - 
            idx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_Show</slug>
        <title>TakeFX_Show</title>
        <functioncall prog_lang="cpp">void TakeFX_Show(MediaItem_Take* take, int index, int showFlag)</functioncall>
        <functioncall prog_lang="eel">TakeFX_Show(MediaItem_Take take, int index, int showFlag)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_Show(MediaItem_Take take, integer index, integer showFlag)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_Show(MediaItem_Take take, Int index, Int showFlag)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)
        </description>
        <parameters>
            take - 
            index - 
            showFlag - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeIsMIDI</slug>
        <title>TakeIsMIDI</title>
        <functioncall prog_lang="cpp">bool TakeIsMIDI(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">bool TakeIsMIDI(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TakeIsMIDI(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeIsMIDI(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns true if the active take contains MIDI.
        </description>
        <retvals>
            boolean - true, MediaItem_Take contains MIDI; false, MediaItem_Take doesn't contain MIDI
        </retvals>
        <parameters>
            take - the MediaItem_Take, that you want to check for MIDI-elements
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags>midimanagement, take, item, check</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>time_precise</slug>
        <title>time_precise</title>
        <functioncall prog_lang="cpp">double time_precise()</functioncall>
        <functioncall prog_lang="lua">number = reaper.time_precise()</functioncall>
        <functioncall prog_lang="python">Float RPR_time_precise()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            Gets a precise system timestamp in seconds.
            
            For EEL-programming, see [eel_time_precise](#eel_time_precise).
        </description>
        <retvals>
            number - the system-timestamp in seconds with a precision of 7 digits
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, time, precise</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_beatsToTime</slug>
        <title>TimeMap2_beatsToTime</title>
        <functioncall prog_lang="cpp">double TimeMap2_beatsToTime(ReaProject* proj, double tpos, const int* measuresInOptional)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_beatsToTime(ReaProject proj, tpos, optional int measuresIn)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TimeMap2_beatsToTime(ReaProject proj, number tpos, optional number measuresIn)</functioncall>
        <functioncall prog_lang="python">Float RPR_TimeMap2_beatsToTime(ReaProject proj, Float tpos, const int measuresInOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            tpos - 
            measuresIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_GetDividedBpmAtTime</slug>
        <title>TimeMap2_GetDividedBpmAtTime</title>
        <functioncall prog_lang="cpp">double TimeMap2_GetDividedBpmAtTime(ReaProject* proj, double time)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_GetDividedBpmAtTime(ReaProject proj, time)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TimeMap2_GetDividedBpmAtTime(ReaProject proj, number time)</functioncall>
        <functioncall prog_lang="python">Float RPR_TimeMap2_GetDividedBpmAtTime(ReaProject proj, Float time)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            time - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_GetNextChangeTime</slug>
        <title>TimeMap2_GetNextChangeTime</title>
        <functioncall prog_lang="cpp">double TimeMap2_GetNextChangeTime(ReaProject* proj, double time)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_GetNextChangeTime(ReaProject proj, time)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TimeMap2_GetNextChangeTime(ReaProject proj, number time)</functioncall>
        <functioncall prog_lang="python">Float RPR_TimeMap2_GetNextChangeTime(ReaProject proj, Float time)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            when does the next time map (tempo or time sig) change occur
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            time - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_QNToTime</slug>
        <title>TimeMap2_QNToTime</title>
        <functioncall prog_lang="cpp">double TimeMap2_QNToTime(ReaProject* proj, double qn)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_QNToTime(ReaProject proj, qn)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TimeMap2_QNToTime(ReaProject proj, number qn)</functioncall>
        <functioncall prog_lang="python">Float RPR_TimeMap2_QNToTime(ReaProject proj, Float qn)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            converts project QN position to time.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            qn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_timeToBeats</slug>
        <title>TimeMap2_timeToBeats</title>
        <functioncall prog_lang="cpp">double TimeMap2_timeToBeats(ReaProject* proj, double tpos, int* measuresOutOptional, int* cmlOutOptional, double* fullbeatsOutOptional, int* cdenomOutOptional)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_timeToBeats(ReaProject proj, tpos, optional int &amp;measures, optional int &amp;cml, optional &amp;fullbeats, optional int &amp;cdenom)</functioncall>
        <functioncall prog_lang="lua">number retval, optional number measures, optional number cml, optional number fullbeats, optional number cdenom = reaper.TimeMap2_timeToBeats(ReaProject proj, number tpos)</functioncall>
        <functioncall prog_lang="python">(Float retval, ReaProject proj, Float tpos, Int measuresOutOptional, Int cmlOutOptional, Float fullbeatsOutOptional, Int cdenomOutOptional) = RPR_TimeMap2_timeToBeats(proj, tpos, measuresOutOptional, cmlOutOptional, fullbeatsOutOptional, cdenomOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            convert a time into beats.
            if measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.
            if cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)
            if fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).
            if cdenom is non-NULL, will be set to the current time signature denominator.
        </description>
        <retvals>
             retval - 
            measures - 
            cml - 
            fullbeats - 
            cdenom - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            tpos - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap2_timeToQN</slug>
        <title>TimeMap2_timeToQN</title>
        <functioncall prog_lang="cpp">double TimeMap2_timeToQN(ReaProject* proj, double tpos)</functioncall>
        <functioncall prog_lang="eel">double TimeMap2_timeToQN(ReaProject proj, tpos)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TimeMap2_timeToQN(ReaProject proj, number tpos)</functioncall>
        <functioncall prog_lang="python">Float RPR_TimeMap2_timeToQN(ReaProject proj, Float tpos)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            converts project time position to QN position.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            tpos - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_curFrameRate</slug>
        <title>TimeMap_curFrameRate</title>
        <functioncall prog_lang="cpp">double TimeMap_curFrameRate(ReaProject* proj, bool* dropFrameOutOptional)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_curFrameRate(ReaProject proj, optional bool &amp;dropFrame)</functioncall>
        <functioncall prog_lang="lua">number retval, optional boolean dropFrame = reaper.TimeMap_curFrameRate(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">(Float retval, ReaProject proj, Boolean dropFrameOutOptional) = RPR_TimeMap_curFrameRate(proj, dropFrameOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Gets project framerate, and optionally whether it is drop-frame timecode
        </description>
        <retvals>
             retval - 
            dropFrame - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_GetDividedBpmAtTime</slug>
        <title>TimeMap_GetDividedBpmAtTime</title>
        <functioncall prog_lang="cpp">double TimeMap_GetDividedBpmAtTime(double time)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_GetDividedBpmAtTime(time)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TimeMap_GetDividedBpmAtTime(number time)</functioncall>
        <functioncall prog_lang="python">Float RPR_TimeMap_GetDividedBpmAtTime(Float time)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            time - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_GetMeasureInfo</slug>
        <title>TimeMap_GetMeasureInfo</title>
        <functioncall prog_lang="cpp">double TimeMap_GetMeasureInfo(ReaProject* proj, int measure, double* qn_startOut, double* qn_endOut, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_GetMeasureInfo(ReaProject proj, int measure, &amp;qn_start, &amp;qn_end, int &amp;timesig_num, int &amp;timesig_denom, &amp;tempo)</functioncall>
        <functioncall prog_lang="lua">number retval, number qn_start, number qn_end, number timesig_num, number timesig_denom, number tempo = reaper.TimeMap_GetMeasureInfo(ReaProject proj, integer measure)</functioncall>
        <functioncall prog_lang="python">(Float retval, ReaProject proj, Int measure, Float qn_startOut, Float qn_endOut, Int timesig_numOut, Int timesig_denomOut, Float tempoOut) = RPR_TimeMap_GetMeasureInfo(proj, measure, qn_startOut, qn_endOut, timesig_numOut, timesig_denomOut, tempoOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.
        </description>
        <retvals>
             retval - 
            qn_start - 
            qn_end - 
            timesig_num - 
            timesig_denom - 
            tempo - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            measure - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_GetMetronomePattern</slug>
        <title>TimeMap_GetMetronomePattern</title>
        <functioncall prog_lang="cpp">int TimeMap_GetMetronomePattern(ReaProject* proj, double time, char* pattern, int pattern_sz)</functioncall>
        <functioncall prog_lang="eel">int TimeMap_GetMetronomePattern(ReaProject proj, time, #pattern)</functioncall>
        <functioncall prog_lang="lua">integer retval, string pattern = reaper.TimeMap_GetMetronomePattern(ReaProject proj, number time, string pattern)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, Float time, String pattern, Int pattern_sz) = RPR_TimeMap_GetMetronomePattern(proj, time, pattern, pattern_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be "1221222". The length of the string is the time signature numerator, and the function returns the time signature denominator.
        </description>
        <retvals>
             retval - 
            pattern - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            time - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_GetTimeSigAtTime</slug>
        <title>TimeMap_GetTimeSigAtTime</title>
        <functioncall prog_lang="cpp">void TimeMap_GetTimeSigAtTime(ReaProject* proj, double time, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)</functioncall>
        <functioncall prog_lang="eel">TimeMap_GetTimeSigAtTime(ReaProject proj, time, int &amp;timesig_num, int &amp;timesig_denom, &amp;tempo)</functioncall>
        <functioncall prog_lang="lua">number timesig_num retval, number timesig_denom, number tempo = reaper.TimeMap_GetTimeSigAtTime(ReaProject proj, number time)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Float time, Int timesig_numOut, Int timesig_denomOut, Float tempoOut) = RPR_TimeMap_GetTimeSigAtTime(proj, time, timesig_numOut, timesig_denomOut, tempoOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            get the effective time signature and tempo
        </description>
        <retvals>
            timesig_num retval - 
            timesig_denom - 
            tempo - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            time - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_QNToMeasures</slug>
        <title>TimeMap_QNToMeasures</title>
        <functioncall prog_lang="cpp">int TimeMap_QNToMeasures(ReaProject* proj, double qn, double* qnMeasureStartOutOptional, double* qnMeasureEndOutOptional)</functioncall>
        <functioncall prog_lang="eel">int TimeMap_QNToMeasures(ReaProject proj, qn, optional &amp;qnMeasureStart, optional &amp;qnMeasureEnd)</functioncall>
        <functioncall prog_lang="lua">integer retval, optional number qnMeasureStart, optional number qnMeasureEnd = reaper.TimeMap_QNToMeasures(ReaProject proj, number qn)</functioncall>
        <functioncall prog_lang="python">(Int retval, ReaProject proj, Float qn, Float qnMeasureStartOutOptional, Float qnMeasureEndOutOptional) = RPR_TimeMap_QNToMeasures(proj, qn, qnMeasureStartOutOptional, qnMeasureEndOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Find which measure the given QN position falls in.
        </description>
        <retvals>
             retval - 
            qnMeasureStart - 
            qnMeasureEnd - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            qn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_QNToTime</slug>
        <title>TimeMap_QNToTime</title>
        <functioncall prog_lang="cpp">double TimeMap_QNToTime(double qn)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_QNToTime(qn)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TimeMap_QNToTime(number qn)</functioncall>
        <functioncall prog_lang="python">Float RPR_TimeMap_QNToTime(Float qn)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            converts project QN position to time.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            qn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_QNToTime_abs</slug>
        <title>TimeMap_QNToTime_abs</title>
        <functioncall prog_lang="cpp">double TimeMap_QNToTime_abs(ReaProject* proj, double qn)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_QNToTime_abs(ReaProject proj, qn)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TimeMap_QNToTime_abs(ReaProject proj, number qn)</functioncall>
        <functioncall prog_lang="python">Float RPR_TimeMap_QNToTime_abs(ReaProject proj, Float qn)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See [TimeMap2_QNToTime](#TimeMap2_QNToTime)
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            qn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_timeToQN</slug>
        <title>TimeMap_timeToQN</title>
        <functioncall prog_lang="cpp">double TimeMap_timeToQN(double tpos)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_timeToQN(tpos)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TimeMap_timeToQN(number tpos)</functioncall>
        <functioncall prog_lang="python">Float RPR_TimeMap_timeToQN(Float tpos)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            converts project QN position to time.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            tpos - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TimeMap_timeToQN_abs</slug>
        <title>TimeMap_timeToQN_abs</title>
        <functioncall prog_lang="cpp">double TimeMap_timeToQN_abs(ReaProject* proj, double tpos)</functioncall>
        <functioncall prog_lang="eel">double TimeMap_timeToQN_abs(ReaProject proj, tpos)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TimeMap_timeToQN_abs(ReaProject proj, number tpos)</functioncall>
        <functioncall prog_lang="python">Float RPR_TimeMap_timeToQN_abs(ReaProject proj, Float tpos)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See [TimeMap2_timeToQN](#TimeMap2_timeToQN)
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            tpos - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ToggleTrackSendUIMute</slug>
        <title>ToggleTrackSendUIMute</title>
        <functioncall prog_lang="cpp">bool ToggleTrackSendUIMute(MediaTrack* track, int send_idx)</functioncall>
        <functioncall prog_lang="eel">bool ToggleTrackSendUIMute(MediaTrack track, int send_idx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.ToggleTrackSendUIMute(MediaTrack track, integer send_idx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_ToggleTrackSendUIMute(MediaTrack track, Int send_idx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            send_idx&gt;0 for receives, &gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            send_idx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Track_GetPeakHoldDB</slug>
        <title>Track_GetPeakHoldDB</title>
        <functioncall prog_lang="cpp">double Track_GetPeakHoldDB(MediaTrack* track, int channel, bool clear)</functioncall>
        <functioncall prog_lang="eel">double Track_GetPeakHoldDB(MediaTrack track, int channel, bool clear)</functioncall>
        <functioncall prog_lang="lua">number = reaper.Track_GetPeakHoldDB(MediaTrack track, integer channel, boolean clear)</functioncall>
        <functioncall prog_lang="python">Float RPR_Track_GetPeakHoldDB(MediaTrack track, Int channel, Boolean clear)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            track - 
            channel - 
            clear - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Track_GetPeakInfo</slug>
        <title>Track_GetPeakInfo</title>
        <functioncall prog_lang="cpp">double Track_GetPeakInfo(MediaTrack* track, int channel)</functioncall>
        <functioncall prog_lang="eel">double Track_GetPeakInfo(MediaTrack track, int channel)</functioncall>
        <functioncall prog_lang="lua">number = reaper.Track_GetPeakInfo(MediaTrack track, integer channel)</functioncall>
        <functioncall prog_lang="python">Float RPR_Track_GetPeakInfo(MediaTrack track, Int channel)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            track - 
            channel - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackCtl_SetToolTip</slug>
        <title>TrackCtl_SetToolTip</title>
        <functioncall prog_lang="cpp">void TrackCtl_SetToolTip(const char* fmt, int xpos, int ypos, bool topmost)</functioncall>
        <functioncall prog_lang="eel">TrackCtl_SetToolTip("fmt", int xpos, int ypos, bool topmost)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackCtl_SetToolTip(string fmt, integer xpos, integer ypos, boolean topmost)</functioncall>
        <functioncall prog_lang="python">RPR_TrackCtl_SetToolTip(String fmt, Int xpos, Int ypos, Boolean topmost)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Displays tooltip at location, or removes if empty string.
            
            Only one tooltip can be shown, means, a new tooltip removes the previous one.
        </description>
        <parameters>
            fmt - the message, to be shown as tooltip; empty string removes tooltip
            xpos - horizontal position in pixels
            ypos - vertical position in pixels
            topmost - unknown
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, tooltip, message, set</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_AddByName</slug>
        <title>TrackFX_AddByName</title>
        <functioncall prog_lang="cpp">int TrackFX_AddByName(MediaTrack* track, const char* fxname, bool recFX, int instantiate)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_AddByName(MediaTrack track, "fxname", bool recFX, int instantiate)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TrackFX_AddByName(MediaTrack track, string fxname, boolean recFX, integer instantiate)</functioncall>
        <functioncall prog_lang="python">Int RPR_TrackFX_AddByName(MediaTrack track, String fxname, Boolean recFX, Int instantiate)</functioncall>
        <requires>
            Reaper=5.92
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            track - 
            fxname - 
            recFX - 
            instantiate - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_CopyToTrack</slug>
        <title>TrackFX_CopyToTrack</title>
        <functioncall prog_lang="cpp">void TrackFX_CopyToTrack(MediaTrack* src_track, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="eel">TrackFX_CopyToTrack(MediaTrack src_track, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_CopyToTrack(MediaTrack src_track, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_CopyToTrack(MediaTrack src_track, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX. 
        </description>
        <parameters>
            MediaTrack src_track - 
            Int src_fx - 
            MediaTrack dest_track - 
            Int dest_fx - 
            Boolean is_move - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_CopyToTake</slug>
        <title>TrackFX_CopyToTake</title>
        <functioncall prog_lang="cpp">void TrackFX_CopyToTake(MediaTrack* src_track, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="eel">TrackFX_CopyToTake(MediaTrack src_track, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_CopyToTake(MediaTrack src_track, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_CopyToTake(MediaTrack src_track, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX. 
        </description>
        <parameters>
            MediaTrack src_track - 
            integer src_fx - 
            MediaItem_Take dest_take - 
            integer dest_fx - 
            boolean is_move - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_EndParamEdit</slug>
        <title>TrackFX_EndParamEdit</title>
        <functioncall prog_lang="cpp">bool TrackFX_EndParamEdit(MediaTrack* track, int fx, int param)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_EndParamEdit(MediaTrack track, int fx, int param)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_EndParamEdit(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_EndParamEdit(MediaTrack track, Int fx, Int param)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_FormatParamValue</slug>
        <title>TrackFX_FormatParamValue</title>
        <functioncall prog_lang="cpp">bool TrackFX_FormatParamValue(MediaTrack* track, int fx, int param, double val, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_FormatParamValue(MediaTrack track, int fx, int param, val, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_FormatParamValue(MediaTrack track, integer fx, integer param, number val, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, Float val, String buf, Int buf_sz) = RPR_TrackFX_FormatParamValue(track, fx, param, val, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Note: only works with FX that support Cockos VST extensions.
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            track - 
            fx - 
            param - 
            val - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_FormatParamValueNormalized</slug>
        <title>TrackFX_FormatParamValueNormalized</title>
        <functioncall prog_lang="cpp">bool TrackFX_FormatParamValueNormalized(MediaTrack* track, int fx, int param, double value, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_FormatParamValueNormalized(MediaTrack track, int fx, int param, value, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_FormatParamValueNormalized(MediaTrack track, integer fx, integer param, number value, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, Float value, String buf, Int buf_sz) = RPR_TrackFX_FormatParamValueNormalized(track, fx, param, value, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Note: only works with FX that support Cockos VST extensions.
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            track - 
            fx - 
            param - 
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetByName</slug>
        <title>TrackFX_GetByName</title>
        <functioncall prog_lang="cpp">int TrackFX_GetByName(MediaTrack* track, const char* fxname, bool instantiate)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetByName(MediaTrack track, "fxname", bool instantiate)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TrackFX_GetByName(MediaTrack track, string fxname, boolean instantiate)</functioncall>
        <functioncall prog_lang="python">Int RPR_TrackFX_GetByName(MediaTrack track, String fxname, Boolean instantiate)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See [TrackFX_GetInstrument](#TrackFX_GetInstrument), [TrackFX_GetEQ](#TrackFX_GetEQ). Deprecated in favor of TrackFX_AddByName.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            track - 
            fxname - 
            instantiate - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetChainVisible</slug>
        <title>TrackFX_GetChainVisible</title>
        <functioncall prog_lang="cpp">int TrackFX_GetChainVisible(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetChainVisible(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TrackFX_GetChainVisible(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int RPR_TrackFX_GetChainVisible(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetCount</slug>
        <title>TrackFX_GetCount</title>
        <functioncall prog_lang="cpp">int TrackFX_GetCount(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetCount(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TrackFX_GetCount(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int RPR_TrackFX_GetCount(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetEnabled</slug>
        <title>TrackFX_GetEnabled</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetEnabled(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetEnabled(MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_GetEnabled(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_GetEnabled(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TrackFX_SetEnabled](#TrackFX_SetEnabled)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetEQ</slug>
        <title>TrackFX_GetEQ</title>
        <functioncall prog_lang="cpp">int TrackFX_GetEQ(MediaTrack* track, bool instantiate)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetEQ(MediaTrack track, bool instantiate)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TrackFX_GetEQ(MediaTrack track, boolean instantiate)</functioncall>
        <functioncall prog_lang="python">Int RPR_TrackFX_GetEQ(MediaTrack track, Boolean instantiate)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See [TrackFX_GetInstrument](#TrackFX_GetInstrument), [TrackFX_GetByName](#TrackFX_GetByName).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            track - 
            instantiate - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetEQBandEnabled</slug>
        <title>TrackFX_GetEQBandEnabled</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetEQBandEnabled(MediaTrack track, int fxidx, int bandtype, int bandidx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_GetEQBandEnabled(MediaTrack track, integer fxidx, integer bandtype, integer bandidx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_GetEQBandEnabled(MediaTrack track, Int fxidx, Int bandtype, Int bandidx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns true if the EQ band is enabled.
            Returns false if the band is disabled, or if track/fxidx is not ReaEQ.
            Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
            Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
            See [TrackFX_GetEQ](#TrackFX_GetEQ), [TrackFX_GetEQParam](#TrackFX_GetEQParam), [TrackFX_SetEQParam](#TrackFX_SetEQParam), [TrackFX_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            fxidx - 
            bandtype - 
            bandidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetEQParam</slug>
        <title>TrackFX_GetEQParam</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetEQParam(MediaTrack* track, int fxidx, int paramidx, int* bandtypeOut, int* bandidxOut, int* paramtypeOut, double* normvalOut)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetEQParam(MediaTrack track, int fxidx, int paramidx, int &amp;bandtype, int &amp;bandidx, int &amp;paramtype, &amp;normval)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number bandtype, number bandidx, number paramtype, number normval = reaper.TrackFX_GetEQParam(MediaTrack track, integer fxidx, integer paramidx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fxidx, Int paramidx, Int bandtypeOut, Int bandidxOut, Int paramtypeOut, Float normvalOut) = RPR_TrackFX_GetEQParam(track, fxidx, paramidx, bandtypeOut, bandidxOut, paramtypeOut, normvalOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns false if track/fxidx is not ReaEQ.
            Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
            Bandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
            Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
            See [TrackFX_GetEQ](#TrackFX_GetEQ), [TrackFX_SetEQParam](#TrackFX_SetEQParam), [TrackFX_GetEQBandEnabled](#TrackFX_GetEQBandEnabled), [TrackFX_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).
        </description>
        <retvals>
             retval - 
            bandtype - 
            bandidx - 
            paramtype - 
            normval - 
        </retvals>
        <parameters>
            track - 
            fxidx - 
            paramidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetFloatingWindow</slug>
        <title>TrackFX_GetFloatingWindow</title>
        <functioncall prog_lang="cpp">HWND TrackFX_GetFloatingWindow(MediaTrack* track, int index)</functioncall>
        <functioncall prog_lang="eel">HWND TrackFX_GetFloatingWindow(MediaTrack track, int index)</functioncall>
        <functioncall prog_lang="lua">HWND = reaper.TrackFX_GetFloatingWindow(MediaTrack track, integer index)</functioncall>
        <functioncall prog_lang="python">HWND RPR_TrackFX_GetFloatingWindow(MediaTrack track, Int index)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns HWND of floating window for effect index, if any
        </description>
        <retvals>
            HWND - 
        </retvals>
        <parameters>
            track - 
            index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetFormattedParamValue</slug>
        <title>TrackFX_GetFormattedParamValue</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetFormattedParamValue(MediaTrack* track, int fx, int param, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetFormattedParamValue(MediaTrack track, int fx, int param, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetFormattedParamValue(MediaTrack track, integer fx, integer param, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, String buf, Int buf_sz) = RPR_TrackFX_GetFormattedParamValue(track, fx, param, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            track - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetFXGUID</slug>
        <title>TrackFX_GetFXGUID</title>
        <functioncall prog_lang="cpp">GUID* TrackFX_GetFXGUID(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetFXGUID(#retguid, MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">string GUID = reaper.TrackFX_GetFXGUID(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">GUID RPR_TrackFX_GetFXGUID(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             GUID - 
        </retvals>
        <parameters>
            track - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetFXName</slug>
        <title>TrackFX_GetFXName</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetFXName(MediaTrack* track, int fx, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetFXName(MediaTrack track, int fx, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetFXName(MediaTrack track, integer fx, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String buf, Int buf_sz) = RPR_TrackFX_GetFXName(track, fx, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            track - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetInstrument</slug>
        <title>TrackFX_GetInstrument</title>
        <functioncall prog_lang="cpp">int TrackFX_GetInstrument(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetInstrument(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TrackFX_GetInstrument(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int RPR_TrackFX_GetInstrument(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See [TrackFX_GetEQ](#TrackFX_GetEQ), [TrackFX_GetByName](#TrackFX_GetByName).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetIOSize</slug>
        <title>TrackFX_GetIOSize</title>
        <functioncall prog_lang="cpp">int TrackFX_GetIOSize(MediaTrack* track, int fx, int* inputPinsOutOptional, int* outputPinsOutOptional)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetIOSize(MediaTrack track, int fx, optional int &amp;inputPins, optional int &amp;outputPins)</functioncall>
        <functioncall prog_lang="lua">integer retval, optional number inputPins, optional number outputPins = reaper.TrackFX_GetIOSize(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaTrack track, Int fx, Int inputPinsOutOptional, Int outputPinsOutOptional) = RPR_TrackFX_GetIOSize(track, fx, inputPinsOutOptional, outputPinsOutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
        </description>
        <retvals>
             retval - 
            inputPins - 
            outputPins - 
        </retvals>
        <parameters>
            track - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetNamedConfigParm</slug>
        <title>TrackFX_GetNamedConfigParm</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, char* bufOut, int bufOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetNamedConfigParm(MediaTrack track, int fx, "parmname", #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetNamedConfigParm(MediaTrack track, integer fx, string parmname)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String parmname, String bufOut, Int bufOut_sz) = RPR_TrackFX_GetNamedConfigParm(track, fx, parmname, bufOut, bufOut_sz)</functioncall>
        <requires>
            Reaper=5.75
            Lua=5.3
        </requires>
        <description prog_lang="*">
            gets plug-in specific named configuration value (returns true on success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns name of first input pin (if available), 'out_pin_0' returns name of first output pin (if available), etc.
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            track - 
            fx - 
            parmname - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetNumParams</slug>
        <title>TrackFX_GetNumParams</title>
        <functioncall prog_lang="cpp">int TrackFX_GetNumParams(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetNumParams(MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TrackFX_GetNumParams(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">Int RPR_TrackFX_GetNumParams(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            track - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetOpen</slug>
        <title>TrackFX_GetOpen</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetOpen(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetOpen(MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_GetOpen(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_GetOpen(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns true if this FX UI is open in the FX chain window or a floating window. See [TrackFX_SetOpen](#TrackFX_SetOpen)
        </description>
        <retvals>
            boolean - true, TrackFX is open; false, TrackFX is closed
        </retvals>
        <parameters>
            track - the MediaTrack, in which the fx to check is located
            fx - the id of the fx in the fx-chain
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, check, open, get, ui, fx</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParam</slug>
        <title>TrackFX_GetParam</title>
        <functioncall prog_lang="cpp">double TrackFX_GetParam(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut)</functioncall>
        <functioncall prog_lang="eel">double TrackFX_GetParam(MediaTrack track, int fx, int param, &amp;minval, &amp;maxval)</functioncall>
        <functioncall prog_lang="lua">number retval, number minval, number maxval = reaper.TrackFX_GetParam(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Float retval, MediaTrack track, Int fx, Int param, Float minvalOut, Float maxvalOut) = RPR_TrackFX_GetParam(track, fx, param, minvalOut, maxvalOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            minval - 
            maxval - 
        </retvals>
        <parameters>
            track - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParameterStepSizes</slug>
        <title>TrackFX_GetParameterStepSizes</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetParameterStepSizes(MediaTrack* track, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetParameterStepSizes(MediaTrack track, int fx, int param, &amp;step, &amp;smallstep, &amp;largestep, bool &amp;istoggle)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TrackFX_GetParameterStepSizes(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, Float stepOut, Float smallstepOut, Float largestepOut, Boolean istoggleOut) = RPR_TrackFX_GetParameterStepSizes(track, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            step - 
            smallstep - 
            largestep - 
            istoggle - 
        </retvals>
        <parameters>
            track - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParamEx</slug>
        <title>TrackFX_GetParamEx</title>
        <functioncall prog_lang="cpp">double TrackFX_GetParamEx(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)</functioncall>
        <functioncall prog_lang="eel">double TrackFX_GetParamEx(MediaTrack track, int fx, int param, &amp;minval, &amp;maxval, &amp;midval)</functioncall>
        <functioncall prog_lang="lua">number retval, number minval, number maxval, number midval = reaper.TrackFX_GetParamEx(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">(Float retval, MediaTrack track, Int fx, Int param, Float minvalOut, Float maxvalOut, Float midvalOut) = RPR_TrackFX_GetParamEx(track, fx, param, minvalOut, maxvalOut, midvalOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            minval - 
            maxval - 
            midval - 
        </retvals>
        <parameters>
            track - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParamName</slug>
        <title>TrackFX_GetParamName</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetParamName(MediaTrack* track, int fx, int param, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetParamName(MediaTrack track, int fx, int param, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetParamName(MediaTrack track, integer fx, integer param, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, String buf, Int buf_sz) = RPR_TrackFX_GetParamName(track, fx, param, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
             retval - 
            buf - 
        </retvals>
        <parameters>
            track - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetParamNormalized</slug>
        <title>TrackFX_GetParamNormalized</title>
        <functioncall prog_lang="cpp">double TrackFX_GetParamNormalized(MediaTrack* track, int fx, int param)</functioncall>
        <functioncall prog_lang="eel">double TrackFX_GetParamNormalized(MediaTrack track, int fx, int param)</functioncall>
        <functioncall prog_lang="lua">number = reaper.TrackFX_GetParamNormalized(MediaTrack track, integer fx, integer param)</functioncall>
        <functioncall prog_lang="python">Float RPR_TrackFX_GetParamNormalized(MediaTrack track, Int fx, Int param)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            track - 
            fx - 
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetPinMappings</slug>
        <title>TrackFX_GetPinMappings</title>
        <functioncall prog_lang="cpp">int TrackFX_GetPinMappings(MediaTrack* tr, int fx, int isOutput, int pin, int* high32OutOptional)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetPinMappings(MediaTrack tr, int fx, int is, int pin, optional int &amp;high32)</functioncall>
        <functioncall prog_lang="lua">integer retval, optional number high32 = reaper.TrackFX_GetPinMappings(MediaTrack tr, integer fx, integer is, integer pin)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaTrack tr, Int fx, Int isOutput, Int pin, Int high32OutOptional) = RPR_TrackFX_GetPinMappings(tr, fx, isOutput, pin, high32OutOptional)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
        </description>
        <retvals>
             retval - 
            high32 - 
        </retvals>
        <parameters>
            tr - 
            fx - 
            is - 
            pin - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetPreset</slug>
        <title>TrackFX_GetPreset</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetPreset(MediaTrack* track, int fx, char* presetname, int presetname_sz)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetPreset(MediaTrack track, int fx, #presetname)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string presetname = reaper.TrackFX_GetPreset(MediaTrack track, integer fx, string presetname)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String presetname, Int presetname_sz) = RPR_TrackFX_GetPreset(track, fx, presetname, presetname_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See [TrackFX_SetPreset](#TrackFX_SetPreset).
        </description>
        <retvals>
             retval - 
            presetname - 
        </retvals>
        <parameters>
            track - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetPresetIndex</slug>
        <title>TrackFX_GetPresetIndex</title>
        <functioncall prog_lang="cpp">int TrackFX_GetPresetIndex(MediaTrack* track, int fx, int* numberOfPresetsOut)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetPresetIndex(MediaTrack track, int fx, int &amp;numberOfPresets)</functioncall>
        <functioncall prog_lang="lua">integer retval, number numberOfPresets = reaper.TrackFX_GetPresetIndex(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">(Int retval, MediaTrack track, Int fx, Int numberOfPresetsOut) = RPR_TrackFX_GetPresetIndex(track, fx, numberOfPresetsOut)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See [TrackFX_SetPresetByIndex](#TrackFX_SetPresetByIndex)
        </description>
        <retvals>
             retval - 
            numberOfPresets - 
        </retvals>
        <parameters>
            track - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetRecChainVisible</slug>
        <title>TrackFX_GetRecChainVisible</title>
        <functioncall prog_lang="cpp">int TrackFX_GetRecChainVisible(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetRecChainVisible(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TrackFX_GetRecChainVisible(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int RPR_TrackFX_GetRecChainVisible(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetRecCount</slug>
        <title>TrackFX_GetRecCount</title>
        <functioncall prog_lang="cpp">int TrackFX_GetRecCount(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int TrackFX_GetRecCount(MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.TrackFX_GetRecCount(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int RPR_TrackFX_GetRecCount(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetUserPresetFilename</slug>
        <title>TrackFX_GetUserPresetFilename</title>
        <functioncall prog_lang="cpp">void TrackFX_GetUserPresetFilename(MediaTrack* track, int fx, char* fn, int fn_sz)</functioncall>
        <functioncall prog_lang="eel">TrackFX_GetUserPresetFilename(MediaTrack track, int fx, #fn)</functioncall>
        <functioncall prog_lang="lua">string fn = reaper.TrackFX_GetUserPresetFilename(MediaTrack track, integer fx, string fn)</functioncall>
        <functioncall prog_lang="python">(MediaTrack track, Int fx, String fn, Int fn_sz) = RPR_TrackFX_GetUserPresetFilename(track, fx, fn, fn_sz)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            fn - 
        </retvals>
        <parameters>
            track - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_NavigatePresets</slug>
        <title>TrackFX_NavigatePresets</title>
        <functioncall prog_lang="cpp">bool TrackFX_NavigatePresets(MediaTrack* track, int fx, int presetmove)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_NavigatePresets(MediaTrack track, int fx, int presetmove)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_NavigatePresets(MediaTrack track, integer fx, integer presetmove)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_NavigatePresets(MediaTrack track, Int fx, Int presetmove)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            fx - 
            presetmove - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetEnabled</slug>
        <title>TrackFX_SetEnabled</title>
        <functioncall prog_lang="cpp">void TrackFX_SetEnabled(MediaTrack* track, int fx, bool enabled)</functioncall>
        <functioncall prog_lang="eel">TrackFX_SetEnabled(MediaTrack track, int fx, bool enabled)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_SetEnabled(MediaTrack track, integer fx, boolean enabled)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_SetEnabled(MediaTrack track, Int fx, Boolean enabled)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TrackFX_GetEnabled](#TrackFX_GetEnabled)
        </description>
        <parameters>
            track - 
            fx - 
            enabled - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetEQBandEnabled</slug>
        <title>TrackFX_SetEQBandEnabled</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx, bool enable)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetEQBandEnabled(MediaTrack track, int fxidx, int bandtype, int bandidx, bool enable)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetEQBandEnabled(MediaTrack track, integer fxidx, integer bandtype, integer bandidx, boolean enable)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_SetEQBandEnabled(MediaTrack track, Int fxidx, Int bandtype, Int bandidx, Boolean enable)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Enable or disable a ReaEQ band.
            Returns false if track/fxidx is not ReaEQ.
            Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
            Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
            See [TrackFX_GetEQ](#TrackFX_GetEQ), [TrackFX_GetEQParam](#TrackFX_GetEQParam), [TrackFX_SetEQParam](#TrackFX_SetEQParam), [TrackFX_GetEQBandEnabled](#TrackFX_GetEQBandEnabled).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            fxidx - 
            bandtype - 
            bandidx - 
            enable - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetEQParam</slug>
        <title>TrackFX_SetEQParam</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetEQParam(MediaTrack* track, int fxidx, int bandtype, int bandidx, int paramtype, double val, bool isnorm)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetEQParam(MediaTrack track, int fxidx, int bandtype, int bandidx, int paramtype, val, bool isnorm)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetEQParam(MediaTrack track, integer fxidx, integer bandtype, integer bandidx, integer paramtype, number val, boolean isnorm)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_SetEQParam(MediaTrack track, Int fxidx, Int bandtype, Int bandidx, Int paramtype, Float val, Boolean isnorm)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.
            Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
            Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
            Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
            See [TrackFX_GetEQ](#TrackFX_GetEQ), [TrackFX_GetEQParam](#TrackFX_GetEQParam), [TrackFX_GetEQBandEnabled](#TrackFX_GetEQBandEnabled), [TrackFX_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            fxidx - 
            bandtype - 
            bandidx - 
            paramtype - 
            val - 
            isnorm - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetNamedConfigParm</slug>
        <title>TrackFX_SetNamedConfigParm</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, const char* value)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetNamedConfigParm(MediaTrack track, int fx, "parmname", "value")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetNamedConfigParm(MediaTrack track, integer fx, string parmname, string value)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_SetNamedConfigParm(MediaTrack track, Int fx, String parmname, String value)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            sets plug-in specific named configuration value (returns true on success)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            fx - 
            parmname - 
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetOffline</slug>
        <title>TrackFX_SetOffline</title>
        <functioncall prog_lang="cpp">void TrackFX_SetOffline(MediaTrack* track, int fx, bool offline)</functioncall>
        <functioncall prog_lang="eel">TrackFX_SetOffline(MediaTrack track, int fx, bool offline)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_SetOffline(MediaTrack track, integer fx, boolean offline)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_SetOffline(MediaTrack track, Int fx, Boolean offline)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TrackFX_GetOffline](#TrackFX_GetOffline)
        </description>
        <parameters>
            MediaTrack track - 
            integer fx - 
            boolean offline - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_SetOffline</slug>
        <title>TakeFX_SetOffline</title>
        <functioncall prog_lang="cpp">void TakeFX_SetOffline(MediaItem_Take* take, int fx, bool offline)</functioncall>
        <functioncall prog_lang="eel">TakeFX_SetOffline(MediaItem_Take take, int fx, bool offline)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_SetOffline(MediaItem_Take take, integer fx, boolean offline)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_SetOffline(MediaItem_Take take, Int fx, Boolean offline)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TakeFX_GetOffline](#TakeFX_GetOffline)
        </description>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
            boolean offline - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_GetOffline</slug>
        <title>TakeFX_GetOffline</title>
        <functioncall prog_lang="cpp">bool TakeFX_GetOffline(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_GetOffline(MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_GetOffline(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TakeFX_GetOffline(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TakeFX_SetOffline](#TakeFX_SetOffline)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_Delete</slug>
        <title>TakeFX_Delete</title>
        <functioncall prog_lang="cpp">bool TakeFX_Delete(MediaItem_Take* take, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TakeFX_Delete(MediaItem_Take take, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_Delete(MediaItem_Take take, integer fx)</functioncall>
        <functioncall prog_lang="python"> Boolean RPR_TakeFX_Delete(MediaItem_Take take, Int fx)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Remove a FX from take chain (returns true on success)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaItem_Take take - 
            integer fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_CopyToTake</slug>
        <title>TakeFX_CopyToTake</title>
        <functioncall prog_lang="cpp">void TakeFX_CopyToTake(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="eel">TakeFX_CopyToTake(MediaItem_Take src_take, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_CopyToTake(MediaItem_Take src_take, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_CopyToTake(MediaItem_Take src_take, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder. 
        </description>
        <parameters>
            MediaItem_Take src_take - 
            integer src_fx - 
            MediaItem_Take dest_take - 
            integer dest_fx - 
            boolean is_move -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_CopyToTrack</slug>
        <title>TakeFX_CopyToTrack</title>
        <functioncall prog_lang="cpp">void TakeFX_CopyToTrack(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="eel">TakeFX_CopyToTrack(MediaItem_Take src_take, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_CopyToTrack(MediaItem_Take src_take, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)</functioncall>
        <functioncall prog_lang="python"> RPR_TakeFX_CopyToTrack(MediaItem_Take src_take, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX.
        </description>
        <parameters>
            MediaItem_Take src_take - 
            integer src_fx - 
            MediaTrack dest_track - 
            integer dest_fx - 
            boolean is_move - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_GetOffline</slug>
        <title>TrackFX_GetOffline</title>
        <functioncall prog_lang="cpp">bool TrackFX_GetOffline(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_GetOffline(MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_GetOffline(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_GetOffline(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            See [TrackFX_SetOffline](#TrackFX_SetOffline)
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
            boolean offline - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_CopyToTake</slug>
        <title>TakeFX_CopyToTake</title>
        <functioncall prog_lang="cpp">void TakeFX_CopyToTake(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="eel">TakeFX_CopyToTake(MediaItem_Take src_take, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_CopyToTake(MediaItem_Take src_take, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_CopyToTake(MediaItem_Take src_take, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder. 
        </description>
        <parameters>
            MediaItem_Take src_take - 
            integer src_fx - 
            MediaItem_Take dest_take - 
            integer dest_fx - 
            boolean is_move - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TakeFX_CopyToTrack</slug>
        <title>TakeFX_CopyToTrack</title>
        <functioncall prog_lang="cpp">void TakeFX_CopyToTrack(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="eel">TakeFX_CopyToTrack(MediaItem_Take src_take, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)</functioncall>
        <functioncall prog_lang="lua">reaper.TakeFX_CopyToTrack(MediaItem_Take src_take, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)</functioncall>
        <functioncall prog_lang="python">RPR_TakeFX_CopyToTrack(MediaItem_Take src_take, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX. 
        </description>
        <parameters>
            MediaItem_Take src_take - 
            integer src_fx - 
            MediaTrack dest_track - 
            integer dest_fx - 
            boolean is_move - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_Delete</slug>
        <title>TrackFX_Delete</title>
        <functioncall prog_lang="cpp">bool TrackFX_Delete(MediaTrack* track, int fx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_Delete(MediaTrack track, int fx)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_Delete(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_Delete(MediaTrack track, Int fx)</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Remove a FX from track chain (returns true on success).
        </description>
        <retvals>
            boolean retval - 
        </retvals>
        <parameters>
            MediaTrack track - 
            integer fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetOpen</slug>
        <title>TrackFX_SetOpen</title>
        <functioncall prog_lang="cpp">void TrackFX_SetOpen(MediaTrack* track, int fx, bool open)</functioncall>
        <functioncall prog_lang="eel">TrackFX_SetOpen(MediaTrack track, int fx, bool open)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_SetOpen(MediaTrack track, integer fx, boolean open)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_SetOpen(MediaTrack track, Int fx, Boolean open)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Open this FX UI. See [TrackFX_GetOpen](#TrackFX_GetOpen)
        </description>
        <parameters>
            track - the track, in which the FX to be opened is located
            fx - the fx-id within the fxchain
            open - true, open FX-UI; false, close FX-UI
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, set, open, ui, fx</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetParam</slug>
        <title>TrackFX_SetParam</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetParam(MediaTrack* track, int fx, int param, double val)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetParam(MediaTrack track, int fx, int param, val)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetParam(MediaTrack track, integer fx, integer param, number val)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_SetParam(MediaTrack track, Int fx, Int param, Float val)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            fx - 
            param - 
            val - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetParamNormalized</slug>
        <title>TrackFX_SetParamNormalized</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetParamNormalized(MediaTrack* track, int fx, int param, double value)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetParamNormalized(MediaTrack track, int fx, int param, value)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetParamNormalized(MediaTrack track, integer fx, integer param, number value)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_SetParamNormalized(MediaTrack track, Int fx, Int param, Float value)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            fx - 
            param - 
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetPinMappings</slug>
        <title>TrackFX_SetPinMappings</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetPinMappings(MediaTrack* tr, int fx, int isOutput, int pin, int low32bits, int hi32bits)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetPinMappings(MediaTrack tr, int fx, int is, int pin, int low32bits, int hi32bits)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetPinMappings(MediaTrack tr, integer fx, integer is, integer pin, integer low32bits, integer hi32bits)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_SetPinMappings(MediaTrack tr, Int fx, Int isOutput, Int pin, Int low32bits, Int hi32bits)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            tr - 
            fx - 
            is - 
            pin - 
            low32bits - 
            hi32bits - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetPreset</slug>
        <title>TrackFX_SetPreset</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetPreset(MediaTrack* track, int fx, const char* presetname)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetPreset(MediaTrack track, int fx, "presetname")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetPreset(MediaTrack track, integer fx, string presetname)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_SetPreset(MediaTrack track, Int fx, String presetname)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See [TrackFX_GetPreset](#TrackFX_GetPreset).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            fx - 
            presetname - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_SetPresetByIndex</slug>
        <title>TrackFX_SetPresetByIndex</title>
        <functioncall prog_lang="cpp">bool TrackFX_SetPresetByIndex(MediaTrack* track, int fx, int idx)</functioncall>
        <functioncall prog_lang="eel">bool TrackFX_SetPresetByIndex(MediaTrack track, int fx, int idx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetPresetByIndex(MediaTrack track, integer fx, integer idx)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_TrackFX_SetPresetByIndex(MediaTrack track, Int fx, Int idx)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See [TrackFX_GetPresetIndex](#TrackFX_GetPresetIndex).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            fx - 
            idx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackFX_Show</slug>
        <title>TrackFX_Show</title>
        <functioncall prog_lang="cpp">void TrackFX_Show(MediaTrack* track, int index, int showFlag)</functioncall>
        <functioncall prog_lang="eel">TrackFX_Show(MediaTrack track, int index, int showFlag)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackFX_Show(MediaTrack track, integer index, integer showFlag)</functioncall>
        <functioncall prog_lang="python">RPR_TrackFX_Show(MediaTrack track, Int index, Int showFlag)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Shows a track-FX-window.
        </description>
        <parameters>
            track - the MediaTrack, whose TrackFX you want to show
            index - the id of the track within the fxchain
            showFlag - how to show the FX-window
                    -0, for hidechain
                    -1, for show chain(index valid)
                    -2, for hide floating window(index valid)
                    -3, for show floating window(index valid)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, show, fx, window</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackList_AdjustWindows</slug>
        <title>TrackList_AdjustWindows</title>
        <functioncall prog_lang="cpp">void TrackList_AdjustWindows(bool isMinor)</functioncall>
        <functioncall prog_lang="eel">TrackList_AdjustWindows(bool isMinor)</functioncall>
        <functioncall prog_lang="lua">reaper.TrackList_AdjustWindows(boolean isMinor)</functioncall>
        <functioncall prog_lang="python">RPR_TrackList_AdjustWindows(Boolean isMinor)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            isMinor - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>TrackList_UpdateAllExternalSurfaces</slug>
        <title>TrackList_UpdateAllExternalSurfaces</title>
        <functioncall prog_lang="cpp">void TrackList_UpdateAllExternalSurfaces()</functioncall>
        <functioncall prog_lang="eel">TrackList_UpdateAllExternalSurfaces()</functioncall>
        <functioncall prog_lang="lua">reaper.TrackList_UpdateAllExternalSurfaces()</functioncall>
        <functioncall prog_lang="python">RPR_TrackList_UpdateAllExternalSurfaces()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_BeginBlock</slug>
        <title>Undo_BeginBlock</title>
        <functioncall prog_lang="cpp">void Undo_BeginBlock()</functioncall>
        <functioncall prog_lang="eel">Undo_BeginBlock()</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_BeginBlock()</functioncall>
        <functioncall prog_lang="python">RPR_Undo_BeginBlock()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            call to start a new block
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_BeginBlock2</slug>
        <title>Undo_BeginBlock2</title>
        <functioncall prog_lang="cpp">void Undo_BeginBlock2(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">Undo_BeginBlock2(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_BeginBlock2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_BeginBlock2(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            call to start a new undo block. Code after that and before [Undo_EndBlock](#Undo_EndBlock) can be undone.
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags>projectmanagement, start, undo, block</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_CanRedo2</slug>
        <title>Undo_CanRedo2</title>
        <functioncall prog_lang="cpp">const char* Undo_CanRedo2(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">bool Undo_CanRedo2(#retval, ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">string = reaper.Undo_CanRedo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">String RPR_Undo_CanRedo2(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns string of next action,if able,NULL if not
        </description>
        <retvals>
            string - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_CanUndo2</slug>
        <title>Undo_CanUndo2</title>
        <functioncall prog_lang="cpp">const char* Undo_CanUndo2(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">bool Undo_CanUndo2(#retval, ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">string = reaper.Undo_CanUndo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">String RPR_Undo_CanUndo2(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            returns string of last action,if able,NULL if not
        </description>
        <retvals>
            string - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_DoRedo2</slug>
        <title>Undo_DoRedo2</title>
        <functioncall prog_lang="cpp">int Undo_DoRedo2(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int Undo_DoRedo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.Undo_DoRedo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int RPR_Undo_DoRedo2(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            nonzero if success
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_DoUndo2</slug>
        <title>Undo_DoUndo2</title>
        <functioncall prog_lang="cpp">int Undo_DoUndo2(ReaProject* proj)</functioncall>
        <functioncall prog_lang="eel">int Undo_DoUndo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.Undo_DoUndo2(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">Int RPR_Undo_DoUndo2(ReaProject proj)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            nonzero if success
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_EndBlock</slug>
        <title>Undo_EndBlock</title>
        <functioncall prog_lang="cpp">void Undo_EndBlock(const char* descchange, int extraflags)</functioncall>
        <functioncall prog_lang="eel">Undo_EndBlock("descchange", int extraflags)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_EndBlock(string descchange, integer extraflags)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_EndBlock(String descchange, Int extraflags)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            call to end the block,with extra flags if any,and a description
        </description>
        <parameters>
            descchange - 
            extraflags - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_EndBlock2</slug>
        <title>Undo_EndBlock2</title>
        <functioncall prog_lang="cpp">void Undo_EndBlock2(ReaProject* proj, const char* descchange, int extraflags)</functioncall>
        <functioncall prog_lang="eel">Undo_EndBlock2(ReaProject proj, "descchange", int extraflags)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_EndBlock2(ReaProject proj, string descchange, integer extraflags)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_EndBlock2(ReaProject proj, String descchange, Int extraflags)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            call to end the block,with extra flags if any,and a description
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            descchange - 
            extraflags - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_OnStateChange</slug>
        <title>Undo_OnStateChange</title>
        <functioncall prog_lang="cpp">void Undo_OnStateChange(const char* descchange)</functioncall>
        <functioncall prog_lang="eel">Undo_OnStateChange("descchange")</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_OnStateChange(string descchange)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_OnStateChange(String descchange)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            limited state change to items
        </description>
        <parameters>
            descchange - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_OnStateChange2</slug>
        <title>Undo_OnStateChange2</title>
        <functioncall prog_lang="cpp">void Undo_OnStateChange2(ReaProject* proj, const char* descchange)</functioncall>
        <functioncall prog_lang="eel">Undo_OnStateChange2(ReaProject proj, "descchange")</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_OnStateChange2(ReaProject proj, string descchange)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_OnStateChange2(ReaProject proj, String descchange)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            limited state change to items
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            descchange - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_OnStateChange_Item</slug>
        <title>Undo_OnStateChange_Item</title>
        <functioncall prog_lang="cpp">void Undo_OnStateChange_Item(ReaProject* proj, const char* name, MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">Undo_OnStateChange_Item(ReaProject proj, "name", MediaItem item)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_OnStateChange_Item(ReaProject proj, string name, MediaItem item)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_OnStateChange_Item(ReaProject proj, String name, MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            name - 
            item - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_OnStateChangeEx</slug>
        <title>Undo_OnStateChangeEx</title>
        <functioncall prog_lang="cpp">void Undo_OnStateChangeEx(const char* descchange, int whichStates, int trackparm)</functioncall>
        <functioncall prog_lang="eel">Undo_OnStateChangeEx("descchange", int whichStates, int trackparm)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_OnStateChangeEx(string descchange, integer whichStates, integer trackparm)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_OnStateChangeEx(String descchange, Int whichStates, Int trackparm)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            trackparm=-1 by default,or if updating one fx chain,you can specify track index
        </description>
        <parameters>
            descchange - 
            whichStates - 
            trackparm - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>Undo_OnStateChangeEx2</slug>
        <title>Undo_OnStateChangeEx2</title>
        <functioncall prog_lang="cpp">void Undo_OnStateChangeEx2(ReaProject* proj, const char* descchange, int whichStates, int trackparm)</functioncall>
        <functioncall prog_lang="eel">Undo_OnStateChangeEx2(ReaProject proj, "descchange", int whichStates, int trackparm)</functioncall>
        <functioncall prog_lang="lua">reaper.Undo_OnStateChangeEx2(ReaProject proj, string descchange, integer whichStates, integer trackparm)</functioncall>
        <functioncall prog_lang="python">RPR_Undo_OnStateChangeEx2(ReaProject proj, String descchange, Int whichStates, Int trackparm)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            trackparm=-1 by default,or if updating one fx chain,you can specify track index
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            descchange - 
            whichStates - 
            trackparm - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>UpdateArrange</slug>
        <title>UpdateArrange</title>
        <functioncall prog_lang="cpp">void UpdateArrange()</functioncall>
        <functioncall prog_lang="eel">UpdateArrange()</functioncall>
        <functioncall prog_lang="lua">reaper.UpdateArrange()</functioncall>
        <functioncall prog_lang="python">RPR_UpdateArrange()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Redraw the arrange view
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, update, arrangeview</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>UpdateItemInProject</slug>
        <title>UpdateItemInProject</title>
        <functioncall prog_lang="cpp">void UpdateItemInProject(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">UpdateItemInProject(MediaItem item)</functioncall>
        <functioncall prog_lang="lua">reaper.UpdateItemInProject(MediaItem item)</functioncall>
        <functioncall prog_lang="python">RPR_UpdateItemInProject(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            
        </description>
        <parameters>
            item - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>UpdateTimeline</slug>
        <title>UpdateTimeline</title>
        <functioncall prog_lang="cpp">void UpdateTimeline()</functioncall>
        <functioncall prog_lang="eel">UpdateTimeline()</functioncall>
        <functioncall prog_lang="lua">reaper.UpdateTimeline()</functioncall>
        <functioncall prog_lang="python">RPR_UpdateTimeline()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Redraw the arrange view and ruler
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, update, timeline</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ValidatePtr</slug>
        <title>ValidatePtr</title>
        <functioncall prog_lang="cpp">bool ValidatePtr(void* pointer, const char* ctypename)</functioncall>
        <functioncall prog_lang="eel">bool ValidatePtr(void* pointer, "ctypename")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.ValidatePtr(identifier pointer, string ctypename)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_ValidatePtr(void pointer, String ctypename)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.
            
            see [ValidatePtr2](#ValidatePtr2)
        </description>
        <retvals>
            boolean - true, the object/pointer is of ctypename; false, it is not
        </retvals>
        <parameters>
            pointer - a pointer to the object to check for. In Lua or Python, you just give the object to check as this parameter.
            ctypename - the type of project to check for(given as a pointer)
                -ReaProject*
                -MediaTrack* 
                -MediaItem*
                -MediaItem_Take*
                -TrackEnvelope*
                -PCM_source*
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, validate, objects, project, track, item, take, envelope, pcmsource</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ValidatePtr2</slug>
        <title>ValidatePtr2</title>
        <functioncall prog_lang="cpp">bool ValidatePtr2(ReaProject* proj, void* pointer, const char* ctypename)</functioncall>
        <functioncall prog_lang="eel">bool ValidatePtr2(ReaProject proj, void* pointer, "ctypename")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.ValidatePtr2(ReaProject proj, identifier pointer, string ctypename)</functioncall>
        <functioncall prog_lang="python">Boolean RPR_ValidatePtr2(ReaProject proj, void pointer, String ctypename)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.
        </description>
        <retvals>
            boolean - true, the object/pointer is of ctypename; false, it is not
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            pointer - a pointer to the object to check for. In Lua or Python, you just give the object to check as this parameter.
            ctypename - the type of project to check for(given as a pointer)
                -ReaProject*
                -MediaTrack* 
                -MediaItem*
                -MediaItem_Take*
                -TrackEnvelope*
                -PCM_source*
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, validate, objects, project, track, item, take, envelope, pcmsource</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ViewPrefs</slug>
        <title>ViewPrefs</title>
        <functioncall prog_lang="cpp">void ViewPrefs(int page, const char* pageByName)</functioncall>
        <functioncall prog_lang="eel">ViewPrefs(int page, "pageByName")</functioncall>
        <functioncall prog_lang="lua">reaper.ViewPrefs(integer page, string pageByName)</functioncall>
        <functioncall prog_lang="python">RPR_ViewPrefs(Int page, String pageByName)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Opens the prefs to a page, use pageByName if page is 0.
        </description>
        <parameters>
            page - the idx of the preferences-page. The following are valid:
                    - 139, General 
                    - 474, Paths 
                    - 219, Keyboard/Multitouch 
                    - 212, Project 
                    - 178, Track/Send Defaults 
                    - 477, Media Item Defaults 
                    - 156, Audio 
                    - 118, Device 
                    - 153, MIDI Devices 
                    - 203, Buffering 
                    - 584, Mute/Solo 
                    - 136, Playback 
                    - 517, Seeking 
                    - 137, Recording 
                    - 518, Loop Recording 
                    - 478, Rendering 
                    - 213, Appearance 
                    - 236, Media(Appearance) 
                    - 459, Peaks/Waveforms 
                    - 524, Fades/Crossfades 
                    - 458, Track Control Panels 
                    - 172, Editing Behavior 
                    - 447, Envelope Display 
                    - 519, Automation 
                    - 215, Mouse 
                    - 466, Mouse Modifiers 
                    - 490, MIDI Editor 
                    - 138, Media 
                    - 257, MIDI 
                    - 449, Video/REX/Misc 
                    - 154, Plug-ins
                    - 505, Compatibility 
                    - 210, VST 
                    - 209, ReWire/DX 
                    - 515, ReaScript 
                    - 227, ReaMote 
                    - 257, Control/OSC/web 
                    - 160, External Editors 
            pageByName - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>GetSetTrackGroupMembershipHigh</slug>
        <title>GetSetTrackGroupMembershipHigh</title>
        <functioncall prog_lang="cpp">unsigned int GetSetTrackGroupMembershipHigh(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)</functioncall>
        <functioncall prog_lang="eel">uint GetSetTrackGroupMembershipHigh(MediaTrack tr, "groupname", uint setmask, uint setvalue)</functioncall>
        <functioncall prog_lang="lua">integer groupstate = reaper.GetSetTrackGroupMembershipHigh(MediaTrack tr, string groupname, integer setmask, integer setvalue)</functioncall>
        <functioncall prog_lang="python">Unknown RPR_GetSetTrackGroupMembershipHigh(MediaTrack tr, String groupname, Unknown setmask, Unknown setvalue)</functioncall>
        <requires>
            Reaper=5.70
            Lua=5.3
        </requires>
        <description prog_lang="*"> 
            Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:
            VOLUME_MASTER
            VOLUME_SLAVE
            VOLUME_VCA_MASTER
            VOLUME_VCA_SLAVE
            PAN_MASTER
            PAN_SLAVE
            WIDTH_MASTER
            WIDTH_SLAVE
            MUTE_MASTER
            MUTE_SLAVE
            SOLO_MASTER
            SOLO_SLAVE
            RECARM_MASTER
            RECARM_SLAVE
            POLARITY_MASTER
            POLARITY_SLAVE
            AUTOMODE_MASTER
            AUTOMODE_SLAVE
            VOLUME_REVERSE
            PAN_REVERSE
            WIDTH_REVERSE
            NO_MASTER_WHEN_SLAVE
            VOLUME_VCA_SLAVE_ISPREFX
        </description>
        <parameters>
            tr - 
            groupname - 
            setmask - 
            setvalue -
        </parameters>
        <retvals>
            groupstate - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>    
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvAlloc</slug>
        <title>BR_EnvAlloc(SWS)</title>
        <functioncall prog_lang="cpp">BR_Envelope* BR_EnvAlloc(TrackEnvelope* envelope, bool takeEnvelopesUseProjectTime)</functioncall>
        <functioncall prog_lang="eel">BR_Envelope extension_api("BR_EnvAlloc", TrackEnvelope envelope, bool takeEnvelopesUseProjectTime)</functioncall>
        <functioncall prog_lang="lua">BR_Envelope = reaper.BR_EnvAlloc(TrackEnvelope envelope, boolean takeEnvelopesUseProjectTime)</functioncall>
        <functioncall prog_lang="python">BR_Envelope BR_EnvAlloc(TrackEnvelope envelope, Boolean takeEnvelopesUseProjectTime)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Create a BR_Envelope-object from a track-envelope pointer or take-envelope pointer. 
            To apply changes to a BR_Envelope-object, always call [BR_EnvFree](#BR_EnvFree) to release the object and commit changes if needed.
            A BR_Envelope is not a TrackEnvelope-object and therefore can't be used as TrackEnvelope-object!
                        
            For manipulation see [BR_EnvCountPoints](#BR_EnvCountPoints), [BR_EnvDeletePoint](#BR_EnvDeletePoint), [BR_EnvFind](#BR_EnvFind), [BR_EnvFindNext](#BR_EnvFindNext), [BR_EnvFindPrevious](#BR_EnvFindPrevious), [BR_EnvGetParentTake](#BR_EnvGetParentTake), [BR_EnvGetParentTrack](#BR_EnvGetParentTrack), [BR_EnvGetPoint](#BR_EnvGetPoint), [BR_EnvGetProperties](#BR_EnvGetProperties), [BR_EnvSetPoint](#BR_EnvSetPoint), [BR_EnvSetProperties](#BR_EnvSetProperties), [BR_EnvValueAtPos](#BR_EnvValueAtPos).
        </description>
        <retvals>
            BR_Envelope - the requested Envelope as a BR_Envelope-object
        </retvals>
        <parameters>
            envelope - a TrackEnvelope-object of the envelope, that you want to have as a BR_Envelope
            takeEnvelopesUseProjectTime - false, take envelope points' positions are counted from take position, not project start time; true, work with project time instead
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, br, br_envelope, create, get, envelope, allocate, sws</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvCountPoints</slug>
        <title>BR_EnvCountPoints(SWS)</title>
        <functioncall prog_lang="cpp">int BR_EnvCountPoints(BR_Envelope* envelope)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_EnvCountPoints", BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.BR_EnvCountPoints(BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="python">Int BR_EnvCountPoints(BR_Envelope envelope)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Count envelope points in the envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc).
        </description>
        <retvals>
            integer - the number of envelope-points in the BR_Envelope-object
        </retvals>
        <parameters>
            envelope - the BR_Envelope-object, whose points you want to count
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, br, br_envelope, sws, envelope, count, point</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvDeletePoint</slug>
        <title>BR_EnvDeletePoint(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_EnvDeletePoint(BR_Envelope* envelope, int id)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_EnvDeletePoint", BR_Envelope envelope, int id)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_EnvDeletePoint(BR_Envelope envelope, integer id)</functioncall>
        <functioncall prog_lang="python">Boolean BR_EnvDeletePoint(BR_Envelope envelope, Int id)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Delete envelope point by index (zero-based) in the envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc).
        </description>
        <retvals>
            boolean - true, deleting was successful; false, deleting was unsuccessful
        </retvals>
        <parameters>
            envelope - the BR_Envelope-object, where you want to delete an envelope-point
            id - the envelope-point-idx, that you want to delete. 0, first envelope-point; 1, second envelope-point, etc
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, br, br_envelope, sws, envelope, delete, point</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvFind</slug>
        <title>BR_EnvFind(SWS)</title>
        <functioncall prog_lang="cpp">int BR_EnvFind(BR_Envelope* envelope, double position, double delta)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_EnvFind", BR_Envelope envelope, position, delta)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.BR_EnvFind(BR_Envelope envelope, number position, number delta)</functioncall>
        <functioncall prog_lang="python">Int BR_EnvFind(BR_Envelope envelope, Float position, Float delta)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Find envelope point at time position in the envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc). Pass delta &gt; 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure.
        </description>
        <retvals>
            integer - envelope-point-id or -1 on failure
        </retvals>
        <parameters>
            envelope - the BR_Envelope-object, in which you want to find an envelope-point
            position - the position in seconds, where you want to find from
            delta - delta &gt; 0 to search surrounding range
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, br, br_envelope, sws, envelope, find, point, delta</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvFindNext</slug>
        <title>BR_EnvFindNext(SWS)</title>
        <functioncall prog_lang="cpp">int BR_EnvFindNext(BR_Envelope* envelope, double position)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_EnvFindNext", BR_Envelope envelope, position)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.BR_EnvFindNext(BR_Envelope envelope, number position)</functioncall>
        <functioncall prog_lang="python">Int BR_EnvFindNext(BR_Envelope envelope, Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Find next envelope point after time position in the envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc). Returns envelope point id (zero-based) on success or -1 on failure.
        </description>
        <retvals>
            integer - envelope-point-id or -1 on failure
        </retvals>
        <parameters>
            envelope - the BR_Envelope-object, in which you want to find the next envelope-point
            position - the position in seconds, where you want to find the next envelope-point from
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, br, br_envelope, sws, envelope, find, point, next</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvFindPrevious</slug>
        <title>BR_EnvFindPrevious(SWS)</title>
        <functioncall prog_lang="cpp">int BR_EnvFindPrevious(BR_Envelope* envelope, double position)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_EnvFindPrevious", BR_Envelope envelope, position)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.BR_EnvFindPrevious(BR_Envelope envelope, number position)</functioncall>
        <functioncall prog_lang="python">Int BR_EnvFindPrevious(BR_Envelope envelope, Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Find previous envelope point before time position in the envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc). Returns envelope point id (zero-based) on success or -1 on failure.
        </description>
        <retvals>
            integer - envelope-point-id or -1 on failure
        </retvals>
        <parameters>
            envelope - the BR_Envelope-object, in which you want to find the previous envelope-point
            position - the position in seconds, where you want to find the previous envelope-point from
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, br, br_envelope, sws, envelope, find, point, previous</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvFree</slug>
        <title>BR_EnvFree(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_EnvFree(BR_Envelope* envelope, bool commit)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_EnvFree", BR_Envelope envelope, bool commit)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_EnvFree(BR_Envelope envelope, boolean commit)</functioncall>
        <functioncall prog_lang="python">Boolean BR_EnvFree(BR_Envelope envelope, Boolean commit)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Free envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc) and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false.
        </description>
        <retvals>
            boolean - true, committing was successful; false, committing was unsuccessful or no committing was necessary
        </retvals>
        <parameters>
            envelope - the BR_Envelope-object that you want to commit and be freed
            commit - true, commit changes when freeing the BR_Envelope-object; false, don't commit changes when freeing the BR_Envelope-object
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags>envelopemanagement, br, br_envelope, sws, envelope, free</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvGetParentTake</slug>
        <title>BR_EnvGetParentTake(SWS)</title>
        <functioncall prog_lang="cpp">MediaItem_Take* BR_EnvGetParentTake(BR_Envelope* envelope)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take extension_api("BR_EnvGetParentTake", BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take = reaper.BR_EnvGetParentTake(BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take BR_EnvGetParentTake(BR_Envelope envelope)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] If envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc) is take envelope, returns parent media item take, otherwise NULL.
        </description>
        <retvals>
            MediaItem_Take - 
        </retvals>
        <parameters>
            envelope - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvGetParentTrack</slug>
        <title>BR_EnvGetParentTrack(SWS)</title>
        <functioncall prog_lang="cpp">MediaItem* BR_EnvGetParentTrack(BR_Envelope* envelope)</functioncall>
        <functioncall prog_lang="eel">MediaItem extension_api("BR_EnvGetParentTrack", BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="lua">MediaItem = reaper.BR_EnvGetParentTrack(BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="python">MediaItem BR_EnvGetParentTrack(BR_Envelope envelope)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get parent track of envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc). If take envelope, returns NULL.
        </description>
        <retvals>
            MediaItem - 
        </retvals>
        <parameters>
            envelope - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvGetPoint</slug>
        <title>BR_EnvGetPoint(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_EnvGetPoint(BR_Envelope* envelope, int id, double* positionOut, double* valueOut, int* shapeOut, bool* selectedOut, double* bezierOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_EnvGetPoint", BR_Envelope envelope, int id, &amp;position, &amp;value, int &amp;shape, bool &amp;selected, &amp;bezier)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number position, number value, number shape, boolean selected, number bezier = reaper.BR_EnvGetPoint(BR_Envelope envelope, integer id)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, BR_Envelope envelope, Int id, Float positionOut, Float valueOut, Int shapeOut, Boolean selectedOut, Float bezierOut) = BR_EnvGetPoint(envelope, id, positionOut, valueOut, shapeOut, selectedOut, bezierOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get envelope point by id (zero-based) from the envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc). Returns true on success.
        </description>
        <retvals>
             retval - 
            position - 
            value - 
            shape - 
            selected - 
            bezier - 
        </retvals>
        <parameters>
            envelope - 
            id - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvGetProperties</slug>
        <title>BR_EnvGetProperties(SWS)</title>
        <functioncall prog_lang="cpp">void BR_EnvGetProperties(BR_Envelope* envelope, bool* activeOut, bool* visibleOut, bool* armedOut, bool* inLaneOut, int* laneHeightOut, int* defaultShapeOut, double* minValueOut, double* maxValueOut, double* centerValueOut, int* typeOut, bool* faderScalingOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_EnvGetProperties", BR_Envelope envelope, bool &amp;active, bool &amp;visible, bool &amp;armed, bool &amp;inLane, int &amp;laneHeight, int &amp;defaultShape, &amp;minValue, &amp;maxValue, &amp;centerValue, int &amp;type, bool &amp;faderScaling)</functioncall>
        <functioncall prog_lang="lua">boolean active retval, boolean visible, boolean armed, boolean inLane, number laneHeight, number defaultShape, number minValue, number maxValue, number centerValue, number type, boolean faderScaling = reaper.BR_EnvGetProperties(BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="python">(BR_Envelope envelope, Boolean activeOut, Boolean visibleOut, Boolean armedOut, Boolean inLaneOut, Int laneHeightOut, Int defaultShapeOut, Float minValueOut, Float maxValueOut, Float centerValueOut, Int typeOut, Boolean faderScalingOut) = BR_EnvGetProperties(envelope, activeOut, visibleOut, armedOut, inLaneOut, laneHeightOut, defaultShapeOut, minValueOut, maxValueOut, centerValueOut, typeOut, faderScalingOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get envelope properties for the envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc).

            active: true if envelope is active
            visible: true if envelope is visible
            armed: true if envelope is armed
            inLane: true if envelope has it's own envelope lane
            laneHeight: envelope lane override height. 0 for none, otherwise size in pixels
            defaultShape: default point shape: 0-&gt;Linear, 1-&gt;Square, 2-&gt;Slow start/end, 3-&gt;Fast start, 4-&gt;Fast end, 5-&gt;Bezier
            minValue: minimum envelope value
            maxValue: maximum envelope value
            type: envelope type: 0-&gt;Volume, 1-&gt;Volume (Pre-FX), 2-&gt;Pan, 3-&gt;Pan (Pre-FX), 4-&gt;Width, 5-&gt;Width (Pre-FX), 6-&gt;Mute, 7-&gt;Pitch, 8-&gt;Playrate, 9-&gt;Tempo map, 10-&gt;Parameter
            faderScaling: true if envelope uses fader scaling
        </description>
        <retvals>
            active retval - 
            visible - 
            armed - 
            inLane - 
            laneHeight - 
            defaultShape - 
            minValue - 
            maxValue - 
            centerValue - 
            type - 
            faderScaling - 
        </retvals>
        <parameters>
            envelope - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvSetPoint</slug>
        <title>BR_EnvSetPoint(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_EnvSetPoint(BR_Envelope* envelope, int id, double position, double value, int shape, bool selected, double bezier)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_EnvSetPoint", BR_Envelope envelope, int id, position, value, int shape, bool selected, bezier)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_EnvSetPoint(BR_Envelope envelope, integer id, number position, number value, integer shape, boolean selected, number bezier)</functioncall>
        <functioncall prog_lang="python">Boolean BR_EnvSetPoint(BR_Envelope envelope, Int id, Float position, Float value, Int shape, Boolean selected, Float bezier)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Set envelope point by id (zero-based) in the envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc). To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see [BR_EnvSortPoints](#BR_EnvSortPoints).
            Returns true on success.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            envelope - 
            id - 
            position - 
            value - 
            shape - 
            selected - 
            bezier - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvSetProperties</slug>
        <title>BR_EnvSetProperties(SWS)</title>
        <functioncall prog_lang="cpp">void BR_EnvSetProperties(BR_Envelope* envelope, bool active, bool visible, bool armed, bool inLane, int laneHeight, int defaultShape, bool faderScaling)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_EnvSetProperties", BR_Envelope envelope, bool active, bool visible, bool armed, bool inLane, int laneHeight, int defaultShape, bool faderScaling)</functioncall>
        <functioncall prog_lang="lua">reaper.BR_EnvSetProperties(BR_Envelope envelope, boolean active, boolean visible, boolean armed, boolean inLane, integer laneHeight, integer defaultShape, boolean faderScaling)</functioncall>
        <functioncall prog_lang="python">BR_EnvSetProperties(BR_Envelope envelope, Boolean active, Boolean visible, Boolean armed, Boolean inLane, Int laneHeight, Int defaultShape, Boolean faderScaling)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Set envelope properties for the envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc). For parameter description see [BR_EnvGetProperties](#BR_EnvGetProperties).
        </description>
        <parameters>
            envelope - 
            active - 
            visible - 
            armed - 
            inLane - 
            laneHeight - 
            defaultShape - 
            faderScaling - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvSortPoints</slug>
        <title>BR_EnvSortPoints(SWS)</title>
        <functioncall prog_lang="cpp">void BR_EnvSortPoints(BR_Envelope* envelope)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_EnvSortPoints", BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="lua">reaper.BR_EnvSortPoints(BR_Envelope envelope)</functioncall>
        <functioncall prog_lang="python">BR_EnvSortPoints(BR_Envelope envelope)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with [BR_EnvSetPoint](#BR_EnvSetPoint). Note that you do not have to call this before doing [BR_EnvFree](#BR_EnvFree) since it does handle unsorted points too.
        </description>
        <parameters>
            envelope - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_EnvValueAtPos</slug>
        <title>BR_EnvValueAtPos(SWS)</title>
        <functioncall prog_lang="cpp">double BR_EnvValueAtPos(BR_Envelope* envelope, double position)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_EnvValueAtPos", BR_Envelope envelope, position)</functioncall>
        <functioncall prog_lang="lua">number = reaper.BR_EnvValueAtPos(BR_Envelope envelope, number position)</functioncall>
        <functioncall prog_lang="python">Float BR_EnvValueAtPos(BR_Envelope envelope, Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get envelope value at time position for the envelope object allocated with [BR_EnvAlloc](#BR_EnvAlloc).
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            envelope - 
            position - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Envelope Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetArrangeView</slug>
        <title>BR_GetArrangeView(SWS)</title>
        <functioncall prog_lang="cpp">void BR_GetArrangeView(ReaProject* proj, double* startTimeOut, double* endTimeOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetArrangeView", ReaProject proj, &amp;startTime, &amp;endTime)</functioncall>
        <functioncall prog_lang="lua">number startTime retval, number endTime = reaper.BR_GetArrangeView(ReaProject proj)</functioncall>
        <functioncall prog_lang="python">(ReaProject proj, Float startTimeOut, Float endTimeOut) = BR_GetArrangeView(proj, startTimeOut, endTimeOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Deprecated, see [GetSet_ArrangeView2](#GetSet_ArrangeView2) (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see [BR_SetArrangeView](#BR_SetArrangeView).
        </description>
        <retvals>
            startTime retval - the current starttime in the arrangeview in seconds
            endTime - the current endtime in the arrangeview in seconds
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, get, start, end, seconds, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetClosestGridDivision</slug>
        <title>BR_GetClosestGridDivision(SWS)</title>
        <functioncall prog_lang="cpp">double BR_GetClosestGridDivision(double position)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetClosestGridDivision", position)</functioncall>
        <functioncall prog_lang="lua">number = reaper.BR_GetClosestGridDivision(number position)</functioncall>
        <functioncall prog_lang="python">Float BR_GetClosestGridDivision(Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get closest grid division to position. Note that this functions is different from [SnapToGrid](#SnapToGrid) in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see [BR_GetNextGridDivision](#BR_GetNextGridDivision) and [BR_GetPrevGridDivision](#BR_GetPrevGridDivision).
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            position - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetCurrentTheme</slug>
        <title>BR_GetCurrentTheme(SWS)</title>
        <functioncall prog_lang="cpp">void BR_GetCurrentTheme(char* themePathOut, int themePathOut_sz, char* themeNameOut, int themeNameOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetCurrentTheme", #themePath, #themeName)</functioncall>
        <functioncall prog_lang="lua">string themePath retval, string themeName = reaper.BR_GetCurrentTheme()</functioncall>
        <functioncall prog_lang="python">(String themePathOut, Int themePathOut_sz, String themeNameOut, Int themeNameOut_sz) = BR_GetCurrentTheme(themePathOut, themePathOut_sz, themeNameOut, themeNameOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" >
            \[BR\] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension
        </description>
        <retvals>
            themePath retval - 
            themeName - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaItemByGUID</slug>
        <title>BR_GetMediaItemByGUID(SWS)</title>
        <functioncall prog_lang="cpp">MediaItem* BR_GetMediaItemByGUID(ReaProject* proj, const char* guidStringIn)</functioncall>
        <functioncall prog_lang="eel">MediaItem extension_api("BR_GetMediaItemByGUID", ReaProject proj, "guidStringIn")</functioncall>
        <functioncall prog_lang="lua">MediaItem = reaper.BR_GetMediaItemByGUID(ReaProject proj, string guidStringIn)</functioncall>
        <functioncall prog_lang="python">MediaItem BR_GetMediaItemByGUID(ReaProject proj, String guidStringIn)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see [BR_GetMediaItemGUID](#BR_GetMediaItemGUID).
        </description>
        <retvals>
            MediaItem - the requested MediaItem as a MediaItem-object
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            guidStringIn - the guid of the MediaItem you want to request.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, get, guid, project</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaItemGUID</slug>
        <title>BR_GetMediaItemGUID(SWS)</title>
        <functioncall prog_lang="cpp">void BR_GetMediaItemGUID(MediaItem* item, char* guidStringOut, int guidStringOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetMediaItemGUID", MediaItem item, #guidString)</functioncall>
        <functioncall prog_lang="lua">string guidString = reaper.BR_GetMediaItemGUID(MediaItem item)</functioncall>
        <functioncall prog_lang="python">(MediaItem item, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaItemGUID(item, guidStringOut, guidStringOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see [BR_GetMediaItemByGUID](#BR_GetMediaItemByGUID).
        </description>
        <retvals>
            guidString - the requested guid of the MediaItem
        </retvals>
        <parameters>
            item - the MediaItem, whose guid you want to request
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, get, guid, item</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaItemImageResource</slug>
        <title>BR_GetMediaItemImageResource(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_GetMediaItemImageResource(MediaItem* item, char* imageOut, int imageOut_sz, int* imageFlagsOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_GetMediaItemImageResource", MediaItem item, #image, int &amp;imageFlags)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string image, number imageFlags = reaper.BR_GetMediaItemImageResource(MediaItem item)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem item, String imageOut, Int imageOut_sz, Int imageFlagsOut) = BR_GetMediaItemImageResource(item, imageOut, imageOut_sz, imageFlagsOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get currently loaded image resource and it's flags for a given item. Returns false if there is no image resource set. To set image resource, see [BR_SetMediaItemImageResource](#BR_SetMediaItemImageResource).
        </description>
        <retvals>
             retval - 
            image - 
            imageFlags - 
        </retvals>
        <parameters>
            item - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaItemTakeGUID</slug>
        <title>BR_GetMediaItemTakeGUID(SWS)</title>
        <functioncall prog_lang="cpp">void BR_GetMediaItemTakeGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetMediaItemTakeGUID", MediaItem_Take take, #guidString)</functioncall>
        <functioncall prog_lang="lua">string guidString = reaper.BR_GetMediaItemTakeGUID(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(MediaItem_Take take, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaItemTakeGUID(take, guidStringOut, guidStringOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see [SNM_GetMediaItemTakeByGUID](#SNM_GetMediaItemTakeByGUID).
        </description>
        <retvals>
            guidString - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaSourceProperties</slug>
        <title>BR_GetMediaSourceProperties(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_GetMediaSourceProperties(MediaItem_Take* take, bool* sectionOut, double* startOut, double* lengthOut, double* fadeOut, bool* reverseOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_GetMediaSourceProperties", MediaItem_Take take, bool &amp;section, &amp;start, &amp;length, &amp;fade, bool &amp;reverse)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean section, number start, number length, number fade, boolean reverse = reaper.BR_GetMediaSourceProperties(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean sectionOut, Float startOut, Float lengthOut, Float fadeOut, Boolean reverseOut) = BR_GetMediaSourceProperties(take, sectionOut, startOut, lengthOut, fadeOut, reverseOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).
            To set source properties, see [BR_SetMediaSourceProperties](#BR_SetMediaSourceProperties).
        </description>
        <retvals>
             retval - 
            section - 
            start - 
            length - 
            fade - 
            reverse - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackByGUID</slug>
        <title>BR_GetMediaTrackByGUID(SWS)</title>
        <functioncall prog_lang="cpp">MediaTrack* BR_GetMediaTrackByGUID(ReaProject* proj, const char* guidStringIn)</functioncall>
        <functioncall prog_lang="eel">MediaTrack extension_api("BR_GetMediaTrackByGUID", ReaProject proj, "guidStringIn")</functioncall>
        <functioncall prog_lang="lua">MediaTrack = reaper.BR_GetMediaTrackByGUID(ReaProject proj, string guidStringIn)</functioncall>
        <functioncall prog_lang="python">MediaTrack BR_GetMediaTrackByGUID(ReaProject proj, String guidStringIn)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see [BR_GetMediaTrackGUID](#BR_GetMediaTrackGUID).
        </description>
        <retvals>
            MediaTrack - the MediaTrack requested, as MediaTrack-object
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            guidStringIn - the guid of the track you want to request
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags>trackmanagement, get, guid, track</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackFreezeCount</slug>
        <title>BR_GetMediaTrackFreezeCount(SWS)</title>
        <functioncall prog_lang="cpp">int BR_GetMediaTrackFreezeCount(MediaTrack* track)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_GetMediaTrackFreezeCount", MediaTrack track)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.BR_GetMediaTrackFreezeCount(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">Int BR_GetMediaTrackFreezeCount(MediaTrack track)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Get media track freeze count (if track isn't frozen at all, returns 0).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackGUID</slug>
        <title>BR_GetMediaTrackGUID(SWS)</title>
        <functioncall prog_lang="cpp">void BR_GetMediaTrackGUID(MediaTrack* track, char* guidStringOut, int guidStringOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetMediaTrackGUID", MediaTrack track, #guidString)</functioncall>
        <functioncall prog_lang="lua">string guidString = reaper.BR_GetMediaTrackGUID(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(MediaTrack track, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaTrackGUID(track, guidStringOut, guidStringOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see [BR_GetMediaTrackByGUID](#BR_GetMediaTrackByGUID).
        </description>
        <retvals>
            guidString - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackLayouts</slug>
        <title>BR_GetMediaTrackLayouts(SWS)</title>
        <functioncall prog_lang="cpp">void BR_GetMediaTrackLayouts(MediaTrack* track, char* mcpLayoutNameOut, int mcpLayoutNameOut_sz, char* tcpLayoutNameOut, int tcpLayoutNameOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetMediaTrackLayouts", MediaTrack track, #mcpLayoutName, #tcpLayoutName)</functioncall>
        <functioncall prog_lang="lua">string mcpLayoutName retval, string tcpLayoutName = reaper.BR_GetMediaTrackLayouts(MediaTrack track)</functioncall>
        <functioncall prog_lang="python">(MediaTrack track, String mcpLayoutNameOut, Int mcpLayoutNameOut_sz, String tcpLayoutNameOut, Int tcpLayoutNameOut_sz) = BR_GetMediaTrackLayouts(track, mcpLayoutNameOut, mcpLayoutNameOut_sz, tcpLayoutNameOut, tcpLayoutNameOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Deprecated, see [GetSetMediaTrackInfo](#GetSetMediaTrackInfo) (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string ("") means that layout is set to the default layout. To set media track layouts, see [BR_SetMediaTrackLayouts](#BR_SetMediaTrackLayouts).
        </description>
        <retvals>
            mcpLayoutName retval - 
            tcpLayoutName - 
        </retvals>
        <parameters>
            track - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackSendInfo_Envelope</slug>
        <title>BR_GetMediaTrackSendInfo_Envelope(SWS)</title>
        <functioncall prog_lang="cpp">TrackEnvelope* BR_GetMediaTrackSendInfo_Envelope(MediaTrack* track, int category, int sendidx, int envelopeType)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope extension_api("BR_GetMediaTrackSendInfo_Envelope", MediaTrack track, int category, int sendidx, int envelopeType)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope = reaper.BR_GetMediaTrackSendInfo_Envelope(MediaTrack track, integer category, integer sendidx, integer envelopeType)</functioncall>
        <functioncall prog_lang="python">TrackEnvelope BR_GetMediaTrackSendInfo_Envelope(MediaTrack track, Int category, Int sendidx, Int envelopeType)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get track envelope for send/receive/hardware output.

            category is &gt;0 for receives, 0=sends, &gt;0 for hardware outputs
            sendidx is zero-based (see [GetTrackNumSends](#GetTrackNumSends) to count track sends/receives/hardware outputs)
            envelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)

            Note: To get or set other send attributes, see [BR_GetSetTrackSendInfo](#BR_GetSetTrackSendInfo) and [BR_GetMediaTrackSendInfo_Track](#BR_GetMediaTrackSendInfo_Track).
        </description>
        <retvals>
            TrackEnvelope - 
        </retvals>
        <parameters>
            track - 
            category - 
            sendidx - 
            envelopeType - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMediaTrackSendInfo_Track</slug>
        <title>BR_GetMediaTrackSendInfo_Track(SWS)</title>
        <functioncall prog_lang="cpp">MediaTrack* BR_GetMediaTrackSendInfo_Track(MediaTrack* track, int category, int sendidx, int trackType)</functioncall>
        <functioncall prog_lang="eel">MediaTrack extension_api("BR_GetMediaTrackSendInfo_Track", MediaTrack track, int category, int sendidx, int trackType)</functioncall>
        <functioncall prog_lang="lua">MediaTrack = reaper.BR_GetMediaTrackSendInfo_Track(MediaTrack track, integer category, integer sendidx, integer trackType)</functioncall>
        <functioncall prog_lang="python">MediaTrack BR_GetMediaTrackSendInfo_Track(MediaTrack track, Int category, Int sendidx, Int trackType)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get source or destination media track for send/receive.

            category is &gt;0 for receives, 0=sends
            sendidx is zero-based (see [GetTrackNumSends](#GetTrackNumSends) to count track sends/receives)
            trackType determines which track is returned (0=source track, 1=destination track)

            Note: To get or set other send attributes, see [BR_GetSetTrackSendInfo](#BR_GetSetTrackSendInfo) and [BR_GetMediaTrackSendInfo_Envelope](#BR_GetMediaTrackSendInfo_Envelope).
        </description>
        <retvals>
            MediaTrack - 
        </retvals>
        <parameters>
            track - 
            category - 
            sendidx - 
            trackType - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMidiSourceLenPPQ</slug>
        <title>BR_GetMidiSourceLenPPQ(SWS)</title>
        <functioncall prog_lang="cpp">double BR_GetMidiSourceLenPPQ(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetMidiSourceLenPPQ", MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">number = reaper.BR_GetMidiSourceLenPPQ(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Float BR_GetMidiSourceLenPPQ(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMidiTakePoolGUID</slug>
        <title>BR_GetMidiTakePoolGUID(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_GetMidiTakePoolGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_GetMidiTakePoolGUID", MediaItem_Take take, #guidString)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string guidString = reaper.BR_GetMidiTakePoolGUID(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, String guidStringOut, Int guidStringOut_sz) = BR_GetMidiTakePoolGUID(take, guidStringOut, guidStringOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.
        </description>
        <retvals>
             retval - 
            guidString - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMidiTakeTempoInfo</slug>
        <title>BR_GetMidiTakeTempoInfo(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_GetMidiTakeTempoInfo(MediaItem_Take* take, bool* ignoreProjTempoOut, double* bpmOut, int* numOut, int* denOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_GetMidiTakeTempoInfo", MediaItem_Take take, bool &amp;ignoreProjTempo, &amp;bpm, int &amp;num, int &amp;den)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean ignoreProjTempo, number bpm, number num, number den = reaper.BR_GetMidiTakeTempoInfo(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean ignoreProjTempoOut, Float bpmOut, Int numOut, Int denOut) = BR_GetMidiTakeTempoInfo(take, ignoreProjTempoOut, bpmOut, numOut, denOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Get "ignore project tempo" information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.
        </description>
        <retvals>
             retval - 
            ignoreProjTempo - 
            bpm - 
            num - 
            den - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext</slug>
        <title>BR_GetMouseCursorContext(SWS)</title>
        <functioncall prog_lang="cpp">void BR_GetMouseCursorContext(char* windowOut, int windowOut_sz, char* segmentOut, int segmentOut_sz, char* detailsOut, int detailsOut_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_GetMouseCursorContext", #window, #segment, #details)</functioncall>
        <functioncall prog_lang="lua">string window retval, string segment, string details = reaper.BR_GetMouseCursorContext()</functioncall>
        <functioncall prog_lang="python">(String windowOut, Int windowOut_sz, String segmentOut, Int segmentOut_sz, String detailsOut, Int detailsOut_sz) = BR_GetMouseCursorContext(windowOut, windowOut_sz, segmentOut, segmentOut_sz, detailsOut, detailsOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.

            To get more info on stuff that was found under mouse cursor see [BR_GetMouseCursorContext_Envelope](#BR_GetMouseCursorContext_Envelope), [BR_GetMouseCursorContext_Item](#BR_GetMouseCursorContext_Item), [BR_GetMouseCursorContext_MIDI](#BR_GetMouseCursorContext_MIDI), [BR_GetMouseCursorContext_Position](#BR_GetMouseCursorContext_Position), [BR_GetMouseCursorContext_Take](#BR_GetMouseCursorContext_Take), [BR_GetMouseCursorContext_Track](#BR_GetMouseCursorContext_Track)

<table border="2">
<tr><th style="width:100px">Window</th><th style="width:100px">Segment</th><th style="width:300px">Details</th></tr>
<tr><th rowspan="1" align = "center">unknown</th><td>""</td><td>""</td></tr>
<tr><th rowspan="4" align = "center">ruler</th><td>region_lane </td><td>""</td></tr>
<tr><td>marker_lane </td><td>""</td></tr>
<tr><td>tempo_lane </td><td>""</td></tr>
<tr><td>timeline</td><td>""</td></tr>
<tr><th rowspan="1" align = "center">transport</th><td>""</td><td>""</td></tr>
<tr><th rowspan="3" align = "center">tcp </th><td>track</td><td>""</td></tr>
<tr><td>envelope</td><td>""</td></tr>
<tr><td>empty</td><td>""</td></tr>
<tr><th rowspan="2" align = "center">mcp </th><td>track</td><td>""</td></tr>
<tr><td>empty</td><td>""</td></tr>
<tr><th rowspan="3" align = "center">arrange</th><td>track</td><td>empty,item, item_stretch_marker,env_point, env_segment </td></tr>
<tr><td>envelope</td><td>empty, env_point, env_segment</td></tr>
<tr><td>empty</td><td>""</td></tr>
<tr><th rowspan="5" align = "center">midi_editor </th><td>unknown</td><td>""</td></tr>
<tr><td>ruler</td><td>""</td></tr>
<tr><td>piano</td><td>""</td></tr>
<tr><td>notes</td><td>""</td></tr>
<tr><td>cc_lane</td><td>cc_selector, cc_lane</td></tr>
</table>
        </description>
        <retvals>
            window retval - the window, in which the mouse-cursor was, at time of calling BR_GetMouseCursorContext
            segment - the segment within the window                
            details - details with the segment of the window
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, get, mouse, cursor, context</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_Envelope</slug>
        <title>BR_GetMouseCursorContext_Envelope(SWS)</title>
        <functioncall prog_lang="cpp">TrackEnvelope* BR_GetMouseCursorContext_Envelope(bool* takeEnvelopeOut)</functioncall>
        <functioncall prog_lang="eel">TrackEnvelope extension_api("BR_GetMouseCursorContext_Envelope", bool &amp;takeEnvelope)</functioncall>
        <functioncall prog_lang="lua">TrackEnvelope retval, boolean takeEnvelope = reaper.BR_GetMouseCursorContext_Envelope()</functioncall>
        <functioncall prog_lang="python">(TrackEnvelope retval, Boolean takeEnvelopeOut) = BR_GetMouseCursorContext_Envelope(takeEnvelopeOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Returns envelope that was captured with the last call to [BR_GetMouseCursorContext](#BR_GetMouseCursorContext). In case the envelope belongs to take, takeEnvelope will be true.
        </description>
        <retvals>
             retval - 
            takeEnvelope - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_Item</slug>
        <title>BR_GetMouseCursorContext_Item(SWS)</title>
        <functioncall prog_lang="cpp">MediaItem* BR_GetMouseCursorContext_Item()</functioncall>
        <functioncall prog_lang="eel">MediaItem extension_api("BR_GetMouseCursorContext_Item")</functioncall>
        <functioncall prog_lang="lua">MediaItem = reaper.BR_GetMouseCursorContext_Item()</functioncall>
        <functioncall prog_lang="python">MediaItem BR_GetMouseCursorContext_Item()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Returns item under mouse cursor that was captured with the last call to [BR_GetMouseCursorContext](#BR_GetMouseCursorContext). Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.
        </description>
        <retvals>
            MediaItem - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_MIDI</slug>
        <title>BR_GetMouseCursorContext_MIDI(SWS)</title>
        <functioncall prog_lang="cpp">void* BR_GetMouseCursorContext_MIDI(bool* inlineEditorOut, int* noteRowOut, int* ccLaneOut, int* ccLaneValOut, int* ccLaneIdOut)</functioncall>
        <functioncall prog_lang="eel">void* extension_api("BR_GetMouseCursorContext_MIDI", bool &amp;inlineEditor, int &amp;noteRow, int &amp;ccLane, int &amp;ccLaneVal, int &amp;ccLaneId)</functioncall>
        <functioncall prog_lang="lua">identifier retval, boolean inlineEditor, number noteRow, number ccLane, number ccLaneVal, number ccLaneId = reaper.BR_GetMouseCursorContext_MIDI()</functioncall>
        <functioncall prog_lang="python">(void retval, Boolean inlineEditorOut, Int noteRowOut, Int ccLaneOut, Int ccLaneValOut, Int ccLaneIdOut) = BR_GetMouseCursorContext_MIDI(inlineEditorOut, noteRowOut, ccLaneOut, ccLaneValOut, ccLaneIdOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Returns midi editor under mouse cursor that was captured with the last call to [BR_GetMouseCursorContext](#BR_GetMouseCursorContext).

            inlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)
            noteRow: note row or piano key under mouse cursor (0-127)
            ccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity)
            ccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)
            ccLaneId: lane position, counting from the top (0 based)

            Note: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1
        </description>
        <retvals>
             retval - 
            inlineEditor - 
            noteRow - 
            ccLane - 
            ccLaneVal - 
            ccLaneId - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_Position</slug>
        <title>BR_GetMouseCursorContext_Position(SWS)</title>
        <functioncall prog_lang="cpp">double BR_GetMouseCursorContext_Position()</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetMouseCursorContext_Position")</functioncall>
        <functioncall prog_lang="lua">number = reaper.BR_GetMouseCursorContext_Position()</functioncall>
        <functioncall prog_lang="python">Float BR_GetMouseCursorContext_Position()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Returns project time position in arrange/ruler/midi editor that was captured with the last call to [BR_GetMouseCursorContext](#BR_GetMouseCursorContext).
        </description>
        <retvals>
            number - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_StretchMarker</slug>
        <title>BR_GetMouseCursorContext_StretchMarker(SWS)</title>
        <functioncall prog_lang="cpp">int BR_GetMouseCursorContext_StretchMarker()</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_GetMouseCursorContext_StretchMarker")</functioncall>
        <functioncall prog_lang="lua">integer = reaper.BR_GetMouseCursorContext_StretchMarker()</functioncall>
        <functioncall prog_lang="python">Int BR_GetMouseCursorContext_StretchMarker()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Returns id of a stretch marker under mouse cursor that was captured with the last call to [BR_GetMouseCursorContext](#BR_GetMouseCursorContext).
        </description>
        <retvals>
            integer - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_Take</slug>
        <title>BR_GetMouseCursorContext_Take(SWS)</title>
        <functioncall prog_lang="cpp">MediaItem_Take* BR_GetMouseCursorContext_Take()</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take extension_api("BR_GetMouseCursorContext_Take")</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take = reaper.BR_GetMouseCursorContext_Take()</functioncall>
        <functioncall prog_lang="python">MediaItem_Take BR_GetMouseCursorContext_Take()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Returns take under mouse cursor that was captured with the last call to [BR_GetMouseCursorContext](#BR_GetMouseCursorContext).
        </description>
        <retvals>
            MediaItem_Take - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetMouseCursorContext_Track</slug>
        <title>BR_GetMouseCursorContext_Track(SWS)</title>
        <functioncall prog_lang="cpp">MediaTrack* BR_GetMouseCursorContext_Track()</functioncall>
        <functioncall prog_lang="eel">MediaTrack extension_api("BR_GetMouseCursorContext_Track")</functioncall>
        <functioncall prog_lang="lua">MediaTrack = reaper.BR_GetMouseCursorContext_Track()</functioncall>
        <functioncall prog_lang="python">MediaTrack BR_GetMouseCursorContext_Track()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Returns track under mouse cursor that was captured with the last call to [BR_GetMouseCursorContext](#BR_GetMouseCursorContext).
        </description>
        <retvals>
            MediaTrack - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetNextGridDivision</slug>
        <title>BR_GetNextGridDivision(SWS)</title>
        <functioncall prog_lang="cpp">double BR_GetNextGridDivision(double position)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetNextGridDivision", position)</functioncall>
        <functioncall prog_lang="lua">number = reaper.BR_GetNextGridDivision(number position)</functioncall>
        <functioncall prog_lang="python">Float BR_GetNextGridDivision(Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get next grid division after the time position. For more grid divisions function, see [BR_GetClosestGridDivision](#BR_GetClosestGridDivision) and [BR_GetPrevGridDivision](#BR_GetPrevGridDivision).
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            position - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetPrevGridDivision</slug>
        <title>BR_GetPrevGridDivision(SWS)</title>
        <functioncall prog_lang="cpp">double BR_GetPrevGridDivision(double position)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetPrevGridDivision", position)</functioncall>
        <functioncall prog_lang="lua">number = reaper.BR_GetPrevGridDivision(number position)</functioncall>
        <functioncall prog_lang="python">Float BR_GetPrevGridDivision(Float position)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get previous grid division before the time position. For more grid division functions, see [BR_GetClosestGridDivision](#BR_GetClosestGridDivision) and [BR_GetNextGridDivision](#BR_GetNextGridDivision).
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            position - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Project Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetSetTrackSendInfo</slug>
        <title>BR_GetSetTrackSendInfo(SWS)</title>
        <functioncall prog_lang="cpp">double BR_GetSetTrackSendInfo(MediaTrack* track, int category, int sendidx, const char* parmname, bool setNewValue, double newValue)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_GetSetTrackSendInfo", MediaTrack track, int category, int sendidx, "parmname", bool setNewValue, newValue)</functioncall>
        <functioncall prog_lang="lua">number = reaper.BR_GetSetTrackSendInfo(MediaTrack track, integer category, integer sendidx, string parmname, boolean setNewValue, number newValue)</functioncall>
        <functioncall prog_lang="python">Float BR_GetSetTrackSendInfo(MediaTrack track, Int category, Int sendidx, String parmname, Boolean setNewValue, Float newValue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Get or set send attributes.

            category is &gt;0 for receives, 0=sends, &gt;0 for hardware outputs
            sendidx is zero-based (see [GetTrackNumSends](#GetTrackNumSends) to count track sends/receives/hardware outputs)
            To set attribute, pass setNewValue as true

            List of possible parameters:
            B_MUTE : send mute state (1.0 if muted, otherwise 0.0)
            B_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)
            B_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)
            D_VOL : send volume (1.0=+0dB etc...)
            D_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)
            D_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)
            I_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)
            I_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&amp;1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)
            I_DSTCHAN : audio destination starting channel index (&amp;1024=mono (and in case of hardware output &amp;512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)
            I_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)
            I_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)
            I_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
            I_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
            I_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI

            Note: To get or set other send attributes, see [BR_GetMediaTrackSendInfo_Envelope](#BR_GetMediaTrackSendInfo_Envelope) and [BR_GetMediaTrackSendInfo_Track](#BR_GetMediaTrackSendInfo_Track).
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            track - 
            category - 
            sendidx - 
            parmname - 
            setNewValue - 
            newValue - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_GetTakeFXCount</slug>
        <title>BR_GetTakeFXCount(SWS)</title>
        <functioncall prog_lang="cpp">int BR_GetTakeFXCount(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_GetTakeFXCount", MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.BR_GetTakeFXCount(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Int BR_GetTakeFXCount(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Returns FX count for supplied take
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_IsMidiOpenInInlineEditor</slug>
        <title>BR_IsMidiOpenInInlineEditor(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_IsMidiOpenInInlineEditor(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_IsMidiOpenInInlineEditor", MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_IsMidiOpenInInlineEditor(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">Boolean BR_IsMidiOpenInInlineEditor(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[SWS\] Check if take has MIDI inline editor open and returns true or false.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_IsTakeMidi</slug>
        <title>BR_IsTakeMidi(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_IsTakeMidi(MediaItem_Take* take, bool* inProjectMidiOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_IsTakeMidi", MediaItem_Take take, bool &amp;inProjectMidi)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean inProjectMidi = reaper.BR_IsTakeMidi(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean inProjectMidiOut) = BR_IsTakeMidi(take, inProjectMidiOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.
        </description>
        <retvals>
             retval - 
            inProjectMidi - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_ItemAtMouseCursor</slug>
        <title>BR_ItemAtMouseCursor(SWS)</title>
        <functioncall prog_lang="cpp">MediaItem* BR_ItemAtMouseCursor(double* positionOut)</functioncall>
        <functioncall prog_lang="eel">MediaItem extension_api("BR_ItemAtMouseCursor", &amp;position)</functioncall>
        <functioncall prog_lang="lua">MediaItem retval, number position = reaper.BR_ItemAtMouseCursor()</functioncall>
        <functioncall prog_lang="python">(MediaItem retval, Float positionOut) = BR_ItemAtMouseCursor(positionOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Get media item under mouse cursor. Position is mouse cursor position in arrange.
        </description>
        <retvals>
             retval - 
            position - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_MIDI_CCLaneRemove</slug>
        <title>BR_MIDI_CCLaneRemove(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_MIDI_CCLaneRemove(HWND midiEditor, int laneId)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_MIDI_CCLaneRemove", HWND midiEditor, int laneId)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_MIDI_CCLaneRemove(HWND midiEditor, integer laneId)</functioncall>
        <functioncall prog_lang="python">Boolean BR_MIDI_CCLaneRemove(HWND midiEditor, Int laneId)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Remove CC lane in midi editor. Returns true on success
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            midiEditor - 
            laneId - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_MIDI_CCLaneReplace</slug>
        <title>BR_MIDI_CCLaneReplace(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_MIDI_CCLaneReplace(HWND midiEditor, int laneId, int newCC)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_MIDI_CCLaneReplace", HWND midiEditor, int laneId, int newCC)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_MIDI_CCLaneReplace(HWND midiEditor, integer laneId, integer newCC)</functioncall>
        <functioncall prog_lang="python">Boolean BR_MIDI_CCLaneReplace(HWND midiEditor, Int laneId, Int newCC)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Replace CC lane in midi editor. Returns true on success.
            Valid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            midiEditor - 
            laneId - 
            newCC - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_PositionAtMouseCursor</slug>
        <title>BR_PositionAtMouseCursor(SWS)</title>
        <functioncall prog_lang="cpp">double BR_PositionAtMouseCursor(bool checkRuler)</functioncall>
        <functioncall prog_lang="eel">double extension_api("BR_PositionAtMouseCursor", bool checkRuler)</functioncall>
        <functioncall prog_lang="lua">number = reaper.BR_PositionAtMouseCursor(boolean checkRuler)</functioncall>
        <functioncall prog_lang="python">Float BR_PositionAtMouseCursor(Boolean checkRuler)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            checkRuler - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetArrangeView</slug>
        <title>BR_SetArrangeView(SWS)</title>
        <functioncall prog_lang="cpp">void BR_SetArrangeView(ReaProject* proj, double startTime, double endTime)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_SetArrangeView", ReaProject proj, startTime, endTime)</functioncall>
        <functioncall prog_lang="lua">reaper.BR_SetArrangeView(ReaProject proj, number startTime, number endTime)</functioncall>
        <functioncall prog_lang="python">BR_SetArrangeView(ReaProject proj, Float startTime, Float endTime)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Deprecated, see [GetSet_ArrangeView2](#GetSet_ArrangeView2) (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see [BR_GetArrangeView](#BR_GetArrangeView).
        </description>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            startTime - the new starttime of the arrangewview in seconds
            endTime - the new endtime of the arrangewview in seconds
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Arrangeview Management
        </chapter_context>
        <tags>arrangeviewmanagement, set, starttime, endtime, arrangeview, seconds</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetItemEdges</slug>
        <title>BR_SetItemEdges(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_SetItemEdges(MediaItem* item, double startTime, double endTime)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetItemEdges", MediaItem item, startTime, endTime)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_SetItemEdges(MediaItem item, number startTime, number endTime)</functioncall>
        <functioncall prog_lang="python">Boolean BR_SetItemEdges(MediaItem item, Float startTime, Float endTime)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Set item start and end edges' position - returns true in case of any changes
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            item - 
            startTime - 
            endTime - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetMediaItemImageResource</slug>
        <title>BR_SetMediaItemImageResource(SWS)</title>
        <functioncall prog_lang="cpp">void BR_SetMediaItemImageResource(MediaItem* item, const char* imageIn, int imageFlags)</functioncall>
        <functioncall prog_lang="eel">extension_api("BR_SetMediaItemImageResource", MediaItem item, "imageIn", int imageFlags)</functioncall>
        <functioncall prog_lang="lua">reaper.BR_SetMediaItemImageResource(MediaItem item, string imageIn, integer imageFlags)</functioncall>
        <functioncall prog_lang="python">BR_SetMediaItemImageResource(MediaItem item, String imageIn, Int imageFlags)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Set image resource and it's flags for a given item. To clear current image resource, pass imageIn as . To get image resource, see [BR_GetMediaItemImageResource](#BR_GetMediaItemImageResource).
        </description>
        <parameters>
            item - 
            imageIn - 
            imageFlags - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetMediaSourceProperties</slug>
        <title>BR_SetMediaSourceProperties(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_SetMediaSourceProperties(MediaItem_Take* take, bool section, double start, double length, double fade, bool reverse)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetMediaSourceProperties", MediaItem_Take take, bool section, start, length, fade, bool reverse)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_SetMediaSourceProperties(MediaItem_Take take, boolean section, number start, number length, number fade, boolean reverse)</functioncall>
        <functioncall prog_lang="python">Boolean BR_SetMediaSourceProperties(MediaItem_Take take, Boolean section, Float start, Float length, Float fade, Boolean reverse)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.
            To get source properties, see [BR_GetMediaSourceProperties](#BR_GetMediaSourceProperties).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            section - 
            start - 
            length - 
            fade - 
            reverse - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetMediaTrackLayouts</slug>
        <title>BR_SetMediaTrackLayouts(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_SetMediaTrackLayouts(MediaTrack* track, const char* mcpLayoutNameIn, const char* tcpLayoutNameIn)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetMediaTrackLayouts", MediaTrack track, "mcpLayoutNameIn", "tcpLayoutNameIn")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_SetMediaTrackLayouts(MediaTrack track, string mcpLayoutNameIn, string tcpLayoutNameIn)</functioncall>
        <functioncall prog_lang="python">Boolean BR_SetMediaTrackLayouts(MediaTrack track, String mcpLayoutNameIn, String tcpLayoutNameIn)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Deprecated, see [GetSetMediaTrackInfo](#GetSetMediaTrackInfo) (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string ("") as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).
            To get media track layouts, see [BR_GetMediaTrackLayouts](#BR_GetMediaTrackLayouts).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            track - 
            mcpLayoutNameIn - 
            tcpLayoutNameIn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetMidiTakeTempoInfo</slug>
        <title>BR_SetMidiTakeTempoInfo(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_SetMidiTakeTempoInfo(MediaItem_Take* take, bool ignoreProjTempo, double bpm, int num, int den)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetMidiTakeTempoInfo", MediaItem_Take take, bool ignoreProjTempo, bpm, int num, int den)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_SetMidiTakeTempoInfo(MediaItem_Take take, boolean ignoreProjTempo, number bpm, integer num, integer den)</functioncall>
        <functioncall prog_lang="python">Boolean BR_SetMidiTakeTempoInfo(MediaItem_Take take, Boolean ignoreProjTempo, Float bpm, Int num, Int den)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Set "ignore project tempo" information for MIDI take. Returns true in case the take was successfully updated.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            ignoreProjTempo - 
            bpm - 
            num - 
            den - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetTakeSourceFromFile</slug>
        <title>BR_SetTakeSourceFromFile(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_SetTakeSourceFromFile(MediaItem_Take* take, const char* filenameIn, bool inProjectData)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetTakeSourceFromFile", MediaItem_Take take, "filenameIn", bool inProjectData)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_SetTakeSourceFromFile(MediaItem_Take take, string filenameIn, boolean inProjectData)</functioncall>
        <functioncall prog_lang="python">Boolean BR_SetTakeSourceFromFile(MediaItem_Take take, String filenameIn, Boolean inProjectData)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.
            Any take source properties from the previous source will be lost - to preserve them, see [BR_SetTakeSourceFromFile2](#BR_SetTakeSourceFromFile2).
            Note: To set source from existing take, see [SNM_GetSetSourceState2](#SNM_GetSetSourceState2).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            filenameIn - 
            inProjectData - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_SetTakeSourceFromFile2</slug>
        <title>BR_SetTakeSourceFromFile2(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_SetTakeSourceFromFile2(MediaItem_Take* take, const char* filenameIn, bool inProjectData, bool keepSourceProperties)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_SetTakeSourceFromFile2", MediaItem_Take take, "filenameIn", bool inProjectData, bool keepSourceProperties)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_SetTakeSourceFromFile2(MediaItem_Take take, string filenameIn, boolean inProjectData, boolean keepSourceProperties)</functioncall>
        <functioncall prog_lang="python">Boolean BR_SetTakeSourceFromFile2(MediaItem_Take take, String filenameIn, Boolean inProjectData, Boolean keepSourceProperties)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[BR\] Differs from [BR_SetTakeSourceFromFile](#BR_SetTakeSourceFromFile) only that it can also preserve existing take media source properties.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            take - 
            filenameIn - 
            inProjectData - 
            keepSourceProperties - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_TakeAtMouseCursor</slug>
        <title>BR_TakeAtMouseCursor(SWS)</title>
        <functioncall prog_lang="cpp">MediaItem_Take* BR_TakeAtMouseCursor(double* positionOut)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take extension_api("BR_TakeAtMouseCursor", &amp;position)</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take retval, number position = reaper.BR_TakeAtMouseCursor()</functioncall>
        <functioncall prog_lang="python">(MediaItem_Take retval, Float positionOut) = BR_TakeAtMouseCursor(positionOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Get take under mouse cursor. Position is mouse cursor position in arrange.
        </description>
        <retvals>
             retval - 
            position - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_TrackAtMouseCursor</slug>
        <title>BR_TrackAtMouseCursor(SWS)</title>
        <functioncall prog_lang="cpp">MediaTrack* BR_TrackAtMouseCursor(int* contextOut, double* positionOut)</functioncall>
        <functioncall prog_lang="eel">MediaTrack extension_api("BR_TrackAtMouseCursor", int &amp;context, &amp;position)</functioncall>
        <functioncall prog_lang="lua">MediaTrack retval, number context, number position = reaper.BR_TrackAtMouseCursor()</functioncall>
        <functioncall prog_lang="python">(MediaTrack retval, Int contextOut, Float positionOut) = BR_TrackAtMouseCursor(contextOut, positionOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Get track under mouse cursor.
            Context signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.
            Position will hold mouse cursor position in arrange if applicable.
        </description>
        <retvals>
             retval - 
            context - 
            position - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_TrackFX_GetFXModuleName</slug>
        <title>BR_TrackFX_GetFXModuleName(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_TrackFX_GetFXModuleName(MediaTrack* track, int fx, char* nameOut, int nameOutSz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_TrackFX_GetFXModuleName", MediaTrack track, int fx, # name, int name)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string name = reaper.BR_TrackFX_GetFXModuleName(MediaTrack track, integer fx)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String nameOut, Int nameOutSz) = BR_TrackFX_GetFXModuleName(track, fx, nameOut, nameOutSz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.
        </description>
        <retvals>
             retval - 
             name - 
        </retvals>
        <parameters>
            track - 
            fx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_GetPrivateProfileString</slug>
        <title>BR_Win32_GetPrivateProfileString(SWS)</title>
        <functioncall prog_lang="cpp">int BR_Win32_GetPrivateProfileString(const char* sectionName, const char* keyName, const char* defaultString, const char* filePath, char* stringOut, int stringOut_sz)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_GetPrivateProfileString", "sectionName", "keyName", "defaultString", "filePath", #string)</functioncall>
        <functioncall prog_lang="lua">integer retval, string string = reaper.BR_Win32_GetPrivateProfileString(string sectionName, string keyName, string defaultString, string filePath)</functioncall>
        <functioncall prog_lang="python">(Int retval, String sectionName, String keyName, String defaultString, String filePath, String stringOut, Int stringOut_sz) = BR_Win32_GetPrivateProfileString(sectionName, keyName, defaultString, filePath, stringOut, stringOut_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            \[BR\] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini
            
            If you have multiple sections in that file with the same name, only the first one will be used, the rest will be ignored by Reaper.
            If you have multiple keys with the same name within a section, only the first one will be used, the rest will be ignored by Reaper.
            You can get the paths using [GetExePath](#GetExePath) for the Reaper-application-folder, [GetResourcePath](#GetResourcePath) for the ressources-folder or get_ini_file for the path+filename of the Reaper.ini-file.
        </description>
        <retvals>
            retval - number of characters of the value
            string - the value of that key
        </retvals>
        <parameters>
            sectionName - the [section] in which the key is stored, you'd like to get
            keyName - the key from the [section], whose value you'd like to get
            defaultString - a default value that will be returned, if the [section] and/or key does not exist in the ini-file yet.
            filePath - the path+filename, where the [section] and key are stored
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>filemanagement, ini, get, value, section, key</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_ShellExecute</slug>
        <title>BR_Win32_ShellExecute(SWS)</title>
        <functioncall prog_lang="cpp">int BR_Win32_ShellExecute(const char* operation, const char* file, const char* parameters, const char* directory, int showFlags)</functioncall>
        <functioncall prog_lang="eel">int extension_api("BR_Win32_ShellExecute", "operation", "file", "parameters", "directory", int showFlags)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.BR_Win32_ShellExecute(string operation, string file, string parameters, string directory, integer showFlags)</functioncall>
        <functioncall prog_lang="python">Int BR_Win32_ShellExecute(String operation, String file, String parameters, String directory, Int showFlags)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[BR\] Equivalent to win32 API ShellExecute() with HWND set to main window
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            operation - 
            file - 
            parameters - 
            directory - 
            showFlags - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>BR_Win32_WritePrivateProfileString</slug>
        <title>BR_Win32_WritePrivateProfileString(SWS)</title>
        <functioncall prog_lang="cpp">bool BR_Win32_WritePrivateProfileString(const char* sectionName, const char* keyName, const char* value, const char* filePath)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("BR_Win32_WritePrivateProfileString", "sectionName", "keyName", "value", "filePath")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.BR_Win32_WritePrivateProfileString(string sectionName, string keyName, string value, string filePath)</functioncall>
        <functioncall prog_lang="python">Boolean BR_Win32_WritePrivateProfileString(String sectionName, String keyName, String value, String filePath)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1">
            \[BR\] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini
            
            If you have multiple sections in that file with the same name, only the first one will be used, the rest will be ignored by Reaper.
            If you have multiple keys with the same name within a section, only the first one will be used, the rest will be ignored by Reaper.
            You can get the paths using [GetExePath](#GetExePath) for the Reaper-application-folder, [GetResourcePath](#GetResourcePath) for the ressources-folder or get_ini_file for the path+filename of the Reaper.ini-file.
        </description>
        <retvals>
            boolean - true, if it worked
        </retvals>
        <parameters>
            sectionName - the [section] in which the key is stored, you'd like to set
            keyName - the key from the [section], whose value you'd like to set
            value - the value you want to have set to the key
            filePath - the path+filename, where the [section] and key are going to be stored
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>filemanagement, ini, write, value, section, key</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetClipboard</slug>
        <title>CF_GetClipboard(SWS)</title>
        <functioncall prog_lang="cpp">void CF_GetClipboard(char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("CF_GetClipboard", #buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.CF_GetClipboard(string buf)</functioncall>
        <functioncall prog_lang="python">(String buf, Int buf_sz) = CF_GetClipboard(buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Read the contents of the system clipboard (limited to 1023 characters in Lua).
        </description>
        <retvals>
            buf - the content of the clipboard
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, clipboard, get</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_GetClipboardBig</slug>
        <title>CF_GetClipboardBig(SWS)</title>
        <functioncall prog_lang="cpp">const char* CF_GetClipboardBig(WDL_FastString* output)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("CF_GetClipboardBig", #retval, WDL_FastString output)</functioncall>
        <functioncall prog_lang="lua">string = reaper.CF_GetClipboardBig(WDL_FastString output)</functioncall>
        <functioncall prog_lang="python">String CF_GetClipboardBig(WDL_FastString output)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Read the contents of the system clipboard. See [SNM_CreateFastString](#SNM_CreateFastString) and [SNM_DeleteFastString](#SNM_DeleteFastString).
        </description>
        <retvals>
            string - the content of the clipboard
        </retvals>
        <parameters>
            output - a faststring used by this 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, clipboard, get, faststring, big</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>CF_SetClipboard</slug>
        <title>CF_SetClipboard(SWS)</title>
        <functioncall prog_lang="cpp">void CF_SetClipboard(const char* str)</functioncall>
        <functioncall prog_lang="eel">extension_api("CF_SetClipboard", "str")</functioncall>
        <functioncall prog_lang="lua">reaper.CF_SetClipboard(string str)</functioncall>
        <functioncall prog_lang="python">CF_SetClipboard(String str)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Write the given string into the system clipboard.
        </description>
        <parameters>
            str - the string to put into the clipboard
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>helperfunctions, clipboard, put, set</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_AddMidiNote</slug>
        <title>FNG_AddMidiNote(SWS)</title>
        <functioncall prog_lang="cpp">RprMidiNote* FNG_AddMidiNote(RprMidiTake* midiTake)</functioncall>
        <functioncall prog_lang="eel">RprMidiNote extension_api("FNG_AddMidiNote", RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="lua">RprMidiNote = reaper.FNG_AddMidiNote(RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="python">RprMidiNote FNG_AddMidiNote(RprMidiTake midiTake)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[FNG\]Add MIDI note to MIDI take
        </description>
        <retvals>
            RprMidiNote - 
        </retvals>
        <parameters>
            midiTake - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_AllocMidiTake</slug>
        <title>FNG_AllocMidiTake(SWS)</title>
        <functioncall prog_lang="cpp">RprMidiTake* FNG_AllocMidiTake(MediaItem_Take* take)</functioncall>
        <functioncall prog_lang="eel">RprMidiTake extension_api("FNG_AllocMidiTake", MediaItem_Take take)</functioncall>
        <functioncall prog_lang="lua">RprMidiTake = reaper.FNG_AllocMidiTake(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">RprMidiTake FNG_AllocMidiTake(MediaItem_Take take)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[FNG\]Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take
        </description>
        <retvals>
            RprMidiTake - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_CountMidiNotes</slug>
        <title>FNG_CountMidiNotes(SWS)</title>
        <functioncall prog_lang="cpp">int FNG_CountMidiNotes(RprMidiTake* midiTake)</functioncall>
        <functioncall prog_lang="eel">int extension_api("FNG_CountMidiNotes", RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.FNG_CountMidiNotes(RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="python">Int FNG_CountMidiNotes(RprMidiTake midiTake)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[FNG\]Count of how many MIDI notes are in the MIDI take
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            midiTake - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_FreeMidiTake</slug>
        <title>FNG_FreeMidiTake(SWS)</title>
        <functioncall prog_lang="cpp">void FNG_FreeMidiTake(RprMidiTake* midiTake)</functioncall>
        <functioncall prog_lang="eel">extension_api("FNG_FreeMidiTake", RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="lua">reaper.FNG_FreeMidiTake(RprMidiTake midiTake)</functioncall>
        <functioncall prog_lang="python">FNG_FreeMidiTake(RprMidiTake midiTake)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[FNG\]Commit changes to MIDI take and free allocated memory
        </description>
        <parameters>
            midiTake - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_GetMidiNote</slug>
        <title>FNG_GetMidiNote(SWS)</title>
        <functioncall prog_lang="cpp">RprMidiNote* FNG_GetMidiNote(RprMidiTake* midiTake, int index)</functioncall>
        <functioncall prog_lang="eel">RprMidiNote extension_api("FNG_GetMidiNote", RprMidiTake midiTake, int index)</functioncall>
        <functioncall prog_lang="lua">RprMidiNote = reaper.FNG_GetMidiNote(RprMidiTake midiTake, integer index)</functioncall>
        <functioncall prog_lang="python">RprMidiNote FNG_GetMidiNote(RprMidiTake midiTake, Int index)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[FNG\]Get a MIDI note from a MIDI take at specified index
        </description>
        <retvals>
            RprMidiNote - 
        </retvals>
        <parameters>
            midiTake - 
            index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_GetMidiNoteIntProperty</slug>
        <title>FNG_GetMidiNoteIntProperty(SWS)</title>
        <functioncall prog_lang="cpp">int FNG_GetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property)</functioncall>
        <functioncall prog_lang="eel">int extension_api("FNG_GetMidiNoteIntProperty", RprMidiNote midiNote, "property")</functioncall>
        <functioncall prog_lang="lua">integer = reaper.FNG_GetMidiNoteIntProperty(RprMidiNote midiNote, string property)</functioncall>
        <functioncall prog_lang="python">Int FNG_GetMidiNoteIntProperty(RprMidiNote midiNote, String property)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[FNG\]Get MIDI note property
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            midiNote - 
            property - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>FNG_SetMidiNoteIntProperty</slug>
        <title>FNG_SetMidiNoteIntProperty(SWS)</title>
        <functioncall prog_lang="cpp">void FNG_SetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property, int value)</functioncall>
        <functioncall prog_lang="eel">extension_api("FNG_SetMidiNoteIntProperty", RprMidiNote midiNote, "property", int value)</functioncall>
        <functioncall prog_lang="lua">reaper.FNG_SetMidiNoteIntProperty(RprMidiNote midiNote, string property, integer value)</functioncall>
        <functioncall prog_lang="python">FNG_SetMidiNoteIntProperty(RprMidiNote midiNote, String property, Int value)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[FNG\]Set MIDI note property
        </description>
        <parameters>
            midiNote - 
            property - 
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            MIDI Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_AnalyzeTakeLoudness</slug>
        <title>NF_AnalyzeTakeLoudness(SWS)</title>
        <functioncall prog_lang="cpp">bool NF_AnalyzeTakeLoudness(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double* truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_AnalyzeTakeLoudness", MediaItem_Take take, bool analyzeTruePeak, &amp;lufsIntegrated, &amp;range, &amp; truePeak, &amp;truePeakPos, &amp;shortTermMax, &amp;momentaryMax)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax = reaper.NF_AnalyzeTakeLoudness(MediaItem_Take take, boolean analyzeTruePeak)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean analyzeTruePeak, Float lufsIntegratedOut, Float rangeOut, Float truePeakOut, Float truePeakPosOut, Float shortTermMaxOut, Float momentaryMaxOut) = NF_AnalyzeTakeLoudness(take, analyzeTruePeak, lufsIntegratedOut, rangeOut, truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value and true peak position which can be jumped to with SetEditCurPos(). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated. Momentary uses a time window of 0.4 sec. 
        </description>
        <retvals>
             retval - 
            lufsIntegrated - 
            range - 
             truePeak - 
            truePeakPos - 
            shortTermMax - 
            momentaryMax - 
        </retvals>
        <parameters>
            take - 
            analyzeTruePeak - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_AnalyzeTakeLoudness2</slug>
        <title>NF_AnalyzeTakeLoudness2(SWS)</title>
        <functioncall prog_lang="cpp">bool NF_AnalyzeTakeLoudness2(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double* truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut, double* shortTermMaxPosOut, double* momentaryMaxPosOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_AnalyzeTakeLoudness2", MediaItem_Take take, bool analyzeTruePeak, &amp;lufsIntegrated, &amp;range, &amp; truePeak, &amp;truePeakPos, &amp;shortTermMax, &amp;momentaryMax, &amp;shortTermMaxPos, &amp;momentaryMaxPos)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax, number shortTermMaxPos, number momentaryMaxPos = reaper.NF_AnalyzeTakeLoudness2(MediaItem_Take take, boolean analyzeTruePeak)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean analyzeTruePeak, Float lufsIntegratedOut, Float rangeOut, Float truePeakOut, Float truePeakPosOut, Float shortTermMaxOut, Float momentaryMaxOut, Float shortTermMaxPosOut, Float momentaryMaxPosOut) = NF_AnalyzeTakeLoudness2(take, analyzeTruePeak, lufsIntegratedOut, rangeOut, truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut, shortTermMaxPosOut, momentaryMaxPosOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Same as [NF_AnalyzeTakeLoudness](#NF_AnalyzeTakeLoudness) but additionally returns shortTermMaxPos and momentaryMaxPos which can be jumped to with SetEditCurPos(). Note: shortTermMaxPos and momentaryMaxPos actaully indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.). 
        </description>
        <retvals>
             retval - 
            lufsIntegrated - 
            range - 
             truePeak - 
            truePeakPos - 
            shortTermMax - 
            momentaryMax - 
            shortTermMaxPos - 
            momentaryMaxPos - 
        </retvals>
        <parameters>
            take - 
            analyzeTruePeak - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_AnalyzeTakeLoudness_IntegratedOnly</slug>
        <title>NF_AnalyzeTakeLoudness_IntegratedOnly(SWS)</title>
        <functioncall prog_lang="cpp">bool NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take* take, double* lufsIntegratedOut)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("NF_AnalyzeTakeLoudness_IntegratedOnly", MediaItem_Take take, &amp;lufsIntegrated)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number lufsIntegrated = reaper.NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take take)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Float lufsIntegratedOut) = NF_AnalyzeTakeLoudness_IntegratedOnly(take, lufsIntegratedOut)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            Does LUFS integrated analysis only. Faster than full loudness analysis ([NF_AnalyzeTakeLoudness](#NF_AnalyzeTakeLoudness)) . Use this if only LUFS integrated is required.
        </description>
        <retvals>
             retval - 
            lufsIntegrated - 
        </retvals>
        <parameters>
            take - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetMediaItemAverageRMS</slug>
        <title>NF_GetMediaItemAverageRMS(SWS)</title>
        <functioncall prog_lang="cpp">double NF_GetMediaItemAverageRMS(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">double extension_api("NF_GetMediaItemAverageRMS", MediaItem item)</functioncall>
        <functioncall prog_lang="lua">number = reaper.NF_GetMediaItemAverageRMS(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Float NF_GetMediaItemAverageRMS(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the average overall (non-windowed) RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. 
            Returns -150.0 if MIDI take or empty item.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            item - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetMediaItemMaxPeak</slug>
        <title>NF_GetMediaItemMaxPeak(SWS)</title>
        <functioncall prog_lang="cpp">double NF_GetMediaItemMaxPeak(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">double extension_api("NF_GetMediaItemMaxPeak", MediaItem item)</functioncall>
        <functioncall prog_lang="lua">number = reaper.NF_GetMediaItemMaxPeak(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Float NF_GetMediaItemMaxPeak(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the greatest max. peak value of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. 
            Returns -150.0 if MIDI take or empty item.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            item - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetMediaItemPeakRMS_NonWindowed</slug>
        <title>NF_GetMediaItemPeakRMS_NonWindowed(SWS)</title>
        <functioncall prog_lang="cpp">double NF_GetMediaItemPeakRMS_NonWindowed(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">double extension_api("NF_GetMediaItemPeakRMS_NonWindowed", MediaItem item)</functioncall>
        <functioncall prog_lang="lua">number = reaper.NF_GetMediaItemPeakRMS_NonWindowed(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Float NF_GetMediaItemPeakRMS_NonWindowed(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the greatest overall (non-windowed) RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. 
            Returns -150.0 if MIDI take or empty item.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            item - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>NF_GetMediaItemPeakRMS_Windowed</slug>
        <title>NF_GetMediaItemPeakRMS_Windowed(SWS)</title>
        <functioncall prog_lang="cpp">double NF_GetMediaItemPeakRMS_Windowed(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">double extension_api("NF_GetMediaItemPeakRMS_Windowed", MediaItem item)</functioncall>
        <functioncall prog_lang="lua">number = reaper.NF_GetMediaItemPeakRMS_Windowed(MediaItem item)</functioncall>
        <functioncall prog_lang="python">Float NF_GetMediaItemPeakRMS_Windowed(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Returns the average RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. 
            Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.
        </description>
        <retvals>
            number - 
        </retvals>
        <parameters>
            item - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Audio Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_AddReceive</slug>
        <title>SNM_AddReceive(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_AddReceive(MediaTrack* src, MediaTrack* dest, int type)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_AddReceive", MediaTrack src, MediaTrack dest, int type)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_AddReceive(MediaTrack src, MediaTrack dest, integer type)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_AddReceive(MediaTrack src, MediaTrack dest, Int type)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&amp;M\] Deprecated, see [CreateTrackSend](#CreateTrackSend) (v5.15pre1+). Adds a receive. Returns false if nothing updated.
            type -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).
            Note: obeys default sends preferences, supports frozen tracks, etc..
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            src - 
            dest - 
            type - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_AddTCPFXParm</slug>
        <title>SNM_AddTCPFXParm(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_AddTCPFXParm(MediaTrack* tr, int fxId, int prmId)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_AddTCPFXParm", MediaTrack tr, int fxId, int prmId)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_AddTCPFXParm(MediaTrack tr, integer fxId, integer prmId)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_AddTCPFXParm(MediaTrack tr, Int fxId, Int prmId)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            tr - 
            fxId - 
            prmId - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_CreateFastString</slug>
        <title>SNM_CreateFastString(SWS)</title>
        <functioncall prog_lang="cpp">WDL_FastString* SNM_CreateFastString(const char* str)</functioncall>
        <functioncall prog_lang="eel">WDL_FastString extension_api("SNM_CreateFastString", "str")</functioncall>
        <functioncall prog_lang="lua">WDL_FastString = reaper.SNM_CreateFastString(string str)</functioncall>
        <functioncall prog_lang="python">WDL_FastString SNM_CreateFastString(String str)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&amp;M\] Instantiates a new "fast string". You must delete this string, see [SNM_DeleteFastString](#SNM_DeleteFastString).
        </description>
        <retvals>
            WDL_FastString - 
        </retvals>
        <parameters>
            str - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_DeleteFastString</slug>
        <title>SNM_DeleteFastString(SWS)</title>
        <functioncall prog_lang="cpp">void SNM_DeleteFastString(WDL_FastString* str)</functioncall>
        <functioncall prog_lang="eel">extension_api("SNM_DeleteFastString", WDL_FastString str)</functioncall>
        <functioncall prog_lang="lua">reaper.SNM_DeleteFastString(WDL_FastString str)</functioncall>
        <functioncall prog_lang="python">SNM_DeleteFastString(WDL_FastString str)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Deletes a "fast string" instance.
        </description>
        <parameters>
            str - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetDoubleConfigVar</slug>
        <title>SNM_GetDoubleConfigVar(SWS)</title>
        <functioncall prog_lang="cpp">double SNM_GetDoubleConfigVar(const char* varname, double errvalue)</functioncall>
        <functioncall prog_lang="eel">double extension_api("SNM_GetDoubleConfigVar", "varname", errvalue)</functioncall>
        <functioncall prog_lang="lua">number = reaper.SNM_GetDoubleConfigVar(string varname, number errvalue)</functioncall>
        <functioncall prog_lang="python">Float SNM_GetDoubleConfigVar(String varname, Float errvalue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Returns a double preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).
            
            The settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.
            Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.            
        </description>
        <retvals>
            number - the returned number/doublefloat-value of varname
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1" indent="default">
            string varname - the name of the config-variable to be read; not case sensitive
                    - see [Reaper_Config_Variables.html](Reaper_Config_Variables.html) for valid config-vars
            number errvalue - the errorvalue that will be returned, if varname isn't a valid one
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>reaper, project, config, preferences, variables, get, internal</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetFastString</slug>
        <title>SNM_GetFastString(SWS)</title>
        <functioncall prog_lang="cpp">const char* SNM_GetFastString(WDL_FastString* str)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetFastString", #retval, WDL_FastString str)</functioncall>
        <functioncall prog_lang="lua">string = reaper.SNM_GetFastString(WDL_FastString str)</functioncall>
        <functioncall prog_lang="python">String SNM_GetFastString(WDL_FastString str)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Gets the "fast string" content.
        </description>
        <retvals>
            string - 
        </retvals>
        <parameters>
            str - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetFastStringLength</slug>
        <title>SNM_GetFastStringLength(SWS)</title>
        <functioncall prog_lang="cpp">int SNM_GetFastStringLength(WDL_FastString* str)</functioncall>
        <functioncall prog_lang="eel">int extension_api("SNM_GetFastStringLength", WDL_FastString str)</functioncall>
        <functioncall prog_lang="lua">integer = reaper.SNM_GetFastStringLength(WDL_FastString str)</functioncall>
        <functioncall prog_lang="python">Int SNM_GetFastStringLength(WDL_FastString str)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Gets the "fast string" length.
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            str - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetIntConfigVar</slug>
        <title>SNM_GetIntConfigVar(SWS)</title>
        <functioncall prog_lang="cpp">int SNM_GetIntConfigVar(const char* varname, int errvalue)</functioncall>
        <functioncall prog_lang="eel">int extension_api("SNM_GetIntConfigVar", "varname", int errvalue)</functioncall>
        <functioncall prog_lang="lua">integer retval = reaper.SNM_GetIntConfigVar(string varname, integer errvalue)</functioncall>
        <functioncall prog_lang="python">Int SNM_GetIntConfigVar(String varname, Int errvalue)</functioncall>
        <requires>
            Reaper=5.80
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).
            
            The settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.
            Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.
        </description>
        <retvals>
            integer retval - the returned integer-value of varname
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1" indent="default">
            string varname - the name of the config-variable to be read; not case sensitive
                    - see [Reaper_Config_Variables.html](Reaper_Config_Variables.html) for valid config-vars
            integer errvalue - the errorvalue that will be returned, if varname isn't a valid one
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>reaper, project, config, preferences, variables, get, internal</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetMediaItemTakeByGUID</slug>
        <title>SNM_GetMediaItemTakeByGUID(SWS)</title>
        <functioncall prog_lang="cpp">MediaItem_Take* SNM_GetMediaItemTakeByGUID(ReaProject* project, const char* guid)</functioncall>
        <functioncall prog_lang="eel">MediaItem_Take extension_api("SNM_GetMediaItemTakeByGUID", ReaProject project, "guid")</functioncall>
        <functioncall prog_lang="lua">MediaItem_Take = reaper.SNM_GetMediaItemTakeByGUID(ReaProject project, string guid)</functioncall>
        <functioncall prog_lang="python">MediaItem_Take SNM_GetMediaItemTakeByGUID(ReaProject project, String guid)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&amp;M\] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see [BR_GetMediaItemTakeGUID](#BR_GetMediaItemTakeGUID)
        </description>
        <retvals>
            MediaItem_Take - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            project - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            guid - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetProjectMarkerName</slug>
        <title>SNM_GetProjectMarkerName(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_GetProjectMarkerName(ReaProject* proj, int num, bool isrgn, WDL_FastString* name)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetProjectMarkerName", ReaProject proj, int num, bool isrgn, WDL_FastString name)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_GetProjectMarkerName(ReaProject proj, integer num, boolean isrgn, WDL_FastString name)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_GetProjectMarkerName(ReaProject proj, Int num, Boolean isrgn, WDL_FastString name)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Gets a marker/region name. Returns true if marker/region found.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            ReaProject proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            integer num - 
            boolean isrgn - 
            WDL_FastString name - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetSetObjectState</slug>
        <title>SNM_GetSetObjectState(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_GetSetObjectState(void* obj, WDL_FastString* state, bool setnewvalue, bool wantminimalstate)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetSetObjectState", void* obj, WDL_FastString state, bool setnewvalue, bool wantminimalstate)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_GetSetObjectState(identifier obj, WDL_FastString state, boolean setnewvalue, boolean wantminimalstate)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_GetSetObjectState(void obj, WDL_FastString state, Boolean setnewvalue, Boolean wantminimalstate)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.
            When getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!
            Note: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            objWDL_FastString state - 
            setnewvalue - 
            wantminimalstate - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetSetSourceState</slug>
        <title>SNM_GetSetSourceState(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_GetSetSourceState(MediaItem* item, int takeidx, WDL_FastString* state, bool setnewvalue)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetSetSourceState", MediaItem item, int takeidx, WDL_FastString state, bool setnewvalue)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_GetSetSourceState(MediaItem item, integer takeidxWDL_FastString state, boolean setnewvalue)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_GetSetSourceState(MediaItem item, Int takeidx, WDL_FastString state, Boolean setnewvalue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&amp;M\] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.
            Note: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see [SNM_GetSetSourceState2](#SNM_GetSetSourceState2).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            item - 
            takeidxWDL_FastString state - 
            setnewvalue - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetSetSourceState2</slug>
        <title>SNM_GetSetSourceState2(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_GetSetSourceState2(MediaItem_Take* take, WDL_FastString* state, bool setnewvalue)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetSetSourceState2", MediaItem_Take take, WDL_FastString state, bool setnewvalue)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_GetSetSourceState2(MediaItem_Take takeWDL_FastString state, boolean setnewvalue)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_GetSetSourceState2(MediaItem_Take take, WDL_FastString state, Boolean setnewvalue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&amp;M\] Gets or sets a take source state. Returns false if failed.
            Note: this function cannot deal with empty takes, see [SNM_GetSetSourceState](#SNM_GetSetSourceState).
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            takeWDL_FastString state - 
            setnewvalue - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_GetSourceType</slug>
        <title>SNM_GetSourceType(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_GetSourceType(MediaItem_Take* take, WDL_FastString* type)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_GetSourceType", MediaItem_Take take, WDL_FastString type)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_GetSourceType(MediaItem_Take takeWDL_FastString type)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_GetSourceType(MediaItem_Take take, WDL_FastString type)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            takeWDL_FastString type - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_MoveOrRemoveTrackFX</slug>
        <title>SNM_MoveOrRemoveTrackFX(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_MoveOrRemoveTrackFX(MediaTrack* tr, int fxId, int what)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_MoveOrRemoveTrackFX", MediaTrack tr, int fxId, int what)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_MoveOrRemoveTrackFX(MediaTrack tr, integer fxId, integer what)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_MoveOrRemoveTrackFX(MediaTrack tr, Int fxId, Int what)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Move or removes a track FX. Returns true if tr has been updated.
            fxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            tr - 
            fxId - 
            what - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            FX Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_ReadMediaFileTag</slug>
        <title>SNM_ReadMediaFileTag(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_ReadMediaFileTag(const char* fn, const char* tag, char* tagval, int tagval_sz)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_ReadMediaFileTag", "fn", "tag", #tagval)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string tagval = reaper.SNM_ReadMediaFileTag(string fn, string tag, string tagval)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, String fn, String tag, String tagval, Int tagval_sz) = SNM_ReadMediaFileTag(fn, tag, tagval, tagval_sz)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&amp;M\] Reads a media file tag. Supported tags: "artist", "album", "genre", "comment", "title", or "year". Returns false if tag was not found. See [SNM_TagMediaFile](#SNM_TagMediaFile).
        </description>
        <retvals>
             retval - 
            tagval - 
        </retvals>
        <parameters>
            fn - 
            tag - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_RemoveReceive</slug>
        <title>SNM_RemoveReceive(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_RemoveReceive(MediaTrack* tr, int rcvidx)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_RemoveReceive", MediaTrack tr, int rcvidx)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_RemoveReceive(MediaTrack tr, integer rcvidx)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_RemoveReceive(MediaTrack tr, Int rcvidx)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&amp;M\] Deprecated, see [RemoveTrackSend](#RemoveTrackSend) (v5.15pre1+). Removes a receive. Returns false if nothing updated.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            tr - 
            rcvidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_RemoveReceivesFrom</slug>
        <title>SNM_RemoveReceivesFrom(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_RemoveReceivesFrom(MediaTrack* tr, MediaTrack* srctr)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_RemoveReceivesFrom", MediaTrack tr, MediaTrack srctr)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_RemoveReceivesFrom(MediaTrack tr, MediaTrack srctr)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_RemoveReceivesFrom(MediaTrack tr, MediaTrack srctr)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Removes all receives from srctr. Returns false if nothing updated.
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters>
            tr - 
            srctr - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Track Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SelectResourceBookmark</slug>
        <title>SNM_SelectResourceBookmark(SWS)</title>
        <functioncall prog_lang="cpp">int SNM_SelectResourceBookmark(const char* name)</functioncall>
        <functioncall prog_lang="eel">int extension_api("SNM_SelectResourceBookmark", "name")</functioncall>
        <functioncall prog_lang="lua">integer = reaper.SNM_SelectResourceBookmark(string name)</functioncall>
        <functioncall prog_lang="python">Int SNM_SelectResourceBookmark(String name)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).
        </description>
        <retvals>
            integer - 
        </retvals>
        <parameters>
            name - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SetDoubleConfigVar</slug>
        <title>SNM_SetDoubleConfigVar(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_SetDoubleConfigVar(const char* varname, double newvalue)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_SetDoubleConfigVar", "varname", newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_SetDoubleConfigVar(string varname, number newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_SetDoubleConfigVar(String varname, Float newvalue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Sets a double preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).
        
            The settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.
            Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.
            
            The changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!
         </description>
        <retvals>
            boolean retval - true, if setting was successful; false, if not 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1" indent="default">
            string varname - the name of the config-variable to be read; not case sensitive
                    - see [Reaper_Config_Variables.html](Reaper_Config_Variables.html) for valid config-vars
            number newvalue - the new value to be set into varname
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>reaper, project, config, preferences, variables, set, internal</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SetFastString</slug>
        <title>SNM_SetFastString(SWS)</title>
        <functioncall prog_lang="cpp">WDL_FastString* SNM_SetFastString(WDL_FastString* str, const char* newstr)</functioncall>
        <functioncall prog_lang="eel">WDL_FastString extension_api("SNM_SetFastString", WDL_FastString str, "newstr")</functioncall>
        <functioncall prog_lang="lua">WDL_FastString = reaper.SNM_SetFastString(WDL_FastString str, string newstr)</functioncall>
        <functioncall prog_lang="python">WDL_FastString SNM_SetFastString(WDL_FastString str, String newstr)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Sets the "fast string" content. Returns str for facility.
        </description>
        <retvals>
            WDL_FastString - 
        </retvals>
        <parameters>
            str - 
            newstr - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SetIntConfigVar</slug>
        <title>SNM_SetIntConfigVar(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_SetIntConfigVar(const char* varname, int newvalue)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_SetIntConfigVar", "varname", int newvalue)</functioncall>
        <functioncall prog_lang="lua">boolean retval = reaper.SNM_SetIntConfigVar(string varname, integer newvalue)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_SetIntConfigVar(String varname, Int newvalue)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).
            
            Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.
            The changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!
        </description>
        <retvals>
            boolean retval - true, if setting was successful, false if not
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1" indent="default">
            string varname - the name of the config-variable to be read; not case sensitive
                    - see [Reaper_Config_Variables.html](Reaper_Config_Variables.html) for valid config-vars
            integer newvalue - the newly set value for varname
        </parameters>            
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Api-Helper-Functions
        </chapter_context>
        <tags>reaper, project, config, preferences, variables, set, internal</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_SetProjectMarker</slug>
        <title>SNM_SetProjectMarker(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_SetProjectMarker(ReaProject* proj, int num, bool isrgn, double pos, double rgnend, const char* name, int color)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_SetProjectMarker", ReaProject proj, int num, bool isrgn, pos, rgnend, "name", int color)</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_SetProjectMarker(ReaProject proj, integer num, boolean isrgn, number pos, number rgnend, string name, integer color)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_SetProjectMarker(ReaProject proj, Int num, Boolean isrgn, Float pos, Float rgnend, String name, Int color)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&amp;M\] Deprecated, see [SetProjectMarker4](#SetProjectMarker4) -- Same function as SetProjectMarker3() except it can set empty names "".
        </description>
        <retvals>
            boolean - 
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            num - 
            isrgn - 
            pos - 
            rgnend - 
            name - 
            color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Marker Management
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_TagMediaFile</slug>
        <title>SNM_TagMediaFile(SWS)</title>
        <functioncall prog_lang="cpp">bool SNM_TagMediaFile(const char* fn, const char* tag, const char* tagval)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("SNM_TagMediaFile", "fn", "tag", "tagval")</functioncall>
        <functioncall prog_lang="lua">boolean = reaper.SNM_TagMediaFile(string fn, string tag, string tagval)</functioncall>
        <functioncall prog_lang="python">Boolean SNM_TagMediaFile(String fn, String tag, String tagval)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*" markup_type="markdown" markup_version="1.0.1" indent="default">
            \[S&amp;M\] Tags a media file thanks to [TagLib](https://taglib.github.io). Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See [SNM_ReadMediaFileTag](#SNM_ReadMediaFileTag).
        </description>
        <retvals>
            boolean - true, if adding the tag worked; false, if adding didn't work.
        </retvals>
        <parameters>
            fn - the mediafilename, in which to add the tag
            tag - "artist", "album", "genre", "comment", "title", or "year"
            tagval - the new value to be added
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            File Management
        </chapter_context>
        <tags>filemanagement, tag, id3, add</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SNM_TieResourceSlotActions</slug>
        <title>SNM_TieResourceSlotActions(SWS)</title>
        <functioncall prog_lang="cpp">void SNM_TieResourceSlotActions(int bookmarkId)</functioncall>
        <functioncall prog_lang="eel">extension_api("SNM_TieResourceSlotActions", int bookmarkId)</functioncall>
        <functioncall prog_lang="lua">reaper.SNM_TieResourceSlotActions(integer bookmarkId)</functioncall>
        <functioncall prog_lang="python">SNM_TieResourceSlotActions(Int bookmarkId)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            \[S&amp;M\] Attach Resources slot actions to a given bookmark.
        </description>
        <parameters>
            bookmarkId - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Miscellaneous
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>SN_FocusMIDIEditor</slug>
        <title>SN_FocusMIDIEditor(SWS)</title>
        <functioncall prog_lang="cpp">void SN_FocusMIDIEditor()</functioncall>
        <functioncall prog_lang="eel">extension_api("SN_FocusMIDIEditor")</functioncall>
        <functioncall prog_lang="lua">reaper.SN_FocusMIDIEditor()</functioncall>
        <functioncall prog_lang="python">SN_FocusMIDIEditor()</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description prog_lang="*">
            Focuses the active/open MIDI editor.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            User Interface
        </chapter_context>
        <tags>userinterface, midi, editor, open, active</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ULT_GetMediaItemNote</slug>
        <title>ULT_GetMediaItemNote(SWS)</title>
        <functioncall prog_lang="cpp">const char* ULT_GetMediaItemNote(MediaItem* item)</functioncall>
        <functioncall prog_lang="eel">bool extension_api("ULT_GetMediaItemNote", #retval, MediaItem item)</functioncall>
        <functioncall prog_lang="lua">string = reaper.ULT_GetMediaItemNote(MediaItem item)</functioncall>
        <functioncall prog_lang="python">String ULT_GetMediaItemNote(MediaItem item)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" prog_lang="*">
            \[ULT\]Get item notes.
            
            Gets the information from the NOTES-tag, as stored by [ULT_SetMediaItemNote](#ULT_SetMediaItemNote).
        </description>
        <retvals>
            string - the notes, as stored in the MediaItem. If no notes exist, it will return ""
        </retvals>
        <parameters>
            item - the MediaItem from which to get the notes from
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>trackmanagement, get, notes, sws, mediaitem</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="*">
        <slug>ULT_SetMediaItemNote</slug>
        <title>ULT_SetMediaItemNote(SWS)</title>
        <functioncall prog_lang="cpp">void ULT_SetMediaItemNote(MediaItem* item, const char* note)</functioncall>
        <functioncall prog_lang="eel">extension_api("ULT_SetMediaItemNote", MediaItem item, "note")</functioncall>
        <functioncall prog_lang="lua">reaper.ULT_SetMediaItemNote(MediaItem item, string note)</functioncall>
        <functioncall prog_lang="python">ULT_SetMediaItemNote(MediaItem item, String note)</functioncall>
        <requires>
            Reaper=5.62
            SWS=2.9.7
            Lua=5.3
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" prog_lang="*">
            \[ULT\]Set item notes.
            
            Will be added as new tag NOTES in the MediaItem-StateChunk. Can be read again with [ULT_GetMediaItemNote](#ULT_GetMediaItemNote)
        </description>
        <parameters>
            item - the MediaItem in which to add the Notes
            note - the notes to be added. Newlines are allowed. Long strings may slow down Reaper!
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Mediaitem Management
        </chapter_context>
        <tags>mediaitemmanagement, set, mediaitem, notes, sws</tags>
    </US_DocBloc>
    
    
  <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Byte</slug>
        <title>JS_Byte(JS)</title>
        <functioncall prog_lang="cpp">void JS_Byte(void* address, int offset, int* byteOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Byte", void* address, int offset, int &amp;byte)</functioncall>
        <functioncall prog_lang="lua">number byte = reaper.JS_Byte(identifier address, integer offset)</functioncall>
        <functioncall prog_lang="python">(void address, Int offset, Int byteOut) = JS_Byte(address, offset, byteOut)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.

        </description>
        <retvals>
           number byte   - 
        </retvals>
        <parameters>
           identifier address - 
           integer offset - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Double</slug>
        <title>JS_Double(JS)</title>
        <functioncall prog_lang="cpp">void JS_Double(void* address, int offset, double* doubleOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Double", void* address, int offset, &amp;double)</functioncall>
        <functioncall prog_lang="lua">number double = reaper.JS_Double(identifier address, integer offset)</functioncall>
        <functioncall prog_lang="python">(void address, Int offset, Float doubleOut) = JS_Double(address, offset, doubleOut)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.
        </description>
        <retvals>
           number double   - 
        </retvals>
        <parameters>
           identifier address - 
           integer offset - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_Blit</slug>
        <title>JS_GDI_Blit(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_Blit(void* destHDC, int dstx, int dsty, void* sourceHDC, int srcx, int srxy, int width, int height)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_Blit", void* destHDC, int dstx, int dsty, void* sourceHDC, int srcx, int srxy, int width, int height)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_Blit(identifier destHDC, integer dstx, integer dsty, identifier sourceHDC, integer srcx, integer srxy, integer width, integer height)</functioncall>
        <functioncall prog_lang="python">JS_GDI_Blit(void destHDC, Int dstx, Int dsty, void sourceHDC, Int srcx, Int srxy, Int width, Int height)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Blits between two device contexts, which may include LICE "system bitmaps".
        </description>

        <parameters>
           identifier destHDC - 
           integer dstx - 
           integer dsty - 
           identifier sourceHDC - 
           integer srcx - 
           integer srxy - 
           integer width - 
           integer height - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_CreateFillBrush</slug>
        <title>JS_GDI_CreateFillBrush(JS)</title>
        <functioncall prog_lang="cpp">void* JS_GDI_CreateFillBrush(int color)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_GDI_CreateFillBrush", int color)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_GDI_CreateFillBrush(integer color)</functioncall>
        <functioncall prog_lang="python">void  JS_GDI_CreateFillBrush(Int color)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           integer color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_CreateFont</slug>
        <title>JS_GDI_CreateFont(JS)</title>
        <functioncall prog_lang="cpp">void* JS_GDI_CreateFont(int height, int weight, int angle, bool italic, bool underline, bool strikeOut, const char* fontName)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_GDI_CreateFont", int height, int weight, int angle, bool italic, bool underline, bool strike, "fontName")</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_GDI_CreateFont(integer height, integer weight, integer angle, boolean italic, boolean underline, boolean strike, string fontName)</functioncall>
        <functioncall prog_lang="python">void  JS_GDI_CreateFont(Int height, Int weight, Int angle, Boolean italic, Boolean underline, Boolean strikeOut, String fontName)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Parameters:
           
            * weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.
           
            * angle: the angle, in tenths of degrees, between the text and the x-axis of the device.
           
            * fontName: If empty string "", uses first font that matches the other specified attributes.
           
           
           
           Note: Text color must be set separately.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           integer height - 
           integer weight - 
           integer angle - 
           boolean italic - 
           boolean underline - 
           boolean strike - 
           string fontName - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_CreatePen</slug>
        <title>JS_GDI_CreatePen(JS)</title>
        <functioncall prog_lang="cpp">void* JS_GDI_CreatePen(int width, int color)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_GDI_CreatePen", int width, int color)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_GDI_CreatePen(integer width, integer color)</functioncall>
        <functioncall prog_lang="python">void  JS_GDI_CreatePen(Int width, Int color)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           integer width - 
           integer color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_DeleteObject</slug>
        <title>JS_GDI_DeleteObject(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_DeleteObject(void* GDIObject)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_DeleteObject", void* GDIObject)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_DeleteObject(identifier GDIObject)</functioncall>
        <functioncall prog_lang="python">JS_GDI_DeleteObject(void GDIObject)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier GDIObject - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_DrawText</slug>
        <title>JS_GDI_DrawText(JS)</title>
        <functioncall prog_lang="cpp">int JS_GDI_DrawText(void* deviceHDC, const char* text, int len, int left, int top, int right, int bottom, const char* align))</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_GDI_DrawText", void* deviceHDC, "text", int len, int left, int top, int right, int bottom, "align)")</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_GDI_DrawText(identifier deviceHDC, string text, integer len, integer left, integer top, integer right, integer bottom, string align))</functioncall>
        <functioncall prog_lang="python">Int  JS_GDI_DrawText(void deviceHDC, String text, Int len, Int left, Int top, Int right, Int bottom, String align))</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Parameters:
           
            * align: Combination of: "TOP", "VCENTER", "LEFT", "HCENTER", "RIGHT", "BOTTOM", "WORDBREAK", "SINGLELINE", "NOCLIP", "CALCRECT", "NOPREFIX" or "ELLIPSIS"

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier deviceHDC - 
           string text - 
           integer len - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
           string align - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_FillEllipse</slug>
        <title>JS_GDI_FillEllipse(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_FillEllipse(void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_FillEllipse", void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_FillEllipse(identifier deviceHDC, integer left, integer top, integer right, integer bottom)</functioncall>
        <functioncall prog_lang="python">JS_GDI_FillEllipse(void deviceHDC, Int left, Int top, Int right, Int bottom)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier deviceHDC - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_FillPolygon</slug>
        <title>JS_GDI_FillPolygon(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_FillPolygon(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_FillPolygon", void* deviceHDC, "packedX", "packedY", int numPoints)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_FillPolygon(identifier deviceHDC, string packedX, string packedY, integer numPoints)</functioncall>
        <functioncall prog_lang="python">JS_GDI_FillPolygon(void deviceHDC, String packedX, String packedY, Int numPoints)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            packedX and packedY are strings of points, each packed as "&lt;i4".

        </description>

        <parameters>
           identifier deviceHDC - 
           string packedX - 
           string packedY - 
           integer numPoints - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_FillRect</slug>
        <title>JS_GDI_FillRect(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_FillRect(void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_FillRect", void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_FillRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom)</functioncall>
        <functioncall prog_lang="python">JS_GDI_FillRect(void deviceHDC, Int left, Int top, Int right, Int bottom)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier deviceHDC - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_FillRoundRect</slug>
        <title>JS_GDI_FillRoundRect(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_FillRoundRect(void* deviceHDC, int left, int top, int right, int bottom, int xrnd, int yrnd)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_FillRoundRect", void* deviceHDC, int left, int top, int right, int bottom, int xrnd, int yrnd)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_FillRoundRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom, integer xrnd, integer yrnd)</functioncall>
        <functioncall prog_lang="python">JS_GDI_FillRoundRect(void deviceHDC, Int left, Int top, Int right, Int bottom, Int xrnd, Int yrnd)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier deviceHDC - 
           integer left - 
           integer top - 
           integer right - 
           integer bottom - 
           integer xrnd - 
           integer yrnd - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_GetClientDC</slug>
        <title>JS_GDI_GetClientDC(JS)</title>
        <functioncall prog_lang="cpp">void* JS_GDI_GetClientDC(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_GDI_GetClientDC", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_GDI_GetClientDC(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">void  JS_GDI_GetClientDC(void windowHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the device context for the client area of the specified window.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_GetScreenDC</slug>
        <title>JS_GDI_GetScreenDC(JS)</title>
        <functioncall prog_lang="cpp">void* JS_GDI_GetScreenDC()</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_GDI_GetScreenDC")</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_GDI_GetScreenDC()</functioncall>
        <functioncall prog_lang="python">void  JS_GDI_GetScreenDC()</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns a device context for the entire screen.
           
           
           
           WARNING: Only available on Windows, not Linux or MacOS.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_GetSysColor</slug>
        <title>JS_GDI_GetSysColor(JS)</title>
        <functioncall prog_lang="cpp">int JS_GDI_GetSysColor(const char* GUIElement)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_GDI_GetSysColor", "GUIElement")</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_GDI_GetSysColor(string GUIElement)</functioncall>
        <functioncall prog_lang="python">Int  JS_GDI_GetSysColor(String GUIElement)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           string GUIElement - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_GetTextColor</slug>
        <title>JS_GDI_GetTextColor(JS)</title>
        <functioncall prog_lang="cpp">int JS_GDI_GetTextColor(void* deviceHDC)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_GDI_GetTextColor", void* deviceHDC)</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_GDI_GetTextColor(identifier deviceHDC)</functioncall>
        <functioncall prog_lang="python">Int  JS_GDI_GetTextColor(void deviceHDC)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier deviceHDC - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_GetWindowDC</slug>
        <title>JS_GDI_GetWindowDC(JS)</title>
        <functioncall prog_lang="cpp">void* JS_GDI_GetWindowDC(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_GDI_GetWindowDC", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_GDI_GetWindowDC(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">void  JS_GDI_GetWindowDC(void windowHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the device context for the entire window, including title bar and frame.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_Line</slug>
        <title>JS_GDI_Line(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_Line(void* deviceHDC, int x1, int y1, int x2, int y2)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_Line", void* deviceHDC, int x1, int y1, int x2, int y2)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_Line(identifier deviceHDC, integer x1, integer y1, integer x2, integer y2)</functioncall>
        <functioncall prog_lang="python">JS_GDI_Line(void deviceHDC, Int x1, Int y1, Int x2, Int y2)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier deviceHDC - 
           integer x1 - 
           integer y1 - 
           integer x2 - 
           integer y2 - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_Polyline</slug>
        <title>JS_GDI_Polyline(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_Polyline(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_Polyline", void* deviceHDC, "packedX", "packedY", int numPoints)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_Polyline(identifier deviceHDC, string packedX, string packedY, integer numPoints)</functioncall>
        <functioncall prog_lang="python">JS_GDI_Polyline(void deviceHDC, String packedX, String packedY, Int numPoints)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            packedX and packedY are strings of points, each packed as "&lt;i4".

        </description>

        <parameters>
           identifier deviceHDC - 
           string packedX - 
           string packedY - 
           integer numPoints - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_ReleaseDC</slug>
        <title>JS_GDI_ReleaseDC(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_ReleaseDC(void* windowHWND, void* deviceHDC)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_ReleaseDC", void* windowHWND, void* deviceHDC)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_ReleaseDC(identifier windowHWND, identifier deviceHDC)</functioncall>
        <functioncall prog_lang="python">JS_GDI_ReleaseDC(void windowHWND, void deviceHDC)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier windowHWND - 
           identifier deviceHDC - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_SelectObject</slug>
        <title>JS_GDI_SelectObject(JS)</title>
        <functioncall prog_lang="cpp">void* JS_GDI_SelectObject(void* deviceHDC, void* GDIObject)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_GDI_SelectObject", void* deviceHDC, void* GDIObject)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_GDI_SelectObject(identifier deviceHDC, identifier GDIObject)</functioncall>
        <functioncall prog_lang="python">void  JS_GDI_SelectObject(void deviceHDC, void GDIObject)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Activates a font, pen, or fill brush for subsequent drawing in the specified device context.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           identifier deviceHDC - 
           identifier GDIObject - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_SetPixel</slug>
        <title>JS_GDI_SetPixel(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_SetPixel(void* deviceHDC, int x, int y, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_SetPixel", void* deviceHDC, int x, int y, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_SetPixel(identifier deviceHDC, integer x, integer y, integer color)</functioncall>
        <functioncall prog_lang="python">JS_GDI_SetPixel(void deviceHDC, Int x, Int y, Int color)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier deviceHDC - 
           integer x - 
           integer y - 
           integer color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_SetTextBkColor</slug>
        <title>JS_GDI_SetTextBkColor(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_SetTextBkColor(void* deviceHDC, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_SetTextBkColor", void* deviceHDC, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_SetTextBkColor(identifier deviceHDC, integer color)</functioncall>
        <functioncall prog_lang="python">JS_GDI_SetTextBkColor(void deviceHDC, Int color)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier deviceHDC - 
           integer color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_SetTextBkMode</slug>
        <title>JS_GDI_SetTextBkMode(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_SetTextBkMode(void* deviceHDC, int mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_SetTextBkMode", void* deviceHDC, int mode)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_SetTextBkMode(identifier deviceHDC, integer mode)</functioncall>
        <functioncall prog_lang="python">JS_GDI_SetTextBkMode(void deviceHDC, Int mode)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier deviceHDC - 
           integer mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_SetTextColor</slug>
        <title>JS_GDI_SetTextColor(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_SetTextColor(void* deviceHDC, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_SetTextColor", void* deviceHDC, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_SetTextColor(identifier deviceHDC, integer color)</functioncall>
        <functioncall prog_lang="python">JS_GDI_SetTextColor(void deviceHDC, Int color)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier deviceHDC - 
           integer color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_GDI_StretchBlit</slug>
        <title>JS_GDI_StretchBlit(JS)</title>
        <functioncall prog_lang="cpp">void JS_GDI_StretchBlit(void* destHDC, int dstx, int dsty, int dstw, int dsth, void* sourceHDC, int srcx, int srxy, int srcw, int srch)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_GDI_StretchBlit", void* destHDC, int dstx, int dsty, int dstw, int dsth, void* sourceHDC, int srcx, int srxy, int srcw, int srch)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_GDI_StretchBlit(identifier destHDC, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceHDC, integer srcx, integer srxy, integer srcw, integer srch)</functioncall>
        <functioncall prog_lang="python">JS_GDI_StretchBlit(void destHDC, Int dstx, Int dsty, Int dstw, Int dsth, void sourceHDC, Int srcx, Int srxy, Int srcw, Int srch)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Blits between two device contexts, which may include LICE "system bitmaps".

        </description>

        <parameters>
           identifier destHDC - 
           integer dstx - 
           integer dsty - 
           integer dstw - 
           integer dsth - 
           identifier sourceHDC - 
           integer srcx - 
           integer srxy - 
           integer srcw - 
           integer srch - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Int</slug>
        <title>JS_Int(JS)</title>
        <functioncall prog_lang="cpp">void JS_Int(void* address, int offset, int* intOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Int", void* address, int offset, int &amp;int)</functioncall>
        <functioncall prog_lang="lua">number int = reaper.JS_Int(identifier address, integer offset)</functioncall>
        <functioncall prog_lang="python">(void address, Int offset, Int intOut) = JS_Int(address, offset, intOut)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.

        </description>
        <retvals>
           number int   - 
        </retvals>
        <parameters>
           identifier address - 
           integer offset - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Arc</slug>
        <title>JS_LICE_Arc(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_Arc(void* bitmap, double cx, double cy, double r, double minAngle, double maxAngle, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Arc", void* bitmap, cx, cy, r, minAngle, maxAngle, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Arc(identifier bitmap, number cx, number cy, number r, number minAngle, number maxAngle, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Arc(void bitmap, Float cx, Float cy, Float r, Float minAngle, Float maxAngle, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
           
           
           
           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>

        <parameters>
           identifier bitmap - 
           number cx - 
           number cy - 
           number r - 
           number minAngle - 
           number maxAngle - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Bezier</slug>
        <title>JS_LICE_Bezier(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_Bezier(void* bitmap, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, double tol, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Bezier", void* bitmap, xstart, ystart, xctl1, yctl1, xctl2, yctl2, xend, yend, tol, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Bezier(identifier bitmap, number xstart, number ystart, number xctl1, number yctl1, number xctl2, number yctl2, number xend, number yend, number tol, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Bezier(void bitmap, Float xstart, Float ystart, Float xctl1, Float yctl1, Float xctl2, Float yctl2, Float xend, Float yend, Float tol, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
           
           
           
           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>

        <parameters>
           identifier bitmap - 
           number xstart - 
           number ystart - 
           number xctl1 - 
           number yctl1 - 
           number xctl2 - 
           number yctl2 - 
           number xend - 
           number yend - 
           number tol - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Blit</slug>
        <title>JS_LICE_Blit(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_Blit(void* destBitmap, int dstx, int dsty, void* sourceBitmap, int srcx, int srcy, int width, int height, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Blit", void* destBitmap, int dstx, int dsty, void* sourceBitmap, int srcx, int srcy, int width, int height, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Blit(identifier destBitmap, integer dstx, integer dsty, identifier sourceBitmap, integer srcx, integer srcy, integer width, integer height, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Blit(void destBitmap, Int dstx, Int dsty, void sourceBitmap, Int srcx, Int srcy, Int width, Int height, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

        </description>

        <parameters>
           identifier destBitmap - 
           integer dstx - 
           integer dsty - 
           identifier sourceBitmap - 
           integer srcx - 
           integer srcy - 
           integer width - 
           integer height - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Circle</slug>
        <title>JS_LICE_Circle(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_Circle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Circle", void* bitmap, cx, cy, r, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Circle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Circle(void bitmap, Float cx, Float cy, Float r, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
           
           
           
           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>

        <parameters>
           identifier bitmap - 
           number cx - 
           number cy - 
           number r - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Clear</slug>
        <title>JS_LICE_Clear(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_Clear(void* bitmap, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Clear", void* bitmap, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Clear(identifier bitmap, integer color)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Clear(void bitmap, Int color)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier bitmap - 
           integer color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_CreateBitmap</slug>
        <title>JS_LICE_CreateBitmap(JS)</title>
        <functioncall prog_lang="cpp">void* JS_LICE_CreateBitmap(bool isSysBitmap, int width, int height)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_LICE_CreateBitmap", bool isSysBitmap, int width, int height)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_LICE_CreateBitmap(boolean isSysBitmap, integer width, integer height)</functioncall>
        <functioncall prog_lang="python">void  JS_LICE_CreateBitmap(Boolean isSysBitmap, Int width, Int height)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           boolean isSysBitmap - 
           integer width - 
           integer height - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_CreateFont</slug>
        <title>JS_LICE_CreateFont(JS)</title>
        <functioncall prog_lang="cpp">void* JS_LICE_CreateFont()</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_LICE_CreateFont")</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_LICE_CreateFont()</functioncall>
        <functioncall prog_lang="python">void  JS_LICE_CreateFont()</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           identifier  - 
        </retvals>

        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_DestroyBitmap</slug>
        <title>JS_LICE_DestroyBitmap(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_DestroyBitmap(void* bitmap)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_DestroyBitmap", void* bitmap)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_DestroyBitmap(identifier bitmap)</functioncall>
        <functioncall prog_lang="python">JS_LICE_DestroyBitmap(void bitmap)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier bitmap - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_DestroyFont</slug>
        <title>JS_LICE_DestroyFont(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_DestroyFont(void* LICEFont)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_DestroyFont", void* LICEFont)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_DestroyFont(identifier LICEFont)</functioncall>
        <functioncall prog_lang="python">JS_LICE_DestroyFont(void LICEFont)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier LICEFont - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_DrawChar</slug>
        <title>JS_LICE_DrawChar(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_DrawChar(void* bitmap, int x, int y, char c, int color, double alpha, int mode))</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_DrawChar", void* bitmap, int x, int y, char c, int color, alpha, int mode))</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_DrawChar(identifier bitmap, integer x, integer y, integer c, integer color, number alpha, integer mode))</functioncall>
        <functioncall prog_lang="python">JS_LICE_DrawChar(void bitmap, Int x, Int y, Int c, Int color, Float alpha, Int mode))</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier bitmap - 
           integer x - 
           integer y - 
           integer c - 
           integer color - 
           number alpha - 
           integer mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_DrawText</slug>
        <title>JS_LICE_DrawText(JS)</title>
        <functioncall prog_lang="cpp">int JS_LICE_DrawText(void* bitmap, void* LICEFont, const char* text, int textLen, int x1, int y1, int x2, int y2)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_LICE_DrawText", void* bitmap, void* LICEFont, "text", int textLen, int x1, int y1, int x2, int y2)</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_LICE_DrawText(identifier bitmap, identifier LICEFont, string text, integer textLen, integer x1, integer y1, integer x2, integer y2)</functioncall>
        <functioncall prog_lang="python">Int  JS_LICE_DrawText(void bitmap, void LICEFont, String text, Int textLen, Int x1, Int y1, Int x2, Int y2)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier bitmap - 
           identifier LICEFont - 
           string text - 
           integer textLen - 
           integer x1 - 
           integer y1 - 
           integer x2 - 
           integer y2 - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_FillCircle</slug>
        <title>JS_LICE_FillCircle(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_FillCircle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_FillCircle", void* bitmap, cx, cy, r, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_FillCircle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_FillCircle(void bitmap, Float cx, Float cy, Float r, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
           
           
           
           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>

        <parameters>
           identifier bitmap - 
           number cx - 
           number cy - 
           number r - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_FillPolygon</slug>
        <title>JS_LICE_FillPolygon(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_FillPolygon(void* bitmap, const char* packedX, const char* packedY, int numPoints, int color, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_FillPolygon", void* bitmap, "packedX", "packedY", int numPoints, int color, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_FillPolygon(identifier bitmap, string packedX, string packedY, integer numPoints, integer color, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_FillPolygon(void bitmap, String packedX, String packedY, Int numPoints, Int color, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            packedX and packedY are two strings of coordinates, each packed as "&lt;i4".
           
           
           
           LICE modes : "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
           
           
           
           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>

        <parameters>
           identifier bitmap - 
           string packedX - 
           string packedY - 
           integer numPoints - 
           integer color - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_FillRect</slug>
        <title>JS_LICE_FillRect(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_FillRect(void* bitmap, int x, int y, int w, int h, int color, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_FillRect", void* bitmap, int x, int y, int w, int h, int color, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_FillRect(identifier bitmap, integer x, integer y, integer w, integer h, integer color, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_FillRect(void bitmap, Int x, Int y, Int w, Int h, Int color, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
           
           
           
           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>

        <parameters>
           identifier bitmap - 
           integer x - 
           integer y - 
           integer w - 
           integer h - 
           integer color - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_FillTriangle</slug>
        <title>JS_LICE_FillTriangle(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_FillTriangle(void* bitmap, int x1, int y1, int x2, int y2, int x3, int y3, int color, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_FillTriangle", void* bitmap, int x1, int y1, int x2, int y2, int x3, int y3, int color, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_FillTriangle(identifier bitmap, integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, integer color, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_FillTriangle(void bitmap, Int x1, Int y1, Int x2, Int y2, Int x3, Int y3, Int color, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
           
           
           
           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>

        <parameters>
           identifier bitmap - 
           integer x1 - 
           integer y1 - 
           integer x2 - 
           integer y2 - 
           integer x3 - 
           integer y3 - 
           integer color - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_GetDC</slug>
        <title>JS_LICE_GetDC(JS)</title>
        <functioncall prog_lang="cpp">void* JS_LICE_GetDC(void* bitmap)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_LICE_GetDC", void* bitmap)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_LICE_GetDC(identifier bitmap)</functioncall>
        <functioncall prog_lang="python">void  JS_LICE_GetDC(void bitmap)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           identifier bitmap - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_GetHeight</slug>
        <title>JS_LICE_GetHeight(JS)</title>
        <functioncall prog_lang="cpp">int JS_LICE_GetHeight(void* bitmap)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_LICE_GetHeight", void* bitmap)</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_LICE_GetHeight(identifier bitmap)</functioncall>
        <functioncall prog_lang="python">Int  JS_LICE_GetHeight(void bitmap)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier bitmap - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_GetPixel</slug>
        <title>JS_LICE_GetPixel(JS)</title>
        <functioncall prog_lang="cpp">int JS_LICE_GetPixel(void* bitmap, int x, int y)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_LICE_GetPixel", void* bitmap, int x, int y)</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_LICE_GetPixel(identifier bitmap, integer x, integer y)</functioncall>
        <functioncall prog_lang="python">Int  JS_LICE_GetPixel(void bitmap, Int x, Int y)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the color of the specified pixel.

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier bitmap - 
           integer x - 
           integer y - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_GetWidth</slug>
        <title>JS_LICE_GetWidth(JS)</title>
        <functioncall prog_lang="cpp">int JS_LICE_GetWidth(void* bitmap)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_LICE_GetWidth", void* bitmap)</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_LICE_GetWidth(identifier bitmap)</functioncall>
        <functioncall prog_lang="python">Int  JS_LICE_GetWidth(void bitmap)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier bitmap - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_GradRect</slug>
        <title>JS_LICE_GradRect(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_GradRect(void* bitmap, int dstx, int dsty, int dstw, int dsth, double ir, double ig, double ib, double ia, double drdx, double dgdx, double dbdx, double dadx, double drdy, double dgdy, double dbdy, double dady, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_GradRect", void* bitmap, int dstx, int dsty, int dstw, int dsth, ir, ig, ib, ia, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_GradRect(identifier bitmap, integer dstx, integer dsty, integer dstw, integer dsth, number ir, number ig, number ib, number ia, number drdx, number dgdx, number dbdx, number dadx, number drdy, number dgdy, number dbdy, number dady, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_GradRect(void bitmap, Int dstx, Int dsty, Int dstw, Int dsth, Float ir, Float ig, Float ib, Float ia, Float drdx, Float dgdx, Float dbdx, Float dadx, Float drdy, Float dgdy, Float dbdy, Float dady, String mode)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier bitmap - 
           integer dstx - 
           integer dsty - 
           integer dstw - 
           integer dsth - 
           number ir - 
           number ig - 
           number ib - 
           number ia - 
           number drdx - 
           number dgdx - 
           number dbdx - 
           number dadx - 
           number drdy - 
           number dgdy - 
           number dbdy - 
           number dady - 
           string mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_IsFlipped</slug>
        <title>JS_LICE_IsFlipped(JS)</title>
        <functioncall prog_lang="cpp">bool JS_LICE_IsFlipped(void* bitmap)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_LICE_IsFlipped", void* bitmap)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_LICE_IsFlipped(identifier bitmap)</functioncall>
        <functioncall prog_lang="python">Boolean  JS_LICE_IsFlipped(void bitmap)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier bitmap - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Line</slug>
        <title>JS_LICE_Line(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_Line(void* bitmap, double x1, double y1, double x2, double y2, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Line", void* bitmap, x1, y1, x2, y2, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Line(identifier bitmap, number x1, number y1, number x2, number y2, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Line(void bitmap, Float x1, Float y1, Float x2, Float y2, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
           
           
           
           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>

        <parameters>
           identifier bitmap - 
           number x1 - 
           number y1 - 
           number x2 - 
           number y2 - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_LoadPNG</slug>
        <title>JS_LICE_LoadPNG(JS)</title>
        <functioncall prog_lang="cpp">void* JS_LICE_LoadPNG(const char* filename)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_LICE_LoadPNG", "filename")</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_LICE_LoadPNG(string filename)</functioncall>
        <functioncall prog_lang="python">void  JS_LICE_LoadPNG(String filename)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns a (non-system) LICE bitmap containing the PNG.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           string filename - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_PutPixel</slug>
        <title>JS_LICE_PutPixel(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_PutPixel(void* bitmap, int x, int y, int color, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_PutPixel", void* bitmap, int x, int y, int color, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_PutPixel(identifier bitmap, integer x, integer y, integer color, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_PutPixel(void bitmap, Int x, Int y, Int color, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
           
           
           
           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>

        <parameters>
           identifier bitmap - 
           integer x - 
           integer y - 
           integer color - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_Resize</slug>
        <title>JS_LICE_Resize(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_Resize(void* bitmap, int width, int height)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_Resize", void* bitmap, int width, int height)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_Resize(identifier bitmap, integer width, integer height)</functioncall>
        <functioncall prog_lang="python">JS_LICE_Resize(void bitmap, Int width, Int height)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier bitmap - 
           integer width - 
           integer height - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_RotatedBlit</slug>
        <title>JS_LICE_RotatedBlit(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_RotatedBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* sourceBitmap, double srcx, double srcy, double srcw, double srch, double angle, double rotxcent, double rotycent, bool cliptosourcerect, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_RotatedBlit", void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* sourceBitmap, srcx, srcy, srcw, srch, angle, rotxcent, rotycent, bool cliptosourcerect, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_RotatedBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceBitmap, number srcx, number srcy, number srcw, number srch, number angle, number rotxcent, number rotycent, boolean cliptosourcerect, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_RotatedBlit(void destBitmap, Int dstx, Int dsty, Int dstw, Int dsth, void sourceBitmap, Float srcx, Float srcy, Float srcw, Float srch, Float angle, Float rotxcent, Float rotycent, Boolean cliptosourcerect, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

        </description>

        <parameters>
           identifier destBitmap - 
           integer dstx - 
           integer dsty - 
           integer dstw - 
           integer dsth - 
           identifier sourceBitmap - 
           number srcx - 
           number srcy - 
           number srcw - 
           number srch - 
           number angle - 
           number rotxcent - 
           number rotycent - 
           boolean cliptosourcerect - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_RoundRect</slug>
        <title>JS_LICE_RoundRect(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_RoundRect(void* bitmap, double x, double y, double w, double h, int cornerradius, int color, double alpha, const char* mode, bool antialias)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_RoundRect", void* bitmap, x, y, w, h, int cornerradius, int color, alpha, "mode", bool antialias)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_RoundRect(identifier bitmap, number x, number y, number w, number h, integer cornerradius, integer color, number alpha, string mode, boolean antialias)</functioncall>
        <functioncall prog_lang="python">JS_LICE_RoundRect(void bitmap, Float x, Float y, Float w, Float h, Int cornerradius, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
           
           
           
           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).

        </description>

        <parameters>
           identifier bitmap - 
           number x - 
           number y - 
           number w - 
           number h - 
           integer cornerradius - 
           integer color - 
           number alpha - 
           string mode - 
           boolean antialias - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_ScaledBlit</slug>
        <title>JS_LICE_ScaledBlit(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_ScaledBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* srcBitmap, double srcx, double srcy, double srcw, double srch, double alpha, const char* mode)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_ScaledBlit", void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* srcBitmap, srcx, srcy, srcw, srch, alpha, "mode")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_ScaledBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier srcBitmap, number srcx, number srcy, number srcw, number srch, number alpha, string mode)</functioncall>
        <functioncall prog_lang="python">JS_LICE_ScaledBlit(void destBitmap, Int dstx, Int dsty, Int dstw, Int dsth, void srcBitmap, Float srcx, Float srcy, Float srcw, Float srch, Float alpha, String mode)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

        </description>

        <parameters>
           identifier destBitmap - 
           integer dstx - 
           integer dsty - 
           integer dstw - 
           integer dsth - 
           identifier srcBitmap - 
           number srcx - 
           number srcy - 
           number srcw - 
           number srch - 
           number alpha - 
           string mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_SetFontBkColor</slug>
        <title>JS_LICE_SetFontBkColor(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_SetFontBkColor(void* LICEFont, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_SetFontBkColor", void* LICEFont, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_SetFontBkColor(identifier LICEFont, integer color)</functioncall>
        <functioncall prog_lang="python">JS_LICE_SetFontBkColor(void LICEFont, Int color)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier LICEFont - 
           integer color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_SetFontColor</slug>
        <title>JS_LICE_SetFontColor(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_SetFontColor(void* LICEFont, int color)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_SetFontColor", void* LICEFont, int color)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_SetFontColor(identifier LICEFont, integer color)</functioncall>
        <functioncall prog_lang="python">JS_LICE_SetFontColor(void LICEFont, Int color)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier LICEFont - 
           integer color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_LICE_SetFontFromGDI</slug>
        <title>JS_LICE_SetFontFromGDI(JS)</title>
        <functioncall prog_lang="cpp">void JS_LICE_SetFontFromGDI(void* LICEFont, void* GDIFont, const char* moreFormats)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_LICE_SetFontFromGDI", void* LICEFont, void* GDIFont, "moreFormats")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_LICE_SetFontFromGDI(identifier LICEFont, identifier GDIFont, string moreFormats)</functioncall>
        <functioncall prog_lang="python">JS_LICE_SetFontFromGDI(void LICEFont, void GDIFont, String moreFormats)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Converts a GDI font into a LICE font.
           
           
           
           The font can be modified by the following flags, in a comma-separated list:
           
           "VERTICAL", "BOTTOMUP", "NATIVE", "BLUR", "INVERT", "MONO", "SHADOW" or "OUTLINE".

        </description>

        <parameters>
           identifier LICEFont - 
           identifier GDIFont - 
           string moreFormats - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_MIDIEditor_ArrayAll</slug>
        <title>JS_MIDIEditor_ArrayAll(JS)</title>
        <functioncall prog_lang="cpp">void JS_MIDIEditor_ArrayAll(void* reaperarray)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_MIDIEditor_ArrayAll", void* reaperarray)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_MIDIEditor_ArrayAll(identifier reaperarray)</functioncall>
        <functioncall prog_lang="python">JS_MIDIEditor_ArrayAll(void reaperarray)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the addresses of all open MIDI windows (whether docked or not).
           
            * The addresses are stored in the provided reaper.array.
           
            * Each address can be converted to a REAPER object (HWND) by the function JS_Window_HandleFromAddress.

        </description>

        <parameters>
           identifier reaperarray - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_MIDIEditor_ListAll</slug>
        <title>JS_MIDIEditor_ListAll(JS)</title>
        <functioncall prog_lang="cpp">void JS_MIDIEditor_ListAll(char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_MIDIEditor_ListAll", #buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.JS_MIDIEditor_ListAll(string buf)</functioncall>
        <functioncall prog_lang="python">(String buf, Int buf_sz) = JS_MIDIEditor_ListAll(buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns a list of HWNDs of all open MIDI windows (whether docked or not).
           
            * The list is formatted as a comma-separated (and terminated) string of hexadecimal values.
           
            * Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.

        </description>
        <retvals>
           string buf   - 
        </retvals>
        <parameters>
           string buf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mouse_GetState</slug>
        <title>JS_Mouse_GetState(JS)</title>
        <functioncall prog_lang="cpp">int JS_Mouse_GetState(int flags)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_Mouse_GetState", int flags)</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_Mouse_GetState(integer flags)</functioncall>
        <functioncall prog_lang="python">Int  JS_Mouse_GetState(Int flags)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Retrieves the states of mouse buttons and modifiers keys.
           
           
           
           Parameters:
           
            * flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. I.e., to get the states of the left mouse button and the ctrl key, use flags = 0b00000101.

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           integer flags - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mouse_LoadCursor</slug>
        <title>JS_Mouse_LoadCursor(JS)</title>
        <functioncall prog_lang="cpp">void* JS_Mouse_LoadCursor(int cursorNumber)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_Mouse_LoadCursor", int cursorNumber)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_Mouse_LoadCursor(integer cursorNumber)</functioncall>
        <functioncall prog_lang="python">void  JS_Mouse_LoadCursor(Int cursorNumber)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Loads a cursor by number.
           
           cursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers &gt; 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers &lt; 2000). 
           
           If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           integer cursorNumber - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mouse_LoadCursorFromFile</slug>
        <title>JS_Mouse_LoadCursorFromFile(JS)</title>
        <functioncall prog_lang="cpp">void* JS_Mouse_LoadCursorFromFile(const char* pathAndFileName)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_Mouse_LoadCursorFromFile", "pathAndFileName")</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_Mouse_LoadCursorFromFile(string pathAndFileName)</functioncall>
        <functioncall prog_lang="python">void  JS_Mouse_LoadCursorFromFile(String pathAndFileName)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Loads a cursor from a .cur file.
           
           If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           string pathAndFileName - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mouse_SetCursor</slug>
        <title>JS_Mouse_SetCursor(JS)</title>
        <functioncall prog_lang="cpp">void JS_Mouse_SetCursor(void* cursorHandle)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Mouse_SetCursor", void* cursorHandle)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Mouse_SetCursor(identifier cursorHandle)</functioncall>
        <functioncall prog_lang="python">JS_Mouse_SetCursor(void cursorHandle)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets the mouse cursor.  (Only lasts while script is running, and for a single "defer" cycle.)

        </description>

        <parameters>
           identifier cursorHandle - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Mouse_SetPosition</slug>
        <title>JS_Mouse_SetPosition(JS)</title>
        <functioncall prog_lang="cpp">bool JS_Mouse_SetPosition(int x, int y)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Mouse_SetPosition", int x, int y)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_Mouse_SetPosition(integer x, integer y)</functioncall>
        <functioncall prog_lang="python">Boolean  JS_Mouse_SetPosition(Int x, Int y)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Moves the mouse cursor to the specified coordinates.

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           integer x - 
           integer y - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_PtrFromStr</slug>
        <title>JS_PtrFromStr(JS)</title>
        <functioncall prog_lang="cpp">void* JS_PtrFromStr(const char* s)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_PtrFromStr", "s")</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_PtrFromStr(string s)</functioncall>
        <functioncall prog_lang="python">void  JS_PtrFromStr(String s)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           string s - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_ReaScriptAPI_Version</slug>
        <title>JS_ReaScriptAPI_Version(JS)</title>
        <functioncall prog_lang="cpp">void JS_ReaScriptAPI_Version(double* versionOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_ReaScriptAPI_Version", &amp;version)</functioncall>
        <functioncall prog_lang="lua">number version = reaper.JS_ReaScriptAPI_Version()</functioncall>
        <functioncall prog_lang="python">(Float versionOut) JS_ReaScriptAPI_Version(versionOut)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the version of the js_ReaScriptAPI extension.

        </description>
        <retvals>
           number version   - 
        </retvals>

        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_Intercept</slug>
        <title>JS_WindowMessage_Intercept(JS)</title>
        <functioncall prog_lang="cpp">int JS_WindowMessage_Intercept(void* windowHWND, const char* messages, bool passThrough)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_WindowMessage_Intercept", void* windowHWND, "messages", bool passThrough)</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_WindowMessage_Intercept(identifier windowHWND, string messages, boolean passThrough)</functioncall>
        <functioncall prog_lang="python">Int  JS_WindowMessage_Intercept(void windowHWND, String messages, Boolean passThrough)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Intercepts window messages to specified window.
           
           
           
           Parameters:
           
            * message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example "WM_SETCURSOR" or "0x0020".
           
            * passThrough: Whether message should be blocked (false) or passed through (true) to the window.
           
               For more information on message codes, refer to the Win32 C++ API documentation.
           
               For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.
           
           
           
           Returns:
           
            * 1: Success.
           
            * 0: The message type is already being intercepted by another script.
           
            * -2: message string could not be parsed.
           
            * -3: Failure getting original window process / window not valid.
           
           
           
           Notes:
           
            * Intercepted messages can be polled using JS_WindowMessage_Peek.
           
            * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.
           
            * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.
           
            * Mouse events are typically received by the child window under the mouse, not the parent window.

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string messages - 
           boolean passThrough - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_InterceptList</slug>
        <title>JS_WindowMessage_InterceptList(JS)</title>
        <functioncall prog_lang="cpp">int JS_WindowMessage_InterceptList(void* windowHWND, const char* messages)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_WindowMessage_InterceptList", void* windowHWND, "messages")</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_WindowMessage_InterceptList(identifier windowHWND, string messages)</functioncall>
        <functioncall prog_lang="python">Int  JS_WindowMessage_InterceptList(void windowHWND, String messages)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Intercepts window messages to specified window.
           
           
           
           Parameters:
           
            * messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a "block" or "passthrough" modifier to specify whether the message should be blocked or passed through to the window. For example "WM_SETCURSOR:block, 0x0201:passthrough".
           
               For more information on message codes, refer to the Win32 C++ API documentation.
           
               For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.
           
           
           
           Returns:
           
            * 1: Success.
           
            * 0: The message type is already being intercepted by another script.
           
            * -1: windowHWND is not a valid window.
           
            * -2: message string could not be parsed.
           
            * -3: Failure getting original window process.
           
           
           
           Notes:
           
            * Intercepted messages can be polled using JS_WindowMessage_Peek.
           
            * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.
           
            * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string messages - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_ListIntercepts</slug>
        <title>JS_WindowMessage_ListIntercepts(JS)</title>
        <functioncall prog_lang="cpp">bool JS_WindowMessage_ListIntercepts(void* windowHWND, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_WindowMessage_ListIntercepts", void* windowHWND, #buf)</functioncall>
        <functioncall prog_lang="lua">boolean retval, string buf = reaper.JS_WindowMessage_ListIntercepts(identifier windowHWND, string buf)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, String buf, Int buf_sz) = JS_WindowMessage_ListIntercepts(windowHWND, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns a string with a list of all message types currently being intercepted for the specified window.

        </description>
        <retvals>
           boolean retval - 
           string buf   - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string buf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_PassThrough</slug>
        <title>JS_WindowMessage_PassThrough(JS)</title>
        <functioncall prog_lang="cpp">int JS_WindowMessage_PassThrough(void* windowHWND, const char* message, bool passThrough)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_WindowMessage_PassThrough", void* windowHWND, "message", bool passThrough)</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_WindowMessage_PassThrough(identifier windowHWND, string message, boolean passThrough)</functioncall>
        <functioncall prog_lang="python">Int  JS_WindowMessage_PassThrough(void windowHWND, String message, Boolean passThrough)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Changes the passthrough setting of a message type that is already being intercepted.

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string message - 
           boolean passThrough - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_Peek</slug>
        <title>JS_WindowMessage_Peek(JS)</title>
        <functioncall prog_lang="cpp">bool JS_WindowMessage_Peek(void* windowHWND, const char* message, bool* passedThroughOut, double* timeOut, int* wParamLowOut, int* wParamHighOut, int* lParamLowOut, int* lParamHighOut)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_WindowMessage_Peek", void* windowHWND, "message", bool &amp;passedThrough, &amp;time, int &amp;wParamLow, int &amp;wParamHigh, int &amp;lParamLow, int &amp;lParamHigh)</functioncall>
        <functioncall prog_lang="lua">boolean retval, boolean passedThrough, number time, number wParamLow, number wParamHigh, number lParamLow, number lParamHigh = reaper.JS_WindowMessage_Peek(identifier windowHWND, string message)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, String message, Boolean passedThroughOut, Float timeOut, Int wParamLowOut, Int wParamHighOut, Int lParamLowOut, Int lParamHighOut) = JS_WindowMessage_Peek(windowHWND, message, passedThroughOut, timeOut, wParamLowOut, wParamHighOut, lParamLowOut, lParamHighOut)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Polls the state of an intercepted message.
           
           
           
           Parameters:
           
            * message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
           
            (For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.)
           
           
           
           Returns:
           
            * A retval of false indicates that the message type is not being intercepted in the specified window.
           
            * All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.
           
            * For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.
           
            * For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.
           
            * wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.

        </description>
        <retvals>
           boolean retval - 
           boolean passedThrough - 
           number time - 
           number wParamLow - 
           number wParamHigh - 
           number lParamLow - 
           number lParamHigh   - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string message - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_Post</slug>
        <title>JS_WindowMessage_Post(JS)</title>
        <functioncall prog_lang="cpp">bool JS_WindowMessage_Post(void* windowHWND, const char* message, int wParamLow, int wParamHigh, int lParamLow, int lParamHigh)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_WindowMessage_Post", void* windowHWND, "message", int wParamLow, int wParamHigh, int lParamLow, int lParamHigh)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_WindowMessage_Post(identifier windowHWND, string message, integer wParamLow, integer wParamHigh, integer lParamLow, integer lParamHigh)</functioncall>
        <functioncall prog_lang="python">Boolean  JS_WindowMessage_Post(void windowHWND, String message, Int wParamLow, Int wParamHigh, Int lParamLow, Int lParamHigh)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Posts a message in the message queue associated with the thread that created the specified window, and returns without waiting.
           
           
           
           Parameters:
           
            * message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
           
            (For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.)
           
           
           
           Notes:
           
            * For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.
           
            * Messages should only be sent to windows that were created from the main thread.
           
            * The message will be sent directly to the window, skipping interception by scripts.
           
            * Useful for simulating mouse clicks and calling mouse modifier actions from scripts.

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string message - 
           integer wParamLow - 
           integer wParamHigh - 
           integer lParamLow - 
           integer lParamHigh - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_Release</slug>
        <title>JS_WindowMessage_Release(JS)</title>
        <functioncall prog_lang="cpp">int JS_WindowMessage_Release(void* windowHWND, const char* messages)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_WindowMessage_Release", void* windowHWND, "messages")</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_WindowMessage_Release(identifier windowHWND, string messages)</functioncall>
        <functioncall prog_lang="python">Int  JS_WindowMessage_Release(void windowHWND, String messages)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Release intercepts of specified message types.
           
           
           
           Parameters:
           
            * messages: "WM_SETCURSOR,WM_MOUSEHWHEEL" or "0x0020,0x020E", for example.

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string messages - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_ReleaseAll</slug>
        <title>JS_WindowMessage_ReleaseAll(JS)</title>
        <functioncall prog_lang="cpp">void JS_WindowMessage_ReleaseAll()</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_WindowMessage_ReleaseAll")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_WindowMessage_ReleaseAll()</functioncall>
        <functioncall prog_lang="python">JS_WindowMessage_ReleaseAll()</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Release script intercepts of window messages for all windows.

        </description>


        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_ReleaseWindow</slug>
        <title>JS_WindowMessage_ReleaseWindow(JS)</title>
        <functioncall prog_lang="cpp">void JS_WindowMessage_ReleaseWindow(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_WindowMessage_ReleaseWindow", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_WindowMessage_ReleaseWindow(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_WindowMessage_ReleaseWindow(void windowHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Release script intercepts of window messages for specified window.

        </description>

        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_WindowMessage_Send</slug>
        <title>JS_WindowMessage_Send(JS)</title>
        <functioncall prog_lang="cpp">int JS_WindowMessage_Send(void* windowHWND, const char* message, int wParamLow, int wParamHigh, int lParamLow, int lParamHigh)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("JS_WindowMessage_Send", void* windowHWND, "message", int wParamLow, int wParamHigh, int lParamLow, int lParamHigh)</functioncall>
        <functioncall prog_lang="lua">integer reaper.JS_WindowMessage_Send(identifier windowHWND, string message, integer wParamLow, integer wParamHigh, integer lParamLow, integer lParamHigh)</functioncall>
        <functioncall prog_lang="python">Int  JS_WindowMessage_Send(void windowHWND, String message, Int wParamLow, Int wParamHigh, Int lParamLow, Int lParamHigh)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Posts a message in the message queue associated with the thread that created the specified window, and returns without waiting.
           
           
           
           Parameters:
           
            * message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
           
            (For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.)
           
           
           
           Returns:
           
            * Unlike JS_WindowMessage_Post, Send returns an LRESULT.
           
           
           
           Notes:
           
            * For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.
           
            * Messages should only be sent to windows that were created from the main thread.
           
            * The message will be sent directly to the window, skipping interception by scripts.
           
            * Useful for simulating mouse clicks and calling mouse modifier actions from scripts.

        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string message - 
           integer wParamLow - 
           integer wParamHigh - 
           integer lParamLow - 
           integer lParamHigh - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_AddressFromHandle</slug>
        <title>JS_Window_AddressFromHandle(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_AddressFromHandle(void* handle, double* addressOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_AddressFromHandle", void* handle, &amp;address)</functioncall>
        <functioncall prog_lang="lua">number address = reaper.JS_Window_AddressFromHandle(identifier handle)</functioncall>
        <functioncall prog_lang="python">(void handle, Float addressOut) = JS_Window_AddressFromHandle(handle, addressOut)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           number address   - 
        </retvals>
        <parameters>
           identifier handle - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ArrayAllChild</slug>
        <title>JS_Window_ArrayAllChild(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_ArrayAllChild(void* parentHWND, void* reaperarray)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ArrayAllChild", void* parentHWND, void* reaperarray)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_ArrayAllChild(identifier parentHWND, identifier reaperarray)</functioncall>
        <functioncall prog_lang="python">JS_Window_ArrayAllChild(void parentHWND, void reaperarray)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns all child windows of the specified parent.
           
           
           
           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.

        </description>

        <parameters>
           identifier parentHWND - 
           identifier reaperarray - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ArrayAllTop</slug>
        <title>JS_Window_ArrayAllTop(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_ArrayAllTop(void* reaperarray)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ArrayAllTop", void* reaperarray)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_ArrayAllTop(identifier reaperarray)</functioncall>
        <functioncall prog_lang="python">JS_Window_ArrayAllTop(void reaperarray)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns all top-level windows.
           
           
           
           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.

        </description>

        <parameters>
           identifier reaperarray - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ArrayFind</slug>
        <title>JS_Window_ArrayFind(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_ArrayFind(const char* title, bool exact, void* reaperarray)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ArrayFind", "title", bool exact, void* reaperarray)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_ArrayFind(string title, boolean exact, identifier reaperarray)</functioncall>
        <functioncall prog_lang="python">JS_Window_ArrayFind(String title, Boolean exact, void reaperarray)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns all windows, whether top-level or child, whose titles match the specified string.
           
           
           
           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.
           
           
           
           Parameters: * exact: Match entire title exactly, or match substring of title.

        </description>

        <parameters>
           string title - 
           boolean exact - 
           identifier reaperarray - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_AttachResizeGrip</slug>
        <title>JS_Window_AttachResizeGrip(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_AttachResizeGrip(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_AttachResizeGrip", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_AttachResizeGrip(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_Window_AttachResizeGrip(void windowHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_AttachTopmostPin</slug>
        <title>JS_Window_AttachTopmostPin(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_AttachTopmostPin(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_AttachTopmostPin", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_AttachTopmostPin(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_Window_AttachTopmostPin(void windowHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>

        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ClientToScreen</slug>
        <title>JS_Window_ClientToScreen(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_ClientToScreen(void* windowHWND, int x, int y, int* xOut, int* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ClientToScreen", void* windowHWND, int x, int y, int &amp;x, int &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.JS_Window_ClientToScreen(identifier windowHWND, integer x, integer y)</functioncall>
        <functioncall prog_lang="python">(void windowHWND, Int x, Int y, Int xOut, Int yOut) = JS_Window_ClientToScreen(windowHWND, x, y, xOut, yOut)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Converts the client-area coordinates of a specified point to screen coordinates.

        </description>
        <retvals>
           number x - 
           number y   - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           integer x - 
           integer y - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Destroy</slug>
        <title>JS_Window_Destroy(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_Destroy(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_Destroy", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_Destroy(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_Window_Destroy(void windowHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Destroys the specified window.

        </description>

        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Enable</slug>
        <title>JS_Window_Enable(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_Enable(void* windowHWND, bool enable)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_Enable", void* windowHWND, bool enable)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_Enable(identifier windowHWND, boolean enable)</functioncall>
        <functioncall prog_lang="python">JS_Window_Enable(void windowHWND, Boolean enable)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Enables or disables mouse and keyboard input to the specified window or control.

        </description>

        <parameters>
           identifier windowHWND - 
           boolean enable - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Find</slug>
        <title>JS_Window_Find(JS)</title>
        <functioncall prog_lang="cpp">void* JS_Window_Find(const char* title, bool exact)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_Window_Find", "title", bool exact)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_Window_Find(string title, boolean exact)</functioncall>
        <functioncall prog_lang="python">void  JS_Window_Find(String title, Boolean exact)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns a HWND to the top-level window whose title matches the specified string. This function does not search child window, and is not case sensitive.
           
           
           
           Parameters:
           
            * exact: Match entire title exactly, or match substring of title.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           string title - 
           boolean exact - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_FindChild</slug>
        <title>JS_Window_FindChild(JS)</title>
        <functioncall prog_lang="cpp">void* JS_Window_FindChild(void* parentHWND, const char* title, bool exact)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_Window_FindChild", void* parentHWND, "title", bool exact)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_Window_FindChild(identifier parentHWND, string title, boolean exact)</functioncall>
        <functioncall prog_lang="python">void  JS_Window_FindChild(void parentHWND, String title, Boolean exact)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns a HWND to the child window whose title matches the specified string.
           
           
           
           Parameters:
           
            * exact: Match entire title exactly, or match substring of title.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           identifier parentHWND - 
           string title - 
           boolean exact - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_FromPoint</slug>
        <title>JS_Window_FromPoint(JS)</title>
        <functioncall prog_lang="cpp">void* JS_Window_FromPoint(int x, int y)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_Window_FromPoint", int x, int y)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_Window_FromPoint(integer x, integer y)</functioncall>
        <functioncall prog_lang="python">void  JS_Window_FromPoint(Int x, Int y)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Retrieves a HWND to the window that contains the specified point.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           integer x - 
           integer y - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetClassName</slug>
        <title>JS_Window_GetClassName(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_GetClassName(void* windowHWND, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_GetClassName", void* windowHWND, #buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.JS_Window_GetClassName(identifier windowHWND, string buf)</functioncall>
        <functioncall prog_lang="python">(void windowHWND, String buf, Int buf_sz) = JS_Window_GetClassName(windowHWND, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            WARNING: May not be fully implemented on MacOS and Linux.

        </description>
        <retvals>
           string buf   - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string buf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetClientRect</slug>
        <title>JS_Window_GetClientRect(JS)</title>
        <functioncall prog_lang="cpp">bool JS_Window_GetClientRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_GetClientRect", void* windowHWND, int &amp;left, int &amp;top, int &amp;right, int &amp;bottom)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number left, number top, number right, number bottom = reaper.JS_Window_GetClientRect(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetClientRect(windowHWND, leftOut, topOut, rightOut, bottomOut)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Retrieves the coordinates of the client area rectangle of the specified window. The dimensions are given in screen coordinates relative to the upper-left corner of the screen.
           
           NOTE 1: Unlike the C++ function GetClientRect, this function returns the actual coordinates, not the width and height.
           
           NOTE 2: The pixel at (right, bottom) lies immediately outside the rectangle.

        </description>
        <retvals>
           boolean retval - 
           number left - 
           number top - 
           number right - 
           number bottom   - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetFocus</slug>
        <title>JS_Window_GetFocus(JS)</title>
        <functioncall prog_lang="cpp">void* JS_Window_GetFocus()</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_Window_GetFocus")</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_Window_GetFocus()</functioncall>
        <functioncall prog_lang="python">void  JS_Window_GetFocus()</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.

        </description>
        <retvals>
           identifier  - 
        </retvals>

        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetForeground</slug>
        <title>JS_Window_GetForeground(JS)</title>
        <functioncall prog_lang="cpp">void* JS_Window_GetForeground()</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_Window_GetForeground")</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_Window_GetForeground()</functioncall>
        <functioncall prog_lang="python">void  JS_Window_GetForeground()</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Retrieves a HWND to the foreground window (the window with which the user is currently working).

        </description>
        <retvals>
           identifier  - 
        </retvals>

        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetLongPtr</slug>
        <title>JS_Window_GetLongPtr(JS)</title>
        <functioncall prog_lang="cpp">void* JS_Window_GetLongPtr(void* windowHWND, const char* info)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_Window_GetLongPtr", void* windowHWND, "info")</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_Window_GetLongPtr(identifier windowHWND, string info)</functioncall>
        <functioncall prog_lang="python">void  JS_Window_GetLongPtr(void windowHWND, String info)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns information about the specified window.
           
           
           
           info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE".
           
           
           
           For documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string info - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetParent</slug>
        <title>JS_Window_GetParent(JS)</title>
        <functioncall prog_lang="cpp">void* JS_Window_GetParent(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_Window_GetParent", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_Window_GetParent(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">void  JS_Window_GetParent(void windowHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Retrieves a HWND to the specified window's parent or owner.
           
           Returns NULL if the window is unowned or if the function otherwise fails.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetRect</slug>
        <title>JS_Window_GetRect(JS)</title>
        <functioncall prog_lang="cpp">bool JS_Window_GetRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_GetRect", void* windowHWND, int &amp;left, int &amp;top, int &amp;right, int &amp;bottom)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number left, number top, number right, number bottom = reaper.JS_Window_GetRect(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetRect(windowHWND, leftOut, topOut, rightOut, bottomOut)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Retrieves the coordinates of the bounding rectangle of the specified window. The dimensions are given in screen coordinates relative to the upper-left corner of the screen.
           
           NOTE: The pixel at (right, bottom) lies immediately outside the rectangle.

        </description>
        <retvals>
           boolean retval - 
           number left - 
           number top - 
           number right - 
           number bottom   - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetRelated</slug>
        <title>JS_Window_GetRelated(JS)</title>
        <functioncall prog_lang="cpp">void* JS_Window_GetRelated(void* windowHWND, const char* relation)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_Window_GetRelated", void* windowHWND, "relation")</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_Window_GetRelated(identifier windowHWND, string relation)</functioncall>
        <functioncall prog_lang="python">void  JS_Window_GetRelated(void windowHWND, String relation)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.
           
           relation: "LAST", "NEXT", "PREV", "OWNER" or "CHILD".
           
           (Refer to documentation for Win32 C++ function GetWindow.)

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string relation - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetScrollInfo</slug>
        <title>JS_Window_GetScrollInfo(JS)</title>
        <functioncall prog_lang="cpp">bool JS_Window_GetScrollInfo(void* windowHWND, const char* scrollbar, int* positionOut, int* pageSizeOut, int* minOut, int* maxOut, int* trackPosOut)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_GetScrollInfo", void* windowHWND, "scrollbar", int &amp;position, int &amp;pageSize, int &amp;min, int &amp;max, int &amp;trackPos)</functioncall>
        <functioncall prog_lang="lua">boolean retval, number position, number pageSize, number min, number max, number trackPos = reaper.JS_Window_GetScrollInfo(identifier windowHWND, string scrollbar)</functioncall>
        <functioncall prog_lang="python">(Boolean retval, void windowHWND, String scrollbar, Int positionOut, Int pageSizeOut, Int minOut, Int maxOut, Int trackPosOut) = JS_Window_GetScrollInfo(windowHWND, scrollbar, positionOut, pageSizeOut, minOut, maxOut, trackPosOut)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Retrieves the scroll information of a window.
           
           
           
           Parameters:
           
            * scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.
           
           
           
           Returns:
           
            * Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position.

        </description>
        <retvals>
           boolean retval - 
           number position - 
           number pageSize - 
           number min - 
           number max - 
           number trackPos   - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string scrollbar - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_GetTitle</slug>
        <title>JS_Window_GetTitle(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_GetTitle(void* windowHWND, char* buf, int buf_sz)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_GetTitle", void* windowHWND, #buf)</functioncall>
        <functioncall prog_lang="lua">string buf = reaper.JS_Window_GetTitle(identifier windowHWND, string buf)</functioncall>
        <functioncall prog_lang="python">(void windowHWND, String buf, Int buf_sz) = JS_Window_GetTitle(windowHWND, buf, buf_sz)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the title (if any) of the specified window.

        </description>
        <retvals>
           string buf   - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string buf - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_HandleFromAddress</slug>
        <title>JS_Window_HandleFromAddress(JS)</title>
        <functioncall prog_lang="cpp">void* JS_Window_HandleFromAddress(double address)</functioncall>
        <functioncall prog_lang="eel">void*  extension_api("JS_Window_HandleFromAddress", address)</functioncall>
        <functioncall prog_lang="lua">identifier reaper.JS_Window_HandleFromAddress(number address)</functioncall>
        <functioncall prog_lang="python">void  JS_Window_HandleFromAddress(Float address)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.

        </description>
        <retvals>
           identifier  - 
        </retvals>
        <parameters>
           number address - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_IsChild</slug>
        <title>JS_Window_IsChild(JS)</title>
        <functioncall prog_lang="cpp">bool JS_Window_IsChild(void* parentHWND, void* childHWND)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_IsChild", void* parentHWND, void* childHWND)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_Window_IsChild(identifier parentHWND, identifier childHWND)</functioncall>
        <functioncall prog_lang="python">Boolean  JS_Window_IsChild(void parentHWND, void childHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Determines whether a window is a child window or descendant window of a specified parent window.

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier parentHWND - 
           identifier childHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_IsVisible</slug>
        <title>JS_Window_IsVisible(JS)</title>
        <functioncall prog_lang="cpp">bool JS_Window_IsVisible(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_IsVisible", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_Window_IsVisible(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">Boolean  JS_Window_IsVisible(void windowHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Determines the visibility state of the window.

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_IsWindow</slug>
        <title>JS_Window_IsWindow(JS)</title>
        <functioncall prog_lang="cpp">bool JS_Window_IsWindow(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_IsWindow", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_Window_IsWindow(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">Boolean  JS_Window_IsWindow(void windowHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Determines whether the specified window handle identifies an existing window.

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ListAllChild</slug>
        <title>JS_Window_ListAllChild(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_ListAllChild(void* parentHWND, const char* section, const char* key)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ListAllChild", void* parentHWND, "section", "key")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_ListAllChild(identifier parentHWND, string section, string key)</functioncall>
        <functioncall prog_lang="python">JS_Window_ListAllChild(void parentHWND, String section, String key)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns a list of HWNDs of all child windows of the specified parent.
           
           The list is formatted as a comma-separated (and terminated) string of hexadecimal values.
           
           Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.
           
           
           
           Parameters:
           
            * section, key: Since the list string can sometimes be much longer than the maximum length of strings that can be returned by the Lua API, the list will instead by stored as a temporary ExtState specified by section and key.

        </description>

        <parameters>
           identifier parentHWND - 
           string section - 
           string key - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ListAllTop</slug>
        <title>JS_Window_ListAllTop(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_ListAllTop(const char* section, const char* key)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ListAllTop", "section", "key")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_ListAllTop(string section, string key)</functioncall>
        <functioncall prog_lang="python">JS_Window_ListAllTop(String section, String key)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns a list of HWNDs of all top-level windows.
           
           The list is formatted as a comma-separated (and terminated) string of hexadecimal values.
           
           Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.
           
           
           
           Parameters:
           
            * section, key: Since the list string can sometimes be much longer than the maximum length of strings that can be returned by the Lua API, the list will instead by stored as a temporary ExtState specified by section and key.

        </description>

        <parameters>
           string section - 
           string key - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ListFind</slug>
        <title>JS_Window_ListFind(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_ListFind(const char* title, bool exact, const char* section, const char* key)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ListFind", "title", bool exact, "section", "key")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_ListFind(string title, boolean exact, string section, string key)</functioncall>
        <functioncall prog_lang="python">JS_Window_ListFind(String title, Boolean exact, String section, String key)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns a list of HWNDs of all windows (whether top-level or child) whose titles match the specified string.
           
           The list is formatted as a comma-separated (and terminated) string of hexadecimal values.
           
           Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.
           
           
           
           Parameters:
           
            * section, key: Since the list string can sometimes be much longer than the maximum length of strings that can be returned by the Lua API, the list will instead by stored as a temporary ExtState specified by section and key.
           
            * exact: Match entire title exactly, or match substring of title.

        </description>

        <parameters>
           string title - 
           boolean exact - 
           string section - 
           string key - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Move</slug>
        <title>JS_Window_Move(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_Move(void* windowHWND, int left, int top)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_Move", void* windowHWND, int left, int top)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_Move(identifier windowHWND, integer left, integer top)</functioncall>
        <functioncall prog_lang="python">JS_Window_Move(void windowHWND, Int left, Int top)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Changes the position of the specified window, keeping its size constant.
           
            * For a top-level window, the position is relative to the upper-left corner of the screen.
           
            * For a child window, they are relative to the upper-left corner of the parent window's client area.

        </description>

        <parameters>
           identifier windowHWND - 
           integer left - 
           integer top - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_RemoveXPStyle</slug>
        <title>JS_Window_RemoveXPStyle(JS)</title>
        <functioncall prog_lang="cpp">bool JS_Window_RemoveXPStyle(void* windowHWND, bool remove)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_RemoveXPStyle", void* windowHWND, bool remove)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_Window_RemoveXPStyle(identifier windowHWND, boolean remove)</functioncall>
        <functioncall prog_lang="python">Boolean  JS_Window_RemoveXPStyle(void windowHWND, Boolean remove)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            
        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           boolean remove - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Resize</slug>
        <title>JS_Window_Resize(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_Resize(void* windowHWND, int width, int height)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_Resize", void* windowHWND, int width, int height)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_Resize(identifier windowHWND, integer width, integer height)</functioncall>
        <functioncall prog_lang="python">JS_Window_Resize(void windowHWND, Int width, Int height)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Changes the dimensions of the specified window, keeping the top left corner position constant.
           
            * If resizing script GUIs, call gfx.update() after resizing.

        </description>

        <parameters>
           identifier windowHWND - 
           integer width - 
           integer height - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_ScreenToClient</slug>
        <title>JS_Window_ScreenToClient(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_ScreenToClient(void* windowHWND, int x, int y, int* xOut, int* yOut)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_ScreenToClient", void* windowHWND, int x, int y, int &amp;x, int &amp;y)</functioncall>
        <functioncall prog_lang="lua">number x, number y = reaper.JS_Window_ScreenToClient(identifier windowHWND, integer x, integer y)</functioncall>
        <functioncall prog_lang="python">(void windowHWND, Int x, Int y, Int xOut, Int yOut) = JS_Window_ScreenToClient(windowHWND, x, y, xOut, yOut)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Converts the screen coordinates of a specified point on the screen to client-area coordinates.

        </description>
        <retvals>
           number x - 
           number y   - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           integer x - 
           integer y - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetFocus</slug>
        <title>JS_Window_SetFocus(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_SetFocus(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_SetFocus", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_SetFocus(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_Window_SetFocus(void windowHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets the keyboard focus to the specified window.

        </description>

        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetForeground</slug>
        <title>JS_Window_SetForeground(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_SetForeground(void* windowHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_SetForeground", void* windowHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_SetForeground(identifier windowHWND)</functioncall>
        <functioncall prog_lang="python">JS_Window_SetForeground(void windowHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Brings the specified window into the foreground, activates the window, and directs keyboard input to it.

        </description>

        <parameters>
           identifier windowHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetOpacity</slug>
        <title>JS_Window_SetOpacity(JS)</title>
        <functioncall prog_lang="cpp">bool JS_Window_SetOpacity(void* windowHWND, const char* mode, double value)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_SetOpacity", void* windowHWND, "mode", value)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_Window_SetOpacity(identifier windowHWND, string mode, number value)</functioncall>
        <functioncall prog_lang="python">Boolean  JS_Window_SetOpacity(void windowHWND, String mode, Float value)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets the window opacity.
           
           
           
           Parameters:
           
           mode: either "ALPHA" or "COLOR". 
           
           value: If ALPHA, the specified value may range from zero to one, and will apply to the entire window. 
           
           If COLOR, value specifies a 0xRRGGBB color, and all pixels in this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).
           
           
           
           WARNING: COLOR mode is only available in Windows, not Linux or MacOS.

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string mode - 
           number value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetPosition</slug>
        <title>JS_Window_SetPosition(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_SetPosition(void* windowHWND, int left, int top, int width, int height)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_SetPosition", void* windowHWND, int left, int top, int width, int height)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_SetPosition(identifier windowHWND, integer left, integer top, integer width, integer height)</functioncall>
        <functioncall prog_lang="python">JS_Window_SetPosition(void windowHWND, Int left, Int top, Int width, Int height)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets the window position and size.

        </description>

        <parameters>
           identifier windowHWND - 
           integer left - 
           integer top - 
           integer width - 
           integer height - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetScrollPos</slug>
        <title>JS_Window_SetScrollPos(JS)</title>
        <functioncall prog_lang="cpp">bool JS_Window_SetScrollPos(void* windowHWND, const char* scrollbar, int position)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_SetScrollPos", void* windowHWND, "scrollbar", int position)</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_Window_SetScrollPos(identifier windowHWND, string scrollbar, integer position)</functioncall>
        <functioncall prog_lang="python">Boolean  JS_Window_SetScrollPos(void windowHWND, String scrollbar, Int position)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Parameters:
           
            * scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.
           
           
           
           NOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as "View: Zoom to one loop iteration".

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string scrollbar - 
           integer position - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetTitle</slug>
        <title>JS_Window_SetTitle(JS)</title>
        <functioncall prog_lang="cpp">bool JS_Window_SetTitle(void* windowHWND, const char* title)</functioncall>
        <functioncall prog_lang="eel">bool  extension_api("JS_Window_SetTitle", void* windowHWND, "title")</functioncall>
        <functioncall prog_lang="lua">boolean reaper.JS_Window_SetTitle(identifier windowHWND, string title)</functioncall>
        <functioncall prog_lang="python">Boolean  JS_Window_SetTitle(void windowHWND, String title)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Changes the title of the specified window. Returns true if successful.

        </description>
        <retvals>
           boolean  - 
        </retvals>
        <parameters>
           identifier windowHWND - 
           string title - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_SetZOrder</slug>
        <title>JS_Window_SetZOrder(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_SetZOrder(void* windowHWND, const char* ZOrder, void* insertAfterHWND)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_SetZOrder", void* windowHWND, "ZOrder", void* insertAfterHWND)</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_SetZOrder(identifier windowHWND, string ZOrder, identifier insertAfterHWND)</functioncall>
        <functioncall prog_lang="python">JS_Window_SetZOrder(void windowHWND, String ZOrder, void insertAfterHWND)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets the window Z order.
           
           
           
           Parameters:
           
            * ZOrder: "INSERT_AFTER", "BOTTOM", "TOPMOST", "NOTOPMOST" or "TOP" ).
           
            * InsertAfterHWND: If ZOrder is INSERT_AFTER, insertAfterHWND must be a handle to the window to precede windowHWND in the Z order; otherwise, insertAfterHWND is ignored.

        </description>

        <parameters>
           identifier windowHWND - 
           string ZOrder - 
           identifier insertAfterHWND - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>JS_Window_Show</slug>
        <title>JS_Window_Show(JS)</title>
        <functioncall prog_lang="cpp">void JS_Window_Show(void* windowHWND, const char* state)</functioncall>
        <functioncall prog_lang="eel">extension_api("JS_Window_Show", void* windowHWND, "state")</functioncall>
        <functioncall prog_lang="lua">reaper.JS_Window_Show(identifier windowHWND, string state)</functioncall>
        <functioncall prog_lang="python">JS_Window_Show(void windowHWND, String state)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets the specified window's show state.
           
           
           
           Parameters:
           
            * state: Either "SHOW", "SHOWNA", "SHOWMINIMIZED",  or "HIDE".

        </description>

        <parameters>
           identifier windowHWND - 
           string state - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>Xen_AudioWriter_Create</slug>
        <title>Xen_AudioWriter_Create(JS)</title>
        <functioncall prog_lang="cpp">AudioWriter* Xen_AudioWriter_Create(const char* filename, int numchans, int samplerate)</functioncall>
        <functioncall prog_lang="eel">AudioWriter  extension_api("Xen_AudioWriter_Create", "filename", int numchans, int samplerate)</functioncall>
        <functioncall prog_lang="lua">AudioWriter reaper.Xen_AudioWriter_Create(string filename, integer numchans, integer samplerate)</functioncall>
        <functioncall prog_lang="python">AudioWriter  Xen_AudioWriter_Create(String filename, Int numchans, Int samplerate)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Creates writer for 32 bit floating point WAV
        </description>
        <retvals>
           AudioWriter  - 
        </retvals>
        <parameters>
           string filename - 
           integer numchans - 
           integer samplerate - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>Xen_AudioWriter_Destroy</slug>
        <title>Xen_AudioWriter_Destroy(JS)</title>
        <functioncall prog_lang="cpp">void Xen_AudioWriter_Destroy(AudioWriter* writer)</functioncall>
        <functioncall prog_lang="eel">extension_api("Xen_AudioWriter_Destroy", AudioWriter writer)</functioncall>
        <functioncall prog_lang="lua">reaper.Xen_AudioWriter_Destroy(AudioWriter writer)</functioncall>
        <functioncall prog_lang="python">Xen_AudioWriter_Destroy(AudioWriter writer)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Destroys writer
        </description>

        <parameters>
           AudioWriter writer - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>Xen_AudioWriter_Write</slug>
        <title>Xen_AudioWriter_Write(JS)</title>
        <functioncall prog_lang="cpp">int Xen_AudioWriter_Write(AudioWriter* writer, int numframes, void* data, int offset)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("Xen_AudioWriter_Write", AudioWriter writer, int numframes, void* data, int offset)</functioncall>
        <functioncall prog_lang="lua">integer reaper.Xen_AudioWriter_Write(AudioWriter writer, integer numframes, identifier data, integer offset)</functioncall>
        <functioncall prog_lang="python">Int  Xen_AudioWriter_Write(AudioWriter writer, Int numframes, void data, Int offset)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Write interleaved audio data to disk
        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           AudioWriter writer - 
           integer numframes - 
           identifier data - 
           integer offset - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
    <US_DocBloc version="1.0" spok_lang="en">
        <slug>Xen_GetMediaSourceSamples</slug>
        <title>Xen_GetMediaSourceSamples(JS)</title>
        <functioncall prog_lang="cpp">int Xen_GetMediaSourceSamples(PCM_source* src, void* destbuf, int destbufoffset, int numframes, int numchans, double samplerate, double sourceposition)</functioncall>
        <functioncall prog_lang="eel">int  extension_api("Xen_GetMediaSourceSamples", PCM_source src, void* destbuf, int destbufoffset, int numframes, int numchans, samplerate, sourceposition)</functioncall>
        <functioncall prog_lang="lua">integer reaper.Xen_GetMediaSourceSamples(PCM_source src, identifier destbuf, integer destbufoffset, integer numframes, integer numchans, number samplerate, number sourceposition)</functioncall>
        <functioncall prog_lang="python">Int  Xen_GetMediaSourceSamples(PCM_source src, void destbuf, Int destbufoffset, Int numframes, Int numchans, Float samplerate, Float sourceposition)</functioncall>
        <requires>
            Reaper=5.95
            JS=0.951
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Get interleaved audio data from media source
        </description>
        <retvals>
           integer  - 
        </retvals>
        <parameters>
           PCM_source src - 
           identifier destbuf - 
           integer destbufoffset - 
           integer numframes - 
           integer numchans - 
           number samplerate - 
           number sourceposition - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            JS_Plugin
        </chapter_context>
        <tags></tags>
    </US_DocBloc>
  
  
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_abs</slug>
        <title>abs</title>
        <functioncall prog_lang="eel">abs(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the absolute value of the parameter.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_acos</slug>
        <title>acos</title>
        <functioncall prog_lang="eel">acos(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="eel">
            Returns the arc cosine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_asin</slug>
        <title>asin</title>
        <functioncall prog_lang="eel">asin(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the arc sine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_atan</slug>
        <title>atan</title>
        <functioncall prog_lang="eel">atan(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the arc tangent of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_atan2</slug>
        <title>atan2</title>
        <functioncall prog_lang="eel">atan2(numerator,denominator)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the arc tangent of the numerator divided by the denominator, allowing the denominator to be 0, and using their signs to produce a more meaningful result.
        </description>
        <parameters>
            numerator - 
            denominator -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_atexit</slug>
        <title>atexit</title>
        <functioncall prog_lang="eel">atexit("code")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.
        </description>
        <parameters>
            "code" - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_ceil</slug>
        <title>ceil</title>
        <functioncall prog_lang="eel">ceil(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the value rounded to the next highest integer (ceil(3.1)==4, ceil(-3.9)==-3).
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_convolve_c</slug>
        <title>convolve_c</title>
        <functioncall prog_lang="eel">convolve_c(dest,src,size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Multiplies each of size complex pairs in dest by the complex pairs in src. Often used for convolution.
        </description>
        <parameters>
            dest - 
            src - 
            size -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_cos</slug>
        <title>cos</title>
        <functioncall prog_lang="eel">cos(angle)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="eel">
            Returns the cosine of the angle specified (specified in radians).
        </description>
        <parameters>
            angle -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_defer</slug>
        <title>defer</title>
        <functioncall prog_lang="eel">defer("code")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().
            Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
        </description>
        <parameters>
            code -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_eval</slug>
        <title>eval</title>
        <functioncall prog_lang="eel">eval("code")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="eel">
            Executes code passed in. Code can use functions, but functions created in code can't be used elsewhere.
        </description>
        <parameters>
            "code" -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_exp</slug>
        <title>exp</title>
        <functioncall prog_lang="eel">exp(exponent)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description prog_lang="eel">
            Returns the number e ($e, approximately 2.718) raised to the parameter-th power. This function is significantly faster than pow() or the ^ operator.
        </description>
        <parameters>
            exponent -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_extension_api</slug>
        <title>extension_api</title>
        <functioncall prog_lang="eel">extension_api("function_name"[,...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Used to call functions exported by extension plugins. The first parameter must be the exported function name, then its own parameters (as if the function was called directly).
        </description>
        <parameters>
            "funtionname" - 
            ... - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fclose</slug>
        <title>fclose</title>
        <functioncall prog_lang="eel">fclose(fp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Closes a file previously opened with fopen().
        </description>
        <parameters>
            fp - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_feof</slug>
        <title>feof</title>
        <functioncall prog_lang="eel">feof(fp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns nonzero if the file fp is at the end of file.
        </description>
        <parameters>
            fp - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fflush</slug>
        <title>fflush</title>
        <functioncall prog_lang="eel">fflush(fp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            If file fp is open for writing, flushes out any buffered data to disk.
        </description>
        <parameters>
            fp - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fft</slug>
        <title>fft</title>
        <functioncall prog_lang="eel">fft(buffer,size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Performs a FFT on the data in the local memory buffer at the offset specified by the first parameter. The size of the FFT is specified by the second parameter, which must be 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The outputs are permuted, so if you plan to use them in-order, call fft_permute(buffer, size) before and fft_ipermute(buffer,size) after your in-order use. Your inputs or outputs will need to be scaled down by 1/size, if used.
            Note that fft()/ifft() require real / imaginary input pairs, so a 256 point FFT actually works with 512 items.
            Note that fft()/ifft() must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.
        </description>
        <parameters>
            buffer - 
            size -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fft_ipermute</slug>
        <title>fft_ipermute</title>
        <functioncall prog_lang="eel">fft_ipermute(buffer,size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Permute the input for ifft(), taking bands from in-order to the order ifft() requires. See [fft()](#eel_fft) for more information.
        </description>
        <parameters>
            buffer - 
            size - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fft_permute</slug>
        <title>fft_permute</title>
        <functioncall prog_lang="eel">fft_permute(buffer,size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Permute the output of fft() to have bands in-order. See [fft()](#eel_fft) for more information.
        </description>
        <parameters>
            buffer - 
            size - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fft_real</slug>
        <title>fft_real</title>
        <functioncall prog_lang="eel">fft_real(buffer,size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Performs an FFT, but takes size input samples and produces size/2 complex output pairs. Usually used along with fft_permute(size/2). Inputs/outputs will need to be scaled by 0.5/size.
        </description>
        <parameters>
            buffer - 
            size - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fgetc</slug>
        <title>fgetc</title>
        <functioncall prog_lang="eel">fgetc(fp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Reads a character from file fp, returns -1 if EOF.
        </description>
        <parameters>
            fp - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fgets</slug>
        <title>fgets</title>
        <functioncall prog_lang="eel">fgets(fp,#str)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Reads a line from file fp into #str. Returns length of #str read.
        </description>
        <parameters>
            fp - 
            #str - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_floor</slug>
        <title>floor</title>
        <functioncall prog_lang="eel">floor(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the value rounded to the next lowest integer (floor(3.9)==3, floor(-3.1)==-4).
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fopen</slug>
        <title>fopen</title>
        <functioncall prog_lang="eel">fopen("fn","mode")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Opens a file "fn" with mode "mode". For read, use "r" or "rb", write "w" or "wb". Returns a positive integer on success.
        </description>
        <parameters>
            "fn" - 
            "mode" - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fprintf</slug>
        <title>fprintf</title>
        <functioncall prog_lang="eel">fprintf(fp,"format"[,...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1">
            Formats a string and writes it to file fp. For more information on format specifiers, see [sprintf()](#eel_sprintf). Returns bytes written to file.
        </description>
        <parameters>
            fp - 
            "format" - 
            [...] - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fread</slug>
        <title>fread</title>
        <functioncall prog_lang="eel">fread(fp,#str,length)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Reads from file fp into #str, up to length bytes. Returns actual length read, or negative if error.
        </description>
        <parameters>
            fp - 
            #str - 
            length - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_freembuf</slug>
        <title>freembuf</title>
        <functioncall prog_lang="eel">freembuf(address)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Hints the runtime that memory above the address specified may no longer be used. The runtime may, at its leisure, choose to lose the contents of memory above the address specified.
        </description>
        <parameters>
            address - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fseek</slug>
        <title>fseek</title>
        <functioncall prog_lang="eel">fseek(fp,offset,whence)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Seeks file fp, offset bytes from whence reference. Whence negative specifies start of file, positive whence specifies end of file, and zero whence specifies current file position.
        </description>
        <parameters>
            fp - 
            offset - 
            whence - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_ftell</slug>
        <title>ftell</title>
        <functioncall prog_lang="eel">ftell(fp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the current file position.
        </description>
        <parameters>
            fp - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_fwrite</slug>
        <title>fwrite</title>
        <functioncall prog_lang="eel">fwrite(fp,#str,len)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Writes up to len characters of #str to file fp. If len is less than 1, the full contents of #str will be written. Returns the number of bytes written to file.
        </description>
        <parameters>
            fp - 
            #str - 
            len -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_get_action_context</slug>
        <title>get_action_context</title>
        <functioncall prog_lang="eel">get_action_context(#filename,sectionID,cmdID,mode,resolution,val)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Queries contextual information about the script, typically MIDI/OSC input values.
            Returns true if a new value has been updated.
            val will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.
            Notes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.
        </description>
        <parameters>
            #filename - 
            sectionID - 
            cmdID - 
            mode - 
            resolution - 
            val - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_variables</slug>
        <title>gfx_variables</title>
        <functioncall prog_lang="eel">gfx VARIABLES</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            The following global variables are special and will be used by the graphics system:

            * gfx_r, gfx_g, gfx_b, gfx_a - These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). 
            * gfx_w, gfx_h - These are set to the current width and height of the UI framebuffer, aka windowsize.
            * gfx_x, gfx_y - These set the "current" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. 
            * gfx_mode - Set to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx_a to negative and use gfx_mode as additive). Add 2.0 to disable source alpha for gfx_blit(). Add 4.0 to disable filtering for gfx_blit(). 
            * gfx_clear - If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). 
            * gfx_dest - Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).
            * gfx_texth - Set to the height of a line of text in the current font. Do not modify this variable.
            * gfx_ext_retina - If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx_w/gfx_h/etc will be doubled.
            * mouse_x, mouse_y - mouse_x and mouse_y are set to the coordinates of the mouse relative to the graphics window.
            * mouse_wheel, mouse_hwheel - mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
            * mouse_cap is a bitfield of mouse and keyboard modifier state.
                -1: left mouse button
                -2: right mouse button
                -4: Control key
                -8: Shift key
                -16: Alt key
                -32: Windows key
                -64: middle mouse button
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_arc</slug>
        <title>gfx_arc</title>
        <functioncall prog_lang="eel">gfx_arc(x,y,r,ang1,ang2[,antialias])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.
        </description>
        <parameters>
            x - x position of the center of the circle
            y - y position of the center of the circle
            r - the radius of the circle
            ang1 - the beginning of the circle in radians; meant for partial circles; 0-6.28
            ang2 - the end of the circle in radians; meant for partial circles; 0-6.28
            antialias - <=0.5, antialias off; >0.5, antialias on
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_blit</slug>
        <title>gfx_blit</title>
        <functioncall prog_lang="eel">gfx_blit(source, scale, rotation[, srcx, srcy, srcw, srch, destx, desty, destw, desth, rotxoffs, rotyoffs])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size), destx/desty/destw/desth specify dest rectangle (if not specified, these will default to reasonable defaults -- destw/desth default to srcw/srch * scale). 
        </description>
        <parameters>
            source - 
            scale - 
            rotation - 
            srcx - 
            srcy - 
            srcw - 
            srch -
            destx - 
            desty - 
            destw - 
            desth - 
            rotxoffs - 
            rotyoffs - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_blit</slug>
        <title>gfx_blit</title>
        <functioncall prog_lang="eel">gfx_blit(source,scale,rotation)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            If three parameters are specified, copies the entirity of the source bitmap to gfx_x,gfx_y using current opacity and copy mode (set with gfx_a, gfx_mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians).
            For the "source" parameter specify -1 to use the main framebuffer as source, or an image index (see [gfx_loadimg()](#eel_gfx_loadimg).
        </description>
        <parameters>
            source - 
            scale - 
            rotation - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_blitext</slug>
        <title>gfx_blitext</title>
        <functioncall prog_lang="eel">gfx_blitext(source,coordinatelist,rotation)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Deprecated, use gfx_blit instead.
        </description>
        <parameters>
            source - 
            coordinatelist - 
            rotation - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_blurto</slug>
        <title>gfx_blurto</title>
        <functioncall prog_lang="eel">gfx_blurto(x,y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Blurs the region of the screen between gfx_x,gfx_y and x,y, and updates gfx_x,gfx_y to x,y.
        </description>
        <parameters>
            x - x position of the other edge of the blur-region
            y - y position of the other edge of the blur-region
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_circle</slug>
        <title>gfx_circle</title>
        <functioncall prog_lang="eel">gfx_circle(x,y,r[,fill,antialias])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a circle, optionally filling/antialiasing
        </description>
        <parameters>
            x - x position of center of the circle
            y - y position of center of the circle
            r - radius of the circle
            fill - <=0.5, circle is not filled; >0.5, circle is filled
            antialias - <=0.5, circle is not antialiased; >0.5, circle is antialiased
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_clienttoscreen</slug>
        <title>gfx_clienttoscreen</title>
        <functioncall prog_lang="eel">gfx_clienttoscreen(x,y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Converts client coordinates x,y to screen coordinates.
        </description>
        <parameters>
            x - the x coordinate within(!) the gfx_init()-window, that shall be converted to screen-coordinates
            y - the y coordinate within(!) the gfx_init()-window, that shall be converted to screen-coordinates 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_deltablit</slug>
        <title>gfx_deltablit</title>
        <functioncall prog_lang="eel">gfx_deltablit(srcimg,srcs,srct,srcw,srch,destx,desty,destw,desth,dsdx,dtdx,dsdy,dtdy,dsdxdy,dtdxdy[,usecliprect=1])</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description indent="default">
            Blits from srcimg(srcs,srct,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.
        </description>
        <parameters>
            srcimg - 
            srcs - 
            srct - 
            srcw - 
            srch -
            destx - 
            desty - 
            destw - 
            desth - 
            dsdx -
            dtdx - 
            dsdy - 
            dtdy - 
            dsdxdy - 
            dtdxdy -
            usecliprect - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_dock</slug>
        <title>gfx_dock</title>
        <functioncall prog_lang="eel">gfx_dock(v[,wx,wy,ww,wh])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &amp;1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh are specified, they will be filled with the undocked window position/size
        </description>
        <description indent="default">
            Queries or sets the docking-state of the gfx_init()-window.
            Call with v=-1 to query docked state, otherwise v&gt;=0 to set docked state. State is &amp;1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh specified, additional values will be returned with the undocked window position/size
        </description>
        <retvals>
            querystate - 0 if not docked; &amp;1 if docked; the byte &amp;9 to &amp;16 returns the docker-index
            window_x_position - the x position of the window in pixels
            window_y_position - the y position of the window in pixels
            window_width - the width of the window in pixels
            window_height - the height of the window in pixels 
        </retvals>
        <parameters>
            v - -1, query docking-state; 0 and higher, set state of the window to docked
            wx - set to a number to query current-windowx-position
            wy - set to a number to query current-windowy-position
            ww - set to a number to query current-window-width
            wh - set to a number to query current-window-height
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_drawchar</slug>
        <title>gfx_drawchar</title>
        <functioncall prog_lang="eel">gfx_drawchar(char)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws the character (can be a numeric ASCII code as well), to gfx_x, gfx_y, and moves gfx_x over by the size of the character.
        </description>
        <parameters>
            char - the numeric ASCII-representation of the character to be drawn
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_drawnumber</slug>
        <title>gfx_drawnumber</title>
        <functioncall prog_lang="eel">gfx_drawnumber(n,ndigits)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws the number n with ndigits of precision to gfx_x, gfx_y, and updates gfx_x to the right side of the drawing. The text height is gfx_texth.
        </description>
        <parameters>
            n - 
            n digits - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_drawstr</slug>
        <title>gfx_drawstr</title>
        <functioncall prog_lang="eel">gfx_drawstr("str"[,flags,right,bottom])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y so that subsequent draws will occur in a similar place.

            * If flags, right ,bottom passed in:
            * flags&amp;1: center horizontally
            * flags&amp;2: right justify
            * flags&amp;4: center vertically
            * flags&amp;8: bottom justify
            * flags&amp;256: ignore right/bottom, otherwise text is clipped to (gfx_x, gfx_y, right, bottom)
        </description>
        <parameters>
            "str" - 
            flags - 
            right - 
            bottom - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_getchar</slug>
        <title>gfx_getchar</title>
        <functioncall prog_lang="eel">gfx_getchar([char])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.

            Common values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. 

            Modified and special keys can also be returned, including:

                * Ctrl/Cmd+A..Ctrl+Z as 1..26
                * Ctrl/Cmd+Alt+A..Z as 257..282
                * Alt+A..Z as 'A'+256..'Z'+256
                * 27 for ESC
                * 13 for Enter
                * ' ' for space
        </description>
        <parameters>
            char - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_getfont</slug>
        <title>gfx_getfont</title>
        <functioncall prog_lang="eel">gfx_getfont([#str])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns current font index. If a string is passed, it will receive the actual font face used by this font, if available.
        </description>
        <parameters>
            #str - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_getimgdim</slug>
        <title>gfx_getimgdim</title>
        <functioncall prog_lang="eel">gfx_getimgdim(image,w,h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Retrieves the dimensions of image (representing a filename: index number) into w and h. Sets these values to 0 if an image failed loading (or if the filename index is invalid).
        </description>
        <parameters>
            image - 
        </parameters>
        <retvals>
            w - 
            h - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_getpixel</slug>
        <title>gfx_getpixel</title>
        <functioncall prog_lang="eel">gfx_getpixel(r,g,b)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Gets the value of the pixel at gfx_x,gfx_y into r,g,b. 
        </description>
        <retvals>
            r - the red-color-value, a value between 0 to 1
            g - the green-color-value, a value between 0 to 1
            b - the blue-color-value, a value between 0 to 1
        </retvals>        
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_gradrect</slug>
        <title>gfx_gradrect</title>
        <functioncall prog_lang="eel">gfx_gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.
        </description>
        <parameters>
            x -
            y - 
            w - 
            h -
            r - 
            g - 
            b - 
            a - 
            drdx - 
            dgdx - 
            dbdx - 
            dadx - 
            drdy - 
            dgdy - 
            dbdy - 
            dady - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_init</slug>
        <title>gfx_init</title>
        <functioncall prog_lang="eel">gfx_init("name"[,width,height,dockstate,xpos,ypos])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
        Initializes the graphics window with title name. Suggested width and height can be specified.

        Once the graphics window is open, [gfx_update()](#eel_gfx_update) should be called periodically. 
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_line</slug>
        <title>gfx_line</title>
        <functioncall prog_lang="eel">gfx_line(x,y,x2,y2[,aa])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.
        </description>
        <parameters>
            x - 
            y - 
            x2 - 
            y2 - 
            aa - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_lineto</slug>
        <title>gfx_lineto</title>
        <functioncall prog_lang="eel">gfx_lineto(x,y[,aa])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a line from gfx_x,gfx_y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx_x and gfx_y to x,y.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <parameters>
            x - 
            y - 
            aa - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_loadimg</slug>
        <title>gfx_loadimg</title>
        <functioncall prog_lang="eel">gfx_loadimg(image,"filename")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. 
        </description>
        <parameters>
            image - 
            "filename" - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_measurechar</slug>
        <title>gfx_measurechar</title>
        <functioncall prog_lang="eel">gfx_measurechar(character,&amp;w,&amp;h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Measures the drawing dimensions of a character with the current font (as set by [gfx.setfont](#lua_gfx.setfont)). Returns width and height of character.
        </description>
        <parameters>
            character - 
            w - 
            h - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_measurestr</slug>
        <title>gfx_measurestr</title>
        <functioncall prog_lang="eel">gfx_measurestr("str",&amp;w,&amp;h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Measures the drawing dimensions of a string with the current font (as set by gfx_setfont). 
        </description>
        <parameters>
            "str" - 
            w - 
            h - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_muladdrect</slug>
        <title>gfx_muladdrect</title>
        <functioncall prog_lang="eel">gfx_muladdrect(x,y,w,h,mul_r,mul_g,mul_b[,mul_a,add_r,add_g,add_b,add_a])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.
        </description>
        <parameters>
            x - 
            y - 
            w - 
            h - 
            mul_r - 
            mul_g - 
            mul_b - 
            mul_a - 
            add_r - 
            add_g - 
            add_b - 
            add_a - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_printf</slug>
        <title>gfx_printf</title>
        <functioncall prog_lang="eel">gfx_printf("format"[, ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Formats and draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see [sprintf()](#eel_sprintf)
        </description>
        <parameters>
            "format" - 
            ... - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_quit</slug>
        <title>gfx_quit</title>
        <functioncall prog_lang="eel">gfx_quit()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Closes the graphics window.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_rect</slug>
        <title>gfx_rect</title>
        <functioncall prog_lang="eel">gfx_rect(x,y,w,h[,filled])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Fills a rectangle at x,y,w,h pixels in dimension, filled by default. 
        </description>
        <parameters>
            x - 
            y - 
            w - 
            h - 
            filled - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_rectto</slug>
        <title>gfx_rectto</title>
        <functioncall prog_lang="eel">gfx_rectto(x,y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Fills a rectangle from gfx_x,gfx_y to x,y. Updates gfx_x,gfx_y to x,y. 
        </description>
        <parameters>
            x - 
            y - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_roundrect</slug>
        <title>gfx_roundrect</title>
        <functioncall prog_lang="eel">gfx_roundrect(x,y,w,h,radius[,antialias])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a rectangle with rounded corners. 
        </description>
        <parameters>
            x - 
            y - 
            w - 
            h - 
            radius - 
            antialias - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_screentoclient</slug>
        <title>gfx_screentoclient</title>
        <functioncall prog_lang="eel">gfx_screentoclient(x,y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Converts screen coordinates x,y to client coordinates.
        </description>
        <parameters>
            x - 
            y - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_set</slug>
        <title>gfx_set</title>
        <functioncall prog_lang="eel">gfx_set(r[,g,b,a,mode,dest])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets gfx_r/gfx_g/gfx_b/gfx_a/gfx_mode, sets gfx_dest if final parameter specified
        </description>
        <parameters>
            r - 
            g - 
            b - 
            a - 
            mode - 
            dest - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_setcursor</slug>
        <title>gfx_setcursor</title>
        <functioncall prog_lang="eel">gfx_setcursor(resource_id,custom_cursor_name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like "arrow" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.
        </description>
        <parameters>
            resource_id - 
            custom_cursor_name - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_getdropfile</slug>
        <title>eel_getdropfile</title>
        <functioncall prog_lang="eel">integer retval = gfx_getdropfile(integer idx[, string #filename])</functioncall>
        <requires>
            Reaper=5.91
            Lua=5.3
        </requires>
        <description indent="default">
            Returns filenames, drag'n'dropped into a window created by gfx_init().
            Use idx to get a specific filename, that has been dropped into the gfx_init()-window.
            
            Does NOT support mediaitems/takes or other Reaper-objects!
        </description>
        <retvals>
            integer retval - 0, if droppped-filename with indexnumber idx doesn't exist; 1, if it exists; hints, if you already read all dropped filenames.
            string filename - the filename of dropped-file with indexnumber idx
        </retvals>
        <parameters>
            integer idx - the indexnumber for a filename, that has been dropped into a gfx_init()-window.
                        - 0, the first file; 1, the second file; 2, the third file, etc.
                        - -1, clears the filelist.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags>dragndrop, drop, file, filename, window, gfx, window, eel</tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_setfont</slug>
        <title>gfx_setfont</title>
        <functioncall prog_lang="eel">gfx_setfont(idx[,"fontface", sz, flags])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Can select a font and optionally configure it. 
            
            After calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.
        </description>
        <parameters>
            idx - the font-id; idx=0 for default bitmapped font, no configuration is possible for this font.
                - idx=1..16 for a configurable font
            "fontface" - the name of the font, like "arial"
            sz - the size of the font (8-100)
            flags - flags, how to render the text; values are repeating every 256 numbers
                  - a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. 
                  - These flags may or may not be supported depending on the font and OS. 
                  - 66 and 98, Bold (B), (b)
                  - 73 and 105, italic (I), (i)
                  - 79 and 111, white outline (O), (o)
                  - 82 and 114, reduced(halfbright) (R), (r)
                  - 83 and 115, sharpen (S), (s)
                  - 85 and 117, underline (U), (u)
                  - 86 and 118, inVerse (V), (v)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_setimgdim</slug>
        <title>gfx_setimgdim</title>
        <functioncall prog_lang="eel">gfx_setimgdim(image,w,h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Resize image referenced by index 0..1024-1, width and height must be 0-2048. The contents of the image will be undefined after the resize.
        </description>
        <parameters>
            image - 
            w - 
            h -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_setpixel</slug>
        <title>gfx_setpixel</title>
        <functioncall prog_lang="eel">gfx_setpixel(r,g,b)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Writes a pixel of r,g,b to gfx_x,gfx_y.
        </description>
        <parameters>
            r - 
            g - 
            b - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_showmenu</slug>
        <title>gfx_showmenu</title>
        <functioncall prog_lang="eel">gfx_showmenu("str")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Shows a popup menu at gfx_x,gfx_y. 
            str is a list of fields separated by | characters. Each field represents a menu item.
            Fields can start with special characters:

            # : grayed out
            ! : checked
            > : this menu item shows a submenu
            < : last item in the current submenu

            An empty field will appear as a separator in the menu. gfx_showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.
            Example:

            gfx_showmenu("first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu")
        </description>
        <parameters>
            "str" - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_transformblit</slug>
        <title>gfx_transformblit</title>
        <functioncall prog_lang="eel">gfx_transformblit(srcimg,destx,desty,destw,desth,div_w,div_h,table)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (this table must not cross a 65536 item boundary). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.
        </description>
        <parameters>
            srcimg - 
            destx - 
            desty - 
            destw - 
            desth - 
            div_w - 
            div_h - 
            table -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_triangle</slug>
        <title>gfx_triangle</title>
        <functioncall prog_lang="eel">gfx_triangle(x1,y1,x2,y2,x3,y3[x4,y4...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Draws a filled triangle, or any convex polygon. 
        </description>
        <parameters>
            x1 - 
            y1 - 
            x2 - 
            y2 - 
            x3 - 
            y3 - 
            x4 -
            y4 - 
            ... - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_gfx_update</slug>
        <title>gfx_update</title>
        <functioncall prog_lang="eel">gfx_update()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Updates the graphics display, if opened.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_ifft</slug>
        <title>ifft</title>
        <functioncall prog_lang="eel">ifft(buffer,size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Perform an inverse FFT. For more information see [fft()](#eel_fft).
        </description>
        <parameters>
            buffer - 
            size - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_ifft_real</slug>
        <title>ifft_real</title>
        <functioncall prog_lang="eel">ifft_real(buffer,size)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Performs an inverse FFT, but takes size/2 complex input pairs and produces size real output values. Usually used along with fft_ipermute(size/2).
        </description>
        <parameters>
            buffer - 
            size - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_invsqrt</slug>
        <title>invsqrt</title>
        <functioncall prog_lang="eel">invsqrt(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_log</slug>
        <title>log</title>
        <functioncall prog_lang="eel">log(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the natural logarithm (base e) of the parameter. If the value is not greater than 0, the return value is undefined.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_log10</slug>
        <title>log10</title>
        <functioncall prog_lang="eel">log10(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the base-10 logarithm of the parameter. If the value is not greater than 0, the return value is undefined.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_loop</slug>
        <title>loop</title>
        <functioncall prog_lang="eel">loop(count,expression)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Evaluates count once, and then executes expression count, but not more than 1048576, times.
        </description>
        <parameters>
            count - 
            expression - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_match</slug>
        <title>match</title>
        <functioncall prog_lang="eel">match("needle","haystack"[, ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Searches for the first parameter in the second parameter, using a simplified regular expression syntax.

            * * = match 0 or more characters
            * *? = match 0 or more characters, lazy
            * + = match 1 or more characters
            * +? = match 1 or more characters, lazy
            * ? = match one character

            You can also use format specifiers to match certain types of data, and optionally put that into a variable:

            * %s means 1 or more chars
            * %0s means 0 or more chars
            * %5s means exactly 5 chars
            * %5-s means 5 or more chars
            * %-10s means 1-10 chars
            * %3-5s means 3-5 chars
            * %0-5s means 0-5 chars
            * %x, %d, %u, and %f are available for use similarly
            * %c can be used, but can't take any length modifiers
            * Use uppercase (%S, %D, etc) for lazy matching

            See also sprintf() for other notes, including specifying direct variable references via {}.
        </description>
        <parameters>
            "needle" - 
            "haystack" - 
            ... - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_matchi</slug>
        <title>matchi</title>
        <functioncall prog_lang="eel">matchi("needle","haystack"[, ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Case-insensitive version of [match()](#eel_matchi).
        </description>
        <parameters>
            "needle" - 
            "haystack" - 
            ... - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_max</slug>
        <title>max</title>
        <functioncall prog_lang="eel">max(&amp;value,&amp;value2)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns (by reference) the maximum value of the two parameters. Since max() returns by reference, expressions such as max(x,y) = 5 are possible.
        </description>
        <parameters>
            value - 
            value2 - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_mem_get_values</slug>
        <title>mem_get_values</title>
        <functioncall prog_lang="eel">mem_get_values(offset, ...)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Reads values from memory starting at offset into variables specified. Slower than regular memory reads for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.
        </description>
        <parameters>
            offset - 
            ... - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_mem_set_values</slug>
        <title>mem_set_values</title>
        <functioncall prog_lang="eel">mem_set_values(offset, ...)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Writes values to memory starting at offset from variables specified. Slower than regular memory writes for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.
        </description>
        <parameters>
            offset - 
            ... - 
        </parameters>        
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_memcpy</slug>
        <title>memcpy</title>
        <functioncall prog_lang="eel">memcpy(dest,src,length)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Copies length items of memory from src to dest. Regions are permitted to overlap.
        </description>
        <parameters>
            dest - 
            src - 
            length - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_memset</slug>
        <title>memset</title>
        <functioncall prog_lang="eel">memset(offset,value,length)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets length items of memory at offset to value.
        </description>
        <parameters>
            offset - 
            value - 
            length - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_min</slug>
        <title>min</title>
        <functioncall prog_lang="eel">min(&amp;value,&amp;value2)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns (by reference) the minimum value of the two parameters. Since min() returns by reference, expressions such as min(x,y) = 5 are possible.
        </description>
        <parameters>
            value - 
            value2 - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_printf</slug>
        <title>printf</title>
        <functioncall prog_lang="eel">printf("format"[, ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Output formatted string to system-specific destination, see [sprintf\(\)](#eel_sprintf) for more information
        </description>
        <parameters>
            "format" - 
            ... - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_rand</slug>
        <title>rand</title>
        <functioncall prog_lang="eel">rand([max])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns a psuedorandom real number between 0 and the parameter, inclusive. If the parameter is omitted or less than 1.0, 1.0 is used as a maximum instead.
        </description>
        <parameters>
            max - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_runloop</slug>
        <title>runloop</title>
        <functioncall prog_lang="eel">runloop("code")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().
            
            Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
        </description>
        <parameters>
            "code" - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sign</slug>
        <title>sign</title>
        <functioncall prog_lang="eel">sign(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns 1.0 if the parameter is greater than 0, -1.0 if the parameter is less than 0, or 0 if the parameter is 0.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sin</slug>
        <title>sin</title>
        <functioncall prog_lang="eel">sin(angle)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the sine of the angle specified (specified in radians -- to convert from degrees to radians, multiply by $pi/180, or 0.017453).
        </description>
        <parameters>
            angle - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sleep</slug>
        <title>sleep</title>
        <functioncall prog_lang="eel">sleep(ms)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Yields the CPU for the millisecond count specified, calling Sleep() on Windows or usleep() on other platforms.
        </description>
        <parameters>
            ms - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sprintf</slug>
        <title>sprintf</title>
        <functioncall prog_lang="eel">sprintf(#dest,"format"[, ...])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Formats a string and stores it in #dest. Format specifiers begin with %, and may include:

                * %% = %
                * %s = string from parameter
                * %d = parameter as integer
                * %i = parameter as integer
                * %u = parameter as unsigned integer
                * %x = parameter as hex (lowercase) integer
                * %X = parameter as hex (uppercase) integer
                * %c = parameter as character
                * %f = parameter as floating point
                * %e = parameter as floating point (scientific notation, lowercase)
                * %E = parameter as floating point (scientific notation, uppercase)
                * %g = parameter as floating point (shortest representation, lowercase)
                * %G = parameter as floating point (shortest representation, uppercase)

            Many standard C printf() modifiers can be used, including:

                * %.10s = string, but only print up to 10 characters
                * %-10s = string, left justified to 10 characters
                * %10s = string, right justified to 10 characters
                * %+f = floating point, always show sign
                * %.4f = floating point, minimum of 4 digits after decimal point
                * %10d = integer, minimum of 10 digits (space padded)
                * %010f = integer, minimum of 10 digits (zero padded)

            Values for format specifiers can be specified as additional parameters to sprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).
        </description>
        <parameters>
            #dest - 
            "format" - 
            ... - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sqr</slug>
        <title>sqr</title>
        <functioncall prog_lang="eel">sqr(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the square of the parameter (similar to value*value, but only evaluating value once).
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_sqrt</slug>
        <title>sqrt</title>
        <functioncall prog_lang="eel">sqrt(value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the square root of the parameter. If the parameter is negative, the return value is undefined.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_stack_exch</slug>
        <title>stack_exch</title>
        <functioncall prog_lang="eel">stack_exch(&amp;value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Exchanges a value with the top of the stack, and returns a reference to the parameter (with the new value).
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_stack_peek</slug>
        <title>stack_peek</title>
        <functioncall prog_lang="eel">stack_peek(index)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns a reference to the item on the top of the stack (if index is 0), or to the Nth item on the stack if index is greater than 0. 
        </description>
        <parameters>
            index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_stack_pop</slug>
        <title>stack_pop</title>
        <functioncall prog_lang="eel">stack_pop(&amp;value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Pops a value from the user stack into value, or into a temporary buffer if value is not specified, and returns a reference to where the stack was popped. Note that no checking is done to determine if the stack is empty, and as such stack_pop() will never fail.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_stack_push</slug>
        <title>stack_push</title>
        <functioncall prog_lang="eel">stack_push(&amp;value)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Pushes value onto the user stack, returns a reference to the parameter.
        </description>
        <parameters>
            value - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_str_delsub</slug>
        <title>str_delsub</title>
        <functioncall prog_lang="eel">str_delsub(#str,pos,len)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Deletes len characters at offset pos from #str, and returns #str.
        </description>
        <parameters>
            #str - 
            pos - 
            len - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_str_getchar</slug>
        <title>str_getchar</title>
        <functioncall prog_lang="eel">str_getchar("str",offset[,type])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the data at byte-offset offset of str. If offset is negative, position is relative to end of string.type defaults to signed char, but can be specified to read raw binary data in other formats (note the single quotes, these are single/multi-byte characters):

                * 'c' - signed char
                * 'cu' - unsigned char
                * 's' - signed short
                * 'S' - signed short, big endian
                * 'su' - unsigned short
                * 'Su' - unsigned short, big endian
                * 'i' - signed int
                * 'I' - signed int, big endian
                * 'iu' - unsigned int
                * 'Iu' - unsigned int, big endian
                * 'f' - float
                * 'F' - float, big endian
                * 'd' - double
                * 'D' - double, big endian
        </description>
        <parameters>
            "str" - 
            offset - 
            type - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_str_insert</slug>
        <title>str_insert</title>
        <functioncall prog_lang="eel">str_insert(#str,"srcstr",pos)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Inserts srcstr into #str at offset pos. Returns #str.
        </description>
        <parameters>
            #str - 
            "srcstr" - 
            pos - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_str_setchar</slug>
        <title>str_setchar</title>
        <functioncall prog_lang="eel">str_setchar(#str,offset,val[,type]))</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Sets value at offset offset, type optional. offset may be negative to refer to offset relative to end of string, or between 0 and length, inclusive, and if set to length it will lengthen string. See [str_getchar()](#eel_str_getchar) for more information on types.
        </description>
        <parameters>
            #str - 
            offset - 
            val - 
            type - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_str_setlen</slug>
        <title>str_setlen</title>
        <functioncall prog_lang="eel">str_setlen(#str,len)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets length of #str (if increasing, will be space-padded), and returns #str.
        </description>
        <parameters>
            #str - 
            len - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strcat</slug>
        <title>strcat</title>
        <functioncall prog_lang="eel">strcat(#str,"srcstr")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Appends srcstr to #str, and returns #str
        </description>
        <parameters>
            #str - 
            "srcstr" - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strcmp</slug>
        <title>strcmp</title>
        <functioncall prog_lang="eel">strcmp("str","str2")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Compares strings, returning 0 if equal
        </description>
        <parameters>
            "str" - 
            "str2 - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strcpy</slug>
        <title>strcpy</title>
        <functioncall prog_lang="eel">strcpy(#str,"srcstr")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Copies the contents of srcstr to #str, and returns #str
        </description>
        <parameters>
            #str - 
            "srcstr" - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strcpy_from</slug>
        <title>strcpy_from</title>
        <functioncall prog_lang="eel">strcpy_from(#str,"srcstr",offset)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Copies srcstr to #str, but starts reading srcstr at offset offset
        </description>
        <parameters>
            #str - 
            "srcstr" - 
            offset - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strcpy_substr</slug>
        <title>strcpy_substr</title>
        <functioncall prog_lang="eel">strcpy_substr(#str,"srcstr",offs,ml))</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PHP-style (start at offs, offs<0 means from end, ml for maxlen, ml<0 = reduce length by this amt)
        </description>
        <parameters>
            #str - 
            "srcstr" - 
            offs - 
            ml - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_stricmp</slug>
        <title>stricmp</title>
        <functioncall prog_lang="eel">stricmp("str","str2")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Compares strings ignoring case, returning 0 if equal.
        </description>
        <parameters>
            "str" - 
            "str2" - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strlen</slug>
        <title>strlen</title>
        <functioncall prog_lang="eel">strlen("str")</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the length of the string passed as a parameter.
        </description>
        <parameters>
            "str" - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strncat</slug>
        <title>strncat</title>
        <functioncall prog_lang="eel">strncat(#str,"srcstr",maxlen)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Appends srcstr to #str, stopping after maxlen characters of srcstr. Returns #str.
        </description>
        <parameters>
            #str - 
            "srcstr" - 
            maxlen - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strncmp</slug>
        <title>strncmp</title>
        <functioncall prog_lang="eel">strncmp("str","str2",maxlen)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Compares strings giving up after maxlen characters, returning 0 if equal.
        </description>
        <parameters>
            "str" - 
            "str2" - 
            maxlen - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strncpy</slug>
        <title>strncpy</title>
        <functioncall prog_lang="eel">strncpy(#str,"srcstr",maxlen)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Copies srcstr to #str, stopping after maxlen characters. Returns #str.
        </description>
        <parameters>
            #str - 
            "srcstr" - 
            maxlen - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_strnicmp</slug>
        <title>strnicmp</title>
        <functioncall prog_lang="eel">strnicmp("str","str2",maxlen)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Compares strings giving up after maxlen characters, ignoring case, returning 0 if equal.
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tan</slug>
        <title>tan</title>
        <functioncall prog_lang="eel">tan(angle)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the tangent of the angle specified (specified in radians).
        </description>
        <parameters>
            angle - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_close</slug>
        <title>tcp_close</title>
        <functioncall prog_lang="eel">tcp_close(connection)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Closes a TCP connection created by tcp_listen() or tcp_connect().
        </description>
        <parameters>
            connection - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_connect</slug>
        <title>tcp_connect</title>
        <functioncall prog_lang="eel">tcp_connect("address",port[,block])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Create a new TCP connection to address:port. If block is specified and 0, connection will be made nonblocking. Returns TCP connection ID greater than 0 on success.
        </description>
        <parameters>
            "address" - 
            port - 
            block - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_listen</slug>
        <title>tcp_listen</title>
        <functioncall prog_lang="eel">tcp_listen(port[,"interface",#ip_out])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Listens on port specified. Returns less than 0 if could not listen, 0 if no new connection available, or greater than 0 (as a TCP connection ID) if a new connection was made. If a connection made and #ip_out specified, it will be set to the remote IP. interface can be empty for all interfaces, otherwise an interface IP as a string.
        </description>
        <parameters>
            port - 
            "interface" - 
            #ip_out - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_listen_end</slug>
        <title>tcp_listen_end</title>
        <functioncall prog_lang="eel">tcp_listen_end(port)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Ends listening on port specified.
        </description>
        <parameters>
            port - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_recv</slug>
        <title>tcp_recv</title>
        <functioncall prog_lang="eel">tcp_recv(connection,#str[,maxlen])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Receives data from a connection to #str. If maxlen is specified, no more than maxlen bytes will be received. If non-blocking, 0 will be returned if would block. Returns less than 0 if error.
        </description>
        <parameters>
            connection - 
            #str - 
            maxlen - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_send</slug>
        <title>tcp_send</title>
        <functioncall prog_lang="eel">tcp_send(connection,"str"[,len])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sends a string to connection. Returns -1 on error, 0 if connection is non-blocking and would block, otherwise returns length sent. If len is specified and not less than 1, only the first len bytes of the string parameter will be sent.
        </description>
        <parameters>
            connection - 
            "str" - 
            len - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_tcp_set_block</slug>
        <title>tcp_set_block</title>
        <functioncall prog_lang="eel">tcp_set_block(connection,block)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets whether a connection blocks.
        </description>
        <parameters>
            connection - 
            block - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_time</slug>
        <title>time</title>
        <functioncall prog_lang="eel">time([&amp;val])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets the parameter (or a temporary buffer if omitted) to the number of seconds since January 1, 1970, and returns a reference to that value. The granularity of the value returned is 1 second.
        </description>
        <parameters>
            val - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_time_precise</slug>
        <title>time_precise</title>
        <functioncall prog_lang="eel">time_precise([&amp;val])</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Sets the parameter (or a temporary buffer if omitted) to a system-local timestamp in seconds, and returns a reference to that value. The granularity of the value returned is system defined (but generally significantly smaller than one second).
        </description>
        <parameters>
            val - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="eel">
        <slug>eel_while</slug>
        <title>while</title>
        <functioncall prog_lang="eel">while(expression)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Executes expression until expression evaluates to zero, or until 1048576 iterations occur. An alternate and more useful syntax is while (expression) ( statements ), which evaluates statements after every non-zero evaluation of expression.
        </description>
        <parameters>
            expression - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional EEL-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_atexit</slug>
        <title>atexit</title>
        <functioncall prog_lang="lua">reaper.atexit(function function)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.
        </description>
        <parameters>
            function function - the function, with which the script shall finish
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_defer</slug>
        <title>defer</title>
        <functioncall prog_lang="lua">boolean retval = reaper.defer(function function)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
        </description>
        <retvals>
            boolean retval - unknown; usually true
        </retvals>
        <parameters>
            function function - the function to be called, when the current defer/runloop-run has ended
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_get_action_context</slug>
        <title>get_action_context</title>
        <functioncall prog_lang="lua">boolean is_new_value, string filename_with_path, integer sectionID, integer cmdID, integer mode, integer resolution, integer val = reaper.get_action_context()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Returns contextual information about the script, typically MIDI/OSC input values.val will be set to a relative or absolute value depending on mode (=0: absolute mode, &gt;0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.Notes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.
        </description>
        <retvals>
            boolean is_new_value - 
            string filename_with_path - the script's own filename with path
            integer sectionID - the section, in which this script was called
            integer cmdID - the command-id associated with this script
            integer mode - -1, if script isn't run by shortcut; 55953, is script is run by shortcut; probably for for MIDI?
            integer resolution - -1, if script isn't run by shortcut; probably more for MIDI?
            integer val - -1, if script isn't run by shortcut; probably more for MIDI?
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx_variables</slug>
        <title>gfx_variables</title>
        <functioncall prog_lang="lua">gfx VARIABLES</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            The following global variables are special and will be used by the graphics system:
            gfx.r, gfx.g, gfx.b, gfx.a - These represent the current red, green, blue, and alpha components as floats, used by drawing operations (0.0..1.0). 
            gfx.w, gfx.h - These are set to the current width and height of the UI framebuffer, aka windowsize as integer.
            gfx.x, gfx.y - These set the "current" graphics position in x,y as integers. You can set these yourselves, and many of the drawing functions update them as well. 
            gfx.mode - The drawing-mode. It is a float-variable. Set to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit(). 
            gfx.clear - Clears framebuffer. Integer-variable. If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). 
            gfx.dest - The destination-framebuffer. It is an integer-variable. Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).
            gfx.texth - The height of a line of text in the current font, as integer-variable. Do not modify this variable.
            gfx.ext_retina - Highresolution-variable. It is an integer. If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx.w/gfx.h/etc will be doubled.
            gfx.mouse_x, gfx.mouse_y - gfx.mouse_x and gfx.mouse_y are set to the coordinates of the mouse relative to the graphics window, as integer-variables.
            gfx.mouse_wheel, gfx.mouse_hwheel - mouse wheel (and horizontal wheel) positions as integer variable. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
            gfx.mouse_cap is a bitfield of mouse and keyboard modifier state. It is an integer-variable.
            1: left mouse button
            2: right mouse button
            4: Control key
            8: Shift key
            16: Alt key
            32: Windows key
            64: middle mouse button
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.arc</slug>
        <title>gfx.arc</title>
        <functioncall prog_lang="lua">gfx.arc(integer x, integer y, integer r, number ang1, number ang2, optional number antialias)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.
        </description>
        <parameters>
            integer x - x position of the center of the circle
            integer y - y position of the center of the circle
            integer r - the radius of the circle
            number ang1 - the beginning of the circle in radians; meant for partial circles; 0-6.28
            number ang2 - the end of the circle in radians; meant for partial circles; 0-6.28
            optional number antialias - <=0.5, antialias off; >0.5, antialias on
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.blit</slug>
        <title>gfx.blit</title>
        <functioncall prog_lang="lua">integer source = gfx.blit(integer source, number scale, number rotation, optional number srcx, optional number srcy, optional number srcw, optional number srch, optional integer destx, optional integer desty, optional integer destw, optional integer desth, optional integer rotxoffs,  optional integer rotyoffs)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Blits(draws) the content of source-image to another source-image or an opened window.
            
            srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size), destx/desty/destw/desth specify dest rectangle (if not specified, these will default to reasonable defaults -- destw/desth default to srcw/srch * scale). 
        </description>
        <parameters>
           integer source - the source-image/framebuffer to blit; -1 to 1023; -1 for the currently displayed framebuffer.
           number scale - the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger; has no effect, when destx, desty, destw, desth are given
           number rotation - the rotation-factor; 0 to 6.28; 3.14 for 180 degrees.
           optional number srcx - the x-coordinate-offset in the source-image
           optional number srcy - the y-coordinate-offset in the source-image
           optional number srcw - the width-offset in the source-image
           optional number srch - the height-offset in the source-image
           optional integer destx - the x-coordinate of the blitting destination
           optional integer desty - the y-coordinate of the blitting destination
           optional integer destw - the width of the blitting destination; may lead to stretched images
           optional integer desth - the height of the blitting destination; may lead to stretched images
           optional number rotxoffs - influences rotation
           optional number rotyoffs - influences rotation
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.blit</slug>
        <title>gfx.blit</title>
        <functioncall prog_lang="lua">integer source = gfx.blit(integer source, number scale, number rotation)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Blits(draws) the content of source-image to another source-image or an opened window.
            
            If three parameters are specified, copies the entirity of the source bitmap to gfx.x,gfx.y using current opacity and copy mode (set with gfx.a, gfx.mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians).For the "source" parameter specify -1 to use the main framebuffer as source, or an image index (see gfx.loadimg()).
        </description>
        <parameters>
           integer source - the source-image/framebuffer to blit; -1 to 1023; -1 for the currently displayed framebuffer.
           number scale - the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger
           number rotation - the rotation-factor; 0 to 6.28; 3.14 for 180 degrees.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.blitext</slug>
        <title>gfx.blitext</title>
        <functioncall prog_lang="lua">gfx.blitext(source,coordinatelist,rotation)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Deprecated, use gfx.blit instead.
        </description>
        <parameters>
            source - 
            coordinatelist - 
            rotation - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.blurto</slug>
        <title>gfx.blurto</title>
        <functioncall prog_lang="lua">gfx.blurto(integer x, integer y)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y.
        </description>
        <parameters>
            integer x - x position of the other edge of the blur-region
            integer y - y position of the other edge of the blur-region
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.circle</slug>
        <title>gfx.circle</title>
        <functioncall prog_lang="lua">gfx.circle(integer x, integer y, integer r, optional number fill, optional number antialias)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Draws a circle, optionally filling/antialiasing. 
        </description>
        <parameters>
            integer x - x position of center of the circle
            integer y - y position of center of the circle
            integer r - radius of the circle
            optional number fill - <=0.5, circle is not filled; >0.5, circle is filled
            optional number antialias - <=0.5, circle is not antialiased; >0.5, circle is antialiased
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.clienttoscreen</slug>
        <title>gfx.clienttoscreen</title>
        <functioncall prog_lang="lua">int convx, int convy = gfx.clienttoscreen(integer x, integer y)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Converts the coordinates x,y to screen coordinates, returns those values.
        </description>
        <retvals>
            integer convx - the converted coordinate in relation of the screen-viewport
            integer convy - the converted coordinate in relation of the screen-viewport
        </retvals>
        <parameters>
            integer x - the x coordinate within(!) the gfx.init()-window, that shall be converted to screen-coordinates
            integer y - the y coordinate within(!) the gfx.init()-window, that shall be converted to screen-coordinates 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.deltablit</slug>
        <title>gfx.deltablit</title>
        <functioncall prog_lang="lua">gfx.deltablit(srcimg,srcs,srct,srcw,srch,destx,desty,destw,desth,dsdx,dtdx,dsdy,dtdy,dsdxdy,dtdxdy[,usecliprect=1])</functioncall>
        <requires>
            Reaper=5.95
            Lua=5.3
        </requires>
        <description indent="default">
            Blits from srcimg(srcs,srct,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.
        </description>
        <parameters>
            srcimg - 
            srcs - 
            srct - 
            srcw - 
            srch - 
            destx - 
            desty - 
            destw - 
            desth - 
            dsdx - 
            dtdx - 
            dsdy - 
            dtdy - 
            dsdxdy - 
            dtdxdy -
            usecliprect - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.dock</slug>
        <title>gfx.dock</title>
        <functioncall prog_lang="lua">number querystate, optional integer window_x_position, optional integer window_y_position, optional integer window_width, optional integer window_height = gfx.dock(integer v, optional integer wx, optional integer wy, optional integer ww, optional integer wh)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Queries or sets the docking-state of the gfx.init()-window.
            Call with v=-1 to query docked state, otherwise v&gt;=0 to set docked state. 
            State is &amp;1 if docked, second byte is docker index (or last docker index if undocked). 
            If wx-wh specified, additional values will be returned with the undocked window position/size
            
            A specific docking index does not necessarily represent a specific docker, means, you can not query/set left docker top, but rather all dockers that exist in the current screenset.
            So the first queried/set docker can be top-left-docker or the top docker or even one of the bottom dockers.
            The order doesn't seem to make any sense. Especially with more than 16 windows docked in the current screenset.
        </description>
        <retvals>
            integer querystate - 0 if not docked; &amp;1 if docked;  the bits &amp;256, &amp;512, &amp;1024, &amp;2048 get the docker-index
            integer window_x_position - the x position of the window in pixels
            integer window_y_position - the y position of the window in pixels
            integer window_width - the width of the window in pixels
            integer window_height - the height of the window in pixels 
        </retvals>
        <parameters>
            integer v - -1, query docking-state; 0 and higher, set state of the window to docked; the bits &amp;256, &amp;512, &amp;1024, &amp;2048 set the docker-index
            optional integer wx - set to a number to query current-windowx-position
            optional integer wy - set to a number to query current-windowy-position
            optional integer ww - set to a number to query current-window-width
            optional integer wh - set to a number to query current-window-height
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.drawchar</slug>
        <title>gfx.drawchar</title>
        <functioncall prog_lang="lua">integer char = gfx.drawchar(integer char)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character.
        </description>
        <retvals>
            integer char - the character drawn; 0, if invalid(like strings or characters passed as parameter)
        </retvals>
        <parameters>
            integer char - the numeric ASCII-representation of the character to be drawn
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.drawnumber</slug>
        <title>gfx.drawnumber</title>
        <functioncall prog_lang="lua">gfx.drawnumber(number n, integer ndigits)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth.
        </description>
        <parameters>
            number n - the number to be drawn
            integer ndigits - the number of digits for the precision
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.drawstr</slug>
        <title>gfx.drawstr</title>
        <functioncall prog_lang="lua">gfx.drawstr(string str, optional integer flags, optional integer right, optional integer bottom)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.
            
            You can optionally set a clipping area for the text, if you set parameter flags&amp;256 and the parameters right and bottom.
        </description>
        <parameters>
            string str - the string to be drawn into the gfx.init-window
            optional integer flags -influence, how the text shall be drawn
                                   - flags&amp;1: center horizontally
                                   - flags&amp;2: right justify
                                   - flags&amp;4: center vertically
                                   - flags&amp;8: bottom justify
                                   - flags&amp;256: ignore right/bottom, otherwise text is clipped to (gfx.x, gfx.y, right, bottom)
            optional integer right - if flags&amp;256 is set, this parameter clips text on the right side in pixels
            optional integer bottom - if flags&amp;256 is set, this parameter clips text on the bottom side in pixels 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.getchar</slug>
        <title>gfx.getchar</title>
        <functioncall prog_lang="lua">integer charactercode = gfx.getchar(optional integer character)</functioncall>
        <requires>
            Reaper=5.94
            Lua=5.3
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. 
            
            If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.
            Common values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, 
            including 'home', 'up', 'down', 'left', 'right', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. 
            
            Modified and special keys can also be returned, including:  
            
            - Ctrl/Cmd+A..Ctrl+Z as 1..26  
            - Ctrl/Cmd+Alt+A..Z as 257..282  
            - Alt+A..Z as 'A'+256..'Z'+256  
            - 27 for ESC  
            - 13 for Enter  
            - ' ' for space  
            -   
            - use 65536 as parameter charactercode to query special flags, returns: &1 (supported in this script), &2=window has focus, &4=window is visible  
            
            Some multibyte-characters, like home, up, down, left, right, f1 .. f12, pgup, pgdn, ins, del are returned as values above 255, but some other characters, like €,  
            are "real"-multibyte-characters(Unicode, etc).  
            To retrieve them, you need to run gfx.getchar() twice per defer-cycle and return their retvals into two variables:  
            Example:
            
                        A=gfx.getchar() -- first byte
                        B=gfx.getchar() -- second byte
                        
                        if A==261 and B==128 then reaper.MB("You typed the €-symbol.", "Message", 0) end -- typed character is the Euro-currency-symbol: €
                                                
        </description>
        <retvals>
            integer charactercode - either the charactercode or 0 if nothing is pressed
                                  - -1, if the gfx.init-window is closed
                                  - 
                                  - When the parameter character is given and not 0, charactercode is either 
                                  - 0, nothing is pressed, or
                                  - >0, the character you want to check for is pressed.
        </retvals>
        <parameters>
            optional integer character - the character to check for; use 65536 to check window-state(visible, focus)
                                       -    &1 (supported in this script), &2=window has focus, &4=window is visible
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.getdropfile</slug>
        <title>gfx.getdropfile</title>
        <functioncall prog_lang="lua">integer retval, string filename = gfx.getdropfile(integer idx)</functioncall>
        <requires>
            Reaper=5.91
            Lua=5.3
        </requires>
        <description indent="default">
            Returns filenames, drag'n'dropped into a window created by gfx.init().
            Use idx to get a specific filename, that has been dropped into the gfx.init()-window.
            
            Does NOT support mediaitems/takes or other Reaper-objects!
        </description>
        <retvals>
            integer retval - 0, if droppped-filename with indexnumber idx doesn't exist; 1, if it exists; hints, if you already reached the last filename dropped.
            string filename - the filename of dropped-file with indexnumber idx
        </retvals>
        <parameters>
            integer idx - the indexnumber for a filename, that has been dropped into a gfx.init()-window.
                        - 0, the first file; 1, the second file; 2, the third file, etc.
                        - -1, clears the filelist.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags>dragndrop, drop, file, filename, window, gfx, window, lua</tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.getfont</slug>
        <title>gfx.getfont</title>
        <functioncall prog_lang="lua">integer fontindex = gfx.getfont()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Returns current font index, and the actual font face used by this font (if available).
        </description>
        <retvals markup_type="markdown" markup_version="1.0.1">
            integer fontindex - the index of the font used. Use [gfx.setfont](#lua_gfx.setfont) to set a font for a specific index.
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.getimgdim</slug>
        <title>gfx.getimgdim</title>
        <functioncall prog_lang="lua">integer w, integer h = gfx.getimgdim(integer handle)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Retrieves the dimensions of an image specified by handle, returns w, h pair.
            Handle is basically a frame-buffer.
        </description>
        <retvals>
            integer w - the width of the image-handle in pixels
            integer h - the height of the image-handle in pixels
        </retvals>
        <parameters>
            integer handle - the index of the image-handle/framebuffer to retrieve the dimensions from;-1 to 1023; -1 for the currently displayed framebuffer.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.getpixel</slug>
        <title>gfx.getpixel</title>
        <functioncall prog_lang="lua">integer r, integer g, integer b = gfx.getpixel()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)
        </description>
        <retvals>
            integer r - the red-color-value, a value between 0 to 1
            integer g - the green-color-value, a value between 0 to 1
            integer b - the blue-color-value, a value between 0 to 1
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.gradrect</slug>
        <title>gfx.gradrect</title>
        <functioncall prog_lang="lua">gfx.gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.
        </description>
        <parameters>
            x - 
            y - 
            w - 
            h - 
            r -
            g -
            b - 
            a -
            drdx -
            dgdx - 
            dbdx -
            dadx -
            drdy - 
            dgdy - 
            dbdy - 
            dady - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.init</slug>
        <title>gfx.init</title>
        <functioncall prog_lang="lua">integer retval = gfx.init(string "name", optional integer width, optional integer height, optional integer dockstate, optional integer xpos, optional integer ypos)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Initializes the graphics window with title name. Suggested width and height can be specified.Once the graphics window is open, gfx.update() should be called periodically. 
            
            Only one graphics-window can be opened per script! Calling gfx.ini after a window has been opened has no effect.
        </description>
        <retvals>
            number retval - 1.0, if window is opened
        </retvals>
        <parameters>
            string "name" - the name of the window, which will be shown in the title of the window
            optional integer width - the width of the window; minmum is 50
            optional integer height - the height of the window; minimum is 16
            optional integer dockstate - &1=0, undocked; &1=1, docked
            optional integer xpos - x-position of the window in pixels; minimum is -80
            optional integer ypos - y-position of the window in pixels; minimum is -15
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.line</slug>
        <title>gfx.line</title>
        <functioncall prog_lang="lua">gfx.line(integer x, integer y, integer x2, integer y2, optional number aa)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased. 
        </description>
        <parameters>
            integer x - x-position of start of the line in pixels
            integer y - y-position of start of the line in pixels
            integer x2 - x-position of the end of the line in pixels
            integer y2 - y-position of the end of the line in pixels
            optional number aa - <0.5, no antialias; >=0.5, antialias
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.lineto</slug>
        <title>gfx.lineto</title>
        <functioncall prog_lang="lua">gfx.lineto(integer x, integer y, number aa)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y.
        </description>
        <parameters>
            integer x - x-position of the end of the line in pixels
            integer y - y-position of the end of the line in pixels
            optional number aa - <0.5, no antialias; >=0.5, antialias
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.loadimg</slug>
        <title>gfx.loadimg</title>
        <functioncall prog_lang="lua">integer retval = gfx.loadimg(integer image, string filename)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. 
        </description>
        <retvals>
            integer retval - the image-index in case of successful loading; -1 if loading failed
        </retvals>
        <parameters>
            integer image - the buffer-index(0 - 1023), in which to load the image
            string filename - the path+filename of the image to be loaded
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.measurechar</slug>
        <title>gfx.measurechar</title>
        <functioncall prog_lang="lua">integer width, integer height = gfx.measurechar(integer char)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Measures the drawing dimensions of a character with the current font (as set by [gfx.setfont](#lua_gfx.setfont)). Returns width and height of character.
        </description>
        <retvals>
            integer width - the width of the character in pixels
            integer height - the height of the character in pixels
        </retvals>
        <parameters>
            integer char - ASCII-Code of the character to measure
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.measurestr</slug>
        <title>gfx.measurestr</title>
        <functioncall prog_lang="lua">integer width, integer height = gfx.measurestr(string str)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Measures the drawing dimensions of a string with the current font (as set by [gfx.setfont](#lua_gfx.setfont)). Returns width and height of string.
        </description>
        <retvals>
            integer width - the width of the drawing dimensions of str in pixels
            integer height - the height of the drawing dimensions of str in pixels
        </retvals>
        <parameters>
            string str - the string, whose drawing dimensions you want to know
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.muladdrect</slug>
        <title>gfx.muladdrect</title>
        <functioncall prog_lang="lua">integer retval = gfx.muladdrect(integer x, integer y, integer w, integer h, number mul_r, number mul_g, number mul_b, optional number mul_a, optional number add_r, optional number add_g, optional number add_b, optional number add_a)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Multiplies each pixel within the given rectangle(x,y,w,h) by the mul_*-parameters and optionally adds add_*-parameters, and updates in-place. Useful for changing brightness/contrast, or other effects.
            
            The multiplied values usually affect only pixels, that are not black(0,0,0,0), while the added values affect all pixels.
        </description>
        <retvals>
            integer retval - unknown
        </retvals>
        <parameters>
            integer x - the x-position of the rectangle in pixels, in which you want to multiply/add colorvalues to
            integer y - the y-position of the rectangle in pixels, in which you want to multiply/add colorvalues to
            integer w - the width of the rectangle in pixels, in which you want to multiply/add colorvalues to
            integer h - the height of the rectangle in pixels, in which you want to multiply/add colorvalues to
            number mul_r - the red-value to multiply by within the rectangle; 0 to 1
            number mul_g - the green-value to multiply by within the rectangle; 0 to 1
            number mul_b - the blue-value to multiply by within the rectangle; 0 to 1
            optional number mul_a - the alpha-value to multiply by within the rectangle; 0 to 1
            optional number add_r - the red-value to add by within the rectangle; 0 to 1
            optional number add_g - the green-value to add by within the rectangle; 0 to 1
            optional number add_b - the blue-value to add by within the rectangle; 0 to 1
            optional number add_a - the alpha-value to add by within the rectangle; 0 to 1
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.printf</slug>
        <title>gfx.printf</title>
        <functioncall prog_lang="lua">gfx.printf("format"[, ...])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            "format" - 
            ... - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.quit</slug>
        <title>gfx.quit</title>
        <functioncall prog_lang="lua">integer retval = gfx.quit()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Closes the graphics window.
        </description>
        <retvals>
            integer retval - unknown, usually 0
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.rect</slug>
        <title>gfx.rect</title>
        <functioncall prog_lang="lua">integer retval = gfx.rect(integer x, integer y, integer w, integer h, optional integer filled)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Fills a rectangle at x,y, w,h pixels in dimension, filled by default. 
        </description>
        <retvals>
            integer retval - unknown; usually 0
        </retvals>
        <parameters>
            integer x - the x-position of the upper left corner
            integer y - the y-position of the upper left corner
            integer w - the width of the rectangle; must be positive
            integer h - the height of the rectangle; must be positive
            optional integer filled - 0, unfilled; 1, filled; omitted/nil, filled
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.rectto</slug>
        <title>gfx.rectto</title>
        <functioncall prog_lang="lua">integer x_coordinate = gfx.rectto(integer x, integer y)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y. 
        </description>
        <retvals>
            integer x_coordinate - the x-coordinate given as x-parameter; the purpose is unknown
        </retvals>
        <parameters>
            integer x - the x-coordinate, to which the rectangle shall be drawn to
            integer y - the y-coordinate, to which the rectangle shall be drawn to
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.roundrect</slug>
        <title>gfx.roundrect</title>
        <functioncall prog_lang="lua">integer retval = gfx.roundrect(integer x, integer y, integer w, integer h, number radius, optional integer antialias)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Draws a rectangle with rounded corners. 
        </description>
        <retvals>
            integer retval - unknown
        </retvals>
        <parameters>
            integer x - the x-coordinate of the upper-left corner of the rectangle in pixels
            integer y - the y-coordinate of the upper-left corner of the rectangle in pixels
            integer w - the width of the rectangle in pixels
            integer h - the height of the rectangle in pixels
            number radius - the radius of the rounded corners of the rectangle; 0, for a normal rectangle; 
            number antialias - 0, no antialias; 1 and higher, apply antialias to the rectangle
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.screentoclient</slug>
        <title>gfx.screentoclient</title>
        <functioncall prog_lang="lua">integer convx, integer convy = gfx.screentoclient(integer x, integer y)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Converts the screen coordinates x,y to client coordinates, returns those values.
        </description>
        <retvals>
            integer convx - the x-client-coordinate, as converted from the x-screen-coordinate, in pixels
            integer convy - the y-client-coordinate, as converted from the y-screen-coordinate, in pixels
        </retvals>
        <parameters>
            integer x - the x-screen-coordinate that shall be converted, in pixels
            integer y - the y-screen-coordinate that shall be converted, in pixels
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.set</slug>
        <title>gfx.set</title>
        <functioncall prog_lang="lua">integer retval = gfx.set(number r, optional number g, optional number b, optional number a, optional integer mode, optional integer dest)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Sets color, drawing mode and optionally the drawing-image-source-destination.
            If sets the corresponding gfx-variables.
            Sets gfx.r/gfx.g/gfx.b/gfx.a/gfx.mode sets gfx.dest if final parameter specified
        </description>
        <retvals>
            integer retval - unknown
        </retvals>
        <parameters>
            number r - the red-value; 0 to 1; if only parameter r is given, it's value will be used for g, b as well
            optional number g - the green-value; 0 to 1
            optional number b - the blue-value; 0 to 1
            optional number a - the alpha-value; 0 to 1
            optional integer mode - the drawing-mode; 
                                 -  Set to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). 
                                 -  Add 2.0 to disable source alpha for gfx.blit(). 
                                 -  Add 4.0 to disable filtering for gfx.blit(). 
            optional integer dest - the source-image/framebuffer to draw to; -1 to 1023; -1 for the currently displayed framebuffer.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.setcursor</slug>
        <title>gfx.setcursor</title>
        <functioncall prog_lang="lua">gfx.setcursor(resource_id,custom_cursor_name)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like "arrow" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            resource_id - 
            custom_cursor_name - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.setfont</slug>
        <title>gfx.setfont</title>
        <functioncall prog_lang="lua">gfx.setfont(integer idx,optional string "fontface", optional integer sz, optional integer flags)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Can select a font and optionally configure it. 
            
            After calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.
        </description>
        <parameters>
            integer idx - the font-id; idx=0 for default bitmapped font, no configuration is possible for this font.
                - idx=1..16 for a configurable font
            optional string "fontface" - the name of the font, like "arial"
            optional integer sz - the size of the font (8-100)
            optional integer flags - flags, how to render the text; values are repeating every 256 numbers
                  - a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. 
                  - These flags may or may not be supported depending on the font and OS. 
                  - 66 and 98, Bold (B), (b)
                  - 73 and 105, italic (I), (i)
                  - 79 and 111, white outline (O), (o)
                  - 82 and 114, reduced(halfbright) (R), (r)
                  - 83 and 115, sharpen (S), (s)
                  - 85 and 117, underline (U), (u)
                  - 86 and 118, inVerse (V), (v)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.setimgdim</slug>
        <title>gfx.setimgdim</title>
        <functioncall prog_lang="lua">integer retval = gfx.setimgdim(integer image, integer w, integer h)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Resize image referenced by index 0..1024-1, width and height must be 0-2048. The contents of the image will be undefined after the resize.
        </description>
        <retvals>
            integer retval - 0, if image couldn't be set(e.g. no such handle exists); 1, if setting new dimensions was successful
        </retvals>
        <parameters>
            integer image - the image-handle/framebuffer, whose dimensions you want to set
            integer w - the new width of the image-handle
            integer h - the new height of the image-handle
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.setpixel</slug>
        <title>gfx.setpixel</title>
        <functioncall prog_lang="lua">integer retval = gfx.setpixel(number r, number g, number b)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Writes a pixel of r,g,b to gfx.x,gfx.y.
        </description>
        <retvals>
            integer retval - 1, if writing that pixel was successful; -1, is not
        </retvals>
        <parameters>
            number r - the red-color-value of the pixel; 0-1
            number g - the green-color-value of the pixel; 0-1
            number b - the blue-color-value of the pixel; 0-1
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.showmenu</slug>
        <title>gfx.showmenu</title>
        <functioncall prog_lang="lua">integer selection = gfx.showmenu(string str)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Shows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. 
            Each field represents a menu item. Fields can start with special characters:#, grayed out; !, checked; &gt;, this menu item shows a submenu;&gt;, last item in the current submenu. 
            An empty field will appear as a separator in the menu. 
            
            Example: selection = gfx.showmenu("first item, followed by separator||!second item, checked|&gt;third item which spawns a submenu|#first item in submenu, grayed out|&gt;second and last item in submenu|fourth item in top menu")
            
            gfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.
        </description>
        <retvals>
            integer selection - the menu-entry the user selected, with 1 for the first, 2 for the second, etc; 0, nothing was selected
        </retvals>
        <parameters>
            string str - a string with the menu-entries; separate the entrynames with a |
                       -   Each menu-entry can start with special characters that influence the appearance of that entry: 
                       -   #, item is grayed out; !, item is checked; &gt;, this menu item shows a submenu;&lt;, last item in the current submenu. 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.transformblit</slug>
        <title>gfx.transformblit</title>
        <functioncall prog_lang="lua">gfx.transformblit(integer srcimg, integer destx, integer desty, integer destw, integer desth, integer div_w, integer div_h, table table)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a reaper.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.
            
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            integer srcimg - the image-index (1 to 1024) that you want to blit into the screenbuffer -1
            integer destx - x position of the blit picture
            integer desty - y position of the blit picture
            integer destw - width of the blit picture
            integer desth - height of the blit picture
            integer div_w - unknown, 2 to 64; probably related to parameter table
            integer div_h - unknown, 2 to 64; probably related to parameter table
            table table - a table of the texture coordinates, with each entry being set to a pair of value, eg: 1, 0. Will be read from left to right and from top to bottom.
                        - table[1]=1,2
                        - table[2]=2,3
                        - table[3]=3,1
                        - How these values work needs more research...
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.triangle</slug>
        <title>gfx.triangle</title>
        <functioncall prog_lang="lua">gfx.triangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, [optional integer x4, optional integer y4, ...)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Draws a filled triangle, or any convex polygon. 
        </description>
        <parameters>
            integer x1 - the x-position of the first point of the polygon
            integer y1 - the y-position of the first point of the polygon
            integer x2 - the x-position of the second point of the polygon
            integer y2 - the y-position of the second point of the polygon
            integer x3 - the x-position of the third point of the polygon
            integer y3 - the y-position of the third point of the polygon
            optional integer x4 - the x-position of the fourth point of the polygon
            optional integer y4 - the y-position of the fourth point of the polygon
              ...               - ...
              ...               - ...
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_gfx.update</slug>
        <title>gfx.update</title>
        <functioncall prog_lang="lua">gfx.update()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Updates the graphics display, if opened
        </description>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_new_array</slug>
        <title>new_array</title>
        <functioncall prog_lang="lua">ReaperArray reaper_array = reaper.new_array([table|array][size])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Creates a new reaper.array object of maximum and initial size size, if specified, or from the size/values of a table/array. Both size and table/array can be specified, the size parameter will override the table/array size.
        </description>
        <retvals>
            reaper_array - 
        </retvals>
        <parameters>
            table|array - 
            size - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_runloop</slug>
        <title>runloop</title>
        <functioncall prog_lang="lua">boolean retval = reaper.runloop(function function)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
        </description>
        <retvals>
            int retval - true, if succeded
        </retvals>
        <parameters>
            function function - the function to be called
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.clear</slug>
        <title>{reaper.array}.clear</title>
        <functioncall prog_lang="lua">boolean retval = {reaper.array}.clear([value, offset, size])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Sets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set.
        </description>
        <retvals>
            retval - 
        </retvals>
        <parameters>
            value - 
            offset - 
            size - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.convolve</slug>
        <title>{reaper.array}.convolve</title>
        <functioncall prog_lang="lua">integer retval = {reaper.array}.convolve([src, srcoffs, size, destoffs])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Convolves complex value pairs from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)
        </description>
        <retvals>
            retval - 
        </retvals>
        <parameters>
            src - 
            scroffs - 
            size - 
            destoffs - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.copy</slug>
        <title>{reaper.array}.copy</title>
        <functioncall prog_lang="lua">integer retval = {reaper.array}.copy([src, srcoffs, size, destoffs])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs.
        </description>
        <retvals>
            retval - 
        </retvals>
        <parameters>
            src - 
            srcoffs - 
            size - 
            destoffs - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.fft</slug>
        <title>{reaper.array}.fft</title>
        <functioncall prog_lang="lua">{reaper.array}.fft(size[, permute, offset])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Performs a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            size - 
            premute - 
            offset - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.fft_real</slug>
        <title>{reaper.array}.fft_real</title>
        <functioncall prog_lang="lua">{reaper.array}.fft_real(size[, permute, offset])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Performs a forward real-&gt;complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            size - 
            premute - 
            offset - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.get_alloc</slug>
        <title>{reaper.array}.get_alloc</title>
        <functioncall prog_lang="lua">integer size = {reaper.array}.get_alloc()</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Returns the maximum (allocated) size of the array.
        </description>
        <retvals>
            size - 
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.ifft</slug>
        <title>{reaper.array}.ifft</title>
        <functioncall prog_lang="lua">{reaper.array}.ifft(size[, permute, offset])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Performs a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            size - 
            permute - 
            offset - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.ifft_real</slug>
        <title>{reaper.array}.ifft_real</title>
        <functioncall prog_lang="lua">{reaper.array}.ifft_real(size[, permute, offset])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Performs a backwards complex-&gt;real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            size - 
            permute - 
            offset - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.multiply</slug>
        <title>{reaper.array}.multiply</title>
        <functioncall prog_lang="lua">{reaper.array}.multiply([src, srcoffs, size, destoffs])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs.
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            src - 
            srcoffs - 
            size - 
            destoff - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.resize</slug>
        <title>{reaper.array}.resize</title>
        <functioncall prog_lang="lua">{reaper.array}.resize(size)</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Resizes an array object to size. size must be [0..max_size].
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            size - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="lua">
        <slug>lua_{reaper.array}.table</slug>
        <title>{reaper.array}.table</title>
        <functioncall prog_lang="lua">{reaper.array}.table([offset, size])</functioncall>
        <requires>
            Reaper=5.62
            Lua=5.3
        </requires>
        <description indent="default">
            Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used.
        </description>
        <retvals>

        </retvals>
        <parameters>
            offset - 
            size - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Lua-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="python">
        <slug>python_atexit</slug>
        <title>atexit</title>
        <functioncall prog_lang="python">RPR_atexit(String code)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            String code - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Python-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="python">
        <slug>python_defer</slug>
        <title>defer</title>
        <functioncall prog_lang="python">RPR_defer(String code)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().
            Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.    
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            code - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Python-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="python">
        <slug>python_runloop</slug>
        <title>runloop</title>
        <functioncall prog_lang="python">RPR_runloop(String code)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().
            Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
        </description>
        <retvals>
            
        </retvals>
        <parameters>
            code - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document></source_document>
        <chapter_context>
            Additional Python-Functions
        </chapter_context>
        <tags></tags>
    </US_DocBloc>

    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>__mergesort</slug>
        <title>__mergesort</title>
        <functioncall prog_lang="cpp">void (*__mergesort)(void* base, size_t nmemb, size_t size, int (*cmpfunc)(const void*,const void*), void* tmpspace)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            is a stable sorting function with an API similar to qsort().
            HOWEVER, it requires some temporary space, equal to the size of the data being sorted, so you can pass it as the last parameter,
            or NULL and it will allocate and free space internally. 
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            base - 
            nmemb - 
            size - 
            *cmpfunc - 
            tmpspace - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, sort, qsort</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>AddCustomizableMenu</slug>
        <title>AddCustomizableMenu</title>
        <functioncall prog_lang="cpp">bool (*AddCustomizableMenu)(const char* menuidstr, const char* menuname, const char* kbdsecname, bool addtomainmenu)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Adds customizable menu.
        </description>
        <retvals>
            bool -
        </retvals>
        <parameters>
            menuidstr - is some unique identifying string
            menuname - is for main menus only (displayed in a menu bar somewhere), NULL otherwise 
            kbdsecname - is the name of the KbdSectionInfo registered by this plugin, or NULL for the main actions section
            addtomainmenu - true, add to main menu; false, don't add to main menu
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, add, customizable, menu</tags>
    </US_DocBloc>
    
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>AddExtensionsMainMenu</slug>
        <title>AddExtensionsMainMenu</title>
        <functioncall prog_lang="cpp">bool (*AddExtensionsMainMenu)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Add an Extensions main menu, which the extension can populate/modify with [plugin_register("hookcustommenu")](#plugin_register)
        </description>
        <retvals>
            bool -
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, extension, menu, add</tags>
    </US_DocBloc>    


    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>plugin_register</slug>
        <title>plugin_register</title>
        <functioncall prog_lang="cpp">int (*plugin_register)(const char* name, void* infostruct)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
             like rec->Register
        
             if you have a function called myfunction(..) that you want to expose to other extensions or plug-ins, use register("API_myfunction",funcaddress), and "-API_myfunction" to remove.          Other extensions then use GetFunc("myfunction") to get the function pointer.
             
             REAPER will also export the function address to ReaScript, so your extension could supply a Python module that provides a wrapper called RPR_myfunction(..). 
             register("APIdef_myfunction",defstring) will include your function declaration and help in the auto-generated REAPER API header and ReaScript documentation.
             
             defstring is four null-separated fields: return type, argument types, argument names, and help.
             
                Example: double myfunction(char* str, int flag) would have defstring="double\0char*,int\0str,flag\0help text for myfunction"
             
             another thing you can register is "hookcommand", which you pass a callback:
             
                NON_API: bool runCommand(int command, int flag);
                         register("hookcommand",runCommand);
             
             which returns TRUE to eat (process) the command.
             
             flag is usually 0 but can sometimes have useful info depending on the message.
             
             note: it's OK to call Main_OnCommand() within your runCommand, however you MUST check for recursion if doing so!
             in fact, any use of this hook should benefit from a simple reentrancy test...
             
             to get notified when an action of the main section is performed, you can register "hookpostcommand", which you pass a callback:

                NON_API: void postCommand(int command, int flag);
                         register("hookpostcommand",postCommand);
             
             you can also register "hookcommand2", which you pass a callback:
             
                NON_API: bool onAction(KbdSectionInfo *sec, int command, int val, int valhw, int relmode, HWND hwnd);
                         register("hookcommand2",onAction);
             
             which returns TRUE to eat (process) the command.
             
             val/valhw are used for actions learned with MIDI/OSC.
             val = \[0..127\] and valhw = -1 for MIDI CC, 
             valhw >=0 for MIDI pitch or OSC with value = (valhw|val<<7)/16383.0, 
             relmode absolute(0) or 1/2/3 for relative adjust modes
             
             you can also register command IDs for actions, register with "command_id", parameter is a unique string with only A-Z, 0-9, returns command ID (or 0 if not supported/out of actions)
             
             register("command_id_lookup", unique_string) will look up the integer ID of the named action without registering the string if it doesn't already exist.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            name - 
            infostruct - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, plugin, register, command, actioncommandid</tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>Audio_RegHardwareHook</slug>
        <title>Audio_RegHardwareHook</title>
        <functioncall prog_lang="cpp">int (*Audio_RegHardwareHook)(bool isAdd, audio_hook_register_t* reg)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Registers Audio Hardware-Hook.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            isAdd - 
            reg - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, register, hardware, hook</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CalculatePeaks</slug>
        <title>CalculatePeaks</title>
        <functioncall prog_lang="cpp">int (*CalculatePeaks)(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Calculates Peaks.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            srcBlock - 
            pksBlock - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, calculate, peaks</tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CalculatePeaksFloatSrcPtr</slug>
        <title>CalculatePeaksFloatSrcPtr</title>
        <functioncall prog_lang="cpp">int (*CalculatePeaksFloatSrcPtr)(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Calculates Peaks.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            srcBlock - 
            pksBlock - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, calculate, peaks</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CountActionShortcuts</slug>
        <title>CountActionShortcuts</title>
        <functioncall prog_lang="cpp">int (*CountActionShortcuts)(KbdSectionInfo* section, int cmdID)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns the number of shortcuts that exist for the given command ID. 
            See [GetActionShortcutDesc](#GetActionShortcutDesc), [DeleteActionShortcut](#DeleteActionShortcut), [DoActionShortcutDialog](#DoActionShortcutDialog).
            
            Use [NamedCommandLookup](#NamedCommandLookup) if you want to have the right commandID of an action, that is registered with an ActionCommandID-string.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            section - the section, in which the action lies
                    -0, Main
                    -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
                    -32060, MIDI Editor
                    -32061, MIDI Event List Editor
                    -32062, MIDI Inline Editor
                    -32063, Media Explorer
            cmdID - the commandID of the action, whose count of shortcuts you want to know.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, count, actions, shortcuts</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CreateLocalOscHandler</slug>
        <title>CreateLocalOscHandler</title>
        <functioncall prog_lang="cpp">void* (*CreateLocalOscHandler)(void* obj, void* callback)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            callback is a function pointer: void (*callback)(void* obj, const char* msg, int msglen), which handles OSC messages sent from REAPER. The function return is a local osc handler. See [SendLocalOscMessage](#SendLocalOscMessage), [DestroyOscHandler](#DestroyOscHandler).
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            obj - 
            callback - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, create, osc, handler, local</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CreateMIDIInput</slug>
        <title>CreateMIDIInput</title>
        <functioncall prog_lang="cpp">midi_Input* (*CreateMIDIInput)(int dev)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc.
        </description>
        <retvals>
            midi_Input* - 
        </retvals>
        <parameters>
            dev - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, create, midi, input</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CreateMIDIOutput</slug>
        <title>CreateMIDIOutput</title>
        <functioncall prog_lang="cpp">midi_Output* (*CreateMIDIOutput)(int dev, bool streamMode, int* msoffset100)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc. 
        </description>
        <retvals>
            midi_Output* -
        </retvals>
        <parameters>
            dev - 
            streamMode - true, msoffset points to a persistent variable(see msoffset100 for more details)
            int* msoffset100 - points to a persistent variable that can change and reflects added delay to output in 100ths of a millisecond. 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, midi, output, create</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>CSurf_OnOscControlMessage</slug>
        <title>CSurf_OnOscControlMessage</title>
        <functioncall prog_lang="cpp">void (*CSurf_OnOscControlMessage)(const char* msg, const float* arg)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            On OSC Control Message.
        </description>
        <parameters>
            msg -  
            arg - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, control, surface, osc, message</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>DeleteActionShortcut</slug>
        <title>DeleteActionShortcut</title>
        <functioncall prog_lang="cpp">bool (*DeleteActionShortcut)(KbdSectionInfo* section, int cmdID, int shortcutidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Delete the specific shortcut for the given command ID.
            See [CountActionShortcuts](#CountActionShortcuts), [GetActionShortcutDesc](#GetActionShortcutDesc), [DoActionShortcutDialog](#DoActionShortcutDialog).
        </description>
        <retvals>
            bool -
        </retvals>
        <parameters>
            section - the section, to which this action belongs to
                        -0, Main
                    -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
                    -32060, MIDI Editor
                    -32061, MIDI Event List Editor
                    -32062, MIDI Inline Editor
                    -32063, Media Explorer
            cmdID - the commandID for the shortcut to be deleted
            shortcutidx - the shortcut to be deleted
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, shortcut, actions, delete</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>DestroyLocalOscHandler</slug>
        <title>DestroyLocalOscHandler</title>
        <functioncall prog_lang="cpp">void (*DestroyLocalOscHandler)(void* local_osc_handler)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            See [CreateLocalOscHandler](#CreateLocalOscHandler), [SendLocalOscMessage](#SendLocalOscMessage).
        </description>
        <parameters>
            local_osc_handler - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, osc, destroy, local, handler</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>DoActionShortcutDialog</slug>
        <title>DoActionShortcutDialog</title>
        <functioncall prog_lang="cpp">bool (*DoActionShortcutDialog)(HWND hwnd, KbdSectionInfo* section, int cmdID, int shortcutidx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Open the action shortcut dialog to edit or add a shortcut for the given command ID. 
            If (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.
            See [CountActionShortcuts](#CountActionShortcuts), [GetActionShortcutDesc](#GetActionShortcutDesc), [DeleteActionShortcut](#DeleteActionShortcut). 
        </description>
        <retvals>
            bool -
        </retvals>
        <parameters>
            section - 
            cmdID - 
            shortcutidx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, actions, commandid, shortcut, add, dialog</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>DuplicateCustomizableMenu</slug>
        <title>DuplicateCustomizableMenu</title>
        <functioncall prog_lang="cpp">bool (*DuplicateCustomizableMenu)(void* srcmenu, void* destmenu)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Populate destmenu with all the entries and submenus found in srcmenu.
        </description>
        <retvals>
            bool -
        </retvals>
        <parameters>
            srcmenu - 
            destmenu - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, menu, duplicate, customizeable</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>FreeHeapPtr</slug>
        <title>FreeHeapPtr</title>
        <functioncall prog_lang="cpp">void (*FreeHeapPtr)(void* ptr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            free heap memory returned from a Reaper API function
        </description>
        <parameters>
            ptr - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, pointer, free, heap</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>get_config_var</slug>
        <title>get_config_var</title>
        <functioncall prog_lang="cpp">void* (*get_config_var)(const char* name, int* szOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            gets config var
            
            see [Reaper_Config_Variables.html](Reaper_Config_Variables.html) for valid config-vars
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            name - 
            szOut - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, config, var, get</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>get_midi_config_var</slug>
        <title>get_midi_config_var</title>
        <functioncall prog_lang="cpp">void* (*get_midi_config_var)(const char* name, int* szOut);</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Deprecated.
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            name - 
            szOut - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, midi, config, var</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetActionShortcutDesc</slug>
        <title>GetActionShortcutDesc</title>
        <functioncall prog_lang="cpp">bool (*GetActionShortcutDesc)(KbdSectionInfo* section, int cmdID, int shortcutidx, char* desc, int desclen)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the text description of a specific shortcut for the given command ID.
            See [CountActionShortcuts](#CountActionShortcuts),[DeleteActionShortcut](#DeleteActionShortcut),[DoActionShortcutDialog](#DoActionShortcutDialog).
        </description>
        <retvals>
            bool -
        </retvals>
        <parameters>
            section - the section of the action
                        -0, Main
                    -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
                    -32060, MIDI Editor
                    -32061, MIDI Event List Editor
                    -32062, MIDI Inline Editor
                    -32063, Media Explorer
            cmdID - the commandID of the action, whose shortcut-description you want.
            shortcutidx - 
            desc - 
            descclean -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, shortcut, description, section, command, commandid</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetColorTheme</slug>
        <title>GetColorTheme</title>
        <functioncall prog_lang="cpp">INT_PTR (*GetColorTheme)(int idx, int defval)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Deprecated, see [GetColorThemeStruct](#GetColorThemeStruct).
        </description>
        <retvals>
            INT_PTR -
        </retvals>
        <parameters>
            idx - 
            defval - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, color, theme, get</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetColorThemeStruct</slug>
        <title>GetColorThemeStruct</title>
        <functioncall prog_lang="cpp">void* (*GetColorThemeStruct)(int* szOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            returns the whole color theme (icontheme.h) and the size
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            szOut - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, color, theme, struct</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetContextMenu</slug>
        <title>GetContextMenu</title>
        <functioncall prog_lang="cpp">HMENU (*GetContextMenu)(int idx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            gets context menus. submenu 0:trackctl, 1:mediaitems, 2:ruler, 3:empty track area 
        </description>
        <retvals>
            HMENU -
        </retvals>
        <parameters>
            idx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, context, menu</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetIconThemePointer</slug>
        <title>GetIconThemePointer</title>
        <functioncall prog_lang="cpp">void* (*GetIconThemePointer)(const char* name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            returns a named icontheme entry
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            name - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, icon, theme, pointer</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetIconThemeStruct</slug>
        <title>GetIconThemeStruct</title>
        <functioncall prog_lang="cpp">void* (*GetIconThemeStruct)(int* szOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            returns a pointer to the icon theme (icontheme.h) and the size of that struct.
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            szOut - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, icon, theme, struct</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetPeaksBitmap</slug>
        <title>GetPeaksBitmap</title>
        <functioncall prog_lang="cpp">void* (*GetPeaksBitmap)(PCM_source_peaktransfer_t* pks, double maxamp, int w, int h, LICE_IBitmap* bmp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            See note in reaper_plugin.h about PCM_source_peaktransfer_t::samplerate
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            pks - 
            maxamp - 
            w - 
            h - 
            bmp -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, peaks, bitmap</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetPreferredDiskReadMode</slug>
        <title>GetPreferredDiskReadMode</title>
        <functioncall prog_lang="cpp">void (*GetPreferredDiskReadMode)(int* mode, int* nb, int* bs)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Gets user configured preferred disk read mode. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            mode - 
            nb - 
            bs -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, preferred, diskread, mode</tags>
    </US_DocBloc>
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetPreferredDiskReadModePeak</slug>
        <title>GetPreferredDiskReadModePeak</title>
        <functioncall prog_lang="cpp">void (*GetPreferredDiskReadModePeak)(int* mode, int* nb, int* bs)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Gets user configured preferred disk read mode for use when building peaks. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            mode - 
            nb - 
            bs -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, preferred, diskread, mode, peak</tags>
    </US_DocBloc>

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetPreferredDiskWriteMode</slug>
        <title>GetPreferredDiskWriteMode</title>
        <functioncall prog_lang="cpp">void (*GetPreferredDiskWriteMode)(int* mode, int* nb, int* bs)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Gets user configured preferred disk write mode. nb will receive two values, the initial and maximum write buffer counts. mode/nb/bs are all parameters that should be passed to WDL_FileWrite, see for more information.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            mode - 
            nb - 
            bs -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, preferred, diskwrite, mode</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetMediaItemTakeInfo</slug>
        <title>GetSetMediaItemTakeInfo</title>
        <functioncall prog_lang="cpp">void* (*GetSetMediaItemTakeInfo)(MediaItem_Take* tk, const char* parmname, void* setNewValue)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Gets/Sets Media Item Take-parameters. Works like GetMediaItemTakeInfo_Value and SetMediaItemTakeInfo_Value but has more parameters.
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            tk - a MediaItem_Take-object, that shall be altered
            parmname - the name of the parameter to be changed
                         -P_TRACK : pointer to MediaTrack (read-only)
                         -P_ITEM : pointer to MediaItem (read-only)
                         -P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.
                         -GUID : GUID * : 16-byte GUID, can query or update
                         -P_NAME : char * to take name
                         -D_STARTOFFS : double *, start offset in take of item
                         -D_VOL : double *, take volume
                         -D_PAN : double *, take pan
                         -D_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)
                         -D_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)
                         -D_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)
                         -B_PPITCH, bool *, preserve pitch when changing rate
                         -I_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)
                         -I_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter
                         -I_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).
                         -IP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)
            setNewValue - the new value to be set to the parameter. See the description of parmname above for more details.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, set, mediaitem, take, info</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetMediaTrackInfo</slug>
        <title>GetSetMediaTrackInfo</title>
        <functioncall prog_lang="cpp">void* (*GetSetMediaTrackInfo)(MediaTrack* tr, const char* parmname, void* setNewValue)</functioncall>
        <requires>
            Reaper=5.941
        </requires>
        <description indent="default">
            Gets/Sets MediaTrack-parameters. Works like GetMediaTrackInfo_Value and SetMediaTrackInfo_Value but has more parameters.
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            tr - the Mediatrack-object, that shall be modified
            parmname - the parameter to be gotten or set
                 -P_PARTRACK : MediaTrack * : parent track (read-only)
                 -P_PROJECT : ReaProject * : parent project (read-only)
                 -GUID : GUID * : 16-byte GUID, can query or update (do not use on master though)
                 -P_NAME : char * : track name (on master returns NULL)
                 -P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)
                 -P_MCP_LAYOUT : const char * : layout name
                 -P_TCP_LAYOUT : const char * : layout name
                 -
                 -B_MUTE : bool * : mute flag
                 -B_PHASE : bool * : invert track phase
                 -IP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)
                 -I_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place
                 -I_FXEN : int * : 0=fx bypassed, nonzero = fx active
                 -I_RECARM : int * : 0=not record armed, 1=record armed
                 -I_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)
                 -I_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace
                 -I_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))
                 -I_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)
                 -I_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
                 -I_NCHAN : int * : number of track channels, must be 2-64, even
                 -I_SELECTED : int * : track selected? 0 or 1
                 -I_WNDH : int * : current TCP window height (Read-only)
                 -I_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc
                 -I_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children
                 -I_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))
                 -I_PERFFLAGS : int * : track perf flags (&1=no media buffering, &2=no anticipative FX)
                 -I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).
                 -I_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels
                 -D_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)
                 -D_PAN : double * : trim pan of track (-1..1)
                 -D_WIDTH : double * : width of track (-1..1)
                 -D_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6
                 -D_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6
                 -I_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)
                 -D_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc
                 -P_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc
                 -B_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master
                 -B_SHOWINTCP : bool * : show track panel in tcp -- do not use on master
                 -B_MAINSEND : bool * : track sends audio to parent
                 -C_MAINSEND_OFFS : char * : track send to parent channel offset
                 -B_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)
                 -C_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly
                 -F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)
                 -F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)
            setNewValue - the new value. See the description of parmname above for more details
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, set, track, parameters, info</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetObjectState</slug>
        <title>GetSetObjectState</title>
        <functioncall prog_lang="cpp">char* (*GetSetObjectState)(void* obj, const char* str)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            get or set the state of a {track,item,envelope} as an RPPXML chunk
            str="" to get the chunk string returned (must call FreeHeapPtr when done)
            supply str to set the state (returns zero)
        </description>
        <retvals>
            char* -
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1" indent="default">
            obj - the object, to be modified. Can be MediaItem, TrackEnvelope, MediaTrack.
            str - supply str to set the state (returns zero); str="" to get the chunk string returned (must call [FreeHeapPtr](#FreeHeapPtr) when done)
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, set, object, state, rppxml, statechunk</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetObjectState2</slug>
        <title>GetSetObjectState2</title>
        <functioncall prog_lang="cpp">char* (*GetSetObjectState2)(void* obj, const char* str, bool isundo)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            get or set the state of a {track,item,envelope} as an RPPXML chunk         
        </description>
        <retvals>
            char* -
        </retvals>
        <parameters>
            obj - the object, to be modified. Can be MediaItem, TrackEnvelope, MediaTrack.
            str - supply str to set the state (returns zero); str="" to get the chunk string returned (must call FreeHeapPtr when done)
            isundo - set, if the state will be used for undo purposes (which may allow REAPER to get the state more efficiently
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, set, object, state, rppxml, statechunk</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetTrackMIDISupportFile</slug>
        <title>GetSetTrackMIDISupportFile</title>
        <functioncall prog_lang="cpp">const char* (*GetSetTrackMIDISupportFile)(ReaProject* proj, MediaTrack* track, int which, const char* filename)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Get or set the filename for storage of various track MIDI characteristics. 

            If fn != NULL, a new track MIDI storage file will be set; otherwise the existing track MIDI storage file will be returned.
        </description>
        <retvals>
            char* -
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            track - the MediaTrack-object of the track to be treated
            which - thich MIDI-file to use
                        -0, MIDI colormap image file, 
                        -1, MIDI bank/program select file, 
                        -2, MIDI text string file, 
                        -3, MIDI note mapping file. 
            filename - If fn != NULL, a new track MIDI storage file will be set; otherwise the existing track MIDI storage file will be returned.
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, set, midi, support, file</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetTrackSendInfo</slug>
        <title>GetSetTrackSendInfo</title>
        <functioncall prog_lang="cpp">void* (*GetSetTrackSendInfo)(MediaTrack* tr, int category, int sendidx, const char* parmname, void* setNewValue)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Get or set send/receive/hardware output attributes.
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            tr - the MediaTrack object for the track to be gotten or set
            category - <0 for receives, 0=sends, >0 for hardware outputs 
            sendidx - 0..n (to enumerate, iterate over sendidx until it returns NULL) 
            parmname - the parameter to get/set
                 -P_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs
                 -P_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs
                 -P_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc
                 -B_MUTE : returns bool *
                 -B_PHASE : returns bool *, true to flip phase
                 -B_MONO : returns bool *
                 -D_VOL : returns double *, 1.0 = +0dB etc
                 -D_PAN : returns double *, -1..+1
                 -D_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
                 -I_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
                 -I_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
                 -I_SRCCHAN : returns int *, index,&1024=mono, -1 for none
                 -I_DSTCHAN : returns int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
                 -I_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan
            setNewValue - the new value to be set
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, set, send, receive, hardware, output</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetToggleCommandStateThroughHooks</slug>
        <title>GetToggleCommandStateThroughHooks</title>
        <functioncall prog_lang="cpp">int (*GetToggleCommandStateThroughHooks)(KbdSectionInfo* section, int command_id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns the state of an action via extension plugins' hooks.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            section - the section, in which the action appears in
            -0, Main
            -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
            -32060, MIDI Editor
            -32061, MIDI Event List Editor
            -32062, MIDI Inline Editor
            -32063, Media Explorer
            command_id - the command-id of the action, whose state you want
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, set, toggle, comand, state, hooks</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>HiresPeaksFromSource</slug>
        <title>HiresPeaksFromSource</title>
        <functioncall prog_lang="cpp">void (*HiresPeaksFromSource)(PCM_source* src, PCM_source_peaktransfer_t* block)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Hires peaks from source.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            src - 
            block - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, hires, peaks, source</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>IsInRealTimeAudio</slug>
        <title>IsInRealTimeAudio</title>
        <functioncall prog_lang="cpp">int (*IsInRealTimeAudio)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Are we in a realtime audio thread (between OnAudioBuffer calls,not in some worker/anticipative FX thread)? threadsafe
        </description>
        <retvals>
            int -
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, realtime, audio, thread</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>IsItemTakeActiveForPlayback</slug>
        <title>IsItemTakeActiveForPlayback</title>
        <functioncall prog_lang="cpp">bool (*IsItemTakeActiveForPlayback)(MediaItem* item, MediaItem_Take* take)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            get whether a take will be played (active take, unmuted, etc)
        </description>
        <retvals>
            bool - 
        </retvals>
        <parameters>
            item - MediaItem in which the take is to be checked
            take - the MediaItem_Take to be checked
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, mediaitem, take, check, played, active, unmute</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>IsREAPER</slug>
        <title>IsREAPER</title>
        <functioncall prog_lang="cpp">bool (*IsREAPER)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Returns true if dealing with REAPER, returns false for ReaMote, etc
        </description>
        <retvals>
            bool -
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, reaper, reamote, check</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_enumerateActions</slug>
        <title>kbd_enumerateActions</title>
        <functioncall prog_lang="cpp">int (*kbd_enumerateActions)(KbdSectionInfo* section, int idx, const char** nameOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Enumerates actions.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            section - the section, in which the action exists
            -0, Main
            -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
            -32060, MIDI Editor
            -32061, MIDI Event List Editor
            -32062, MIDI Inline Editor
            -32063, Media Explorer
            idx - 
            nameOut - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, actions, section, enumerate</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_formatKeyName</slug>
        <title>kbd_formatKeyName</title>
        <functioncall prog_lang="cpp">void (*kbd_formatKeyName)(ACCEL* ac, char* s)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Format keyname
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            ac - 
            s - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, keyname, format</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_getCommandName</slug>
        <title>kbd_getCommandName</title>
        <functioncall prog_lang="cpp">void (*kbd_getCommandName)(int cmd, char* s, KbdSectionInfo* section)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Get the string of a key assigned to command "cmd" in a section.
            This function is poorly named as it doesn't return the command's name, see [kbd_getTextFromCmd](#kbd_getTextFromCmd).
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            cmd - commandid of the action
            s - 
            section - the section, in which the action exists
            -0, Main
            -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
            -32060, MIDI Editor
            -32061, MIDI Event List Editor
            -32062, MIDI Inline Editor
            -32063, Media Explorer
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, key, assigned, command</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_getTextFromCmd</slug>
        <title>kbd_getTextFromCmd</title>
        <functioncall prog_lang="cpp">const char* (*kbd_getTextFromCmd)(DWORD cmd, KbdSectionInfo* section)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Get text from Command
        </description>
        <retvals>
            const char* -
        </retvals>
        <parameters>
            cmd - 
            section - the section, in which the action exists
            -0, Main
            -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
            -32060, MIDI Editor
            -32061, MIDI Event List Editor
            -32062, MIDI Inline Editor
            -32063, Media Explorer
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, text, command</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_OnMidiEvent</slug>
        <title>kbd_OnMidiEvent</title>
        <functioncall prog_lang="cpp">void (*kbd_OnMidiEvent)(MIDI_event_t* evt, int dev_index)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            On Midi Event. Can be called from anywhere (threadsafe)
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            evt - the MIDI-event
            dev_index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, on, midi, event</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_OnMidiList</slug>
        <title>kbd_OnMidiList</title>
        <functioncall prog_lang="cpp">void (*kbd_OnMidiList)(MIDI_eventlist* list, int dev_index)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            On MIDI List. Can be called from anywhere (threadsafe)
        </description>
        <retvals>
            void - 
        </retvals>
        <parameters>
            list - 
            dev_index - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, on, midi, list</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_ProcessActionsMenu</slug>
        <title>kbd_ProcessActionsMenu</title>
        <functioncall prog_lang="cpp">void (*kbd_ProcessActionsMenu)(HMENU menu, KbdSectionInfo* section)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Process actions-menu.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            menu - 
            section - the section, in which the action exists
            -0, Main
            -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
            -32060, MIDI Editor
            -32061, MIDI Event List Editor
            -32062, MIDI Inline Editor
            -32063, Media Explorer
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, process, actions, menu</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_processMidiEventActionEx</slug>
        <title>kbd_processMidiEventActionEx</title>
        <functioncall prog_lang="cpp">bool (*kbd_processMidiEventActionEx)(MIDI_event_t* evt, KbdSectionInfo* section, HWND hwndCtx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Process Midi Event Action
        </description>
        <retvals>
            bool -
        </retvals>
        <parameters>
            evt - 
            section - the section, in which the action exists
            -0, Main
            -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
            -32060, MIDI Editor
            -32061, MIDI Event List Editor
            -32062, MIDI Inline Editor
            -32063, Media Explorer
            hwndCtx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, process, midi, event, action, ex</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_reprocessMenu</slug>
        <title>kbd_reprocessMenu</title>
        <functioncall prog_lang="cpp">void (*kbd_reprocessMenu)(HMENU menu, KbdSectionInfo* section)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Reprocess a menu recursively, setting key assignments to what their command IDs are mapped to.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            menu - 
            section - the section, in which the action exists
            -0, Main
            -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
            -32060, MIDI Editor
            -32061, MIDI Event List Editor
            -32062, MIDI Inline Editor
            -32063, Media Explorer
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, reprocess, menu</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_RunCommandThroughHooks</slug>
        <title>kbd_RunCommandThroughHooks</title>
        <functioncall prog_lang="cpp">bool (*kbd_RunCommandThroughHooks)(KbdSectionInfo* section, int* actionCommandID, int* val, int* valhw, int* relmode, HWND hwnd)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Run command through hooks. actioncommandID may get modified.
        </description>
        <retvals>
            bool -
        </retvals>
        <parameters>
            section - the section, in which the action exists
            -0, Main
            -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
            -32060, MIDI Editor
            -32061, MIDI Event List Editor
            -32062, MIDI Inline Editor
            -32063, Media Explorer
            actionCommandID - the commandid-number of the action you want to run.
            val - 
            valhw - 
            relmode - 
            hwnd - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, run, command, hooks, action, commandid, section</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_translateAccelerator</slug>
        <title>kbd_translateAccelerator</title>
        <functioncall prog_lang="cpp">int (*kbd_translateAccelerator)(HWND hwnd, MSG* msg, KbdSectionInfo* section)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Pass in the HWND to receive commands, a MSG of a key command,  and a valid section,
            and kbd_translateAccelerator() will process it looking for any keys bound to it, and send the messages off.
            Returns 1 if processed, 0 if no key binding found.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            hwnd - 
            msg - 
            section - the section, in which the action exists
            -0, Main
            -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
            -32060, MIDI Editor
            -32061, MIDI Event List Editor
            -32062, MIDI Inline Editor
            -32063, Media Explorer
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, translate, accelerator, message, key, section, keybinding</tags>
    </US_DocBloc>    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>kbd_translateMouse</slug>
        <title>kbd_translateMouse</title>
        <functioncall prog_lang="cpp">bool (*kbd_translateMouse)(void* winmsg, unsigned char* midimsg)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Translate mouse.
        </description>
        <retvals>
            bool -
        </retvals>
        <parameters>
            winmsg - 
            midimsg - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, translate, mouse, midi, message, windows</tags>
    </US_DocBloc>    
    
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__Destroy</slug>
        <title>LICE__Destroy</title>
        <functioncall prog_lang="cpp">void (*LICE__Destroy)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE destroy.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            bm - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, destroy</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__DestroyFont</slug>
        <title>LICE__DestroyFont</title>
        <functioncall prog_lang="cpp">void (*LICE__DestroyFont)(LICE_IFont* font);</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE destroy-font.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            font - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, font, destroy</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__DrawText</slug>
        <title>LICE__DrawText</title>
        <functioncall prog_lang="cpp">int (*LICE__DrawText)(LICE_IFont* font, LICE_IBitmap* bm, const char* str, int strcnt, RECT* rect, UINT dtFlags)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE draw text.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            font - 
            bm - 
            str - 
            strcnt - 
            rect - 
            dtFlags -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, draw, text</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__GetBits</slug>
        <title>LICE__GetBits</title>
        <functioncall prog_lang="cpp">void* (*LICE__GetBits)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE get bits.
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            bm - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, get, bits, bitmap</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__GetDC</slug>
        <title>LICE__GetDC</title>
        <functioncall prog_lang="cpp">HDC (*LICE__GetDC)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Translate mouse.
        </description>
        <retvals>
            HDC -
        </retvals>
        <parameters>
            bm - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, get, dc, bitmap</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__GetHeight</slug>
        <title>LICE__GetHeight</title>
        <functioncall prog_lang="cpp">int (*LICE__GetHeight)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE get height
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            bm - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, get, height</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__GetRowSpan</slug>
        <title>LICE__GetRowSpan</title>
        <functioncall prog_lang="cpp">int (*LICE__GetRowSpan)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE get row span.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            bm - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, get, row, span</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__GetWidth</slug>
        <title>LICE__GetWidth</title>
        <functioncall prog_lang="cpp">int (*LICE__GetWidth)(LICE_IBitmap* bm)</functioncall>
        <requires>  
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE get width.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            bm - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, get, width</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__IsFlipped</slug>
        <title>LICE__IsFlipped</title>
        <functioncall prog_lang="cpp">bool (*LICE__IsFlipped)(LICE_IBitmap* bm)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE is flipped
        </description>
        <retvals>
            bool -
        </retvals>
        <parameters>
            bm - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, is, flipped</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__resize</slug>
        <title>LICE__resize</title>
        <functioncall prog_lang="cpp">bool (*LICE__resize)(LICE_IBitmap* bm, int w, int h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE resize
        </description>
        <retvals>
            bool -
        </retvals>
        <parameters>
            bm - 
            w - 
            h -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, resize</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__SetBkColor</slug>
        <title>LICE__SetBkColor</title>
        <functioncall prog_lang="cpp">LICE_pixel (*LICE__SetBkColor)(LICE_IFont* font, LICE_pixel color)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE set bk color
        </description>
        <retvals>
            LICE_pixel -
        </retvals>
        <parameters>
            font - 
            color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, set, bk, color</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__SetFromHFont</slug>
        <title>LICE__SetFromHFont</title>
        <functioncall prog_lang="cpp">void (*LICE__SetFromHFont)(LICE_IFont* font, HFONT hfont, int flags)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE set from h-font
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            font - font must REMAIN valid,unless LICE_FONT_FLAG_PRECALCALL is set
            hfont - 
            flags - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, translate, lice, set, from, hfont</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__SetTextColor</slug>
        <title>LICE__SetTextColor</title>
        <functioncall prog_lang="cpp">LICE_pixel (*LICE__SetTextColor)(LICE_IFont* font, LICE_pixel color)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE set text color
        </description>
        <retvals>
            LICE_pixel -
        </retvals>
        <parameters>
            font - 
            color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, set, text, color</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE__SetTextCombineMode</slug>
        <title>LICE__SetTextCombineMode</title>
        <functioncall prog_lang="cpp">void (*LICE__SetTextCombineMode)(LICE_IFont* ifont, int mode, float alpha)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE set text combine mode
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            ifont - 
            mode - 
            alpha -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, set, text, combine, mode</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Arc</slug>
        <title>LICE_Arc</title>
        <functioncall prog_lang="cpp">void (*LICE_Arc)(LICE_IBitmap* dest, float cx, float cy, float r, float minAngle, float maxAngle, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE arc
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest -
            cx - 
            cy - 
            r - 
            minAngle -
            maxAngle - 
            color - 
            alpha - 
            mode - 
            aa -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, arc</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Blit</slug>
        <title>LICE_Blit</title>
        <functioncall prog_lang="cpp">void (*LICE_Blit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE blit
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            src - 
            dstx - 
            dsty - 
            srcx - 
            srcy - 
            srcw - 
            srch - 
            alpha - 
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, blit</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Blur</slug>
        <title>LICE_Blur</title>
        <functioncall prog_lang="cpp">void (*LICE_Blur)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE blur
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            src - 
            dstx -
            dsty -
            srcx -
            srcy -
            srcw -
            srch -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, blur</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_BorderedRect</slug>
        <title>LICE_BorderedRect</title>
        <functioncall prog_lang="cpp">void (*LICE_BorderedRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel bgcolor, LICE_pixel fgcolor, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE bordered rect.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            x - 
            y -
            w -
            h -
            bgcolor - 
            fgcolor - 
            alpha - 
            mode -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, bordered, rect</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Circle</slug>
        <title>LICE_Circle</title>
        <functioncall prog_lang="cpp">void (*LICE_Circle)(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE circle
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            cx - 
            cy -
            r -
            color -
            alpha -
            mode - 
            aa -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, circle</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Clear</slug>
        <title>LICE_Clear</title>
        <functioncall prog_lang="cpp">void (*LICE_Clear)(LICE_IBitmap* dest, LICE_pixel color)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE clear
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            color - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, clear</tags>
    </US_DocBloc>        
        
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_ClearRect</slug>
        <title>LICE_ClearRect</title>
        <functioncall prog_lang="cpp">void (*LICE_ClearRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel mask, LICE_pixel orbits)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE clear rect
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            x - 
            y - 
            w -
            h - 
            mask -
            orbits -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, clear, rect</tags>
    </US_DocBloc>        
            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Copy</slug>
        <title>LICE_Copy</title>
        <functioncall prog_lang="cpp">void (*LICE_Copy)(LICE_IBitmap* dest, LICE_IBitmap* src)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE copy
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            src - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, copy</tags>
    </US_DocBloc>        
            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_CreateBitmap</slug>
        <title>LICE_CreateBitmap</title>
        <functioncall prog_lang="cpp">LICE_IBitmap* (*LICE_CreateBitmap)(int mode, int w, int h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Create a new bitmap. this is like calling new LICE_MemBitmap (mode=0) or new LICE_SysBitmap (mode=1).
        </description>
        <retvals>
            LICE_IBitmap* -
        </retvals>
        <parameters>
            mode - 
            w - 
            h -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, create, bitmap</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_CreateFont</slug>
        <title>LICE_CreateFont</title>
        <functioncall prog_lang="cpp">LICE_IFont* (*LICE_CreateFont)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE create font
        </description>
        <retvals>
            LICE_IFont* -
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, create, font</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_DrawChar</slug>
        <title>LICE_DrawChar</title>
        <functioncall prog_lang="cpp">void (*LICE_DrawChar)(LICE_IBitmap* bm, int x, int y, char c, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE draw char
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            x - 
            y - 
            color -
            alpha - 
            mode -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, draw, char</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_DrawGlyph</slug>
        <title>LICE_DrawGlyph</title>
        <functioncall prog_lang="cpp">void (*LICE_DrawGlyph)(LICE_IBitmap* dest, int x, int y, LICE_pixel color, LICE_pixel_chan* alphas, int glyph_w, int glyph_h, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE draw glyph
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            x - 
            y -
            color - 
            alphas - 
            glyph_w - 
            glyph_h - 
            alpha - 
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, draw, glyph</tags>
    </US_DocBloc>        

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_DrawCBezier</slug>
        <title>LICE_DrawCBezier</title>
        <functioncall prog_lang="cpp">void (*LICE_DrawCBezier)(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, LICE_pixel color, float alpha, int mode, bool aa, double tol)</functioncall>
        <requires>
            Reaper=5.80
        </requires>
        <description indent="default">
            LICE Draw C Bezier
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            double xstart -  
            double ystart - 
            double xctl1 -  
            double yctl1 -  
            double xctl2 -  
            double yctl2 -
            double xend - 
            double yend - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
            bool aa - 
            double tol - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, draw, bezier</tags>
    </US_DocBloc>   
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_DrawRect</slug>
        <title>LICE_DrawRect</title>
        <functioncall prog_lang="cpp">void (*LICE_DrawRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE draw rect
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            x - 
            y -
            w -
            h -
            color -
            alpha -
            mode -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, draw, rectangle</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_DrawText</slug>
        <title>LICE_DrawText</title>
        <functioncall prog_lang="cpp">void (*LICE_DrawText)(LICE_IBitmap* bm, int x, int y, const char* string, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE draw text
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            bm - 
            x - 
            y -
            string -
            color - 
            alpha - 
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, draw, text</tags>
    </US_DocBloc>        

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillCBezier</slug>
        <title>LICE_FillCBezier</title>
        <functioncall prog_lang="cpp">void (*LICE_FillCBezier)(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, int yfill, LICE_pixel color, float alpha, int mode, bool aa, double tol);</functioncall>
        <requires>
            Reaper=5.95
        </requires>
        <description indent="default">
            LICE Fill CBezier
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            LICE_IBitmap* dest - 
            double xstart - 
            double ystart -  
            double xctl1 - 
            double yctl1 - 
            double xctl2 - 
            double yctl2 - 
            double xend - 
            double yend - 
            int yfill - 
            LICE_pixel color - 
            float alpha - 
            int mode - 
            bool aa - 
            double tol - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, fill, bezier</tags>
    </US_DocBloc>        

    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillCircle</slug>
        <title>LICE_FillCircle</title>
        <functioncall prog_lang="cpp">void (*LICE_FillCircle)(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE fill circle
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest- 
            cx - 
            cy -
            r -
            color - 
            alpha - 
            mode - 
            aa -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, fill, circle</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillConvexPolygon</slug>
        <title>LICE_FillConvexPolygon</title>
        <functioncall prog_lang="cpp">void (*LICE_FillConvexPolygon)(LICE_IBitmap* dest, int* x, int* y, int npoints, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE fill convex polygon
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            x - 
            y -
            npoints - 
            color - 
            alpha - 
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, fill, convex, polygon</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillRect</slug>
        <title>LICE_FillRect</title>
        <functioncall prog_lang="cpp">void (*LICE_FillRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE fill rect
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            x - 
            y -
            w -
            h -
            color - 
            alpha - 
            mode -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, fill, rect</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillTrapezoid</slug>
        <title>LICE_FillTrapezoid</title>
        <functioncall prog_lang="cpp">void (*LICE_FillTrapezoid)(LICE_IBitmap* dest, int x1a, int x1b, int y1, int x2a, int x2b, int y2, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE fill trapezoid
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest- 
            x1a - 
            x1b - 
            y1 - 
            x2a - 
            x2b - 
            y2 - 
            color - 
            alpha - 
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, fill, trapezoid</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_FillTriangle</slug>
        <title>LICE_FillTriangle</title>
        <functioncall prog_lang="cpp">void (*LICE_FillTriangle)(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, int x3, int y3, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE fill triangle
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            x1 - 
            y1 -
            x2 - 
            y2 - 
            x3 - 
            y3 - 
            color - 
            alpha - 
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, fill, triangle</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_GetPixel</slug>
        <title>LICE_GetPixel</title>
        <functioncall prog_lang="cpp">LICE_pixel (*LICE_GetPixel)(LICE_IBitmap* bm, int x, int y)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE get pixel
        </description>
        <retvals>
            LICE_pixel -
        </retvals>
        <parameters>
            bm - 
            x - 
            y -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, get, pixel</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_GradRect</slug>
        <title>LICE_GradRect</title>
        <functioncall prog_lang="cpp">void (*LICE_GradRect)(LICE_IBitmap* dest, int dstx, int dsty, int dstw, int dsth, float ir, float ig, float ib, float ia, float drdx, float dgdx, float dbdx, float dadx, float drdy, float dgdy, float dbdy, float dady, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE grad rect
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            dstx - 
            dsty -
            dstw - 
            dsth - 
            ir - 
            ig - 
            ib - 
            ia - 
            drdx - 
            dgdx - 
            dbdx - 
            dadx - 
            drdy -
            dgdy - 
            dbdy - 
            dady -
            mode -             
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, grad, rectangle</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_Line</slug>
        <title>LICE_Line</title>
        <functioncall prog_lang="cpp">void (*LICE_Line)(LICE_IBitmap* dest, float x1, float y1, float x2, float y2, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE line
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            x1 - 
            y1 -
            x2 - 
            y2 - 
            color - 
            alpha - 
            mode - 
            aa - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, line</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_LineInt</slug>
        <title>LICE_LineInt</title>
        <functioncall prog_lang="cpp">void (*LICE_LineInt)(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE line int
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            x1 - 
            y1 -
            x2 - 
            y2 - 
            color - 
            alpha - 
            mode - 
            aa -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, line, int</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_LoadPNG</slug>
        <title>LICE_LoadPNG</title>
        <functioncall prog_lang="cpp">LICE_IBitmap* (*LICE_LoadPNG)(const char* filename, LICE_IBitmap* bmp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE load png
        </description>
        <retvals>
            LICE_IBitmap* -
        </retvals>
        <parameters>
            filename - 
            bmp - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, load, png, file, graphic</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_LoadPNGFromResource</slug>
        <title>LICE_LoadPNGFromResource</title>
        <functioncall prog_lang="cpp">LICE_IBitmap* (*LICE_LoadPNGFromResource)(HINSTANCE hInst, int resid, LICE_IBitmap* bmp)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE load png from resource
        </description>
        <retvals>
            LICE_IBitmap* -
        </retvals>
        <parameters>
            hInst - 
            resid - 
            bmp -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, load, png, resource, hinstance</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_MeasureText</slug>
        <title>LICE_MeasureText</title>
        <functioncall prog_lang="cpp">void (*LICE_MeasureText)(const char* string, int* w, int* h)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE measure text
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            string - 
            w - 
            h -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, measure, text</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_MultiplyAddRect</slug>
        <title>LICE_MultiplyAddRect</title>
        <functioncall prog_lang="cpp">void (*LICE_MultiplyAddRect)(LICE_IBitmap* dest, int x, int y, int w, int h, float rsc, float gsc, float bsc, float asc, float radd, float gadd, float badd, float aadd)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE multiplay add rect
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            x - 
            y -
            w - 
            h - 
            rsc - 
            gsc - 
            bsc - 
            asc - 
            radd - 
            gadd - 
            badd - 
            aadd - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, multiply, add, rectangle</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_PutPixel</slug>
        <title>LICE_PutPixel</title>
        <functioncall prog_lang="cpp">void (*LICE_PutPixel)(LICE_IBitmap* bm, int x, int y, LICE_pixel color, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE put pixel
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            bm - 
            x - 
            y -
            color - 
            alpha - 
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, put, pixel</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_RotatedBlit</slug>
        <title>LICE_RotatedBlit</title>
        <functioncall prog_lang="cpp">void (*LICE_RotatedBlit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float angle, bool cliptosourcerect, float alpha, int mode, float rotxcent, float rotycent)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE rotate blit. These coordinates are offset from the center of the image,in source pixel coordinates.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            src - 
            dstx -
            dsty - 
            dstw - 
            dsth - 
            srcx - 
            srcy - 
            srcw - 
            srch - 
            angle -
            cliptosourcerect -
            alpha - 
            mode - 
            rotxcent - 
            rtoycent - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, rotate, blit</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_RoundRect</slug>
        <title>LICE_RoundRect</title>
        <functioncall prog_lang="cpp">void (*LICE_RoundRect)(LICE_IBitmap* drawbm, float xpos, float ypos, float w, float h, int cornerradius, LICE_pixel col, float alpha, int mode, bool aa)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE round rect
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            drawbm - 
            xpos - 
            ypos -
            w - 
            h - 
            cornerradius - 
            col - 
            alpha - 
            mode - 
            aa - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, round, rectangle</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_ScaledBlit</slug>
        <title>LICE_ScaledBlit</title>
        <functioncall prog_lang="cpp">void (*LICE_ScaledBlit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE scaled blit.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            src - 
            dstx -
            dsty - 
            dstw - 
            dsth - 
            srcx - 
            srcy - 
            srcw - 
            srch - 
            alpha - 
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, scaled, blit</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>LICE_SimpleFill</slug>
        <title>LICE_SimpleFill</title>
        <functioncall prog_lang="cpp">void (*LICE_SimpleFill)(LICE_IBitmap* dest, int x, int y, LICE_pixel newcolor, LICE_pixel comparemask, LICE_pixel keepmask)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE simple fill
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            dest - 
            x - 
            y -
            newcolor - 
            comparemask - 
            keepmask - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, lice, simple, fill</tags>
    </US_DocBloc>        
                                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PCM_Source_CreateFromSimple</slug>
        <title>PCM_Source_CreateFromSimple</title>
        <functioncall prog_lang="cpp">PCM_source* (*PCM_Source_CreateFromSimple)(ISimpleMediaDecoder* dec, const char* fn)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PCM_Source create from simple
        </description>
        <retvals>
            PCM_source* -
        </retvals>
        <parameters>
            dec - 
            fn - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, pcm, source, create</tags>
    </US_DocBloc>        
                                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PeakBuild_Create</slug>
        <title>PeakBuild_Create</title>
        <functioncall prog_lang="cpp">REAPER_PeakBuild_Interface* (*PeakBuild_Create)(PCM_source* src, const char* fn, int srate, int nch)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Peak build create
        </description>
        <retvals>
            REAPER_PeakBuild_Interface* -
        </retvals>
        <parameters>
            src - 
            fn - 
            srate -
            nch - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, peak, build, create</tags>
    </US_DocBloc>        
                                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PeakBuild_CreateEx</slug>
        <title>PeakBuild_CreateEx</title>
        <functioncall prog_lang="cpp">REAPER_PeakBuild_Interface* (*PeakBuild_CreateEx)(PCM_source* src, const char* fn, int srate, int nch, int flags)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Peakbuild create-ex. flags&1 for FP support
        </description>
        <retvals>
            REAPER_PeakBuild_Interface* -
        </retvals>
        <parameters>
            src - 
            fn - 
            srate -
            nch - 
            flags - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, peak, ex, create</tags>
    </US_DocBloc>        
                                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PeakGet_Create</slug>
        <title>PeakGet_Create</title>
        <functioncall prog_lang="cpp">REAPER_PeakGet_Interface* (*PeakGet_Create)(const char* fn, int srate, int nch)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Peak get create.
        </description>
        <retvals>
            REAPER_PeakGet_Interface* -
        </retvals>
        <parameters>
            fn - 
            srate - 
            nch -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, peak, create, get</tags>
    </US_DocBloc>        
                                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PlayPreview</slug>
        <title>PlayPreview</title>
        <functioncall prog_lang="cpp">int (*PlayPreview)(preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Play preview. Return nonzero on success.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            preview - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, play, preview</tags>
    </US_DocBloc>        
                                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PlayPreviewEx</slug>
        <title>PlayPreviewEx</title>
        <functioncall prog_lang="cpp">int (*PlayPreviewEx)(preview_register_t* preview, int bufflags, double MSI)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Play preview ex. Return nonzero on success.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            preview - 
            bufflags - 
            MSI -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, play, preview, ex</tags>
    </US_DocBloc>        
                                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PlayTrackPreview</slug>
        <title>PlayTrackPreview</title>
        <functioncall prog_lang="cpp">int (*PlayTrackPreview)(preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Play track preview. Returns nonzero on success,in these,m_out_chan is a track index (0-n).
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            preview - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, play, track, preview</tags>
    </US_DocBloc>        
                                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PlayTrackPreview2</slug>
        <title>PlayTrackPreview2</title>
        <functioncall prog_lang="cpp">int (*PlayTrackPreview2)(ReaProject* proj, preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Play track preview. Return nonzero on success,in these,m_out_chan is a track index (0-n).
        </description>
        <retvals>
            int -
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            preview - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, play, track, preview</tags>
    </US_DocBloc>        
                                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PlayTrackPreview2Ex</slug>
        <title>PlayTrackPreview2Ex</title>
        <functioncall prog_lang="cpp">int (*PlayTrackPreview2Ex)(ReaProject* proj, preview_register_t* preview, int flags, double msi)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Play track preview 2 Ex. Return nonzero on success,in these,m_out_chan is a track index (0-n).
        </description>
        <retvals>
            int -
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            preview - 
            flags -
            msi - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, play, track, preview, ex</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>plugin_getapi</slug>
        <title>plugin_getapi</title>
        <functioncall prog_lang="cpp">void* (*plugin_getapi)(const char* name)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Plugin get api.
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            name - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, plugin, get, api</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>plugin_getFilterList</slug>
        <title>plugin_getFilterList</title>
        <functioncall prog_lang="cpp">const char* (*plugin_getFilterList)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Plugin get filter list. Returns a double-NULL terminated list of importable media files, suitable for passing to [GetOpenFileName()](#GetOpenFileName) etc. Includes *.* (All files).
        </description>
        <retvals>
            char* -
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, filter, list, plugin</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>plugin_getImportableProjectFilterList</slug>
        <title>plugin_getImportableProjectFilterList</title>
        <functioncall prog_lang="cpp">const char* (*plugin_getImportableProjectFilterList)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Plugin get importable project filter list. Returns a double-NULL terminated list of importable project files, suitable for passing to [GetOpenFileName()](#GetOpenFileName) etc. Includes *.* (All files). 
        </description>
        <retvals>
            char* -
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, plugin, get, importable, project, filter, list, file</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>projectconfig_var_addr</slug>
        <title>projectconfig_var_addr</title>
        <functioncall prog_lang="cpp">void* (*projectconfig_var_addr)(ReaProject* proj, int idx)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Project config var addr.
            
            see [Reaper_Config_Variables.html](Reaper_Config_Variables.html) for valid config-vars
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            idx - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, project, config, var, addr</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>projectconfig_var_getoffs</slug>
        <title>projectconfig_var_getoffs</title>
        <functioncall prog_lang="cpp">int (*projectconfig_var_getoffs)(const char* name, int* szOut)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default" markup_type="markdown" markup_version="1.0.1" indent="default">
            Returns offset to pass to projectconfig_var_addr() to get project-config var of name. szout gets size of object.
            
            see [Reaper_Config_Variables.html](Reaper_Config_Variables.html) for valid config-vars
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            name - 
            szOut - size of the object
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, project, config, var, getoffs, offset</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>ReaperGetPitchShiftAPI</slug>
        <title>ReaperGetPitchShiftAPI</title>
        <functioncall prog_lang="cpp">IReaperPitchShift* (*ReaperGetPitchShiftAPI)(int version)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            version must be REAPER_PITCHSHIFT_API_VER
        </description>
        <retvals>
            IReaperPitchShift* -
        </retvals>
        <parameters>
            version - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, reaper, pitch, shift, api</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>Resampler_Create</slug>
        <title>Resampler_Create</title>
        <functioncall prog_lang="cpp">REAPER_Resample_Interface* (*Resampler_Create)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Resampler create
        </description>
        <retvals>
            REAPER_Resample_Interface* -
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, resampler, create, interface</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>screenset_register</slug>
        <title>screenset_register</title>
        <functioncall prog_lang="cpp">void (*screenset_register)(char* id, void* callbackFunc, void* param)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Screenset register.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            id - 
            callbackFunc - 
            param -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, screenset, register</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>screenset_registerNew</slug>
        <title>screenset_registerNew</title>
        <functioncall prog_lang="cpp">void (*screenset_registerNew)(char* id, screensetNewCallbackFunc callbackFunc, void* param)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Screenset register new.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            id - 
            callbackFunc - 
            param -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, screenset, register, new</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>screenset_unregister</slug>
        <title>screenset_unregister</title>
        <functioncall prog_lang="cpp">void (*screenset_unregister)(char* id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Screenset unregister.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            id - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, screenset, unregister</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>screenset_unregisterByParam</slug>
        <title>screenset_unregisterByParam</title>
        <functioncall prog_lang="cpp">void (*screenset_unregisterByParam)(void* param)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Screenset unregister by param
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            param - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, screenset, unregister, param</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>screenset_updateLastFocus</slug>
        <title>screenset_updateLastFocus</title>
        <functioncall prog_lang="cpp">void (*screenset_updateLastFocus)(HWND prevWin)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            LICE simple fill
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            prevWin - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, screenset, update, focus</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>SectionFromUniqueID</slug>
        <title>SectionFromUniqueID</title>
        <functioncall prog_lang="cpp">KbdSectionInfo* (*SectionFromUniqueID)(int uniqueID)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Section from unique ID.
        </description>
        <retvals>
            KbdSectionInfo* -
        </retvals>
        <parameters>
            uniqueID - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, section, unique, id</tags>
    </US_DocBloc>        
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>SetRenderLastError</slug>
        <title>SetRenderLastError</title>
        <functioncall prog_lang="cpp">void (*SetRenderLastError)(const char* errorstr)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Set render last error.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            errorstr - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, set, render, error</tags>
    </US_DocBloc>        
                
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>StopPreview</slug>
        <title>StopPreview</title>
        <functioncall prog_lang="cpp">int (*StopPreview)(preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Stop preview.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            preview - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, stop, preview</tags>
    </US_DocBloc>                        
                                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>StopTrackPreview</slug>
        <title>StopTrackPreview</title>
        <functioncall prog_lang="cpp">int (*StopTrackPreview)(preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Stop track preview. Return nonzero on success.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            preview - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, stop, track, preview</tags>
    </US_DocBloc>        
                
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>StopTrackPreview2</slug>
        <title>StopTrackPreview2</title>
        <functioncall prog_lang="cpp">int (*StopTrackPreview2)(void* proj, preview_register_t* preview)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Stop track preview2.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            preview - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, stop, track, preview, ex</tags>
    </US_DocBloc>        
                
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>update_disk_counters</slug>
        <title>update_disk_counters</title>
        <functioncall prog_lang="cpp">void (*update_disk_counters)(int readamt, int writeamt)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Updates disk I/O statistics with bytes transferred since last call.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            readamt - 
            writeamt -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, update, disk, counters, statistics, bytes, transferred</tags>
    </US_DocBloc>        
                
                                            
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>WDL_VirtualWnd_ScaledBlitBG</slug>
        <title>WDL_VirtualWnd_ScaledBlitBG</title>
        <functioncall prog_lang="cpp">bool (*WDL_VirtualWnd_ScaledBlitBG)(LICE_IBitmap* dest, WDL_VirtualWnd_BGCfg* src, int destx, int desty, int destw, int desth, int clipx, int clipy, int clipw, int cliph, float alpha, int mode)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            WDL virtualwnd scale blit bg.
        </description>
        <retvals>
            bool -
        </retvals>
        <parameters>
            dest - 
            src - 
            destx - 
            desty - 
            destw - 
            desth - 
            clipx - 
            clipy - 
            clipw - 
            cliph - 
            alpha - 
            mode - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, set, render, error</tags>
    </US_DocBloc>        

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetSetMediaItemInfo</slug>
        <title>GetSetMediaItemInfo</title>
        <functioncall prog_lang="cpp">void* (*GetSetMediaItemInfo)(MediaItem* item, const char* parmname, void* setNewValue)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Get/Set Media Item Info
        </description>
        <retvals>
            void* -
        </retvals>
        <parameters>
            item - a MediaItem-object
            parmname - the parameter to be gotten/set
                -P_TRACK : MediaTrack * (read only)
                -P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)
                -B_MUTE : bool * to muted state
                -B_LOOPSRC : bool * to loop source
                -B_ALLTAKESPLAY : bool * to all takes play
                -B_UISEL : bool * to ui selected
                -C_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly
                -C_LOCK : char * to one char of lock flags (&1 is locked, currently)
                -D_VOL : double * of item volume (volume bar)
                -D_POSITION : double * of item position (seconds)
                -D_LENGTH : double * of item length (seconds)
                -D_SNAPOFFSET : double * of item snap offset (seconds)
                -D_FADEINLEN : double * of item fade in length (manual, seconds)
                -D_FADEOUTLEN : double * of item fade out length (manual, seconds)
                -D_FADEINDIR : double * of item fade in curve [-1; 1]
                -D_FADEOUTDIR : double * of item fade out curve [-1; 1]
                -D_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)
                -D_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)
                -C_FADEINSHAPE : int * to fadein shape, 0=linear, ...
                -C_FADEOUTSHAPE : int * to fadeout shape
                -I_GROUPID : int * to group ID (0 = no group)
                -I_LASTY : int * to last y position in track (readonly)
                -I_LASTH : int * to last height in track (readonly)
                -I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).
                -I_CURTAKE : int * to active take
                -IP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)
                -F_FREEMODE_Y : float * to free mode y position (0..1)
                -F_FREEMODE_H : float * to free mode height (0..1)
            setNewValue - the new value to be set, refer description of parmname for the values
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, mediaitem, parameters, get, set, info</tags>
    </US_DocBloc>        

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetToggleCommandState2</slug>
        <title>GetToggleCommandState2</title>
        <functioncall prog_lang="cpp">int (*GetToggleCommandState2)(KbdSectionInfo* section, int command_id)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Get Toggle Command State 2
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            section - the section, in which the action exists
                -0, Main
                -100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.
                -32060, MIDI Editor
                -32061, MIDI Event List Editor
                -32062, MIDI Inline Editor
                -32063, Media Explorer
            command_id - the command-id of the command, whose toggle-state you want
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, toggle, command, state, section, commandid</tags>
    </US_DocBloc>        

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>GetTrackInfo</slug>
        <title>GetTrackInfo</title>
        <functioncall prog_lang="cpp">const char* (*GetTrackInfo)(INT_PTR track, int* flags)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Gets track info (returns name).
        </description>
        <retvals>
            char* -
        </retvals>
        <parameters>
            track - track index, -1=master, 0..n, or cast a MediaTrack* to int 
            flags - if flags is non-NULL, will be set to:
                -&1, folder
                -&2, selected
                -&4, has fx enabled
                -&8, muted
                -&16, soloed
                -&32, SIP'd (with &16)
                -&64, rec armed
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, get, track, info, flag</tags>
    </US_DocBloc>        

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>KBD_OnMainActionEx</slug>
        <title>KBD_OnMainActionEx</title>
        <functioncall prog_lang="cpp">int (*KBD_OnMainActionEx)(int cmd, int val, int valhw, int relmode, HWND hwnd, ReaProject* proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            val/valhw are used for midi stuff.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            cmd - 
            val - val=[0..127] and valhw=-1 (midi CC)
            valhw - valhw >=0 (midi pitch (valhw | val<<7))
            relmode - relmode absolute (0) or 1/2/3 for relative adjust modes
            hwnd - 
            proj -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, midi, command, value, relmode, main, action</tags>
    </US_DocBloc>            
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>KBD_OnMainActionEx</slug>
        <title>KBD_OnMainActionEx</title>
        <functioncall prog_lang="cpp">int (*KBD_OnMainActionEx)(int cmd, int val, int valhw, int relmode, HWND hwnd, ReaProject* proj)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            val/valhw are used for midi stuff.
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            cmd - 
            val - val=[0..127] and valhw=-1 (midi CC)
            valhw - valhw >=0 (midi pitch (valhw | val<<7))
            relmode - relmode absolute (0) or 1/2/3 for relative adjust modes
            hwnd - 
            proj -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, midi, command, value, relmode, main, action</tags>
    </US_DocBloc>            
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>MIDI_eventlist_Create</slug>
        <title>MIDI_eventlist_Create</title>
        <functioncall prog_lang="cpp">MIDI_eventlist* (*MIDI_eventlist_Create)()</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Create a MIDI_eventlist object. The returned object must be deleted with [MIDI_eventlist_destroy()](#MIDI_eventlist_destroy).
        </description>
        <retvals>
            MIDI_eventlist* -
        </retvals>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, midi, event, list, create</tags>
    </US_DocBloc>                

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>MIDI_eventlist_Destroy</slug>
        <title>MIDI_eventlist_Destroy</title>
        <functioncall prog_lang="cpp">void (*MIDI_eventlist_Destroy)(MIDI_eventlist* evtlist)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description markup_type="markdown" markup_version="1.0.1" indent="default">
            Destroy a MIDI_eventlist object that was created using [MIDI_eventlist_Create()](#MIDI_eventlist_Create).
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            evtlist - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, midi, event, list, destroy</tags>
    </US_DocBloc>            
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PCM_Sink_Create</slug>
        <title>PCM_Sink_Create</title>
        <functioncall prog_lang="cpp">PCM_sink* (*PCM_Sink_Create)(const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PCM sink create
        </description>
        <retvals>
            PCM_sink* -
        </retvals>
        <parameters>
            filename - 
            cfg - 
            cfg_sz - 
            nch - 
            srate - 
            buildpeaks -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, pcm, sink, create, filename</tags>
    </US_DocBloc>            
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PCM_Sink_CreateEx</slug>
        <title>PCM_Sink_CreateEx</title>
        <functioncall prog_lang="cpp">PCM_sink* (*PCM_Sink_CreateEx)(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PCM sink create ex.
        </description>
        <retvals>
            PCM_sink* -
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            filename - 
            cfg - 
            cfg_sz - 
            nch - 
            srate - 
            buildpeaks -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, pcm, sink, create, filename, ex</tags>
    </US_DocBloc>            

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PCM_Sink_CreateMIDIFile</slug>
        <title>PCM_Sink_CreateMIDIFile</title>
        <functioncall prog_lang="cpp">PCM_sink* (*PCM_Sink_CreateMIDIFile)(const char* filename, const char* cfg, int cfg_sz, double bpm, int div)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PCM sink create MIDI file.
        </description>
        <retvals>
            PCM_sink* -
        </retvals>
        <parameters>
            filename - 
            cfg - 
            cfg_sz - 
            bpm - 
            div - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, pcm, sink, create, midi, filename</tags>
    </US_DocBloc>                

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PCM_Sink_CreateMIDIFileEx</slug>
        <title>PCM_Sink_CreateMIDIFileEx</title>
        <functioncall prog_lang="cpp">PCM_sink* (*PCM_Sink_CreateMIDIFileEx)(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, double bpm, int div)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            PCM sink create MIDI file ex
        </description>
        <retvals>
            PCM_sink* -
        </retvals>
        <parameters markup_type="markdown" markup_version="1.0.1">
            proj - the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
            filename - 
            cfg - 
            cfg_sz - 
            bpm - 
            div - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, pcm, sink, create, midi, filename, ex</tags>
    </US_DocBloc>                
          
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>SendLocalOscMessage</slug>
        <title>SendLocalOscMessage</title>
        <functioncall prog_lang="cpp">void (*SendLocalOscMessage)(void* local_osc_handler, const char* msg, int msglen)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Send local Osc message.
        </description>
        <retvals>
            void -
        </retvals>
        <parameters>
            local_osc_handler - 
            msg - 
            msglen - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, send, local, osc, message</tags>
    </US_DocBloc>                
    

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>PitchShiftSubModeMenu</slug>
        <title>PitchShiftSubModeMenu</title>
        <functioncall prog_lang="cpp">int (*PitchShiftSubModeMenu)(HWND hwnd, int x, int y, int mode, int submode_sel)</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            menu to select/modify pitch shifter submode, returns new value (or old value if no item selected)
        </description>
        <retvals>
            int -
        </retvals>
        <parameters>
            hwnd - 
            x - 
            y - 
            mode - 
            submode_sel - 
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, pitch, shift, sub, mode, menu</tags>
    </US_DocBloc>                

    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>REAPERAPI_LoadAPI</slug>
        <title>REAPERAPI_LoadAPI</title>
        <functioncall prog_lang="cpp">int REAPERAPI_LoadAPI(void *(*getAPI)(const char *))</functioncall>
        <requires>
            Reaper=5.62
        </requires>
        <description indent="default">
            Checks, whether a certain Reaper-API-function exists.

            Because the API is dynamic, callers should never assume a function exists.
            Check that a non-NULL function pointer was returned before using it (unless
            loaded functions are verified using REAPERAPI_LoadAPI(), see note below).

              1) most source files should just #include "reaper_plugin_functions.h" as is.
              2) one file should #define REAPERAPI_IMPLEMENT before including this file.
              3) the plug-in should call REAPERAPI_LoadAPI(rec->GetFunc) from REAPER_PLUGIN_ENTRYPOINT
                 and check the return value for errors (REAPERAPI_LoadAPI will return 0 on success).
        </description>
        <retvals>
            int - 0, if a function exists
        </retvals>
        <parameters>
            *getAPI - 
            * -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, check, function, plugin, api</tags>
    </US_DocBloc>
    
    <US_DocBloc version="1.0" spok_lang="en" prog_lang="cpp">
        <slug>realloc_cmd_ptr</slug>
        <title>realloc_cmd_ptr</title>
        <functioncall prog_lang="cpp">bool (*realloc_cmd_ptr)(char** ptr, int* ptr_size, int new_size)</functioncall>
        <requires>
            Reaper=5.965
        </requires>
        <description indent="default">
             special use for NeedBig script API functions - reallocates a NeedBig buffer and updates its size, returns false on error
        </description>
        <retvals>
            int - 0, if a function exists
        </retvals>
        <parameters>
            *getAPI - 
            * -
        </parameters>
        <target_document>ReaperApiFunctionsReference</target_document>
        <source_document>reaper_plugin.h</source_document>
        <chapter_context>
            Additional C++ Functions
            reaper_plugin_functions.h
        </chapter_context>
        <tags>cpp, check, function, plugin, api</tags>
    </US_DocBloc>
</USDocBloc>