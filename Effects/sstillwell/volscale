// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

desc:MIDI Velocity Scaler/Compressor
desc:MIDI Velocity Scaler/Compressor [Stillwell]
//tags: MIDI processing
//author: Stillwell

slider1:0<0,16,1>Input Channel (0=omni)
slider2:1<0,3,0.01>Scale Factor
slider3:0<-127,127,1>Volume Offset
slider4:0<0,100,0.1>Mix (%)

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
  note_on = 9*16;
  note_off = 8*16;

@slider
  chan=slider1-1;
  scale=slider2;
  offset=slider3;
  mix=slider4/100;

@block
  while(
    midirecv(mpos, msg1, msg2) ? (
      (msg1 & 240) == note_on ? (
        ((msg1 & 15) == chan) || chan==-1 ? (
          velocity = (msg2 & 65280)/256;
          note = msg2 & 255;
          newvel = min(127,max(0,floor(velocity * scale) + offset));
          midisend(mpos, msg1, (newvel*256) | note);
        );
      ) : (
            midisend(mpos, msg1, msg2);
      );
    );
  );

@sample
  spl0 = spl0 * mix;
  spl1 = spl1 * mix;
