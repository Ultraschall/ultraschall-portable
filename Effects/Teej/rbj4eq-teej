// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
//This modified version of the fabulous SS:rbj4eq is presented by TJ Higley.  (2/18/07)
//

desc:RBJ 4-Band Semi-Parametric EQ v2
desc:RBJ 4-Band Semi-Parametric EQ v2 [teej]
//tags: equalizer filter
//author: teej

// based on RBJ Filter Cookbook

slider1:0<0,400,5>HPF (Hz)
slider2:0<0,10000,1>Freq 1 (Hz)
slider3:1<.5,10,0.1>Q 1
slider4:0<-12,6,0.5>Gain 1 (dB)
slider5:0<0,10000,1>Freq 2 (Hz)
slider6:1<.5,10,0.1>Q 2
slider7:0<-12,6,0.5>Gain 2 (dB)
slider8:0<0,10000,1>Freq 3 (Hz)
slider9:1<.5,10,0.1>Q 3
slider10:0<-12,6,0.5>Gain 3 (dB)
slider11:0<0,10000,1>Freq 4 (Hz)
slider12:1<.5,10,0.1>Q 4
slider13:0<-12,6,0.5>Gain 4 (dB)
slider14:22000<400,22000,5>LPF (Hz)
slider15:0<-12,12,0.5>Output Gain (dB)

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
  cDcAdd = 10^-30;
  cDenorm = 10^-30;


@slider

  gain = 10^(slider15/20);

  a0 = 1;
  s0 = 1;
  q0 = 1 / (sqrt((a0 + 1/a0)*(1/s0 - 1) + 2));
  w00 = 2 * $pi * slider1/srate;
  cosw00 = cos(w00);
  sinw00 = sin(w00);
  alpha0 = sinw00 / (2 * q0);

  b00 = (1 + cosw00)/2;
  b10 = -(1 + cosw00);
  b20 = (1 + cosw00)/2;
  a00 = 1 + alpha0;
  a10 = -2 * cosw00;
  a20 = 1 - alpha0;
  b00 /= a00;
  b10 /= a00;
  b20 /= a00;
  a10 /= a00;
  a20 /= a00;

  a1 = (10^(slider4/40));
  q1 = slider3;
  w01 = 2 * $pi * slider2/srate;
  cosw01 = cos(w01);
  sinw01 = sin(w01);
  alpha1 = sinw01 / (2 * q1);

  b01 = 1 + alpha1 * a1;
  b11 = -2 * cosw01;
  b21 = 1 - alpha1 * a1;
  a01 = 1 + alpha1 / a1;
  a11 = -2 * cosw01;
  a21 = 1 - alpha1 / a1;
  b01 /= a01;
  b11 /= a01;
  b21 /= a01;
  a11 /= a01;
  a21 /= a01;

  a3 = (10^(slider7/40));
  q3 = slider6;
  w03 = 2 * $pi * slider5/srate;
  cosw03 = cos(w03);
  sinw03 = sin(w03);
  alpha3 = sinw03 / (2 * q3);

  b03 = 1 + alpha3 * a3;
  b13 = -2 * cosw03;
  b23 = 1 - alpha3 * a3;
  a03 = 1 + alpha3 / a3;
  a13 = -2 * cosw03;
  a23 = 1 - alpha3 / a3;
  b03 /= a03;
  b13 /= a03;
  b23 /= a03;
  a13 /= a03;
  a23 /= a03;

  a5 = (10^(slider10/40));
  q5 = slider9;
  w05 = 2 * $pi * slider8/srate;
  cosw05 = cos(w05);
  sinw05 = sin(w05);
  alpha5 = sinw05 / (2 * q5);

  b05 = 1 + alpha5 * a5;
  b15 = -2 * cosw05;
  b25 = 1 - alpha5 * a5;
  a05 = 1 + alpha5 / a5;
  a15 = -2 * cosw05;
  a25 = 1 - alpha5 / a5;
  b05 /= a05;
  b15 /= a05;
  b25 /= a05;
  a15 /= a05;
  a25 /= a05;

  a7 = (10^(slider13/40));
  q7 = slider12;
  w07 = 2 * $pi * slider11/srate;
  cosw07 = cos(w07);
  sinw07 = sin(w07);
  alpha7 = sinw07 / (2 * q7);

  b07 = 1 + alpha7 * a7;
  b17 = -2 * cosw07;
  b27 = 1 - alpha7 * a7;
  a07 = 1 + alpha7 / a7;
  a17 = -2 * cosw07;
  a27 = 1 - alpha7 / a7;
  b07 /= a07;
  b17 /= a07;
  b27 /= a07;
  a17 /= a07;
  a27 /= a07;


  a9 = 1;
  s9 = 2;
  q9 = 1 / (sqrt((a9 + 1/a9)*(1/s9 - 1) + 2));
  w09 = 2 * $pi * slider14/srate;
  cosw09 = cos(w09);
  sinw09 = sin(w09);
  alpha9 = sinw09 / (2 * q9);

  b09 = (1 - cosw09)/2;
  b19 = (1 - cosw09);
  b29 = (1 - cosw09)/2;
  a09 = 1 + alpha9;
  a19 = -2 * cosw09;
  a29 = 1 - alpha9;
  b09 /= a09;
  b19 /= a09;
  b29 /= a09;
  a19 /= a09;
  a29 /= a09;



@sample

  slider1 != 0 ? (
  ospl0 = spl0;
  spl0 = b00 * spl0 + b10 * xl10 + b20 * xl20 - a10 * yl10 - a20 * yl20;
  xl20 = xl10;
  xl10 = ospl0;
  yl20 = yl10;
  yl10 = abs(spl0) < cDenorm ? 0 : spl0;

  ospl1 = spl1;
  spl1 = b00 * spl1 + b10 * xr10 + b20 * xr20 - a10 * yr10 - a20 * yr20;
  xr20 = xr10;
  xr10 = ospl1;
  yr20 = yr10;
  yr10 = abs(spl1) < cDenorm ? 0 : spl1;
  );


  spl0 += cDcAdd;
  spl1 += cDcAdd;


  slider4 != 0 && slider2 != 0 ? (
  ospl0 = spl0;
  spl0 = b01 * spl0 + b11 * xl11 + b21 * xl21 - a11 * yl11 - a21 * yl21;
  xl21 = xl11;
  xl11 = ospl0;
  yl21 = yl11;
  yl11 = spl0;

  ospl1 = spl1;
  spl1 = b01 * spl1 + b11 * xr11 + b21 * xr21 - a11 * yr11 - a21 * yr21;
  xr21 = xr11;
  xr11 = ospl1;
  yr21 = yr11;
  yr11 = spl1;
  );

  slider7 && slider5 != 0 ? (
  ospl0 = spl0;
  spl0 = b03 * spl0 + b13 * xl13 + b23 * xl23 - a13 * yl13 - a23 * yl23;
  xl23 = xl13;
  xl13 = ospl0;
  yl23 = yl13;
  yl13 = spl0;

  ospl1 = spl1;
  spl1 = b03 * spl1 + b13 * xr13 + b23 * xr23 - a13 * yr13 - a23 * yr23;
  xr23 = xr13;
  xr13 = ospl1;
  yr23 = yr13;
  yr13 = spl1;
  );

  slider10 && slider8 != 0 ? (
  ospl0 = spl0;
  spl0 = b05 * spl0 + b15 * xl15 + b25 * xl25 - a15 * yl15 - a25 * yl25;
  xl25 = xl15;
  xl15 = ospl0;
  yl25 = yl15;
  yl15 = spl0;

  ospl1 = spl1;
  spl1 = b05 * spl1 + b15 * xr15 + b25 * xr25 - a15 * yr15 - a25 * yr25;
  xr25 = xr15;
  xr15 = ospl1;
  yr25 = yr15;
  yr15 = spl1;
  );

  slider13 && slider11 != 0 ? (
  ospl0 = spl0;
  spl0 = b07 * spl0 + b17 * xl17 + b27 * xl27 - a17 * yl17 - a27 * yl27;
  xl27 = xl17;
  xl17 = ospl0;
  yl27 = yl17;
  yl17 = spl0;

  ospl1 = spl1;
  spl1 = b07 * spl1 + b17 * xr17 + b27 * xr27 - a17 * yr17 - a27 * yr27;
  xr27 = xr17;
  xr17 = ospl1;
  yr27 = yr17;
  yr17 = spl1;
  );


  slider14 != 22000 ? (
  ospl0 = spl0;
  spl0 = b09 * spl0 + b19 * xl19 + b29 * xl29 - a19 * yl19 - a29 * yl29;
  xl29 = xl19;
  xl19 = ospl0;
  yl29 = yl19;
  yl19 = spl0;

  ospl1 = spl1;
  spl1 = b09 * spl1 + b19 * xr19 + b29 * xr29 - a19 * yr19 - a29 * yr29;
  xr29 = xr19;
  xr19 = ospl1;
  yr29 = yr19;
  yr19 = spl1;
  );


  spl0 *= gain;
  spl1 *= gain;
